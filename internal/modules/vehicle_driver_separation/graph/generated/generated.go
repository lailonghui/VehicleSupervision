// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle_driver_separation/graph/model"
	model1 "VehicleSupervision/internal/modules/vehicle_driver_separation/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CaseApprovalReviewCall struct {
		CaseApprovalReviewCallID      func(childComplexity int) int
		CaseApprovalReviewOperationID func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DialTime                      func(childComplexity int) int
		ID                            func(childComplexity int) int
		InformContent                 func(childComplexity int) int
		IsConnected                   func(childComplexity int) int
		ReviewTime                    func(childComplexity int) int
		Reviewer                      func(childComplexity int) int
		TelephoneNumber               func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
	}

	CaseApprovalReviewCallAggregate struct {
		Aggregate func(childComplexity int) int
	}

	CaseApprovalReviewCallAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	CaseApprovalReviewCallAvgFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallMaxFields struct {
		CaseApprovalReviewCallID      func(childComplexity int) int
		CaseApprovalReviewOperationID func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DialTime                      func(childComplexity int) int
		ID                            func(childComplexity int) int
		InformContent                 func(childComplexity int) int
		IsConnected                   func(childComplexity int) int
		ReviewTime                    func(childComplexity int) int
		Reviewer                      func(childComplexity int) int
		TelephoneNumber               func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
	}

	CaseApprovalReviewCallMinFields struct {
		CaseApprovalReviewCallID      func(childComplexity int) int
		CaseApprovalReviewOperationID func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DialTime                      func(childComplexity int) int
		ID                            func(childComplexity int) int
		InformContent                 func(childComplexity int) int
		IsConnected                   func(childComplexity int) int
		ReviewTime                    func(childComplexity int) int
		Reviewer                      func(childComplexity int) int
		TelephoneNumber               func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
	}

	CaseApprovalReviewCallMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	CaseApprovalReviewCallStddevFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallStddevPopFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallStddevSampFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallSumFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallVarPopFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallVarSampFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewCallVarianceFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperation struct {
		CaseApprovalReviewOperationID func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		ID                            func(childComplexity int) int
		ReviewOpinion                 func(childComplexity int) int
		ReviewResult                  func(childComplexity int) int
		ReviewTime                    func(childComplexity int) int
		Reviewer                      func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
	}

	CaseApprovalReviewOperationAggregate struct {
		Aggregate func(childComplexity int) int
	}

	CaseApprovalReviewOperationAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	CaseApprovalReviewOperationAvgFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationMaxFields struct {
		CaseApprovalReviewOperationID func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		ID                            func(childComplexity int) int
		ReviewOpinion                 func(childComplexity int) int
		ReviewResult                  func(childComplexity int) int
		ReviewTime                    func(childComplexity int) int
		Reviewer                      func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
	}

	CaseApprovalReviewOperationMinFields struct {
		CaseApprovalReviewOperationID func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		ID                            func(childComplexity int) int
		ReviewOpinion                 func(childComplexity int) int
		ReviewResult                  func(childComplexity int) int
		ReviewTime                    func(childComplexity int) int
		Reviewer                      func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
	}

	CaseApprovalReviewOperationMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	CaseApprovalReviewOperationStddevFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationStddevPopFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationStddevSampFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationSumFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationVarPopFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationVarSampFields struct {
		ID func(childComplexity int) int
	}

	CaseApprovalReviewOperationVarianceFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecord struct {
		AgentIDNumber               func(childComplexity int) int
		ApproveState                func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		ContactAddress              func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DisputeViolationID          func(childComplexity int) int
		DriverLicense               func(childComplexity int) int
		DrivingLicense              func(childComplexity int) int
		DrivingLog                  func(childComplexity int) int
		ID                          func(childComplexity int) int
		IDCard                      func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		LaborContract               func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		OtherEvidence               func(childComplexity int) int
		PicEvidence                 func(childComplexity int) int
		Statement                   func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
		Witness                     func(childComplexity int) int
		WrittenApplicationMaterials func(childComplexity int) int
	}

	DisputeViolationRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DisputeViolationRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DisputeViolationRecordAvgFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordLog struct {
		Approver              func(childComplexity int) int
		DisputeViolationID    func(childComplexity int) int
		DisputeViolationLogID func(childComplexity int) int
		ID                    func(childComplexity int) int
		ReviewActionName      func(childComplexity int) int
		ReviewOpinion         func(childComplexity int) int
		ReviewResult          func(childComplexity int) int
		ReviewTime            func(childComplexity int) int
		Reviewer              func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
	}

	DisputeViolationRecordLogAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DisputeViolationRecordLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DisputeViolationRecordLogAvgFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogMaxFields struct {
		Approver              func(childComplexity int) int
		DisputeViolationID    func(childComplexity int) int
		DisputeViolationLogID func(childComplexity int) int
		ID                    func(childComplexity int) int
		ReviewActionName      func(childComplexity int) int
		ReviewOpinion         func(childComplexity int) int
		ReviewResult          func(childComplexity int) int
		ReviewTime            func(childComplexity int) int
		Reviewer              func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
	}

	DisputeViolationRecordLogMinFields struct {
		Approver              func(childComplexity int) int
		DisputeViolationID    func(childComplexity int) int
		DisputeViolationLogID func(childComplexity int) int
		ID                    func(childComplexity int) int
		ReviewActionName      func(childComplexity int) int
		ReviewOpinion         func(childComplexity int) int
		ReviewResult          func(childComplexity int) int
		ReviewTime            func(childComplexity int) int
		Reviewer              func(childComplexity int) int
		UpdateTimeIn          func(childComplexity int) int
	}

	DisputeViolationRecordLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DisputeViolationRecordLogStddevFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogSumFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogVarPopFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogVarSampFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordLogVarianceFields struct {
		ID func(childComplexity int) int
	}

	DisputeViolationRecordMaxFields struct {
		AgentIDNumber               func(childComplexity int) int
		ApproveState                func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		ContactAddress              func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DisputeViolationID          func(childComplexity int) int
		DriverLicense               func(childComplexity int) int
		DrivingLicense              func(childComplexity int) int
		DrivingLog                  func(childComplexity int) int
		ID                          func(childComplexity int) int
		IDCard                      func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		LaborContract               func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		OtherEvidence               func(childComplexity int) int
		PicEvidence                 func(childComplexity int) int
		Statement                   func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
		Witness                     func(childComplexity int) int
		WrittenApplicationMaterials func(childComplexity int) int
	}

	DisputeViolationRecordMinFields struct {
		AgentIDNumber               func(childComplexity int) int
		ApproveState                func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		ContactAddress              func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DisputeViolationID          func(childComplexity int) int
		DriverLicense               func(childComplexity int) int
		DrivingLicense              func(childComplexity int) int
		DrivingLog                  func(childComplexity int) int
		ID                          func(childComplexity int) int
		IDCard                      func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		LaborContract               func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		OtherEvidence               func(childComplexity int) int
		PicEvidence                 func(childComplexity int) int
		Statement                   func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleManagerIDCard        func(childComplexity int) int
		ViolationDetailID           func(childComplexity int) int
		Witness                     func(childComplexity int) int
		WrittenApplicationMaterials func(childComplexity int) int
	}

	DisputeViolationRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DisputeViolationRecordStddevFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordStddevPopFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordStddevSampFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordSumFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordVarPopFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordVarSampFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DisputeViolationRecordVarianceFields struct {
		ApproveState func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	DrivingLogInfo struct {
		Cause            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DrivingEndTime   func(childComplexity int) int
		DrivingLogInfoID func(childComplexity int) int
		DrivingStartTime func(childComplexity int) int
		EndTime          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsMarkup         func(childComplexity int) int
		Remarks          func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
		Route            func(childComplexity int) int
		StartTime        func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		VehicleID        func(childComplexity int) int
	}

	DrivingLogInfoAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DrivingLogInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DrivingLogInfoAvgFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoMaxFields struct {
		Cause            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DrivingEndTime   func(childComplexity int) int
		DrivingLogInfoID func(childComplexity int) int
		DrivingStartTime func(childComplexity int) int
		EndTime          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsMarkup         func(childComplexity int) int
		Remarks          func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
		Route            func(childComplexity int) int
		StartTime        func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		VehicleID        func(childComplexity int) int
	}

	DrivingLogInfoMinFields struct {
		Cause            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DrivingEndTime   func(childComplexity int) int
		DrivingLogInfoID func(childComplexity int) int
		DrivingStartTime func(childComplexity int) int
		EndTime          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsMarkup         func(childComplexity int) int
		Remarks          func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
		Route            func(childComplexity int) int
		StartTime        func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		VehicleID        func(childComplexity int) int
	}

	DrivingLogInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DrivingLogInfoStddevFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoStddevPopFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoStddevSampFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoSumFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoVarPopFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoVarSampFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	DrivingLogInfoVarianceFields struct {
		ID               func(childComplexity int) int
		ReviewAgecyLevel func(childComplexity int) int
		ReviewStatus     func(childComplexity int) int
	}

	Mutation struct {
		DeleteCaseApprovalReviewCall          func(childComplexity int, where model.CaseApprovalReviewCallBoolExp) int
		DeleteCaseApprovalReviewCallByPk      func(childComplexity int, id int64) int
		DeleteCaseApprovalReviewOperation     func(childComplexity int, where model.CaseApprovalReviewOperationBoolExp) int
		DeleteCaseApprovalReviewOperationByPk func(childComplexity int, id int64) int
		DeleteDisputeViolationRecord          func(childComplexity int, where model.DisputeViolationRecordBoolExp) int
		DeleteDisputeViolationRecordByPk      func(childComplexity int, id int64) int
		DeleteDisputeViolationRecordLog       func(childComplexity int, where model.DisputeViolationRecordLogBoolExp) int
		DeleteDisputeViolationRecordLogByPk   func(childComplexity int, id int64) int
		DeleteDrivingLogInfo                  func(childComplexity int, where model.DrivingLogInfoBoolExp) int
		DeleteDrivingLogInfoByPk              func(childComplexity int, id int64) int
		DeleteVehicleDriverBinding            func(childComplexity int, where model.VehicleDriverBindingBoolExp) int
		DeleteVehicleDriverBindingByPk        func(childComplexity int, id int64) int
		InsertCaseApprovalReviewCall          func(childComplexity int, objects []*model.CaseApprovalReviewCallInsertInput) int
		InsertCaseApprovalReviewCallOne       func(childComplexity int, objects model.CaseApprovalReviewCallInsertInput) int
		InsertCaseApprovalReviewOperation     func(childComplexity int, objects []*model.CaseApprovalReviewOperationInsertInput) int
		InsertCaseApprovalReviewOperationOne  func(childComplexity int, objects model.CaseApprovalReviewOperationInsertInput) int
		InsertDisputeViolationRecord          func(childComplexity int, objects []*model.DisputeViolationRecordInsertInput) int
		InsertDisputeViolationRecordLog       func(childComplexity int, objects []*model.DisputeViolationRecordLogInsertInput) int
		InsertDisputeViolationRecordLogOne    func(childComplexity int, objects model.DisputeViolationRecordLogInsertInput) int
		InsertDisputeViolationRecordOne       func(childComplexity int, objects model.DisputeViolationRecordInsertInput) int
		InsertDrivingLogInfo                  func(childComplexity int, objects []*model.DrivingLogInfoInsertInput) int
		InsertDrivingLogInfoOne               func(childComplexity int, objects model.DrivingLogInfoInsertInput) int
		InsertVehicleDriverBinding            func(childComplexity int, objects []*model.VehicleDriverBindingInsertInput) int
		InsertVehicleDriverBindingOne         func(childComplexity int, objects model.VehicleDriverBindingInsertInput) int
		UpdateCaseApprovalReviewCall          func(childComplexity int, inc *model.CaseApprovalReviewCallIncInput, set *model.CaseApprovalReviewCallSetInput, where model.CaseApprovalReviewCallBoolExp) int
		UpdateCaseApprovalReviewCallByPk      func(childComplexity int, inc *model.CaseApprovalReviewCallIncInput, set *model.CaseApprovalReviewCallSetInput, id int64) int
		UpdateCaseApprovalReviewOperation     func(childComplexity int, inc *model.CaseApprovalReviewOperationIncInput, set *model.CaseApprovalReviewOperationSetInput, where model.CaseApprovalReviewOperationBoolExp) int
		UpdateCaseApprovalReviewOperationByPk func(childComplexity int, inc *model.CaseApprovalReviewOperationIncInput, set *model.CaseApprovalReviewOperationSetInput, id int64) int
		UpdateDisputeViolationRecord          func(childComplexity int, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, where model.DisputeViolationRecordBoolExp) int
		UpdateDisputeViolationRecordByPk      func(childComplexity int, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, id int64) int
		UpdateDisputeViolationRecordLog       func(childComplexity int, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, where model.DisputeViolationRecordLogBoolExp) int
		UpdateDisputeViolationRecordLogByPk   func(childComplexity int, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, id int64) int
		UpdateDrivingLogInfo                  func(childComplexity int, inc *model.DrivingLogInfoIncInput, set *model.DrivingLogInfoSetInput, where model.DrivingLogInfoBoolExp) int
		UpdateDrivingLogInfoByPk              func(childComplexity int, inc *model.DrivingLogInfoIncInput, set *model.DrivingLogInfoSetInput, id int64) int
		UpdateVehicleDriverBinding            func(childComplexity int, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, where model.VehicleDriverBindingBoolExp) int
		UpdateVehicleDriverBindingByPk        func(childComplexity int, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, id int64) int
	}

	Query struct {
		CaseApprovalReviewCall               func(childComplexity int, distinctOn []model.CaseApprovalReviewCallSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewCallOrderBy, where *model.CaseApprovalReviewCallBoolExp) int
		CaseApprovalReviewCallAggregate      func(childComplexity int, distinctOn []model.CaseApprovalReviewCallSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewCallOrderBy, where *model.CaseApprovalReviewCallBoolExp) int
		CaseApprovalReviewCallByPk           func(childComplexity int, id int64) int
		CaseApprovalReviewOperation          func(childComplexity int, distinctOn []model.CaseApprovalReviewOperationSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewOperationOrderBy, where *model.CaseApprovalReviewOperationBoolExp) int
		CaseApprovalReviewOperationAggregate func(childComplexity int, distinctOn []model.CaseApprovalReviewOperationSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewOperationOrderBy, where *model.CaseApprovalReviewOperationBoolExp) int
		CaseApprovalReviewOperationByPk      func(childComplexity int, id int64) int
		DisputeViolationRecord               func(childComplexity int, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) int
		DisputeViolationRecordAggregate      func(childComplexity int, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) int
		DisputeViolationRecordByPk           func(childComplexity int, id int64) int
		DisputeViolationRecordLog            func(childComplexity int, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) int
		DisputeViolationRecordLogAggregate   func(childComplexity int, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) int
		DisputeViolationRecordLogByPk        func(childComplexity int, id int64) int
		DrivingLogInfo                       func(childComplexity int, distinctOn []model.DrivingLogInfoSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLogInfoOrderBy, where *model.DrivingLogInfoBoolExp) int
		DrivingLogInfoAggregate              func(childComplexity int, distinctOn []model.DrivingLogInfoSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLogInfoOrderBy, where *model.DrivingLogInfoBoolExp) int
		DrivingLogInfoByPk                   func(childComplexity int, id int64) int
		VehicleDriverBinding                 func(childComplexity int, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) int
		VehicleDriverBindingAggregate        func(childComplexity int, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) int
		VehicleDriverBindingByPk             func(childComplexity int, id int64) int
	}

	VehicleDriverBinding struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DriverID               func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleDriverBindingAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleDriverBindingAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleDriverBindingAvgFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingMaxFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DriverID               func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleDriverBindingMinFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DriverID               func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleDriverBindingMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleDriverBindingStddevFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingStddevPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingStddevSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingSumFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingVarPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingVarSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteCaseApprovalReviewCall(ctx context.Context, where model.CaseApprovalReviewCallBoolExp) (*model.CaseApprovalReviewCallMutationResponse, error)
	DeleteCaseApprovalReviewCallByPk(ctx context.Context, id int64) (*model1.CaseApprovalReviewCall, error)
	InsertCaseApprovalReviewCall(ctx context.Context, objects []*model.CaseApprovalReviewCallInsertInput) (*model.CaseApprovalReviewCallMutationResponse, error)
	InsertCaseApprovalReviewCallOne(ctx context.Context, objects model.CaseApprovalReviewCallInsertInput) (*model1.CaseApprovalReviewCall, error)
	UpdateCaseApprovalReviewCall(ctx context.Context, inc *model.CaseApprovalReviewCallIncInput, set *model.CaseApprovalReviewCallSetInput, where model.CaseApprovalReviewCallBoolExp) (*model.CaseApprovalReviewCallMutationResponse, error)
	UpdateCaseApprovalReviewCallByPk(ctx context.Context, inc *model.CaseApprovalReviewCallIncInput, set *model.CaseApprovalReviewCallSetInput, id int64) (*model1.CaseApprovalReviewCall, error)
	DeleteCaseApprovalReviewOperation(ctx context.Context, where model.CaseApprovalReviewOperationBoolExp) (*model.CaseApprovalReviewOperationMutationResponse, error)
	DeleteCaseApprovalReviewOperationByPk(ctx context.Context, id int64) (*model1.CaseApprovalReviewOperation, error)
	InsertCaseApprovalReviewOperation(ctx context.Context, objects []*model.CaseApprovalReviewOperationInsertInput) (*model.CaseApprovalReviewOperationMutationResponse, error)
	InsertCaseApprovalReviewOperationOne(ctx context.Context, objects model.CaseApprovalReviewOperationInsertInput) (*model1.CaseApprovalReviewOperation, error)
	UpdateCaseApprovalReviewOperation(ctx context.Context, inc *model.CaseApprovalReviewOperationIncInput, set *model.CaseApprovalReviewOperationSetInput, where model.CaseApprovalReviewOperationBoolExp) (*model.CaseApprovalReviewOperationMutationResponse, error)
	UpdateCaseApprovalReviewOperationByPk(ctx context.Context, inc *model.CaseApprovalReviewOperationIncInput, set *model.CaseApprovalReviewOperationSetInput, id int64) (*model1.CaseApprovalReviewOperation, error)
	DeleteDisputeViolationRecord(ctx context.Context, where model.DisputeViolationRecordBoolExp) (*model.DisputeViolationRecordMutationResponse, error)
	DeleteDisputeViolationRecordByPk(ctx context.Context, id int64) (*model1.DisputeViolationRecord, error)
	InsertDisputeViolationRecord(ctx context.Context, objects []*model.DisputeViolationRecordInsertInput) (*model.DisputeViolationRecordMutationResponse, error)
	InsertDisputeViolationRecordOne(ctx context.Context, objects model.DisputeViolationRecordInsertInput) (*model1.DisputeViolationRecord, error)
	UpdateDisputeViolationRecord(ctx context.Context, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, where model.DisputeViolationRecordBoolExp) (*model.DisputeViolationRecordMutationResponse, error)
	UpdateDisputeViolationRecordByPk(ctx context.Context, inc *model.DisputeViolationRecordIncInput, set *model.DisputeViolationRecordSetInput, id int64) (*model1.DisputeViolationRecord, error)
	DeleteDisputeViolationRecordLog(ctx context.Context, where model.DisputeViolationRecordLogBoolExp) (*model.DisputeViolationRecordLogMutationResponse, error)
	DeleteDisputeViolationRecordLogByPk(ctx context.Context, id int64) (*model1.DisputeViolationRecordLog, error)
	InsertDisputeViolationRecordLog(ctx context.Context, objects []*model.DisputeViolationRecordLogInsertInput) (*model.DisputeViolationRecordLogMutationResponse, error)
	InsertDisputeViolationRecordLogOne(ctx context.Context, objects model.DisputeViolationRecordLogInsertInput) (*model1.DisputeViolationRecordLog, error)
	UpdateDisputeViolationRecordLog(ctx context.Context, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, where model.DisputeViolationRecordLogBoolExp) (*model.DisputeViolationRecordLogMutationResponse, error)
	UpdateDisputeViolationRecordLogByPk(ctx context.Context, inc *model.DisputeViolationRecordLogIncInput, set *model.DisputeViolationRecordLogSetInput, id int64) (*model1.DisputeViolationRecordLog, error)
	DeleteDrivingLogInfo(ctx context.Context, where model.DrivingLogInfoBoolExp) (*model.DrivingLogInfoMutationResponse, error)
	DeleteDrivingLogInfoByPk(ctx context.Context, id int64) (*model1.DrivingLogInfo, error)
	InsertDrivingLogInfo(ctx context.Context, objects []*model.DrivingLogInfoInsertInput) (*model.DrivingLogInfoMutationResponse, error)
	InsertDrivingLogInfoOne(ctx context.Context, objects model.DrivingLogInfoInsertInput) (*model1.DrivingLogInfo, error)
	UpdateDrivingLogInfo(ctx context.Context, inc *model.DrivingLogInfoIncInput, set *model.DrivingLogInfoSetInput, where model.DrivingLogInfoBoolExp) (*model.DrivingLogInfoMutationResponse, error)
	UpdateDrivingLogInfoByPk(ctx context.Context, inc *model.DrivingLogInfoIncInput, set *model.DrivingLogInfoSetInput, id int64) (*model1.DrivingLogInfo, error)
	DeleteVehicleDriverBinding(ctx context.Context, where model.VehicleDriverBindingBoolExp) (*model.VehicleDriverBindingMutationResponse, error)
	DeleteVehicleDriverBindingByPk(ctx context.Context, id int64) (*model1.VehicleDriverBinding, error)
	InsertVehicleDriverBinding(ctx context.Context, objects []*model.VehicleDriverBindingInsertInput) (*model.VehicleDriverBindingMutationResponse, error)
	InsertVehicleDriverBindingOne(ctx context.Context, objects model.VehicleDriverBindingInsertInput) (*model1.VehicleDriverBinding, error)
	UpdateVehicleDriverBinding(ctx context.Context, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, where model.VehicleDriverBindingBoolExp) (*model.VehicleDriverBindingMutationResponse, error)
	UpdateVehicleDriverBindingByPk(ctx context.Context, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, id int64) (*model1.VehicleDriverBinding, error)
}
type QueryResolver interface {
	CaseApprovalReviewCall(ctx context.Context, distinctOn []model.CaseApprovalReviewCallSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewCallOrderBy, where *model.CaseApprovalReviewCallBoolExp) ([]*model1.CaseApprovalReviewCall, error)
	CaseApprovalReviewCallAggregate(ctx context.Context, distinctOn []model.CaseApprovalReviewCallSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewCallOrderBy, where *model.CaseApprovalReviewCallBoolExp) (*model.CaseApprovalReviewCallAggregate, error)
	CaseApprovalReviewCallByPk(ctx context.Context, id int64) (*model1.CaseApprovalReviewCall, error)
	CaseApprovalReviewOperation(ctx context.Context, distinctOn []model.CaseApprovalReviewOperationSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewOperationOrderBy, where *model.CaseApprovalReviewOperationBoolExp) ([]*model1.CaseApprovalReviewOperation, error)
	CaseApprovalReviewOperationAggregate(ctx context.Context, distinctOn []model.CaseApprovalReviewOperationSelectColumn, limit *int, offset *int, orderBy []*model.CaseApprovalReviewOperationOrderBy, where *model.CaseApprovalReviewOperationBoolExp) (*model.CaseApprovalReviewOperationAggregate, error)
	CaseApprovalReviewOperationByPk(ctx context.Context, id int64) (*model1.CaseApprovalReviewOperation, error)
	DisputeViolationRecord(ctx context.Context, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) ([]*model1.DisputeViolationRecord, error)
	DisputeViolationRecordAggregate(ctx context.Context, distinctOn []model.DisputeViolationRecordSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordOrderBy, where *model.DisputeViolationRecordBoolExp) (*model.DisputeViolationRecordAggregate, error)
	DisputeViolationRecordByPk(ctx context.Context, id int64) (*model1.DisputeViolationRecord, error)
	DisputeViolationRecordLog(ctx context.Context, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) ([]*model1.DisputeViolationRecordLog, error)
	DisputeViolationRecordLogAggregate(ctx context.Context, distinctOn []model.DisputeViolationRecordLogSelectColumn, limit *int, offset *int, orderBy []*model.DisputeViolationRecordLogOrderBy, where *model.DisputeViolationRecordLogBoolExp) (*model.DisputeViolationRecordLogAggregate, error)
	DisputeViolationRecordLogByPk(ctx context.Context, id int64) (*model1.DisputeViolationRecordLog, error)
	DrivingLogInfo(ctx context.Context, distinctOn []model.DrivingLogInfoSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLogInfoOrderBy, where *model.DrivingLogInfoBoolExp) ([]*model1.DrivingLogInfo, error)
	DrivingLogInfoAggregate(ctx context.Context, distinctOn []model.DrivingLogInfoSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLogInfoOrderBy, where *model.DrivingLogInfoBoolExp) (*model.DrivingLogInfoAggregate, error)
	DrivingLogInfoByPk(ctx context.Context, id int64) (*model1.DrivingLogInfo, error)
	VehicleDriverBinding(ctx context.Context, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) ([]*model1.VehicleDriverBinding, error)
	VehicleDriverBindingAggregate(ctx context.Context, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) (*model.VehicleDriverBindingAggregate, error)
	VehicleDriverBindingByPk(ctx context.Context, id int64) (*model1.VehicleDriverBinding, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CaseApprovalReviewCall.case_approval_review_call_id":
		if e.complexity.CaseApprovalReviewCall.CaseApprovalReviewCallID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.CaseApprovalReviewCallID(childComplexity), true

	case "CaseApprovalReviewCall.case_approval_review_operation_id":
		if e.complexity.CaseApprovalReviewCall.CaseApprovalReviewOperationID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.CaseApprovalReviewOperationID(childComplexity), true

	case "CaseApprovalReviewCall.created_at":
		if e.complexity.CaseApprovalReviewCall.CreatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.CreatedAt(childComplexity), true

	case "CaseApprovalReviewCall.created_by":
		if e.complexity.CaseApprovalReviewCall.CreatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.CreatedBy(childComplexity), true

	case "CaseApprovalReviewCall.deleted_at":
		if e.complexity.CaseApprovalReviewCall.DeletedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.DeletedAt(childComplexity), true

	case "CaseApprovalReviewCall.deleted_by":
		if e.complexity.CaseApprovalReviewCall.DeletedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.DeletedBy(childComplexity), true

	case "CaseApprovalReviewCall.dial_time":
		if e.complexity.CaseApprovalReviewCall.DialTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.DialTime(childComplexity), true

	case "CaseApprovalReviewCall.id":
		if e.complexity.CaseApprovalReviewCall.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.ID(childComplexity), true

	case "CaseApprovalReviewCall.inform_content":
		if e.complexity.CaseApprovalReviewCall.InformContent == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.InformContent(childComplexity), true

	case "CaseApprovalReviewCall.is_connected":
		if e.complexity.CaseApprovalReviewCall.IsConnected == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.IsConnected(childComplexity), true

	case "CaseApprovalReviewCall.review_time":
		if e.complexity.CaseApprovalReviewCall.ReviewTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.ReviewTime(childComplexity), true

	case "CaseApprovalReviewCall.reviewer":
		if e.complexity.CaseApprovalReviewCall.Reviewer == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.Reviewer(childComplexity), true

	case "CaseApprovalReviewCall.telephone_number":
		if e.complexity.CaseApprovalReviewCall.TelephoneNumber == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.TelephoneNumber(childComplexity), true

	case "CaseApprovalReviewCall.updated_at":
		if e.complexity.CaseApprovalReviewCall.UpdatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.UpdatedAt(childComplexity), true

	case "CaseApprovalReviewCall.updated_by":
		if e.complexity.CaseApprovalReviewCall.UpdatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCall.UpdatedBy(childComplexity), true

	case "CaseApprovalReviewCallAggregate.aggregate":
		if e.complexity.CaseApprovalReviewCallAggregate.Aggregate == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregate.Aggregate(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.avg":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Avg == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Avg(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.count":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Count == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Count(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.max":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Max == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Max(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.min":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Min == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Min(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.stddev":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Stddev(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.stddev_pop":
		if e.complexity.CaseApprovalReviewCallAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.StddevPop(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.stddev_samp":
		if e.complexity.CaseApprovalReviewCallAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.StddevSamp(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.sum":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Sum == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Sum(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.var_pop":
		if e.complexity.CaseApprovalReviewCallAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.VarPop(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.var_samp":
		if e.complexity.CaseApprovalReviewCallAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.VarSamp(childComplexity), true

	case "CaseApprovalReviewCallAggregateFields.variance":
		if e.complexity.CaseApprovalReviewCallAggregateFields.Variance == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAggregateFields.Variance(childComplexity), true

	case "CaseApprovalReviewCallAvgFields.id":
		if e.complexity.CaseApprovalReviewCallAvgFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallAvgFields.ID(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.case_approval_review_call_id":
		if e.complexity.CaseApprovalReviewCallMaxFields.CaseApprovalReviewCallID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.CaseApprovalReviewCallID(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.case_approval_review_operation_id":
		if e.complexity.CaseApprovalReviewCallMaxFields.CaseApprovalReviewOperationID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.CaseApprovalReviewOperationID(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.created_at":
		if e.complexity.CaseApprovalReviewCallMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.CreatedAt(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.created_by":
		if e.complexity.CaseApprovalReviewCallMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.CreatedBy(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.deleted_at":
		if e.complexity.CaseApprovalReviewCallMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.DeletedAt(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.deleted_by":
		if e.complexity.CaseApprovalReviewCallMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.DeletedBy(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.dial_time":
		if e.complexity.CaseApprovalReviewCallMaxFields.DialTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.DialTime(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.id":
		if e.complexity.CaseApprovalReviewCallMaxFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.ID(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.inform_content":
		if e.complexity.CaseApprovalReviewCallMaxFields.InformContent == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.InformContent(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.is_connected":
		if e.complexity.CaseApprovalReviewCallMaxFields.IsConnected == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.IsConnected(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.review_time":
		if e.complexity.CaseApprovalReviewCallMaxFields.ReviewTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.ReviewTime(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.reviewer":
		if e.complexity.CaseApprovalReviewCallMaxFields.Reviewer == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.Reviewer(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.telephone_number":
		if e.complexity.CaseApprovalReviewCallMaxFields.TelephoneNumber == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.TelephoneNumber(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.updated_at":
		if e.complexity.CaseApprovalReviewCallMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.UpdatedAt(childComplexity), true

	case "CaseApprovalReviewCallMaxFields.updated_by":
		if e.complexity.CaseApprovalReviewCallMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMaxFields.UpdatedBy(childComplexity), true

	case "CaseApprovalReviewCallMinFields.case_approval_review_call_id":
		if e.complexity.CaseApprovalReviewCallMinFields.CaseApprovalReviewCallID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.CaseApprovalReviewCallID(childComplexity), true

	case "CaseApprovalReviewCallMinFields.case_approval_review_operation_id":
		if e.complexity.CaseApprovalReviewCallMinFields.CaseApprovalReviewOperationID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.CaseApprovalReviewOperationID(childComplexity), true

	case "CaseApprovalReviewCallMinFields.created_at":
		if e.complexity.CaseApprovalReviewCallMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.CreatedAt(childComplexity), true

	case "CaseApprovalReviewCallMinFields.created_by":
		if e.complexity.CaseApprovalReviewCallMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.CreatedBy(childComplexity), true

	case "CaseApprovalReviewCallMinFields.deleted_at":
		if e.complexity.CaseApprovalReviewCallMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.DeletedAt(childComplexity), true

	case "CaseApprovalReviewCallMinFields.deleted_by":
		if e.complexity.CaseApprovalReviewCallMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.DeletedBy(childComplexity), true

	case "CaseApprovalReviewCallMinFields.dial_time":
		if e.complexity.CaseApprovalReviewCallMinFields.DialTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.DialTime(childComplexity), true

	case "CaseApprovalReviewCallMinFields.id":
		if e.complexity.CaseApprovalReviewCallMinFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.ID(childComplexity), true

	case "CaseApprovalReviewCallMinFields.inform_content":
		if e.complexity.CaseApprovalReviewCallMinFields.InformContent == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.InformContent(childComplexity), true

	case "CaseApprovalReviewCallMinFields.is_connected":
		if e.complexity.CaseApprovalReviewCallMinFields.IsConnected == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.IsConnected(childComplexity), true

	case "CaseApprovalReviewCallMinFields.review_time":
		if e.complexity.CaseApprovalReviewCallMinFields.ReviewTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.ReviewTime(childComplexity), true

	case "CaseApprovalReviewCallMinFields.reviewer":
		if e.complexity.CaseApprovalReviewCallMinFields.Reviewer == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.Reviewer(childComplexity), true

	case "CaseApprovalReviewCallMinFields.telephone_number":
		if e.complexity.CaseApprovalReviewCallMinFields.TelephoneNumber == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.TelephoneNumber(childComplexity), true

	case "CaseApprovalReviewCallMinFields.updated_at":
		if e.complexity.CaseApprovalReviewCallMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.UpdatedAt(childComplexity), true

	case "CaseApprovalReviewCallMinFields.updated_by":
		if e.complexity.CaseApprovalReviewCallMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMinFields.UpdatedBy(childComplexity), true

	case "CaseApprovalReviewCallMutationResponse.affected_rows":
		if e.complexity.CaseApprovalReviewCallMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMutationResponse.AffectedRows(childComplexity), true

	case "CaseApprovalReviewCallMutationResponse.returning":
		if e.complexity.CaseApprovalReviewCallMutationResponse.Returning == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallMutationResponse.Returning(childComplexity), true

	case "CaseApprovalReviewCallStddevFields.id":
		if e.complexity.CaseApprovalReviewCallStddevFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallStddevFields.ID(childComplexity), true

	case "CaseApprovalReviewCallStddevPopFields.id":
		if e.complexity.CaseApprovalReviewCallStddevPopFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallStddevPopFields.ID(childComplexity), true

	case "CaseApprovalReviewCallStddevSampFields.id":
		if e.complexity.CaseApprovalReviewCallStddevSampFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallStddevSampFields.ID(childComplexity), true

	case "CaseApprovalReviewCallSumFields.id":
		if e.complexity.CaseApprovalReviewCallSumFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallSumFields.ID(childComplexity), true

	case "CaseApprovalReviewCallVarPopFields.id":
		if e.complexity.CaseApprovalReviewCallVarPopFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallVarPopFields.ID(childComplexity), true

	case "CaseApprovalReviewCallVarSampFields.id":
		if e.complexity.CaseApprovalReviewCallVarSampFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallVarSampFields.ID(childComplexity), true

	case "CaseApprovalReviewCallVarianceFields.id":
		if e.complexity.CaseApprovalReviewCallVarianceFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewCallVarianceFields.ID(childComplexity), true

	case "CaseApprovalReviewOperation.case_approval_review_operation_id":
		if e.complexity.CaseApprovalReviewOperation.CaseApprovalReviewOperationID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.CaseApprovalReviewOperationID(childComplexity), true

	case "CaseApprovalReviewOperation.created_at":
		if e.complexity.CaseApprovalReviewOperation.CreatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.CreatedAt(childComplexity), true

	case "CaseApprovalReviewOperation.created_by":
		if e.complexity.CaseApprovalReviewOperation.CreatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.CreatedBy(childComplexity), true

	case "CaseApprovalReviewOperation.deleted_at":
		if e.complexity.CaseApprovalReviewOperation.DeletedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.DeletedAt(childComplexity), true

	case "CaseApprovalReviewOperation.deleted_by":
		if e.complexity.CaseApprovalReviewOperation.DeletedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.DeletedBy(childComplexity), true

	case "CaseApprovalReviewOperation.id":
		if e.complexity.CaseApprovalReviewOperation.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.ID(childComplexity), true

	case "CaseApprovalReviewOperation.review_opinion":
		if e.complexity.CaseApprovalReviewOperation.ReviewOpinion == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.ReviewOpinion(childComplexity), true

	case "CaseApprovalReviewOperation.review_result":
		if e.complexity.CaseApprovalReviewOperation.ReviewResult == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.ReviewResult(childComplexity), true

	case "CaseApprovalReviewOperation.review_time":
		if e.complexity.CaseApprovalReviewOperation.ReviewTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.ReviewTime(childComplexity), true

	case "CaseApprovalReviewOperation.reviewer":
		if e.complexity.CaseApprovalReviewOperation.Reviewer == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.Reviewer(childComplexity), true

	case "CaseApprovalReviewOperation.updated_at":
		if e.complexity.CaseApprovalReviewOperation.UpdatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.UpdatedAt(childComplexity), true

	case "CaseApprovalReviewOperation.updated_by":
		if e.complexity.CaseApprovalReviewOperation.UpdatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperation.UpdatedBy(childComplexity), true

	case "CaseApprovalReviewOperationAggregate.aggregate":
		if e.complexity.CaseApprovalReviewOperationAggregate.Aggregate == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregate.Aggregate(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.avg":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Avg == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Avg(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.count":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Count == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Count(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.max":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Max == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Max(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.min":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Min == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Min(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.stddev":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Stddev(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.stddev_pop":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.StddevPop(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.stddev_samp":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.StddevSamp(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.sum":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Sum == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Sum(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.var_pop":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.VarPop(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.var_samp":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.VarSamp(childComplexity), true

	case "CaseApprovalReviewOperationAggregateFields.variance":
		if e.complexity.CaseApprovalReviewOperationAggregateFields.Variance == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAggregateFields.Variance(childComplexity), true

	case "CaseApprovalReviewOperationAvgFields.id":
		if e.complexity.CaseApprovalReviewOperationAvgFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationAvgFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.case_approval_review_operation_id":
		if e.complexity.CaseApprovalReviewOperationMaxFields.CaseApprovalReviewOperationID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.CaseApprovalReviewOperationID(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.created_at":
		if e.complexity.CaseApprovalReviewOperationMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.CreatedAt(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.created_by":
		if e.complexity.CaseApprovalReviewOperationMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.CreatedBy(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.deleted_at":
		if e.complexity.CaseApprovalReviewOperationMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.DeletedAt(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.deleted_by":
		if e.complexity.CaseApprovalReviewOperationMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.DeletedBy(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.id":
		if e.complexity.CaseApprovalReviewOperationMaxFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.review_opinion":
		if e.complexity.CaseApprovalReviewOperationMaxFields.ReviewOpinion == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.ReviewOpinion(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.review_result":
		if e.complexity.CaseApprovalReviewOperationMaxFields.ReviewResult == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.ReviewResult(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.review_time":
		if e.complexity.CaseApprovalReviewOperationMaxFields.ReviewTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.ReviewTime(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.reviewer":
		if e.complexity.CaseApprovalReviewOperationMaxFields.Reviewer == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.Reviewer(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.updated_at":
		if e.complexity.CaseApprovalReviewOperationMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.UpdatedAt(childComplexity), true

	case "CaseApprovalReviewOperationMaxFields.updated_by":
		if e.complexity.CaseApprovalReviewOperationMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMaxFields.UpdatedBy(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.case_approval_review_operation_id":
		if e.complexity.CaseApprovalReviewOperationMinFields.CaseApprovalReviewOperationID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.CaseApprovalReviewOperationID(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.created_at":
		if e.complexity.CaseApprovalReviewOperationMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.CreatedAt(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.created_by":
		if e.complexity.CaseApprovalReviewOperationMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.CreatedBy(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.deleted_at":
		if e.complexity.CaseApprovalReviewOperationMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.DeletedAt(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.deleted_by":
		if e.complexity.CaseApprovalReviewOperationMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.DeletedBy(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.id":
		if e.complexity.CaseApprovalReviewOperationMinFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.review_opinion":
		if e.complexity.CaseApprovalReviewOperationMinFields.ReviewOpinion == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.ReviewOpinion(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.review_result":
		if e.complexity.CaseApprovalReviewOperationMinFields.ReviewResult == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.ReviewResult(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.review_time":
		if e.complexity.CaseApprovalReviewOperationMinFields.ReviewTime == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.ReviewTime(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.reviewer":
		if e.complexity.CaseApprovalReviewOperationMinFields.Reviewer == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.Reviewer(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.updated_at":
		if e.complexity.CaseApprovalReviewOperationMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.UpdatedAt(childComplexity), true

	case "CaseApprovalReviewOperationMinFields.updated_by":
		if e.complexity.CaseApprovalReviewOperationMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMinFields.UpdatedBy(childComplexity), true

	case "CaseApprovalReviewOperationMutationResponse.affected_rows":
		if e.complexity.CaseApprovalReviewOperationMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMutationResponse.AffectedRows(childComplexity), true

	case "CaseApprovalReviewOperationMutationResponse.returning":
		if e.complexity.CaseApprovalReviewOperationMutationResponse.Returning == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationMutationResponse.Returning(childComplexity), true

	case "CaseApprovalReviewOperationStddevFields.id":
		if e.complexity.CaseApprovalReviewOperationStddevFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationStddevFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationStddevPopFields.id":
		if e.complexity.CaseApprovalReviewOperationStddevPopFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationStddevPopFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationStddevSampFields.id":
		if e.complexity.CaseApprovalReviewOperationStddevSampFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationStddevSampFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationSumFields.id":
		if e.complexity.CaseApprovalReviewOperationSumFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationSumFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationVarPopFields.id":
		if e.complexity.CaseApprovalReviewOperationVarPopFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationVarPopFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationVarSampFields.id":
		if e.complexity.CaseApprovalReviewOperationVarSampFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationVarSampFields.ID(childComplexity), true

	case "CaseApprovalReviewOperationVarianceFields.id":
		if e.complexity.CaseApprovalReviewOperationVarianceFields.ID == nil {
			break
		}

		return e.complexity.CaseApprovalReviewOperationVarianceFields.ID(childComplexity), true

	case "DisputeViolationRecord.agent_id_number":
		if e.complexity.DisputeViolationRecord.AgentIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.AgentIDNumber(childComplexity), true

	case "DisputeViolationRecord.approve_state":
		if e.complexity.DisputeViolationRecord.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ApproveState(childComplexity), true

	case "DisputeViolationRecord.business_license":
		if e.complexity.DisputeViolationRecord.BusinessLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.BusinessLicense(childComplexity), true

	case "DisputeViolationRecord.contact_address":
		if e.complexity.DisputeViolationRecord.ContactAddress == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ContactAddress(childComplexity), true

	case "DisputeViolationRecord.created_at":
		if e.complexity.DisputeViolationRecord.CreatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.CreatedAt(childComplexity), true

	case "DisputeViolationRecord.created_by":
		if e.complexity.DisputeViolationRecord.CreatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.CreatedBy(childComplexity), true

	case "DisputeViolationRecord.deleted_at":
		if e.complexity.DisputeViolationRecord.DeletedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DeletedAt(childComplexity), true

	case "DisputeViolationRecord.deleted_by":
		if e.complexity.DisputeViolationRecord.DeletedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DeletedBy(childComplexity), true

	case "DisputeViolationRecord.dispute_violation_id":
		if e.complexity.DisputeViolationRecord.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DisputeViolationID(childComplexity), true

	case "DisputeViolationRecord.driver_license":
		if e.complexity.DisputeViolationRecord.DriverLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DriverLicense(childComplexity), true

	case "DisputeViolationRecord.driving_license":
		if e.complexity.DisputeViolationRecord.DrivingLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DrivingLicense(childComplexity), true

	case "DisputeViolationRecord.driving_log":
		if e.complexity.DisputeViolationRecord.DrivingLog == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.DrivingLog(childComplexity), true

	case "DisputeViolationRecord.id":
		if e.complexity.DisputeViolationRecord.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ID(childComplexity), true

	case "DisputeViolationRecord.id_card":
		if e.complexity.DisputeViolationRecord.IDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.IDCard(childComplexity), true

	case "DisputeViolationRecord.is_deleted":
		if e.complexity.DisputeViolationRecord.IsDeleted == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.IsDeleted(childComplexity), true

	case "DisputeViolationRecord.labor_contract":
		if e.complexity.DisputeViolationRecord.LaborContract == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.LaborContract(childComplexity), true

	case "DisputeViolationRecord.legal_person_id_number":
		if e.complexity.DisputeViolationRecord.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.LegalPersonIDNumber(childComplexity), true

	case "DisputeViolationRecord.organization_code":
		if e.complexity.DisputeViolationRecord.OrganizationCode == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.OrganizationCode(childComplexity), true

	case "DisputeViolationRecord.other_evidence":
		if e.complexity.DisputeViolationRecord.OtherEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.OtherEvidence(childComplexity), true

	case "DisputeViolationRecord.pic_evidence":
		if e.complexity.DisputeViolationRecord.PicEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.PicEvidence(childComplexity), true

	case "DisputeViolationRecord.statement":
		if e.complexity.DisputeViolationRecord.Statement == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.Statement(childComplexity), true

	case "DisputeViolationRecord.update_time_in":
		if e.complexity.DisputeViolationRecord.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.UpdateTimeIn(childComplexity), true

	case "DisputeViolationRecord.updated_at":
		if e.complexity.DisputeViolationRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.UpdatedAt(childComplexity), true

	case "DisputeViolationRecord.updated_by":
		if e.complexity.DisputeViolationRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.UpdatedBy(childComplexity), true

	case "DisputeViolationRecord.vehicle_manager_id_card":
		if e.complexity.DisputeViolationRecord.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.VehicleManagerIDCard(childComplexity), true

	case "DisputeViolationRecord.violation_detail_id":
		if e.complexity.DisputeViolationRecord.ViolationDetailID == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.ViolationDetailID(childComplexity), true

	case "DisputeViolationRecord.witness":
		if e.complexity.DisputeViolationRecord.Witness == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.Witness(childComplexity), true

	case "DisputeViolationRecord.written_application_materials":
		if e.complexity.DisputeViolationRecord.WrittenApplicationMaterials == nil {
			break
		}

		return e.complexity.DisputeViolationRecord.WrittenApplicationMaterials(childComplexity), true

	case "DisputeViolationRecordAggregate.aggregate":
		if e.complexity.DisputeViolationRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregate.Aggregate(childComplexity), true

	case "DisputeViolationRecordAggregateFields.avg":
		if e.complexity.DisputeViolationRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Avg(childComplexity), true

	case "DisputeViolationRecordAggregateFields.count":
		if e.complexity.DisputeViolationRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Count(childComplexity), true

	case "DisputeViolationRecordAggregateFields.max":
		if e.complexity.DisputeViolationRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Max(childComplexity), true

	case "DisputeViolationRecordAggregateFields.min":
		if e.complexity.DisputeViolationRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Min(childComplexity), true

	case "DisputeViolationRecordAggregateFields.stddev":
		if e.complexity.DisputeViolationRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Stddev(childComplexity), true

	case "DisputeViolationRecordAggregateFields.stddev_pop":
		if e.complexity.DisputeViolationRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.StddevPop(childComplexity), true

	case "DisputeViolationRecordAggregateFields.stddev_samp":
		if e.complexity.DisputeViolationRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.StddevSamp(childComplexity), true

	case "DisputeViolationRecordAggregateFields.sum":
		if e.complexity.DisputeViolationRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Sum(childComplexity), true

	case "DisputeViolationRecordAggregateFields.var_pop":
		if e.complexity.DisputeViolationRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.VarPop(childComplexity), true

	case "DisputeViolationRecordAggregateFields.var_samp":
		if e.complexity.DisputeViolationRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.VarSamp(childComplexity), true

	case "DisputeViolationRecordAggregateFields.variance":
		if e.complexity.DisputeViolationRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAggregateFields.Variance(childComplexity), true

	case "DisputeViolationRecordAvgFields.approve_state":
		if e.complexity.DisputeViolationRecordAvgFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAvgFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordAvgFields.id":
		if e.complexity.DisputeViolationRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordAvgFields.ID(childComplexity), true

	case "DisputeViolationRecordLog.approver":
		if e.complexity.DisputeViolationRecordLog.Approver == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.Approver(childComplexity), true

	case "DisputeViolationRecordLog.dispute_violation_id":
		if e.complexity.DisputeViolationRecordLog.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.DisputeViolationID(childComplexity), true

	case "DisputeViolationRecordLog.dispute_violation_log_id":
		if e.complexity.DisputeViolationRecordLog.DisputeViolationLogID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.DisputeViolationLogID(childComplexity), true

	case "DisputeViolationRecordLog.id":
		if e.complexity.DisputeViolationRecordLog.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ID(childComplexity), true

	case "DisputeViolationRecordLog.review_action_name":
		if e.complexity.DisputeViolationRecordLog.ReviewActionName == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewActionName(childComplexity), true

	case "DisputeViolationRecordLog.review_opinion":
		if e.complexity.DisputeViolationRecordLog.ReviewOpinion == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewOpinion(childComplexity), true

	case "DisputeViolationRecordLog.review_result":
		if e.complexity.DisputeViolationRecordLog.ReviewResult == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewResult(childComplexity), true

	case "DisputeViolationRecordLog.review_time":
		if e.complexity.DisputeViolationRecordLog.ReviewTime == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.ReviewTime(childComplexity), true

	case "DisputeViolationRecordLog.reviewer":
		if e.complexity.DisputeViolationRecordLog.Reviewer == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.Reviewer(childComplexity), true

	case "DisputeViolationRecordLog.update_time_in":
		if e.complexity.DisputeViolationRecordLog.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLog.UpdateTimeIn(childComplexity), true

	case "DisputeViolationRecordLogAggregate.aggregate":
		if e.complexity.DisputeViolationRecordLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregate.Aggregate(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.avg":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Avg(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.count":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Count == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Count(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.max":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Max(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.min":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Min(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.stddev":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Stddev(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.stddev_pop":
		if e.complexity.DisputeViolationRecordLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.StddevPop(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.stddev_samp":
		if e.complexity.DisputeViolationRecordLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.StddevSamp(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.sum":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Sum(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.var_pop":
		if e.complexity.DisputeViolationRecordLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.VarPop(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.var_samp":
		if e.complexity.DisputeViolationRecordLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.VarSamp(childComplexity), true

	case "DisputeViolationRecordLogAggregateFields.variance":
		if e.complexity.DisputeViolationRecordLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAggregateFields.Variance(childComplexity), true

	case "DisputeViolationRecordLogAvgFields.id":
		if e.complexity.DisputeViolationRecordLogAvgFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogAvgFields.ID(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.approver":
		if e.complexity.DisputeViolationRecordLogMaxFields.Approver == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.Approver(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationID(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.dispute_violation_log_id":
		if e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationLogID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.DisputeViolationLogID(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.id":
		if e.complexity.DisputeViolationRecordLogMaxFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ID(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.review_action_name":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewActionName == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewActionName(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.review_opinion":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewOpinion == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewOpinion(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.review_result":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewResult == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewResult(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.review_time":
		if e.complexity.DisputeViolationRecordLogMaxFields.ReviewTime == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.ReviewTime(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.reviewer":
		if e.complexity.DisputeViolationRecordLogMaxFields.Reviewer == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.Reviewer(childComplexity), true

	case "DisputeViolationRecordLogMaxFields.update_time_in":
		if e.complexity.DisputeViolationRecordLogMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMaxFields.UpdateTimeIn(childComplexity), true

	case "DisputeViolationRecordLogMinFields.approver":
		if e.complexity.DisputeViolationRecordLogMinFields.Approver == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.Approver(childComplexity), true

	case "DisputeViolationRecordLogMinFields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationID(childComplexity), true

	case "DisputeViolationRecordLogMinFields.dispute_violation_log_id":
		if e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationLogID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.DisputeViolationLogID(childComplexity), true

	case "DisputeViolationRecordLogMinFields.id":
		if e.complexity.DisputeViolationRecordLogMinFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ID(childComplexity), true

	case "DisputeViolationRecordLogMinFields.review_action_name":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewActionName == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewActionName(childComplexity), true

	case "DisputeViolationRecordLogMinFields.review_opinion":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewOpinion == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewOpinion(childComplexity), true

	case "DisputeViolationRecordLogMinFields.review_result":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewResult == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewResult(childComplexity), true

	case "DisputeViolationRecordLogMinFields.review_time":
		if e.complexity.DisputeViolationRecordLogMinFields.ReviewTime == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.ReviewTime(childComplexity), true

	case "DisputeViolationRecordLogMinFields.reviewer":
		if e.complexity.DisputeViolationRecordLogMinFields.Reviewer == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.Reviewer(childComplexity), true

	case "DisputeViolationRecordLogMinFields.update_time_in":
		if e.complexity.DisputeViolationRecordLogMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMinFields.UpdateTimeIn(childComplexity), true

	case "DisputeViolationRecordLogMutationResponse.affected_rows":
		if e.complexity.DisputeViolationRecordLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMutationResponse.AffectedRows(childComplexity), true

	case "DisputeViolationRecordLogMutationResponse.returning":
		if e.complexity.DisputeViolationRecordLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogMutationResponse.Returning(childComplexity), true

	case "DisputeViolationRecordLogStddevFields.id":
		if e.complexity.DisputeViolationRecordLogStddevFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogStddevFields.ID(childComplexity), true

	case "DisputeViolationRecordLogStddevPopFields.id":
		if e.complexity.DisputeViolationRecordLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogStddevPopFields.ID(childComplexity), true

	case "DisputeViolationRecordLogStddevSampFields.id":
		if e.complexity.DisputeViolationRecordLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogStddevSampFields.ID(childComplexity), true

	case "DisputeViolationRecordLogSumFields.id":
		if e.complexity.DisputeViolationRecordLogSumFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogSumFields.ID(childComplexity), true

	case "DisputeViolationRecordLogVarPopFields.id":
		if e.complexity.DisputeViolationRecordLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogVarPopFields.ID(childComplexity), true

	case "DisputeViolationRecordLogVarSampFields.id":
		if e.complexity.DisputeViolationRecordLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogVarSampFields.ID(childComplexity), true

	case "DisputeViolationRecordLogVarianceFields.id":
		if e.complexity.DisputeViolationRecordLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordLogVarianceFields.ID(childComplexity), true

	case "DisputeViolationRecordMaxFields.agent_id_number":
		if e.complexity.DisputeViolationRecordMaxFields.AgentIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.AgentIDNumber(childComplexity), true

	case "DisputeViolationRecordMaxFields.approve_state":
		if e.complexity.DisputeViolationRecordMaxFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordMaxFields.business_license":
		if e.complexity.DisputeViolationRecordMaxFields.BusinessLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.BusinessLicense(childComplexity), true

	case "DisputeViolationRecordMaxFields.contact_address":
		if e.complexity.DisputeViolationRecordMaxFields.ContactAddress == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ContactAddress(childComplexity), true

	case "DisputeViolationRecordMaxFields.created_at":
		if e.complexity.DisputeViolationRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.CreatedAt(childComplexity), true

	case "DisputeViolationRecordMaxFields.created_by":
		if e.complexity.DisputeViolationRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.CreatedBy(childComplexity), true

	case "DisputeViolationRecordMaxFields.deleted_at":
		if e.complexity.DisputeViolationRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DeletedAt(childComplexity), true

	case "DisputeViolationRecordMaxFields.deleted_by":
		if e.complexity.DisputeViolationRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DeletedBy(childComplexity), true

	case "DisputeViolationRecordMaxFields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordMaxFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DisputeViolationID(childComplexity), true

	case "DisputeViolationRecordMaxFields.driver_license":
		if e.complexity.DisputeViolationRecordMaxFields.DriverLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DriverLicense(childComplexity), true

	case "DisputeViolationRecordMaxFields.driving_license":
		if e.complexity.DisputeViolationRecordMaxFields.DrivingLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DrivingLicense(childComplexity), true

	case "DisputeViolationRecordMaxFields.driving_log":
		if e.complexity.DisputeViolationRecordMaxFields.DrivingLog == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.DrivingLog(childComplexity), true

	case "DisputeViolationRecordMaxFields.id":
		if e.complexity.DisputeViolationRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ID(childComplexity), true

	case "DisputeViolationRecordMaxFields.id_card":
		if e.complexity.DisputeViolationRecordMaxFields.IDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.IDCard(childComplexity), true

	case "DisputeViolationRecordMaxFields.is_deleted":
		if e.complexity.DisputeViolationRecordMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.IsDeleted(childComplexity), true

	case "DisputeViolationRecordMaxFields.labor_contract":
		if e.complexity.DisputeViolationRecordMaxFields.LaborContract == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.LaborContract(childComplexity), true

	case "DisputeViolationRecordMaxFields.legal_person_id_number":
		if e.complexity.DisputeViolationRecordMaxFields.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.LegalPersonIDNumber(childComplexity), true

	case "DisputeViolationRecordMaxFields.organization_code":
		if e.complexity.DisputeViolationRecordMaxFields.OrganizationCode == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.OrganizationCode(childComplexity), true

	case "DisputeViolationRecordMaxFields.other_evidence":
		if e.complexity.DisputeViolationRecordMaxFields.OtherEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.OtherEvidence(childComplexity), true

	case "DisputeViolationRecordMaxFields.pic_evidence":
		if e.complexity.DisputeViolationRecordMaxFields.PicEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.PicEvidence(childComplexity), true

	case "DisputeViolationRecordMaxFields.statement":
		if e.complexity.DisputeViolationRecordMaxFields.Statement == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.Statement(childComplexity), true

	case "DisputeViolationRecordMaxFields.update_time_in":
		if e.complexity.DisputeViolationRecordMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.UpdateTimeIn(childComplexity), true

	case "DisputeViolationRecordMaxFields.updated_at":
		if e.complexity.DisputeViolationRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.UpdatedAt(childComplexity), true

	case "DisputeViolationRecordMaxFields.updated_by":
		if e.complexity.DisputeViolationRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.UpdatedBy(childComplexity), true

	case "DisputeViolationRecordMaxFields.vehicle_manager_id_card":
		if e.complexity.DisputeViolationRecordMaxFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.VehicleManagerIDCard(childComplexity), true

	case "DisputeViolationRecordMaxFields.violation_detail_id":
		if e.complexity.DisputeViolationRecordMaxFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.ViolationDetailID(childComplexity), true

	case "DisputeViolationRecordMaxFields.witness":
		if e.complexity.DisputeViolationRecordMaxFields.Witness == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.Witness(childComplexity), true

	case "DisputeViolationRecordMaxFields.written_application_materials":
		if e.complexity.DisputeViolationRecordMaxFields.WrittenApplicationMaterials == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMaxFields.WrittenApplicationMaterials(childComplexity), true

	case "DisputeViolationRecordMinFields.agent_id_number":
		if e.complexity.DisputeViolationRecordMinFields.AgentIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.AgentIDNumber(childComplexity), true

	case "DisputeViolationRecordMinFields.approve_state":
		if e.complexity.DisputeViolationRecordMinFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordMinFields.business_license":
		if e.complexity.DisputeViolationRecordMinFields.BusinessLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.BusinessLicense(childComplexity), true

	case "DisputeViolationRecordMinFields.contact_address":
		if e.complexity.DisputeViolationRecordMinFields.ContactAddress == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ContactAddress(childComplexity), true

	case "DisputeViolationRecordMinFields.created_at":
		if e.complexity.DisputeViolationRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.CreatedAt(childComplexity), true

	case "DisputeViolationRecordMinFields.created_by":
		if e.complexity.DisputeViolationRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.CreatedBy(childComplexity), true

	case "DisputeViolationRecordMinFields.deleted_at":
		if e.complexity.DisputeViolationRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DeletedAt(childComplexity), true

	case "DisputeViolationRecordMinFields.deleted_by":
		if e.complexity.DisputeViolationRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DeletedBy(childComplexity), true

	case "DisputeViolationRecordMinFields.dispute_violation_id":
		if e.complexity.DisputeViolationRecordMinFields.DisputeViolationID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DisputeViolationID(childComplexity), true

	case "DisputeViolationRecordMinFields.driver_license":
		if e.complexity.DisputeViolationRecordMinFields.DriverLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DriverLicense(childComplexity), true

	case "DisputeViolationRecordMinFields.driving_license":
		if e.complexity.DisputeViolationRecordMinFields.DrivingLicense == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DrivingLicense(childComplexity), true

	case "DisputeViolationRecordMinFields.driving_log":
		if e.complexity.DisputeViolationRecordMinFields.DrivingLog == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.DrivingLog(childComplexity), true

	case "DisputeViolationRecordMinFields.id":
		if e.complexity.DisputeViolationRecordMinFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ID(childComplexity), true

	case "DisputeViolationRecordMinFields.id_card":
		if e.complexity.DisputeViolationRecordMinFields.IDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.IDCard(childComplexity), true

	case "DisputeViolationRecordMinFields.is_deleted":
		if e.complexity.DisputeViolationRecordMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.IsDeleted(childComplexity), true

	case "DisputeViolationRecordMinFields.labor_contract":
		if e.complexity.DisputeViolationRecordMinFields.LaborContract == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.LaborContract(childComplexity), true

	case "DisputeViolationRecordMinFields.legal_person_id_number":
		if e.complexity.DisputeViolationRecordMinFields.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.LegalPersonIDNumber(childComplexity), true

	case "DisputeViolationRecordMinFields.organization_code":
		if e.complexity.DisputeViolationRecordMinFields.OrganizationCode == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.OrganizationCode(childComplexity), true

	case "DisputeViolationRecordMinFields.other_evidence":
		if e.complexity.DisputeViolationRecordMinFields.OtherEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.OtherEvidence(childComplexity), true

	case "DisputeViolationRecordMinFields.pic_evidence":
		if e.complexity.DisputeViolationRecordMinFields.PicEvidence == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.PicEvidence(childComplexity), true

	case "DisputeViolationRecordMinFields.statement":
		if e.complexity.DisputeViolationRecordMinFields.Statement == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.Statement(childComplexity), true

	case "DisputeViolationRecordMinFields.update_time_in":
		if e.complexity.DisputeViolationRecordMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.UpdateTimeIn(childComplexity), true

	case "DisputeViolationRecordMinFields.updated_at":
		if e.complexity.DisputeViolationRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.UpdatedAt(childComplexity), true

	case "DisputeViolationRecordMinFields.updated_by":
		if e.complexity.DisputeViolationRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.UpdatedBy(childComplexity), true

	case "DisputeViolationRecordMinFields.vehicle_manager_id_card":
		if e.complexity.DisputeViolationRecordMinFields.VehicleManagerIDCard == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.VehicleManagerIDCard(childComplexity), true

	case "DisputeViolationRecordMinFields.violation_detail_id":
		if e.complexity.DisputeViolationRecordMinFields.ViolationDetailID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.ViolationDetailID(childComplexity), true

	case "DisputeViolationRecordMinFields.witness":
		if e.complexity.DisputeViolationRecordMinFields.Witness == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.Witness(childComplexity), true

	case "DisputeViolationRecordMinFields.written_application_materials":
		if e.complexity.DisputeViolationRecordMinFields.WrittenApplicationMaterials == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMinFields.WrittenApplicationMaterials(childComplexity), true

	case "DisputeViolationRecordMutationResponse.affected_rows":
		if e.complexity.DisputeViolationRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMutationResponse.AffectedRows(childComplexity), true

	case "DisputeViolationRecordMutationResponse.returning":
		if e.complexity.DisputeViolationRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DisputeViolationRecordMutationResponse.Returning(childComplexity), true

	case "DisputeViolationRecordStddevFields.approve_state":
		if e.complexity.DisputeViolationRecordStddevFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordStddevFields.id":
		if e.complexity.DisputeViolationRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevFields.ID(childComplexity), true

	case "DisputeViolationRecordStddevPopFields.approve_state":
		if e.complexity.DisputeViolationRecordStddevPopFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevPopFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordStddevPopFields.id":
		if e.complexity.DisputeViolationRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevPopFields.ID(childComplexity), true

	case "DisputeViolationRecordStddevSampFields.approve_state":
		if e.complexity.DisputeViolationRecordStddevSampFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevSampFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordStddevSampFields.id":
		if e.complexity.DisputeViolationRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordStddevSampFields.ID(childComplexity), true

	case "DisputeViolationRecordSumFields.approve_state":
		if e.complexity.DisputeViolationRecordSumFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordSumFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordSumFields.id":
		if e.complexity.DisputeViolationRecordSumFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordSumFields.ID(childComplexity), true

	case "DisputeViolationRecordVarPopFields.approve_state":
		if e.complexity.DisputeViolationRecordVarPopFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarPopFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordVarPopFields.id":
		if e.complexity.DisputeViolationRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarPopFields.ID(childComplexity), true

	case "DisputeViolationRecordVarSampFields.approve_state":
		if e.complexity.DisputeViolationRecordVarSampFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarSampFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordVarSampFields.id":
		if e.complexity.DisputeViolationRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarSampFields.ID(childComplexity), true

	case "DisputeViolationRecordVarianceFields.approve_state":
		if e.complexity.DisputeViolationRecordVarianceFields.ApproveState == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarianceFields.ApproveState(childComplexity), true

	case "DisputeViolationRecordVarianceFields.id":
		if e.complexity.DisputeViolationRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.DisputeViolationRecordVarianceFields.ID(childComplexity), true

	case "DrivingLogInfo.cause":
		if e.complexity.DrivingLogInfo.Cause == nil {
			break
		}

		return e.complexity.DrivingLogInfo.Cause(childComplexity), true

	case "DrivingLogInfo.created_at":
		if e.complexity.DrivingLogInfo.CreatedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfo.CreatedAt(childComplexity), true

	case "DrivingLogInfo.created_by":
		if e.complexity.DrivingLogInfo.CreatedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfo.CreatedBy(childComplexity), true

	case "DrivingLogInfo.deleted_at":
		if e.complexity.DrivingLogInfo.DeletedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfo.DeletedAt(childComplexity), true

	case "DrivingLogInfo.deleted_by":
		if e.complexity.DrivingLogInfo.DeletedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfo.DeletedBy(childComplexity), true

	case "DrivingLogInfo.driver_id":
		if e.complexity.DrivingLogInfo.DriverID == nil {
			break
		}

		return e.complexity.DrivingLogInfo.DriverID(childComplexity), true

	case "DrivingLogInfo.driving_end_time":
		if e.complexity.DrivingLogInfo.DrivingEndTime == nil {
			break
		}

		return e.complexity.DrivingLogInfo.DrivingEndTime(childComplexity), true

	case "DrivingLogInfo.driving_log_info_id":
		if e.complexity.DrivingLogInfo.DrivingLogInfoID == nil {
			break
		}

		return e.complexity.DrivingLogInfo.DrivingLogInfoID(childComplexity), true

	case "DrivingLogInfo.driving_start_time":
		if e.complexity.DrivingLogInfo.DrivingStartTime == nil {
			break
		}

		return e.complexity.DrivingLogInfo.DrivingStartTime(childComplexity), true

	case "DrivingLogInfo.end_time":
		if e.complexity.DrivingLogInfo.EndTime == nil {
			break
		}

		return e.complexity.DrivingLogInfo.EndTime(childComplexity), true

	case "DrivingLogInfo.id":
		if e.complexity.DrivingLogInfo.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfo.ID(childComplexity), true

	case "DrivingLogInfo.is_markup":
		if e.complexity.DrivingLogInfo.IsMarkup == nil {
			break
		}

		return e.complexity.DrivingLogInfo.IsMarkup(childComplexity), true

	case "DrivingLogInfo.remarks":
		if e.complexity.DrivingLogInfo.Remarks == nil {
			break
		}

		return e.complexity.DrivingLogInfo.Remarks(childComplexity), true

	case "DrivingLogInfo.review_agecy_level":
		if e.complexity.DrivingLogInfo.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfo.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfo.review_status":
		if e.complexity.DrivingLogInfo.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfo.ReviewStatus(childComplexity), true

	case "DrivingLogInfo.route":
		if e.complexity.DrivingLogInfo.Route == nil {
			break
		}

		return e.complexity.DrivingLogInfo.Route(childComplexity), true

	case "DrivingLogInfo.start_time":
		if e.complexity.DrivingLogInfo.StartTime == nil {
			break
		}

		return e.complexity.DrivingLogInfo.StartTime(childComplexity), true

	case "DrivingLogInfo.updated_at":
		if e.complexity.DrivingLogInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfo.UpdatedAt(childComplexity), true

	case "DrivingLogInfo.updated_by":
		if e.complexity.DrivingLogInfo.UpdatedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfo.UpdatedBy(childComplexity), true

	case "DrivingLogInfo.vehicle_id":
		if e.complexity.DrivingLogInfo.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLogInfo.VehicleID(childComplexity), true

	case "DrivingLogInfoAggregate.aggregate":
		if e.complexity.DrivingLogInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregate.Aggregate(childComplexity), true

	case "DrivingLogInfoAggregateFields.avg":
		if e.complexity.DrivingLogInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Avg(childComplexity), true

	case "DrivingLogInfoAggregateFields.count":
		if e.complexity.DrivingLogInfoAggregateFields.Count == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Count(childComplexity), true

	case "DrivingLogInfoAggregateFields.max":
		if e.complexity.DrivingLogInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Max(childComplexity), true

	case "DrivingLogInfoAggregateFields.min":
		if e.complexity.DrivingLogInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Min(childComplexity), true

	case "DrivingLogInfoAggregateFields.stddev":
		if e.complexity.DrivingLogInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Stddev(childComplexity), true

	case "DrivingLogInfoAggregateFields.stddev_pop":
		if e.complexity.DrivingLogInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.StddevPop(childComplexity), true

	case "DrivingLogInfoAggregateFields.stddev_samp":
		if e.complexity.DrivingLogInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.StddevSamp(childComplexity), true

	case "DrivingLogInfoAggregateFields.sum":
		if e.complexity.DrivingLogInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Sum(childComplexity), true

	case "DrivingLogInfoAggregateFields.var_pop":
		if e.complexity.DrivingLogInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.VarPop(childComplexity), true

	case "DrivingLogInfoAggregateFields.var_samp":
		if e.complexity.DrivingLogInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.VarSamp(childComplexity), true

	case "DrivingLogInfoAggregateFields.variance":
		if e.complexity.DrivingLogInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DrivingLogInfoAggregateFields.Variance(childComplexity), true

	case "DrivingLogInfoAvgFields.id":
		if e.complexity.DrivingLogInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoAvgFields.ID(childComplexity), true

	case "DrivingLogInfoAvgFields.review_agecy_level":
		if e.complexity.DrivingLogInfoAvgFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoAvgFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoAvgFields.review_status":
		if e.complexity.DrivingLogInfoAvgFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoAvgFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoMaxFields.cause":
		if e.complexity.DrivingLogInfoMaxFields.Cause == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.Cause(childComplexity), true

	case "DrivingLogInfoMaxFields.created_at":
		if e.complexity.DrivingLogInfoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.CreatedAt(childComplexity), true

	case "DrivingLogInfoMaxFields.created_by":
		if e.complexity.DrivingLogInfoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.CreatedBy(childComplexity), true

	case "DrivingLogInfoMaxFields.deleted_at":
		if e.complexity.DrivingLogInfoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.DeletedAt(childComplexity), true

	case "DrivingLogInfoMaxFields.deleted_by":
		if e.complexity.DrivingLogInfoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.DeletedBy(childComplexity), true

	case "DrivingLogInfoMaxFields.driver_id":
		if e.complexity.DrivingLogInfoMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.DriverID(childComplexity), true

	case "DrivingLogInfoMaxFields.driving_end_time":
		if e.complexity.DrivingLogInfoMaxFields.DrivingEndTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.DrivingEndTime(childComplexity), true

	case "DrivingLogInfoMaxFields.driving_log_info_id":
		if e.complexity.DrivingLogInfoMaxFields.DrivingLogInfoID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.DrivingLogInfoID(childComplexity), true

	case "DrivingLogInfoMaxFields.driving_start_time":
		if e.complexity.DrivingLogInfoMaxFields.DrivingStartTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.DrivingStartTime(childComplexity), true

	case "DrivingLogInfoMaxFields.end_time":
		if e.complexity.DrivingLogInfoMaxFields.EndTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.EndTime(childComplexity), true

	case "DrivingLogInfoMaxFields.id":
		if e.complexity.DrivingLogInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.ID(childComplexity), true

	case "DrivingLogInfoMaxFields.is_markup":
		if e.complexity.DrivingLogInfoMaxFields.IsMarkup == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.IsMarkup(childComplexity), true

	case "DrivingLogInfoMaxFields.remarks":
		if e.complexity.DrivingLogInfoMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.Remarks(childComplexity), true

	case "DrivingLogInfoMaxFields.review_agecy_level":
		if e.complexity.DrivingLogInfoMaxFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoMaxFields.review_status":
		if e.complexity.DrivingLogInfoMaxFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoMaxFields.route":
		if e.complexity.DrivingLogInfoMaxFields.Route == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.Route(childComplexity), true

	case "DrivingLogInfoMaxFields.start_time":
		if e.complexity.DrivingLogInfoMaxFields.StartTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.StartTime(childComplexity), true

	case "DrivingLogInfoMaxFields.updated_at":
		if e.complexity.DrivingLogInfoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.UpdatedAt(childComplexity), true

	case "DrivingLogInfoMaxFields.updated_by":
		if e.complexity.DrivingLogInfoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.UpdatedBy(childComplexity), true

	case "DrivingLogInfoMaxFields.vehicle_id":
		if e.complexity.DrivingLogInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMaxFields.VehicleID(childComplexity), true

	case "DrivingLogInfoMinFields.cause":
		if e.complexity.DrivingLogInfoMinFields.Cause == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.Cause(childComplexity), true

	case "DrivingLogInfoMinFields.created_at":
		if e.complexity.DrivingLogInfoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.CreatedAt(childComplexity), true

	case "DrivingLogInfoMinFields.created_by":
		if e.complexity.DrivingLogInfoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.CreatedBy(childComplexity), true

	case "DrivingLogInfoMinFields.deleted_at":
		if e.complexity.DrivingLogInfoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.DeletedAt(childComplexity), true

	case "DrivingLogInfoMinFields.deleted_by":
		if e.complexity.DrivingLogInfoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.DeletedBy(childComplexity), true

	case "DrivingLogInfoMinFields.driver_id":
		if e.complexity.DrivingLogInfoMinFields.DriverID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.DriverID(childComplexity), true

	case "DrivingLogInfoMinFields.driving_end_time":
		if e.complexity.DrivingLogInfoMinFields.DrivingEndTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.DrivingEndTime(childComplexity), true

	case "DrivingLogInfoMinFields.driving_log_info_id":
		if e.complexity.DrivingLogInfoMinFields.DrivingLogInfoID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.DrivingLogInfoID(childComplexity), true

	case "DrivingLogInfoMinFields.driving_start_time":
		if e.complexity.DrivingLogInfoMinFields.DrivingStartTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.DrivingStartTime(childComplexity), true

	case "DrivingLogInfoMinFields.end_time":
		if e.complexity.DrivingLogInfoMinFields.EndTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.EndTime(childComplexity), true

	case "DrivingLogInfoMinFields.id":
		if e.complexity.DrivingLogInfoMinFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.ID(childComplexity), true

	case "DrivingLogInfoMinFields.is_markup":
		if e.complexity.DrivingLogInfoMinFields.IsMarkup == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.IsMarkup(childComplexity), true

	case "DrivingLogInfoMinFields.remarks":
		if e.complexity.DrivingLogInfoMinFields.Remarks == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.Remarks(childComplexity), true

	case "DrivingLogInfoMinFields.review_agecy_level":
		if e.complexity.DrivingLogInfoMinFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoMinFields.review_status":
		if e.complexity.DrivingLogInfoMinFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoMinFields.route":
		if e.complexity.DrivingLogInfoMinFields.Route == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.Route(childComplexity), true

	case "DrivingLogInfoMinFields.start_time":
		if e.complexity.DrivingLogInfoMinFields.StartTime == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.StartTime(childComplexity), true

	case "DrivingLogInfoMinFields.updated_at":
		if e.complexity.DrivingLogInfoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.UpdatedAt(childComplexity), true

	case "DrivingLogInfoMinFields.updated_by":
		if e.complexity.DrivingLogInfoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.UpdatedBy(childComplexity), true

	case "DrivingLogInfoMinFields.vehicle_id":
		if e.complexity.DrivingLogInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLogInfoMinFields.VehicleID(childComplexity), true

	case "DrivingLogInfoMutationResponse.affected_rows":
		if e.complexity.DrivingLogInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DrivingLogInfoMutationResponse.AffectedRows(childComplexity), true

	case "DrivingLogInfoMutationResponse.returning":
		if e.complexity.DrivingLogInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DrivingLogInfoMutationResponse.Returning(childComplexity), true

	case "DrivingLogInfoStddevFields.id":
		if e.complexity.DrivingLogInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevFields.ID(childComplexity), true

	case "DrivingLogInfoStddevFields.review_agecy_level":
		if e.complexity.DrivingLogInfoStddevFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoStddevFields.review_status":
		if e.complexity.DrivingLogInfoStddevFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoStddevPopFields.id":
		if e.complexity.DrivingLogInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevPopFields.ID(childComplexity), true

	case "DrivingLogInfoStddevPopFields.review_agecy_level":
		if e.complexity.DrivingLogInfoStddevPopFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevPopFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoStddevPopFields.review_status":
		if e.complexity.DrivingLogInfoStddevPopFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevPopFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoStddevSampFields.id":
		if e.complexity.DrivingLogInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevSampFields.ID(childComplexity), true

	case "DrivingLogInfoStddevSampFields.review_agecy_level":
		if e.complexity.DrivingLogInfoStddevSampFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevSampFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoStddevSampFields.review_status":
		if e.complexity.DrivingLogInfoStddevSampFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoStddevSampFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoSumFields.id":
		if e.complexity.DrivingLogInfoSumFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoSumFields.ID(childComplexity), true

	case "DrivingLogInfoSumFields.review_agecy_level":
		if e.complexity.DrivingLogInfoSumFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoSumFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoSumFields.review_status":
		if e.complexity.DrivingLogInfoSumFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoSumFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoVarPopFields.id":
		if e.complexity.DrivingLogInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarPopFields.ID(childComplexity), true

	case "DrivingLogInfoVarPopFields.review_agecy_level":
		if e.complexity.DrivingLogInfoVarPopFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarPopFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoVarPopFields.review_status":
		if e.complexity.DrivingLogInfoVarPopFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarPopFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoVarSampFields.id":
		if e.complexity.DrivingLogInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarSampFields.ID(childComplexity), true

	case "DrivingLogInfoVarSampFields.review_agecy_level":
		if e.complexity.DrivingLogInfoVarSampFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarSampFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoVarSampFields.review_status":
		if e.complexity.DrivingLogInfoVarSampFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarSampFields.ReviewStatus(childComplexity), true

	case "DrivingLogInfoVarianceFields.id":
		if e.complexity.DrivingLogInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarianceFields.ID(childComplexity), true

	case "DrivingLogInfoVarianceFields.review_agecy_level":
		if e.complexity.DrivingLogInfoVarianceFields.ReviewAgecyLevel == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarianceFields.ReviewAgecyLevel(childComplexity), true

	case "DrivingLogInfoVarianceFields.review_status":
		if e.complexity.DrivingLogInfoVarianceFields.ReviewStatus == nil {
			break
		}

		return e.complexity.DrivingLogInfoVarianceFields.ReviewStatus(childComplexity), true

	case "Mutation.delete_case_approval_review_call":
		if e.complexity.Mutation.DeleteCaseApprovalReviewCall == nil {
			break
		}

		args, err := ec.field_Mutation_delete_case_approval_review_call_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCaseApprovalReviewCall(childComplexity, args["where"].(model.CaseApprovalReviewCallBoolExp)), true

	case "Mutation.delete_case_approval_review_call_by_pk":
		if e.complexity.Mutation.DeleteCaseApprovalReviewCallByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_case_approval_review_call_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCaseApprovalReviewCallByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_case_approval_review_operation":
		if e.complexity.Mutation.DeleteCaseApprovalReviewOperation == nil {
			break
		}

		args, err := ec.field_Mutation_delete_case_approval_review_operation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCaseApprovalReviewOperation(childComplexity, args["where"].(model.CaseApprovalReviewOperationBoolExp)), true

	case "Mutation.delete_case_approval_review_operation_by_pk":
		if e.complexity.Mutation.DeleteCaseApprovalReviewOperationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_case_approval_review_operation_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCaseApprovalReviewOperationByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_dispute_violation_record":
		if e.complexity.Mutation.DeleteDisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecord(childComplexity, args["where"].(model.DisputeViolationRecordBoolExp)), true

	case "Mutation.delete_dispute_violation_record_by_pk":
		if e.complexity.Mutation.DeleteDisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_dispute_violation_record_log":
		if e.complexity.Mutation.DeleteDisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecordLog(childComplexity, args["where"].(model.DisputeViolationRecordLogBoolExp)), true

	case "Mutation.delete_dispute_violation_record_log_by_pk":
		if e.complexity.Mutation.DeleteDisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDisputeViolationRecordLogByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driving_log_info":
		if e.complexity.Mutation.DeleteDrivingLogInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driving_log_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDrivingLogInfo(childComplexity, args["where"].(model.DrivingLogInfoBoolExp)), true

	case "Mutation.delete_driving_log_info_by_pk":
		if e.complexity.Mutation.DeleteDrivingLogInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driving_log_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDrivingLogInfoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_driver_binding":
		if e.complexity.Mutation.DeleteVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDriverBinding(childComplexity, args["where"].(model.VehicleDriverBindingBoolExp)), true

	case "Mutation.delete_vehicle_driver_binding_by_pk":
		if e.complexity.Mutation.DeleteVehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDriverBindingByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_case_approval_review_call":
		if e.complexity.Mutation.InsertCaseApprovalReviewCall == nil {
			break
		}

		args, err := ec.field_Mutation_insert_case_approval_review_call_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertCaseApprovalReviewCall(childComplexity, args["objects"].([]*model.CaseApprovalReviewCallInsertInput)), true

	case "Mutation.insert_case_approval_review_call_one":
		if e.complexity.Mutation.InsertCaseApprovalReviewCallOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_case_approval_review_call_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertCaseApprovalReviewCallOne(childComplexity, args["objects"].(model.CaseApprovalReviewCallInsertInput)), true

	case "Mutation.insert_case_approval_review_operation":
		if e.complexity.Mutation.InsertCaseApprovalReviewOperation == nil {
			break
		}

		args, err := ec.field_Mutation_insert_case_approval_review_operation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertCaseApprovalReviewOperation(childComplexity, args["objects"].([]*model.CaseApprovalReviewOperationInsertInput)), true

	case "Mutation.insert_case_approval_review_operation_one":
		if e.complexity.Mutation.InsertCaseApprovalReviewOperationOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_case_approval_review_operation_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertCaseApprovalReviewOperationOne(childComplexity, args["objects"].(model.CaseApprovalReviewOperationInsertInput)), true

	case "Mutation.insert_dispute_violation_record":
		if e.complexity.Mutation.InsertDisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecord(childComplexity, args["objects"].([]*model.DisputeViolationRecordInsertInput)), true

	case "Mutation.insert_dispute_violation_record_log":
		if e.complexity.Mutation.InsertDisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecordLog(childComplexity, args["objects"].([]*model.DisputeViolationRecordLogInsertInput)), true

	case "Mutation.insert_dispute_violation_record_log_one":
		if e.complexity.Mutation.InsertDisputeViolationRecordLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecordLogOne(childComplexity, args["objects"].(model.DisputeViolationRecordLogInsertInput)), true

	case "Mutation.insert_dispute_violation_record_one":
		if e.complexity.Mutation.InsertDisputeViolationRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dispute_violation_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDisputeViolationRecordOne(childComplexity, args["objects"].(model.DisputeViolationRecordInsertInput)), true

	case "Mutation.insert_driving_log_info":
		if e.complexity.Mutation.InsertDrivingLogInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driving_log_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDrivingLogInfo(childComplexity, args["objects"].([]*model.DrivingLogInfoInsertInput)), true

	case "Mutation.insert_driving_log_info_one":
		if e.complexity.Mutation.InsertDrivingLogInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driving_log_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDrivingLogInfoOne(childComplexity, args["objects"].(model.DrivingLogInfoInsertInput)), true

	case "Mutation.insert_vehicle_driver_binding":
		if e.complexity.Mutation.InsertVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleDriverBinding(childComplexity, args["objects"].([]*model.VehicleDriverBindingInsertInput)), true

	case "Mutation.insert_vehicle_driver_binding_one":
		if e.complexity.Mutation.InsertVehicleDriverBindingOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_driver_binding_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleDriverBindingOne(childComplexity, args["objects"].(model.VehicleDriverBindingInsertInput)), true

	case "Mutation.update_case_approval_review_call":
		if e.complexity.Mutation.UpdateCaseApprovalReviewCall == nil {
			break
		}

		args, err := ec.field_Mutation_update_case_approval_review_call_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCaseApprovalReviewCall(childComplexity, args["_inc"].(*model.CaseApprovalReviewCallIncInput), args["_set"].(*model.CaseApprovalReviewCallSetInput), args["where"].(model.CaseApprovalReviewCallBoolExp)), true

	case "Mutation.update_case_approval_review_call_by_pk":
		if e.complexity.Mutation.UpdateCaseApprovalReviewCallByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_case_approval_review_call_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCaseApprovalReviewCallByPk(childComplexity, args["_inc"].(*model.CaseApprovalReviewCallIncInput), args["_set"].(*model.CaseApprovalReviewCallSetInput), args["id"].(int64)), true

	case "Mutation.update_case_approval_review_operation":
		if e.complexity.Mutation.UpdateCaseApprovalReviewOperation == nil {
			break
		}

		args, err := ec.field_Mutation_update_case_approval_review_operation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCaseApprovalReviewOperation(childComplexity, args["_inc"].(*model.CaseApprovalReviewOperationIncInput), args["_set"].(*model.CaseApprovalReviewOperationSetInput), args["where"].(model.CaseApprovalReviewOperationBoolExp)), true

	case "Mutation.update_case_approval_review_operation_by_pk":
		if e.complexity.Mutation.UpdateCaseApprovalReviewOperationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_case_approval_review_operation_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCaseApprovalReviewOperationByPk(childComplexity, args["_inc"].(*model.CaseApprovalReviewOperationIncInput), args["_set"].(*model.CaseApprovalReviewOperationSetInput), args["id"].(int64)), true

	case "Mutation.update_dispute_violation_record":
		if e.complexity.Mutation.UpdateDisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecord(childComplexity, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["where"].(model.DisputeViolationRecordBoolExp)), true

	case "Mutation.update_dispute_violation_record_by_pk":
		if e.complexity.Mutation.UpdateDisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecordByPk(childComplexity, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_dispute_violation_record_log":
		if e.complexity.Mutation.UpdateDisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecordLog(childComplexity, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["where"].(model.DisputeViolationRecordLogBoolExp)), true

	case "Mutation.update_dispute_violation_record_log_by_pk":
		if e.complexity.Mutation.UpdateDisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDisputeViolationRecordLogByPk(childComplexity, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["id"].(int64)), true

	case "Mutation.update_driving_log_info":
		if e.complexity.Mutation.UpdateDrivingLogInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_driving_log_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDrivingLogInfo(childComplexity, args["_inc"].(*model.DrivingLogInfoIncInput), args["_set"].(*model.DrivingLogInfoSetInput), args["where"].(model.DrivingLogInfoBoolExp)), true

	case "Mutation.update_driving_log_info_by_pk":
		if e.complexity.Mutation.UpdateDrivingLogInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driving_log_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDrivingLogInfoByPk(childComplexity, args["_inc"].(*model.DrivingLogInfoIncInput), args["_set"].(*model.DrivingLogInfoSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_driver_binding":
		if e.complexity.Mutation.UpdateVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDriverBinding(childComplexity, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["where"].(model.VehicleDriverBindingBoolExp)), true

	case "Mutation.update_vehicle_driver_binding_by_pk":
		if e.complexity.Mutation.UpdateVehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDriverBindingByPk(childComplexity, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["id"].(int64)), true

	case "Query.case_approval_review_call":
		if e.complexity.Query.CaseApprovalReviewCall == nil {
			break
		}

		args, err := ec.field_Query_case_approval_review_call_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CaseApprovalReviewCall(childComplexity, args["distinct_on"].([]model.CaseApprovalReviewCallSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewCallOrderBy), args["where"].(*model.CaseApprovalReviewCallBoolExp)), true

	case "Query.case_approval_review_call_aggregate":
		if e.complexity.Query.CaseApprovalReviewCallAggregate == nil {
			break
		}

		args, err := ec.field_Query_case_approval_review_call_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CaseApprovalReviewCallAggregate(childComplexity, args["distinct_on"].([]model.CaseApprovalReviewCallSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewCallOrderBy), args["where"].(*model.CaseApprovalReviewCallBoolExp)), true

	case "Query.case_approval_review_call_by_pk":
		if e.complexity.Query.CaseApprovalReviewCallByPk == nil {
			break
		}

		args, err := ec.field_Query_case_approval_review_call_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CaseApprovalReviewCallByPk(childComplexity, args["id"].(int64)), true

	case "Query.case_approval_review_operation":
		if e.complexity.Query.CaseApprovalReviewOperation == nil {
			break
		}

		args, err := ec.field_Query_case_approval_review_operation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CaseApprovalReviewOperation(childComplexity, args["distinct_on"].([]model.CaseApprovalReviewOperationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewOperationOrderBy), args["where"].(*model.CaseApprovalReviewOperationBoolExp)), true

	case "Query.case_approval_review_operation_aggregate":
		if e.complexity.Query.CaseApprovalReviewOperationAggregate == nil {
			break
		}

		args, err := ec.field_Query_case_approval_review_operation_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CaseApprovalReviewOperationAggregate(childComplexity, args["distinct_on"].([]model.CaseApprovalReviewOperationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewOperationOrderBy), args["where"].(*model.CaseApprovalReviewOperationBoolExp)), true

	case "Query.case_approval_review_operation_by_pk":
		if e.complexity.Query.CaseApprovalReviewOperationByPk == nil {
			break
		}

		args, err := ec.field_Query_case_approval_review_operation_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CaseApprovalReviewOperationByPk(childComplexity, args["id"].(int64)), true

	case "Query.dispute_violation_record":
		if e.complexity.Query.DisputeViolationRecord == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecord(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp)), true

	case "Query.dispute_violation_record_aggregate":
		if e.complexity.Query.DisputeViolationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordAggregate(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp)), true

	case "Query.dispute_violation_record_by_pk":
		if e.complexity.Query.DisputeViolationRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.dispute_violation_record_log":
		if e.complexity.Query.DisputeViolationRecordLog == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordLog(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp)), true

	case "Query.dispute_violation_record_log_aggregate":
		if e.complexity.Query.DisputeViolationRecordLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordLogAggregate(childComplexity, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp)), true

	case "Query.dispute_violation_record_log_by_pk":
		if e.complexity.Query.DisputeViolationRecordLogByPk == nil {
			break
		}

		args, err := ec.field_Query_dispute_violation_record_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DisputeViolationRecordLogByPk(childComplexity, args["id"].(int64)), true

	case "Query.driving_log_info":
		if e.complexity.Query.DrivingLogInfo == nil {
			break
		}

		args, err := ec.field_Query_driving_log_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DrivingLogInfo(childComplexity, args["distinct_on"].([]model.DrivingLogInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLogInfoOrderBy), args["where"].(*model.DrivingLogInfoBoolExp)), true

	case "Query.driving_log_info_aggregate":
		if e.complexity.Query.DrivingLogInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_driving_log_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DrivingLogInfoAggregate(childComplexity, args["distinct_on"].([]model.DrivingLogInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLogInfoOrderBy), args["where"].(*model.DrivingLogInfoBoolExp)), true

	case "Query.driving_log_info_by_pk":
		if e.complexity.Query.DrivingLogInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_driving_log_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DrivingLogInfoByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_driver_binding":
		if e.complexity.Query.VehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Query_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDriverBinding(childComplexity, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp)), true

	case "Query.vehicle_driver_binding_aggregate":
		if e.complexity.Query.VehicleDriverBindingAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_driver_binding_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDriverBindingAggregate(childComplexity, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp)), true

	case "Query.vehicle_driver_binding_by_pk":
		if e.complexity.Query.VehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDriverBindingByPk(childComplexity, args["id"].(int64)), true

	case "VehicleDriverBinding.created_at":
		if e.complexity.VehicleDriverBinding.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.CreatedAt(childComplexity), true

	case "VehicleDriverBinding.created_by":
		if e.complexity.VehicleDriverBinding.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.CreatedBy(childComplexity), true

	case "VehicleDriverBinding.deleted_at":
		if e.complexity.VehicleDriverBinding.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DeletedAt(childComplexity), true

	case "VehicleDriverBinding.deleted_by":
		if e.complexity.VehicleDriverBinding.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DeletedBy(childComplexity), true

	case "VehicleDriverBinding.driver_id":
		if e.complexity.VehicleDriverBinding.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DriverID(childComplexity), true

	case "VehicleDriverBinding.id":
		if e.complexity.VehicleDriverBinding.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.ID(childComplexity), true

	case "VehicleDriverBinding.is_deleted":
		if e.complexity.VehicleDriverBinding.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.IsDeleted(childComplexity), true

	case "VehicleDriverBinding.remarks":
		if e.complexity.VehicleDriverBinding.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.Remarks(childComplexity), true

	case "VehicleDriverBinding.updated_at":
		if e.complexity.VehicleDriverBinding.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.UpdatedAt(childComplexity), true

	case "VehicleDriverBinding.updated_by":
		if e.complexity.VehicleDriverBinding.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.UpdatedBy(childComplexity), true

	case "VehicleDriverBinding.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBinding.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.VehicleDriverBindingID(childComplexity), true

	case "VehicleDriverBinding.vehicle_id":
		if e.complexity.VehicleDriverBinding.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.VehicleID(childComplexity), true

	case "VehicleDriverBindingAggregate.aggregate":
		if e.complexity.VehicleDriverBindingAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregate.Aggregate(childComplexity), true

	case "VehicleDriverBindingAggregateFields.avg":
		if e.complexity.VehicleDriverBindingAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Avg(childComplexity), true

	case "VehicleDriverBindingAggregateFields.count":
		if e.complexity.VehicleDriverBindingAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Count(childComplexity), true

	case "VehicleDriverBindingAggregateFields.max":
		if e.complexity.VehicleDriverBindingAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Max(childComplexity), true

	case "VehicleDriverBindingAggregateFields.min":
		if e.complexity.VehicleDriverBindingAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Min(childComplexity), true

	case "VehicleDriverBindingAggregateFields.stddev":
		if e.complexity.VehicleDriverBindingAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Stddev(childComplexity), true

	case "VehicleDriverBindingAggregateFields.stddev_pop":
		if e.complexity.VehicleDriverBindingAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.StddevPop(childComplexity), true

	case "VehicleDriverBindingAggregateFields.stddev_samp":
		if e.complexity.VehicleDriverBindingAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.StddevSamp(childComplexity), true

	case "VehicleDriverBindingAggregateFields.sum":
		if e.complexity.VehicleDriverBindingAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Sum(childComplexity), true

	case "VehicleDriverBindingAggregateFields.var_pop":
		if e.complexity.VehicleDriverBindingAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.VarPop(childComplexity), true

	case "VehicleDriverBindingAggregateFields.var_samp":
		if e.complexity.VehicleDriverBindingAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.VarSamp(childComplexity), true

	case "VehicleDriverBindingAggregateFields.variance":
		if e.complexity.VehicleDriverBindingAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Variance(childComplexity), true

	case "VehicleDriverBindingAvgFields.id":
		if e.complexity.VehicleDriverBindingAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAvgFields.ID(childComplexity), true

	case "VehicleDriverBindingMaxFields.created_at":
		if e.complexity.VehicleDriverBindingMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.CreatedAt(childComplexity), true

	case "VehicleDriverBindingMaxFields.created_by":
		if e.complexity.VehicleDriverBindingMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.CreatedBy(childComplexity), true

	case "VehicleDriverBindingMaxFields.deleted_at":
		if e.complexity.VehicleDriverBindingMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.DeletedAt(childComplexity), true

	case "VehicleDriverBindingMaxFields.deleted_by":
		if e.complexity.VehicleDriverBindingMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.DeletedBy(childComplexity), true

	case "VehicleDriverBindingMaxFields.driver_id":
		if e.complexity.VehicleDriverBindingMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.DriverID(childComplexity), true

	case "VehicleDriverBindingMaxFields.id":
		if e.complexity.VehicleDriverBindingMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.ID(childComplexity), true

	case "VehicleDriverBindingMaxFields.is_deleted":
		if e.complexity.VehicleDriverBindingMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.IsDeleted(childComplexity), true

	case "VehicleDriverBindingMaxFields.remarks":
		if e.complexity.VehicleDriverBindingMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.Remarks(childComplexity), true

	case "VehicleDriverBindingMaxFields.updated_at":
		if e.complexity.VehicleDriverBindingMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.UpdatedAt(childComplexity), true

	case "VehicleDriverBindingMaxFields.updated_by":
		if e.complexity.VehicleDriverBindingMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.UpdatedBy(childComplexity), true

	case "VehicleDriverBindingMaxFields.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBindingMaxFields.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.VehicleDriverBindingID(childComplexity), true

	case "VehicleDriverBindingMaxFields.vehicle_id":
		if e.complexity.VehicleDriverBindingMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.VehicleID(childComplexity), true

	case "VehicleDriverBindingMinFields.created_at":
		if e.complexity.VehicleDriverBindingMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.CreatedAt(childComplexity), true

	case "VehicleDriverBindingMinFields.created_by":
		if e.complexity.VehicleDriverBindingMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.CreatedBy(childComplexity), true

	case "VehicleDriverBindingMinFields.deleted_at":
		if e.complexity.VehicleDriverBindingMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.DeletedAt(childComplexity), true

	case "VehicleDriverBindingMinFields.deleted_by":
		if e.complexity.VehicleDriverBindingMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.DeletedBy(childComplexity), true

	case "VehicleDriverBindingMinFields.driver_id":
		if e.complexity.VehicleDriverBindingMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.DriverID(childComplexity), true

	case "VehicleDriverBindingMinFields.id":
		if e.complexity.VehicleDriverBindingMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.ID(childComplexity), true

	case "VehicleDriverBindingMinFields.is_deleted":
		if e.complexity.VehicleDriverBindingMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.IsDeleted(childComplexity), true

	case "VehicleDriverBindingMinFields.remarks":
		if e.complexity.VehicleDriverBindingMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.Remarks(childComplexity), true

	case "VehicleDriverBindingMinFields.updated_at":
		if e.complexity.VehicleDriverBindingMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.UpdatedAt(childComplexity), true

	case "VehicleDriverBindingMinFields.updated_by":
		if e.complexity.VehicleDriverBindingMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.UpdatedBy(childComplexity), true

	case "VehicleDriverBindingMinFields.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBindingMinFields.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.VehicleDriverBindingID(childComplexity), true

	case "VehicleDriverBindingMinFields.vehicle_id":
		if e.complexity.VehicleDriverBindingMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.VehicleID(childComplexity), true

	case "VehicleDriverBindingMutationResponse.affected_rows":
		if e.complexity.VehicleDriverBindingMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMutationResponse.AffectedRows(childComplexity), true

	case "VehicleDriverBindingMutationResponse.returning":
		if e.complexity.VehicleDriverBindingMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMutationResponse.Returning(childComplexity), true

	case "VehicleDriverBindingStddevFields.id":
		if e.complexity.VehicleDriverBindingStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingStddevFields.ID(childComplexity), true

	case "VehicleDriverBindingStddevPopFields.id":
		if e.complexity.VehicleDriverBindingStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingStddevPopFields.ID(childComplexity), true

	case "VehicleDriverBindingStddevSampFields.id":
		if e.complexity.VehicleDriverBindingStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingStddevSampFields.ID(childComplexity), true

	case "VehicleDriverBindingSumFields.id":
		if e.complexity.VehicleDriverBindingSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingSumFields.ID(childComplexity), true

	case "VehicleDriverBindingVarPopFields.id":
		if e.complexity.VehicleDriverBindingVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingVarPopFields.ID(childComplexity), true

	case "VehicleDriverBindingVarSampFields.id":
		if e.complexity.VehicleDriverBindingVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingVarSampFields.ID(childComplexity), true

	case "VehicleDriverBindingVarianceFields.id":
		if e.complexity.VehicleDriverBindingVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/case_approval_review_call.graphqls", Input: `"""
案件审核审批电话告知
"""
type CaseApprovalReviewCall {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用              ( 联合主键                   )
	"""
	case_approval_review_call_id: String!
	"""
	 case_approval_review_operation 案件审批审核操作的case_approval_review_operation_id 
	"""
	case_approval_review_operation_id: String
	"""
	 电话号码                                                     
	"""
	telephone_number: String
	"""
	 拨打时间                                                     
	"""
	dial_time: Timestamptz
	"""
	 是否接通                                                     
	"""
	is_connected: Boolean
	"""
	 告知内容                                                     
	"""
	inform_content: String
	"""
	 审核人                                                       
	"""
	reviewer: String
	"""
	 审核时间                                                     
	"""
	review_time: Timestamptz
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "case_approval_review_call"
"""
type CaseApprovalReviewCallAggregate {
	aggregate: CaseApprovalReviewCallAggregateFields
}
"""
aggregate fields of "case_approval_review_call"
"""
type CaseApprovalReviewCallAggregateFields {
	avg: CaseApprovalReviewCallAvgFields
	count: Int
	max: CaseApprovalReviewCallMaxFields
	min: CaseApprovalReviewCallMinFields
	stddev: CaseApprovalReviewCallStddevFields
	stddev_pop: CaseApprovalReviewCallStddevPopFields
	stddev_samp: CaseApprovalReviewCallStddevSampFields
	sum: CaseApprovalReviewCallSumFields
	var_pop: CaseApprovalReviewCallVarPopFields
	var_samp: CaseApprovalReviewCallVarSampFields
	variance: CaseApprovalReviewCallVarianceFields
}
"""
aggregate avg on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallMaxFields {
	id: Bigint
	case_approval_review_call_id: String
	case_approval_review_operation_id: String
	telephone_number: String
	dial_time: Timestamptz
	is_connected: Boolean
	inform_content: String
	reviewer: String
	review_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallMinFields {
	id: Bigint
	case_approval_review_call_id: String
	case_approval_review_operation_id: String
	telephone_number: String
	dial_time: Timestamptz
	is_connected: Boolean
	inform_content: String
	reviewer: String
	review_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "case_approval_review_call"
"""
type CaseApprovalReviewCallVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "case_approval_review_call"
"""
type CaseApprovalReviewCallMutationResponse {
	affected_rows: Int!
	returning: [CaseApprovalReviewCall!]!
}
"""
ordering options when selecting data from "case_approval_review_call"
"""
input CaseApprovalReviewCallOrderBy {
	id: OrderBy
	case_approval_review_call_id: OrderBy
	case_approval_review_operation_id: OrderBy
	telephone_number: OrderBy
	dial_time: OrderBy
	is_connected: OrderBy
	inform_content: OrderBy
	reviewer: OrderBy
	review_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'case_approval_review_call'.
"""
input CaseApprovalReviewCallBoolExp {
	_and: [CaseApprovalReviewCallBoolExp]
	_not: CaseApprovalReviewCallBoolExp
	_or: [CaseApprovalReviewCallBoolExp]
	id: BigintComparisonExp
	case_approval_review_call_id: StringComparisonExp
	case_approval_review_operation_id: StringComparisonExp
	telephone_number: StringComparisonExp
	dial_time: TimestamptzComparisonExp
	is_connected: BooleanComparisonExp
	inform_content: StringComparisonExp
	reviewer: StringComparisonExp
	review_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "case_approval_review_call"
"""
input CaseApprovalReviewCallInsertInput {
	case_approval_review_operation_id: String
	telephone_number: String
	dial_time: Timestamptz
	is_connected: Boolean
	inform_content: String
	reviewer: String
	review_time: Timestamptz
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "case_approval_review_call"
"""
input CaseApprovalReviewCallIncInput {
	id: Bigint
}
"""
input type for updating data in table "case_approval_review_call"
"""
input CaseApprovalReviewCallSetInput {
	id: Bigint
	case_approval_review_call_id: String
	case_approval_review_operation_id: String
	telephone_number: String
	dial_time: Timestamptz
	is_connected: Boolean
	inform_content: String
	reviewer: String
	review_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum CaseApprovalReviewCallSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用              ( 联合主键                   )
	"""
	case_approval_review_call_id
	"""
	 case_approval_review_operation 案件审批审核操作的case_approval_review_operation_id 
	"""
	case_approval_review_operation_id
	"""
	 电话号码                                                     
	"""
	telephone_number
	"""
	 拨打时间                                                     
	"""
	dial_time
	"""
	 是否接通                                                     
	"""
	is_connected
	"""
	 告知内容                                                     
	"""
	inform_content
	"""
	 审核人                                                       
	"""
	reviewer
	"""
	 审核时间                                                     
	"""
	review_time
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	case_approval_review_call(distinct_on: [CaseApprovalReviewCallSelectColumn!], limit: Int, offset: Int, order_by: [CaseApprovalReviewCallOrderBy!], where: CaseApprovalReviewCallBoolExp): [CaseApprovalReviewCall!]!
	"""
	聚合查询
	"""
	case_approval_review_call_aggregate(distinct_on: [CaseApprovalReviewCallSelectColumn!], limit: Int, offset: Int, order_by: [CaseApprovalReviewCallOrderBy!], where: CaseApprovalReviewCallBoolExp): CaseApprovalReviewCallAggregate!
	"""
	主键查询
	"""
	case_approval_review_call_by_pk(id: Bigint!): CaseApprovalReviewCall!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_case_approval_review_call(where: CaseApprovalReviewCallBoolExp!): CaseApprovalReviewCallMutationResponse
	"""
	根据主键删除记录
	"""
	delete_case_approval_review_call_by_pk(id: Bigint!): CaseApprovalReviewCall
	"""
	插入
	"""
	insert_case_approval_review_call(objects: [CaseApprovalReviewCallInsertInput!]!): CaseApprovalReviewCallMutationResponse
	"""
	插入一条记录
	"""
	insert_case_approval_review_call_one(objects: CaseApprovalReviewCallInsertInput!): CaseApprovalReviewCall
	"""
	更新
	"""
	update_case_approval_review_call(_inc: CaseApprovalReviewCallIncInput, _set: CaseApprovalReviewCallSetInput, where: CaseApprovalReviewCallBoolExp!): CaseApprovalReviewCallMutationResponse
	"""
	更新
	"""
	update_case_approval_review_call_by_pk(_inc: CaseApprovalReviewCallIncInput, _set: CaseApprovalReviewCallSetInput, id: Bigint!): CaseApprovalReviewCall
}
`, BuiltIn: false},
	{Name: "graph/graphqls/case_approval_review_operation.graphqls", Input: `"""
案件审批审核操作
"""
type CaseApprovalReviewOperation {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	case_approval_review_operation_id: String!
	"""
	 审核意见                                        
	"""
	review_opinion: String
	"""
	 审核结果                                        
	"""
	review_result: String
	"""
	 审核人                                          
	"""
	reviewer: String
	"""
	 审核时间                                        
	"""
	review_time: Timestamptz
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "case_approval_review_operation"
"""
type CaseApprovalReviewOperationAggregate {
	aggregate: CaseApprovalReviewOperationAggregateFields
}
"""
aggregate fields of "case_approval_review_operation"
"""
type CaseApprovalReviewOperationAggregateFields {
	avg: CaseApprovalReviewOperationAvgFields
	count: Int
	max: CaseApprovalReviewOperationMaxFields
	min: CaseApprovalReviewOperationMinFields
	stddev: CaseApprovalReviewOperationStddevFields
	stddev_pop: CaseApprovalReviewOperationStddevPopFields
	stddev_samp: CaseApprovalReviewOperationStddevSampFields
	sum: CaseApprovalReviewOperationSumFields
	var_pop: CaseApprovalReviewOperationVarPopFields
	var_samp: CaseApprovalReviewOperationVarSampFields
	variance: CaseApprovalReviewOperationVarianceFields
}
"""
aggregate avg on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationMaxFields {
	id: Bigint
	case_approval_review_operation_id: String
	review_opinion: String
	review_result: String
	reviewer: String
	review_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationMinFields {
	id: Bigint
	case_approval_review_operation_id: String
	review_opinion: String
	review_result: String
	reviewer: String
	review_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "case_approval_review_operation"
"""
type CaseApprovalReviewOperationMutationResponse {
	affected_rows: Int!
	returning: [CaseApprovalReviewOperation!]!
}
"""
ordering options when selecting data from "case_approval_review_operation"
"""
input CaseApprovalReviewOperationOrderBy {
	id: OrderBy
	case_approval_review_operation_id: OrderBy
	review_opinion: OrderBy
	review_result: OrderBy
	reviewer: OrderBy
	review_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'case_approval_review_operation'.
"""
input CaseApprovalReviewOperationBoolExp {
	_and: [CaseApprovalReviewOperationBoolExp]
	_not: CaseApprovalReviewOperationBoolExp
	_or: [CaseApprovalReviewOperationBoolExp]
	id: BigintComparisonExp
	case_approval_review_operation_id: StringComparisonExp
	review_opinion: StringComparisonExp
	review_result: StringComparisonExp
	reviewer: StringComparisonExp
	review_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "case_approval_review_operation"
"""
input CaseApprovalReviewOperationInsertInput {
	review_opinion: String
	review_result: String
	reviewer: String
	review_time: Timestamptz
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "case_approval_review_operation"
"""
input CaseApprovalReviewOperationIncInput {
	id: Bigint
}
"""
input type for updating data in table "case_approval_review_operation"
"""
input CaseApprovalReviewOperationSetInput {
	id: Bigint
	case_approval_review_operation_id: String
	review_opinion: String
	review_result: String
	reviewer: String
	review_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum CaseApprovalReviewOperationSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	case_approval_review_operation_id
	"""
	 审核意见                                        
	"""
	review_opinion
	"""
	 审核结果                                        
	"""
	review_result
	"""
	 审核人                                          
	"""
	reviewer
	"""
	 审核时间                                        
	"""
	review_time
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	case_approval_review_operation(distinct_on: [CaseApprovalReviewOperationSelectColumn!], limit: Int, offset: Int, order_by: [CaseApprovalReviewOperationOrderBy!], where: CaseApprovalReviewOperationBoolExp): [CaseApprovalReviewOperation!]!
	"""
	聚合查询
	"""
	case_approval_review_operation_aggregate(distinct_on: [CaseApprovalReviewOperationSelectColumn!], limit: Int, offset: Int, order_by: [CaseApprovalReviewOperationOrderBy!], where: CaseApprovalReviewOperationBoolExp): CaseApprovalReviewOperationAggregate!
	"""
	主键查询
	"""
	case_approval_review_operation_by_pk(id: Bigint!): CaseApprovalReviewOperation!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_case_approval_review_operation(where: CaseApprovalReviewOperationBoolExp!): CaseApprovalReviewOperationMutationResponse
	"""
	根据主键删除记录
	"""
	delete_case_approval_review_operation_by_pk(id: Bigint!): CaseApprovalReviewOperation
	"""
	插入
	"""
	insert_case_approval_review_operation(objects: [CaseApprovalReviewOperationInsertInput!]!): CaseApprovalReviewOperationMutationResponse
	"""
	插入一条记录
	"""
	insert_case_approval_review_operation_one(objects: CaseApprovalReviewOperationInsertInput!): CaseApprovalReviewOperation
	"""
	更新
	"""
	update_case_approval_review_operation(_inc: CaseApprovalReviewOperationIncInput, _set: CaseApprovalReviewOperationSetInput, where: CaseApprovalReviewOperationBoolExp!): CaseApprovalReviewOperationMutationResponse
	"""
	更新
	"""
	update_case_approval_review_operation_by_pk(_inc: CaseApprovalReviewOperationIncInput, _set: CaseApprovalReviewOperationSetInput, id: Bigint!): CaseApprovalReviewOperation
}
`, BuiltIn: false},
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/dispute_violation_record.graphqls", Input: `"""
违章争议记录表
"""
type DisputeViolationRecord {
	"""
	 按指定方法生成                                               ( 主键                                                   )
	"""
	id: Bigint!
	"""
	 违章争议记录表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	"""
	dispute_violation_id: String!
	"""
	 违章明细表id                                                 ( vehicle_violation _details 表的violation_detail_id )
	"""
	violation_detail_id: String
	"""
	 书面申请材料                                                 
	"""
	written_application_materials: String
	"""
	 劳动合同或租赁合同                                           
	"""
	labor_contract: String
	"""
	 行车日志                                                     
	"""
	driving_log: String
	"""
	 证人证言                                                     
	"""
	witness: String
	"""
	 当事人陈述                                                   
	"""
	statement: String
	"""
	 图像证据材料                                                 
	"""
	pic_evidence: String
	"""
	 行为人驾驶证                                                 
	"""
	driver_license: String
	"""
	 机动车行驶证                                                 
	"""
	driving_license: String
	"""
	 行为人身份证                                                 
	"""
	id_card: String
	"""
	 机动车所有人营业执照                                         
	"""
	business_license: String
	"""
	 机动车所有人组织机构代码证                                   
	"""
	organization_code: String
	"""
	 法定代表人身份证                                             
	"""
	legal_person_id_number: String
	"""
	 委托代理人身份证                                             
	"""
	agent_id_number: String
	"""
	 机动车管理人身份证                                           
	"""
	vehicle_manager_id_card: String
	"""
	 其他证据材料                                                 
	"""
	other_evidence: String
	"""
	 审批状态                                                     ( 车辆违法审批状态字典                               )
	"""
	approve_state: Int
	"""
	 内网更新时间                                                 
	"""
	update_time_in: Timestamptz
	"""
	 联系地址                                                     
	"""
	contact_address: String
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id                             )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id                             )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id                             )
	"""
	deleted_by: String
	"""
	 是否删除                                                     
	"""
	is_deleted: Boolean
}
"""
aggregated selection of "dispute_violation_record"
"""
type DisputeViolationRecordAggregate {
	aggregate: DisputeViolationRecordAggregateFields
}
"""
aggregate fields of "dispute_violation_record"
"""
type DisputeViolationRecordAggregateFields {
	avg: DisputeViolationRecordAvgFields
	count: Int
	max: DisputeViolationRecordMaxFields
	min: DisputeViolationRecordMinFields
	stddev: DisputeViolationRecordStddevFields
	stddev_pop: DisputeViolationRecordStddevPopFields
	stddev_samp: DisputeViolationRecordStddevSampFields
	sum: DisputeViolationRecordSumFields
	var_pop: DisputeViolationRecordVarPopFields
	var_samp: DisputeViolationRecordVarSampFields
	variance: DisputeViolationRecordVarianceFields
}
"""
aggregate avg on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordAvgFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate max on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordMaxFields {
	id: Bigint
	dispute_violation_id: String
	violation_detail_id: String
	written_application_materials: String
	labor_contract: String
	driving_log: String
	witness: String
	statement: String
	pic_evidence: String
	driver_license: String
	driving_license: String
	id_card: String
	business_license: String
	organization_code: String
	legal_person_id_number: String
	agent_id_number: String
	vehicle_manager_id_card: String
	other_evidence: String
	approve_state: Int
	update_time_in: Timestamptz
	contact_address: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordMinFields {
	id: Bigint
	dispute_violation_id: String
	violation_detail_id: String
	written_application_materials: String
	labor_contract: String
	driving_log: String
	witness: String
	statement: String
	pic_evidence: String
	driver_license: String
	driving_license: String
	id_card: String
	business_license: String
	organization_code: String
	legal_person_id_number: String
	agent_id_number: String
	vehicle_manager_id_card: String
	other_evidence: String
	approve_state: Int
	update_time_in: Timestamptz
	contact_address: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordStddevFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate stddev_pop on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordStddevPopFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate stddev_samp on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordStddevSampFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate sum on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordSumFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate var_pop on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordVarPopFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate var_samp on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordVarSampFields {
	id: Bigint
	approve_state: Int
}
"""
aggregate variance on columns of table "dispute_violation_record"
"""
type DisputeViolationRecordVarianceFields {
	id: Bigint
	approve_state: Int
}
"""
response of any mutation on the table "dispute_violation_record"
"""
type DisputeViolationRecordMutationResponse {
	affected_rows: Int!
	returning: [DisputeViolationRecord!]!
}
"""
ordering options when selecting data from "dispute_violation_record"
"""
input DisputeViolationRecordOrderBy {
	id: OrderBy
	dispute_violation_id: OrderBy
	violation_detail_id: OrderBy
	written_application_materials: OrderBy
	labor_contract: OrderBy
	driving_log: OrderBy
	witness: OrderBy
	statement: OrderBy
	pic_evidence: OrderBy
	driver_license: OrderBy
	driving_license: OrderBy
	id_card: OrderBy
	business_license: OrderBy
	organization_code: OrderBy
	legal_person_id_number: OrderBy
	agent_id_number: OrderBy
	vehicle_manager_id_card: OrderBy
	other_evidence: OrderBy
	approve_state: OrderBy
	update_time_in: OrderBy
	contact_address: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dispute_violation_record'.
"""
input DisputeViolationRecordBoolExp {
	_and: [DisputeViolationRecordBoolExp]
	_not: DisputeViolationRecordBoolExp
	_or: [DisputeViolationRecordBoolExp]
	id: BigintComparisonExp
	dispute_violation_id: StringComparisonExp
	violation_detail_id: StringComparisonExp
	written_application_materials: StringComparisonExp
	labor_contract: StringComparisonExp
	driving_log: StringComparisonExp
	witness: StringComparisonExp
	statement: StringComparisonExp
	pic_evidence: StringComparisonExp
	driver_license: StringComparisonExp
	driving_license: StringComparisonExp
	id_card: StringComparisonExp
	business_license: StringComparisonExp
	organization_code: StringComparisonExp
	legal_person_id_number: StringComparisonExp
	agent_id_number: StringComparisonExp
	vehicle_manager_id_card: StringComparisonExp
	other_evidence: StringComparisonExp
	approve_state: IntComparisonExp
	update_time_in: TimestamptzComparisonExp
	contact_address: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "dispute_violation_record"
"""
input DisputeViolationRecordInsertInput {
	violation_detail_id: String
	written_application_materials: String
	labor_contract: String
	driving_log: String
	witness: String
	statement: String
	pic_evidence: String
	driver_license: String
	driving_license: String
	id_card: String
	business_license: String
	organization_code: String
	legal_person_id_number: String
	agent_id_number: String
	vehicle_manager_id_card: String
	other_evidence: String
	approve_state: Int
	update_time_in: Timestamptz
	contact_address: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
input type for incrementing integer column in table "dispute_violation_record"
"""
input DisputeViolationRecordIncInput {
	id: Bigint
	approve_state: Int
}
"""
input type for updating data in table "dispute_violation_record"
"""
input DisputeViolationRecordSetInput {
	id: Bigint
	dispute_violation_id: String
	violation_detail_id: String
	written_application_materials: String
	labor_contract: String
	driving_log: String
	witness: String
	statement: String
	pic_evidence: String
	driver_license: String
	driving_license: String
	id_card: String
	business_license: String
	organization_code: String
	legal_person_id_number: String
	agent_id_number: String
	vehicle_manager_id_card: String
	other_evidence: String
	approve_state: Int
	update_time_in: Timestamptz
	contact_address: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum DisputeViolationRecordSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                                                   )
	"""
	id
	"""
	 违章争议记录表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	"""
	dispute_violation_id
	"""
	 违章明细表id                                                 ( vehicle_violation _details 表的violation_detail_id )
	"""
	violation_detail_id
	"""
	 书面申请材料                                                 
	"""
	written_application_materials
	"""
	 劳动合同或租赁合同                                           
	"""
	labor_contract
	"""
	 行车日志                                                     
	"""
	driving_log
	"""
	 证人证言                                                     
	"""
	witness
	"""
	 当事人陈述                                                   
	"""
	statement
	"""
	 图像证据材料                                                 
	"""
	pic_evidence
	"""
	 行为人驾驶证                                                 
	"""
	driver_license
	"""
	 机动车行驶证                                                 
	"""
	driving_license
	"""
	 行为人身份证                                                 
	"""
	id_card
	"""
	 机动车所有人营业执照                                         
	"""
	business_license
	"""
	 机动车所有人组织机构代码证                                   
	"""
	organization_code
	"""
	 法定代表人身份证                                             
	"""
	legal_person_id_number
	"""
	 委托代理人身份证                                             
	"""
	agent_id_number
	"""
	 机动车管理人身份证                                           
	"""
	vehicle_manager_id_card
	"""
	 其他证据材料                                                 
	"""
	other_evidence
	"""
	 审批状态                                                     ( 车辆违法审批状态字典                               )
	"""
	approve_state
	"""
	 内网更新时间                                                 
	"""
	update_time_in
	"""
	 联系地址                                                     
	"""
	contact_address
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id                             )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id                             )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id                             )
	"""
	deleted_by
	"""
	 是否删除                                                     
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	dispute_violation_record(distinct_on: [DisputeViolationRecordSelectColumn!], limit: Int, offset: Int, order_by: [DisputeViolationRecordOrderBy!], where: DisputeViolationRecordBoolExp): [DisputeViolationRecord!]!
	"""
	聚合查询
	"""
	dispute_violation_record_aggregate(distinct_on: [DisputeViolationRecordSelectColumn!], limit: Int, offset: Int, order_by: [DisputeViolationRecordOrderBy!], where: DisputeViolationRecordBoolExp): DisputeViolationRecordAggregate!
	"""
	主键查询
	"""
	dispute_violation_record_by_pk(id: Bigint!): DisputeViolationRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_dispute_violation_record(where: DisputeViolationRecordBoolExp!): DisputeViolationRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_dispute_violation_record_by_pk(id: Bigint!): DisputeViolationRecord
	"""
	插入
	"""
	insert_dispute_violation_record(objects: [DisputeViolationRecordInsertInput!]!): DisputeViolationRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_dispute_violation_record_one(objects: DisputeViolationRecordInsertInput!): DisputeViolationRecord
	"""
	更新
	"""
	update_dispute_violation_record(_inc: DisputeViolationRecordIncInput, _set: DisputeViolationRecordSetInput, where: DisputeViolationRecordBoolExp!): DisputeViolationRecordMutationResponse
	"""
	更新
	"""
	update_dispute_violation_record_by_pk(_inc: DisputeViolationRecordIncInput, _set: DisputeViolationRecordSetInput, id: Bigint!): DisputeViolationRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/dispute_violation_record_log.graphqls", Input: `"""
违章争议审批日志表
"""
type DisputeViolationRecordLog {
	"""
	 按指定方法生成                                               ( 主键                                               )
	"""
	id: Bigint!
	"""
	 违章争议审批日志外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                           )
	"""
	dispute_violation_log_id: String!
	"""
	 违章争议记录表id                                             ( dispute_violation_record的dispute_violation_id )
	"""
	dispute_violation_id: String
	"""
	 审核人                                                       ( system_user表的user_id                         )
	"""
	reviewer: String
	"""
	 审核时间                                                     
	"""
	review_time: Timestamptz
	"""
	 审核意见                                                     
	"""
	review_opinion: String
	"""
	 审核结果                                                     
	"""
	review_result: String
	"""
	 审核动作名称                                                 
	"""
	review_action_name: String
	"""
	 审批人                                                       ( system_user表的user_id                         )
	"""
	approver: String
	"""
	 内网更新时间                                                 
	"""
	update_time_in: String
}
"""
aggregated selection of "dispute_violation_record_log"
"""
type DisputeViolationRecordLogAggregate {
	aggregate: DisputeViolationRecordLogAggregateFields
}
"""
aggregate fields of "dispute_violation_record_log"
"""
type DisputeViolationRecordLogAggregateFields {
	avg: DisputeViolationRecordLogAvgFields
	count: Int
	max: DisputeViolationRecordLogMaxFields
	min: DisputeViolationRecordLogMinFields
	stddev: DisputeViolationRecordLogStddevFields
	stddev_pop: DisputeViolationRecordLogStddevPopFields
	stddev_samp: DisputeViolationRecordLogStddevSampFields
	sum: DisputeViolationRecordLogSumFields
	var_pop: DisputeViolationRecordLogVarPopFields
	var_samp: DisputeViolationRecordLogVarSampFields
	variance: DisputeViolationRecordLogVarianceFields
}
"""
aggregate avg on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogMaxFields {
	id: Bigint
	dispute_violation_log_id: String
	dispute_violation_id: String
	reviewer: String
	review_time: Timestamptz
	review_opinion: String
	review_result: String
	review_action_name: String
	approver: String
	update_time_in: String
}
"""
aggregate min on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogMinFields {
	id: Bigint
	dispute_violation_log_id: String
	dispute_violation_id: String
	reviewer: String
	review_time: Timestamptz
	review_opinion: String
	review_result: String
	review_action_name: String
	approver: String
	update_time_in: String
}
"""
aggregate stddev on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "dispute_violation_record_log"
"""
type DisputeViolationRecordLogMutationResponse {
	affected_rows: Int!
	returning: [DisputeViolationRecordLog!]!
}
"""
ordering options when selecting data from "dispute_violation_record_log"
"""
input DisputeViolationRecordLogOrderBy {
	id: OrderBy
	dispute_violation_log_id: OrderBy
	dispute_violation_id: OrderBy
	reviewer: OrderBy
	review_time: OrderBy
	review_opinion: OrderBy
	review_result: OrderBy
	review_action_name: OrderBy
	approver: OrderBy
	update_time_in: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dispute_violation_record_log'.
"""
input DisputeViolationRecordLogBoolExp {
	_and: [DisputeViolationRecordLogBoolExp]
	_not: DisputeViolationRecordLogBoolExp
	_or: [DisputeViolationRecordLogBoolExp]
	id: BigintComparisonExp
	dispute_violation_log_id: StringComparisonExp
	dispute_violation_id: StringComparisonExp
	reviewer: StringComparisonExp
	review_time: TimestamptzComparisonExp
	review_opinion: StringComparisonExp
	review_result: StringComparisonExp
	review_action_name: StringComparisonExp
	approver: StringComparisonExp
	update_time_in: StringComparisonExp
}
"""
input type for inserting data into table "dispute_violation_record_log"
"""
input DisputeViolationRecordLogInsertInput {
	dispute_violation_id: String
	reviewer: String
	review_time: Timestamptz
	review_opinion: String
	review_result: String
	review_action_name: String
	approver: String
	update_time_in: String
}
"""
input type for incrementing integer column in table "dispute_violation_record_log"
"""
input DisputeViolationRecordLogIncInput {
	id: Bigint
}
"""
input type for updating data in table "dispute_violation_record_log"
"""
input DisputeViolationRecordLogSetInput {
	id: Bigint
	dispute_violation_log_id: String
	dispute_violation_id: String
	reviewer: String
	review_time: Timestamptz
	review_opinion: String
	review_result: String
	review_action_name: String
	approver: String
	update_time_in: String
}
"""
可选select
"""
enum DisputeViolationRecordLogSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                                               )
	"""
	id
	"""
	 违章争议审批日志外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                           )
	"""
	dispute_violation_log_id
	"""
	 违章争议记录表id                                             ( dispute_violation_record的dispute_violation_id )
	"""
	dispute_violation_id
	"""
	 审核人                                                       ( system_user表的user_id                         )
	"""
	reviewer
	"""
	 审核时间                                                     
	"""
	review_time
	"""
	 审核意见                                                     
	"""
	review_opinion
	"""
	 审核结果                                                     
	"""
	review_result
	"""
	 审核动作名称                                                 
	"""
	review_action_name
	"""
	 审批人                                                       ( system_user表的user_id                         )
	"""
	approver
	"""
	 内网更新时间                                                 
	"""
	update_time_in
}
extend type Query {
	"""
	列表查询
	"""
	dispute_violation_record_log(distinct_on: [DisputeViolationRecordLogSelectColumn!], limit: Int, offset: Int, order_by: [DisputeViolationRecordLogOrderBy!], where: DisputeViolationRecordLogBoolExp): [DisputeViolationRecordLog!]!
	"""
	聚合查询
	"""
	dispute_violation_record_log_aggregate(distinct_on: [DisputeViolationRecordLogSelectColumn!], limit: Int, offset: Int, order_by: [DisputeViolationRecordLogOrderBy!], where: DisputeViolationRecordLogBoolExp): DisputeViolationRecordLogAggregate!
	"""
	主键查询
	"""
	dispute_violation_record_log_by_pk(id: Bigint!): DisputeViolationRecordLog!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_dispute_violation_record_log(where: DisputeViolationRecordLogBoolExp!): DisputeViolationRecordLogMutationResponse
	"""
	根据主键删除记录
	"""
	delete_dispute_violation_record_log_by_pk(id: Bigint!): DisputeViolationRecordLog
	"""
	插入
	"""
	insert_dispute_violation_record_log(objects: [DisputeViolationRecordLogInsertInput!]!): DisputeViolationRecordLogMutationResponse
	"""
	插入一条记录
	"""
	insert_dispute_violation_record_log_one(objects: DisputeViolationRecordLogInsertInput!): DisputeViolationRecordLog
	"""
	更新
	"""
	update_dispute_violation_record_log(_inc: DisputeViolationRecordLogIncInput, _set: DisputeViolationRecordLogSetInput, where: DisputeViolationRecordLogBoolExp!): DisputeViolationRecordLogMutationResponse
	"""
	更新
	"""
	update_dispute_violation_record_log_by_pk(_inc: DisputeViolationRecordLogIncInput, _set: DisputeViolationRecordLogSetInput, id: Bigint!): DisputeViolationRecordLog
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driving_log_info.graphqls", Input: `"""
行车日志信息
"""
type DrivingLogInfo {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	driving_log_info_id: String!
	"""
	 车辆id                                          ( vehicle_info表的vehicle_id )
	"""
	vehicle_id: String
	"""
	 驾驶员id                                        ( driver_info表的driver_id   )
	"""
	driver_id: String
	"""
	 用车起始日期                                    
	"""
	driving_start_time: Timestamptz
	"""
	 用车结束日期                                    
	"""
	driving_end_time: Timestamptz
	"""
	 事由                                            
	"""
	cause: String
	"""
	 路线                                            
	"""
	route: String
	"""
	 备注                                            
	"""
	remarks: String
	"""
	 开始时间                                        
	"""
	start_time: String
	"""
	 结束时间                                        
	"""
	end_time: String
	"""
	 审核状态                                        
	"""
	review_status: Int
	"""
	 审核机构级别                                    
	"""
	review_agecy_level: Int
	"""
	 是否补录                                        
	"""
	is_markup: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by: String
}
"""
aggregated selection of "driving_log_info"
"""
type DrivingLogInfoAggregate {
	aggregate: DrivingLogInfoAggregateFields
}
"""
aggregate fields of "driving_log_info"
"""
type DrivingLogInfoAggregateFields {
	avg: DrivingLogInfoAvgFields
	count: Int
	max: DrivingLogInfoMaxFields
	min: DrivingLogInfoMinFields
	stddev: DrivingLogInfoStddevFields
	stddev_pop: DrivingLogInfoStddevPopFields
	stddev_samp: DrivingLogInfoStddevSampFields
	sum: DrivingLogInfoSumFields
	var_pop: DrivingLogInfoVarPopFields
	var_samp: DrivingLogInfoVarSampFields
	variance: DrivingLogInfoVarianceFields
}
"""
aggregate avg on columns of table "driving_log_info"
"""
type DrivingLogInfoAvgFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate max on columns of table "driving_log_info"
"""
type DrivingLogInfoMaxFields {
	id: Bigint
	driving_log_info_id: String
	vehicle_id: String
	driver_id: String
	driving_start_time: Timestamptz
	driving_end_time: Timestamptz
	cause: String
	route: String
	remarks: String
	start_time: String
	end_time: String
	review_status: Int
	review_agecy_level: Int
	is_markup: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driving_log_info"
"""
type DrivingLogInfoMinFields {
	id: Bigint
	driving_log_info_id: String
	vehicle_id: String
	driver_id: String
	driving_start_time: Timestamptz
	driving_end_time: Timestamptz
	cause: String
	route: String
	remarks: String
	start_time: String
	end_time: String
	review_status: Int
	review_agecy_level: Int
	is_markup: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driving_log_info"
"""
type DrivingLogInfoStddevFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate stddev_pop on columns of table "driving_log_info"
"""
type DrivingLogInfoStddevPopFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate stddev_samp on columns of table "driving_log_info"
"""
type DrivingLogInfoStddevSampFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate sum on columns of table "driving_log_info"
"""
type DrivingLogInfoSumFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate var_pop on columns of table "driving_log_info"
"""
type DrivingLogInfoVarPopFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate var_samp on columns of table "driving_log_info"
"""
type DrivingLogInfoVarSampFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
aggregate variance on columns of table "driving_log_info"
"""
type DrivingLogInfoVarianceFields {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
response of any mutation on the table "driving_log_info"
"""
type DrivingLogInfoMutationResponse {
	affected_rows: Int!
	returning: [DrivingLogInfo!]!
}
"""
ordering options when selecting data from "driving_log_info"
"""
input DrivingLogInfoOrderBy {
	id: OrderBy
	driving_log_info_id: OrderBy
	vehicle_id: OrderBy
	driver_id: OrderBy
	driving_start_time: OrderBy
	driving_end_time: OrderBy
	cause: OrderBy
	route: OrderBy
	remarks: OrderBy
	start_time: OrderBy
	end_time: OrderBy
	review_status: OrderBy
	review_agecy_level: OrderBy
	is_markup: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driving_log_info'.
"""
input DrivingLogInfoBoolExp {
	_and: [DrivingLogInfoBoolExp]
	_not: DrivingLogInfoBoolExp
	_or: [DrivingLogInfoBoolExp]
	id: BigintComparisonExp
	driving_log_info_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	driver_id: StringComparisonExp
	driving_start_time: TimestamptzComparisonExp
	driving_end_time: TimestamptzComparisonExp
	cause: StringComparisonExp
	route: StringComparisonExp
	remarks: StringComparisonExp
	start_time: StringComparisonExp
	end_time: StringComparisonExp
	review_status: IntComparisonExp
	review_agecy_level: IntComparisonExp
	is_markup: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driving_log_info"
"""
input DrivingLogInfoInsertInput {
	vehicle_id: String
	driver_id: String
	driving_start_time: Timestamptz
	driving_end_time: Timestamptz
	cause: String
	route: String
	remarks: String
	start_time: String
	end_time: String
	review_status: Int
	review_agecy_level: Int
	is_markup: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driving_log_info"
"""
input DrivingLogInfoIncInput {
	id: Bigint
	review_status: Int
	review_agecy_level: Int
}
"""
input type for updating data in table "driving_log_info"
"""
input DrivingLogInfoSetInput {
	id: Bigint
	driving_log_info_id: String
	vehicle_id: String
	driver_id: String
	driving_start_time: Timestamptz
	driving_end_time: Timestamptz
	cause: String
	route: String
	remarks: String
	start_time: String
	end_time: String
	review_status: Int
	review_agecy_level: Int
	is_markup: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DrivingLogInfoSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	driving_log_info_id
	"""
	 车辆id                                          ( vehicle_info表的vehicle_id )
	"""
	vehicle_id
	"""
	 驾驶员id                                        ( driver_info表的driver_id   )
	"""
	driver_id
	"""
	 用车起始日期                                    
	"""
	driving_start_time
	"""
	 用车结束日期                                    
	"""
	driving_end_time
	"""
	 事由                                            
	"""
	cause
	"""
	 路线                                            
	"""
	route
	"""
	 备注                                            
	"""
	remarks
	"""
	 开始时间                                        
	"""
	start_time
	"""
	 结束时间                                        
	"""
	end_time
	"""
	 审核状态                                        
	"""
	review_status
	"""
	 审核机构级别                                    
	"""
	review_agecy_level
	"""
	 是否补录                                        
	"""
	is_markup
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driving_log_info(distinct_on: [DrivingLogInfoSelectColumn!], limit: Int, offset: Int, order_by: [DrivingLogInfoOrderBy!], where: DrivingLogInfoBoolExp): [DrivingLogInfo!]!
	"""
	聚合查询
	"""
	driving_log_info_aggregate(distinct_on: [DrivingLogInfoSelectColumn!], limit: Int, offset: Int, order_by: [DrivingLogInfoOrderBy!], where: DrivingLogInfoBoolExp): DrivingLogInfoAggregate!
	"""
	主键查询
	"""
	driving_log_info_by_pk(id: Bigint!): DrivingLogInfo!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driving_log_info(where: DrivingLogInfoBoolExp!): DrivingLogInfoMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driving_log_info_by_pk(id: Bigint!): DrivingLogInfo
	"""
	插入
	"""
	insert_driving_log_info(objects: [DrivingLogInfoInsertInput!]!): DrivingLogInfoMutationResponse
	"""
	插入一条记录
	"""
	insert_driving_log_info_one(objects: DrivingLogInfoInsertInput!): DrivingLogInfo
	"""
	更新
	"""
	update_driving_log_info(_inc: DrivingLogInfoIncInput, _set: DrivingLogInfoSetInput, where: DrivingLogInfoBoolExp!): DrivingLogInfoMutationResponse
	"""
	更新
	"""
	update_driving_log_info_by_pk(_inc: DrivingLogInfoIncInput, _set: DrivingLogInfoSetInput, id: Bigint!): DrivingLogInfo
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_driver_binding.graphqls", Input: `"""
车辆驾驶员绑定表
"""
type VehicleDriverBinding {
	"""
	 按指定方法生成                                               ( 主键                           )
	"""
	id: Bigint!
	"""
	 车辆驾驶员绑定外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	vehicle_driver_binding_id: String!
	"""
	 驾驶员id                                                     ( driver_info表的driver_id   )
	"""
	driver_id: String
	"""
	 车辆id                                                       ( vehicle_info表的vehicle_id )
	"""
	vehicle_id: String
	"""
	 备注                                                         
	"""
	remarks: String
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id     )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id     )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id     )
	"""
	deleted_by: String
	"""
	 是否删除                                                     
	"""
	is_deleted: Boolean
}
"""
aggregated selection of "vehicle_driver_binding"
"""
type VehicleDriverBindingAggregate {
	aggregate: VehicleDriverBindingAggregateFields
}
"""
aggregate fields of "vehicle_driver_binding"
"""
type VehicleDriverBindingAggregateFields {
	avg: VehicleDriverBindingAvgFields
	count: Int
	max: VehicleDriverBindingMaxFields
	min: VehicleDriverBindingMinFields
	stddev: VehicleDriverBindingStddevFields
	stddev_pop: VehicleDriverBindingStddevPopFields
	stddev_samp: VehicleDriverBindingStddevSampFields
	sum: VehicleDriverBindingSumFields
	var_pop: VehicleDriverBindingVarPopFields
	var_samp: VehicleDriverBindingVarSampFields
	variance: VehicleDriverBindingVarianceFields
}
"""
aggregate avg on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingMaxFields {
	id: Bigint
	vehicle_driver_binding_id: String
	driver_id: String
	vehicle_id: String
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingMinFields {
	id: Bigint
	vehicle_driver_binding_id: String
	driver_id: String
	vehicle_id: String
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "vehicle_driver_binding"
"""
type VehicleDriverBindingVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "vehicle_driver_binding"
"""
type VehicleDriverBindingMutationResponse {
	affected_rows: Int!
	returning: [VehicleDriverBinding!]!
}
"""
ordering options when selecting data from "vehicle_driver_binding"
"""
input VehicleDriverBindingOrderBy {
	id: OrderBy
	vehicle_driver_binding_id: OrderBy
	driver_id: OrderBy
	vehicle_id: OrderBy
	remarks: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_driver_binding'.
"""
input VehicleDriverBindingBoolExp {
	_and: [VehicleDriverBindingBoolExp]
	_not: VehicleDriverBindingBoolExp
	_or: [VehicleDriverBindingBoolExp]
	id: BigintComparisonExp
	vehicle_driver_binding_id: StringComparisonExp
	driver_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	remarks: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "vehicle_driver_binding"
"""
input VehicleDriverBindingInsertInput {
	driver_id: String
	vehicle_id: String
	remarks: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
input type for incrementing integer column in table "vehicle_driver_binding"
"""
input VehicleDriverBindingIncInput {
	id: Bigint
}
"""
input type for updating data in table "vehicle_driver_binding"
"""
input VehicleDriverBindingSetInput {
	id: Bigint
	vehicle_driver_binding_id: String
	driver_id: String
	vehicle_id: String
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum VehicleDriverBindingSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                           )
	"""
	id
	"""
	 车辆驾驶员绑定外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	vehicle_driver_binding_id
	"""
	 驾驶员id                                                     ( driver_info表的driver_id   )
	"""
	driver_id
	"""
	 车辆id                                                       ( vehicle_info表的vehicle_id )
	"""
	vehicle_id
	"""
	 备注                                                         
	"""
	remarks
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id     )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id     )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id     )
	"""
	deleted_by
	"""
	 是否删除                                                     
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_driver_binding(distinct_on: [VehicleDriverBindingSelectColumn!], limit: Int, offset: Int, order_by: [VehicleDriverBindingOrderBy!], where: VehicleDriverBindingBoolExp): [VehicleDriverBinding!]!
	"""
	聚合查询
	"""
	vehicle_driver_binding_aggregate(distinct_on: [VehicleDriverBindingSelectColumn!], limit: Int, offset: Int, order_by: [VehicleDriverBindingOrderBy!], where: VehicleDriverBindingBoolExp): VehicleDriverBindingAggregate!
	"""
	主键查询
	"""
	vehicle_driver_binding_by_pk(id: Bigint!): VehicleDriverBinding!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_driver_binding(where: VehicleDriverBindingBoolExp!): VehicleDriverBindingMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_driver_binding_by_pk(id: Bigint!): VehicleDriverBinding
	"""
	插入
	"""
	insert_vehicle_driver_binding(objects: [VehicleDriverBindingInsertInput!]!): VehicleDriverBindingMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_driver_binding_one(objects: VehicleDriverBindingInsertInput!): VehicleDriverBinding
	"""
	更新
	"""
	update_vehicle_driver_binding(_inc: VehicleDriverBindingIncInput, _set: VehicleDriverBindingSetInput, where: VehicleDriverBindingBoolExp!): VehicleDriverBindingMutationResponse
	"""
	更新
	"""
	update_vehicle_driver_binding_by_pk(_inc: VehicleDriverBindingIncInput, _set: VehicleDriverBindingSetInput, id: Bigint!): VehicleDriverBinding
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_case_approval_review_call_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CaseApprovalReviewCallBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNCaseApprovalReviewCallBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_case_approval_review_call_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_case_approval_review_operation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CaseApprovalReviewOperationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNCaseApprovalReviewOperationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_case_approval_review_operation_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDisputeViolationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDisputeViolationRecordLogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driving_log_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DrivingLogInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDrivingLogInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driving_log_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleDriverBindingBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_case_approval_review_call_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.CaseApprovalReviewCallInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNCaseApprovalReviewCallInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_case_approval_review_call_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CaseApprovalReviewCallInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNCaseApprovalReviewCallInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_case_approval_review_operation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.CaseApprovalReviewOperationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNCaseApprovalReviewOperationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_case_approval_review_operation_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CaseApprovalReviewOperationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNCaseApprovalReviewOperationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DisputeViolationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDisputeViolationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DisputeViolationRecordLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDisputeViolationRecordLogInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDisputeViolationRecordLogInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dispute_violation_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DisputeViolationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDisputeViolationRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driving_log_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DrivingLogInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDrivingLogInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driving_log_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DrivingLogInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDrivingLogInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleDriverBindingInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleDriverBindingInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_driver_binding_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleDriverBindingInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleDriverBindingInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_case_approval_review_call_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CaseApprovalReviewCallIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOCaseApprovalReviewCallIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.CaseApprovalReviewCallSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOCaseApprovalReviewCallSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.CaseApprovalReviewCallBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNCaseApprovalReviewCallBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_case_approval_review_call_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CaseApprovalReviewCallIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOCaseApprovalReviewCallIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.CaseApprovalReviewCallSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOCaseApprovalReviewCallSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_case_approval_review_operation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CaseApprovalReviewOperationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOCaseApprovalReviewOperationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.CaseApprovalReviewOperationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOCaseApprovalReviewOperationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.CaseApprovalReviewOperationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNCaseApprovalReviewOperationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_case_approval_review_operation_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CaseApprovalReviewOperationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOCaseApprovalReviewOperationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.CaseApprovalReviewOperationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOCaseApprovalReviewOperationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODisputeViolationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODisputeViolationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDisputeViolationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODisputeViolationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODisputeViolationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODisputeViolationRecordLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODisputeViolationRecordLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDisputeViolationRecordLogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DisputeViolationRecordLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODisputeViolationRecordLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DisputeViolationRecordLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODisputeViolationRecordLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driving_log_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DrivingLogInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODrivingLogInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DrivingLogInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODrivingLogInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DrivingLogInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDrivingLogInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driving_log_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DrivingLogInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODrivingLogInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DrivingLogInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODrivingLogInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleDriverBindingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleDriverBindingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleDriverBindingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleDriverBindingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleDriverBindingBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleDriverBindingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleDriverBindingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleDriverBindingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleDriverBindingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_case_approval_review_call_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.CaseApprovalReviewCallSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOCaseApprovalReviewCallSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.CaseApprovalReviewCallOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCaseApprovalReviewCallOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.CaseApprovalReviewCallBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOCaseApprovalReviewCallBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_case_approval_review_call_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.CaseApprovalReviewCallSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOCaseApprovalReviewCallSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.CaseApprovalReviewCallOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCaseApprovalReviewCallOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.CaseApprovalReviewCallBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOCaseApprovalReviewCallBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_case_approval_review_call_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_case_approval_review_operation_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.CaseApprovalReviewOperationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOCaseApprovalReviewOperationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.CaseApprovalReviewOperationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCaseApprovalReviewOperationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.CaseApprovalReviewOperationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOCaseApprovalReviewOperationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_case_approval_review_operation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.CaseApprovalReviewOperationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOCaseApprovalReviewOperationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.CaseApprovalReviewOperationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOCaseApprovalReviewOperationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.CaseApprovalReviewOperationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOCaseApprovalReviewOperationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_case_approval_review_operation_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODisputeViolationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODisputeViolationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODisputeViolationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODisputeViolationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODisputeViolationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODisputeViolationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODisputeViolationRecordLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODisputeViolationRecordLogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODisputeViolationRecordLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DisputeViolationRecordLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODisputeViolationRecordLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DisputeViolationRecordLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODisputeViolationRecordLogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DisputeViolationRecordLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODisputeViolationRecordLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dispute_violation_record_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driving_log_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLogInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODrivingLogInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DrivingLogInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODrivingLogInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DrivingLogInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODrivingLogInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driving_log_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLogInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODrivingLogInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DrivingLogInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODrivingLogInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DrivingLogInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODrivingLogInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driving_log_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_driver_binding_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleDriverBindingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDriverBindingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleDriverBindingOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleDriverBindingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleDriverBindingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDriverBindingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleDriverBindingOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleDriverBindingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CaseApprovalReviewCall_id(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_case_approval_review_call_id(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewCallID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_case_approval_review_operation_id(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_telephone_number(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TelephoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_dial_time(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DialTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_is_connected(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConnected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_inform_content(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_reviewer(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCall_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewCall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallAggregateFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallAvgFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallMaxFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallMinFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallStddevFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallStddevPopFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallStddevSampFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallSumFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallVarPopFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallVarSampFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallVarianceFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_case_approval_review_call_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewCallID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_case_approval_review_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_telephone_number(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TelephoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_dial_time(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DialTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_is_connected(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConnected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_inform_content(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_case_approval_review_call_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewCallID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_case_approval_review_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_telephone_number(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TelephoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_dial_time(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DialTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_is_connected(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConnected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_inform_content(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.CaseApprovalReviewCall)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewCall2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCallᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewCallVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewCallVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewCallVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_id(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_case_approval_review_operation_id(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_review_result(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_reviewer(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperation_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.CaseApprovalReviewOperation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationAggregateFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationAvgFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationMaxFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationMinFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationStddevFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationStddevPopFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationStddevSampFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationSumFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationVarPopFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationVarSampFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationVarianceFields)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_case_approval_review_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_review_result(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_case_approval_review_operation_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseApprovalReviewOperationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_review_result(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.CaseApprovalReviewOperation)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewOperation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CaseApprovalReviewOperationVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.CaseApprovalReviewOperationVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CaseApprovalReviewOperationVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_written_application_materials(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrittenApplicationMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_driving_log(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_witness(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Witness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_statement(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_pic_evidence(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_driver_license(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_driving_license(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_business_license(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_organization_code(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_other_evidence(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_approve_state(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_contact_address(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecord_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordAggregateFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordAvgFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMaxFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMinFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordStddevFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordStddevPopFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordStddevSampFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordSumFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordVarPopFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordVarSampFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordVarianceFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordAvgFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_id(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_dispute_violation_log_id(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_reviewer(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_review_result(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_review_action_name(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewActionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_approver(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLog_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.DisputeViolationRecordLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogAggregateFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogAvgFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMaxFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMinFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogStddevFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogStddevPopFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogStddevSampFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogSumFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogVarPopFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogVarSampFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogVarianceFields)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_dispute_violation_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_review_result(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_review_action_name(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewActionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_approver(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_dispute_violation_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_reviewer(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_review_time(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_review_result(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_review_action_name(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewActionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_approver(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Approver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalNDisputeViolationRecordLog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordLogVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordLogVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_written_application_materials(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrittenApplicationMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_driving_log(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_witness(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Witness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_statement(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_pic_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_driver_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_driving_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_business_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_other_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_dispute_violation_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisputeViolationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_violation_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolationDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_written_application_materials(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrittenApplicationMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_driving_log(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_witness(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Witness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_statement(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Statement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_pic_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PicEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_driver_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_driving_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_business_license(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_vehicle_manager_id_card(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleManagerIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_other_evidence(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherEvidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalNDisputeViolationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordStddevFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordStddevPopFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordStddevSampFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordSumFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordVarPopFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordVarSampFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DisputeViolationRecordVarianceFields_approve_state(ctx context.Context, field graphql.CollectedField, obj *model.DisputeViolationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DisputeViolationRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproveState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_driving_log_info_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_driving_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_driving_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_cause(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_route(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_review_status(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_is_markup(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMarkup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfo_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLogInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoAggregateFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoAvgFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoMaxFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoMinFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoStddevFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoStddevPopFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoStddevSampFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoSumFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoVarPopFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoVarSampFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoVarianceFields)
	fc.Result = res
	return ec.marshalODrivingLogInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAvgFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoAvgFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_driving_log_info_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_driving_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_driving_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_route(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_is_markup(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMarkup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_driving_log_info_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_driving_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_driving_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_route(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_is_markup(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMarkup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLogInfo)
	fc.Result = res
	return ec.marshalNDrivingLogInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevPopFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevPopFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevSampFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoStddevSampFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoSumFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoSumFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarPopFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarPopFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarSampFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarSampFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarianceFields_review_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLogInfoVarianceFields_review_agecy_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLogInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewAgecyLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_case_approval_review_call(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_case_approval_review_call_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCaseApprovalReviewCall(rctx, args["where"].(model.CaseApprovalReviewCallBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallMutationResponse)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_case_approval_review_call_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_case_approval_review_call_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCaseApprovalReviewCallByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewCall)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_case_approval_review_call(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_case_approval_review_call_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertCaseApprovalReviewCall(rctx, args["objects"].([]*model.CaseApprovalReviewCallInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallMutationResponse)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_case_approval_review_call_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_case_approval_review_call_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertCaseApprovalReviewCallOne(rctx, args["objects"].(model.CaseApprovalReviewCallInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewCall)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_case_approval_review_call(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_case_approval_review_call_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCaseApprovalReviewCall(rctx, args["_inc"].(*model.CaseApprovalReviewCallIncInput), args["_set"].(*model.CaseApprovalReviewCallSetInput), args["where"].(model.CaseApprovalReviewCallBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallMutationResponse)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCallMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_case_approval_review_call_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_case_approval_review_call_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCaseApprovalReviewCallByPk(rctx, args["_inc"].(*model.CaseApprovalReviewCallIncInput), args["_set"].(*model.CaseApprovalReviewCallSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewCall)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_case_approval_review_operation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_case_approval_review_operation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCaseApprovalReviewOperation(rctx, args["where"].(model.CaseApprovalReviewOperationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationMutationResponse)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_case_approval_review_operation_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_case_approval_review_operation_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCaseApprovalReviewOperationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewOperation)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_case_approval_review_operation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_case_approval_review_operation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertCaseApprovalReviewOperation(rctx, args["objects"].([]*model.CaseApprovalReviewOperationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationMutationResponse)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_case_approval_review_operation_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_case_approval_review_operation_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertCaseApprovalReviewOperationOne(rctx, args["objects"].(model.CaseApprovalReviewOperationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewOperation)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_case_approval_review_operation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_case_approval_review_operation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCaseApprovalReviewOperation(rctx, args["_inc"].(*model.CaseApprovalReviewOperationIncInput), args["_set"].(*model.CaseApprovalReviewOperationSetInput), args["where"].(model.CaseApprovalReviewOperationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationMutationResponse)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_case_approval_review_operation_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_case_approval_review_operation_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCaseApprovalReviewOperationByPk(rctx, args["_inc"].(*model.CaseApprovalReviewOperationIncInput), args["_set"].(*model.CaseApprovalReviewOperationSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewOperation)
	fc.Result = res
	return ec.marshalOCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecord(rctx, args["where"].(model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMutationResponse)
	fc.Result = res
	return ec.marshalODisputeViolationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalODisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecord(rctx, args["objects"].([]*model.DisputeViolationRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMutationResponse)
	fc.Result = res
	return ec.marshalODisputeViolationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecordOne(rctx, args["objects"].(model.DisputeViolationRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalODisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecord(rctx, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["where"].(model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordMutationResponse)
	fc.Result = res
	return ec.marshalODisputeViolationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecordByPk(rctx, args["_inc"].(*model.DisputeViolationRecordIncInput), args["_set"].(*model.DisputeViolationRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalODisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecordLog(rctx, args["where"].(model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMutationResponse)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDisputeViolationRecordLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecordLog(rctx, args["objects"].([]*model.DisputeViolationRecordLogInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMutationResponse)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dispute_violation_record_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dispute_violation_record_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDisputeViolationRecordLogOne(rctx, args["objects"].(model.DisputeViolationRecordLogInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecordLog(rctx, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["where"].(model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogMutationResponse)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDisputeViolationRecordLogByPk(rctx, args["_inc"].(*model.DisputeViolationRecordLogIncInput), args["_set"].(*model.DisputeViolationRecordLogSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalODisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driving_log_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driving_log_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDrivingLogInfo(rctx, args["where"].(model.DrivingLogInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoMutationResponse)
	fc.Result = res
	return ec.marshalODrivingLogInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driving_log_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driving_log_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDrivingLogInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLogInfo)
	fc.Result = res
	return ec.marshalODrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driving_log_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driving_log_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDrivingLogInfo(rctx, args["objects"].([]*model.DrivingLogInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoMutationResponse)
	fc.Result = res
	return ec.marshalODrivingLogInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driving_log_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driving_log_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDrivingLogInfoOne(rctx, args["objects"].(model.DrivingLogInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLogInfo)
	fc.Result = res
	return ec.marshalODrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driving_log_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driving_log_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDrivingLogInfo(rctx, args["_inc"].(*model.DrivingLogInfoIncInput), args["_set"].(*model.DrivingLogInfoSetInput), args["where"].(model.DrivingLogInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoMutationResponse)
	fc.Result = res
	return ec.marshalODrivingLogInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driving_log_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driving_log_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDrivingLogInfoByPk(rctx, args["_inc"].(*model.DrivingLogInfoIncInput), args["_set"].(*model.DrivingLogInfoSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLogInfo)
	fc.Result = res
	return ec.marshalODrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDriverBinding(rctx, args["where"].(model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDriverBindingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleDriverBinding(rctx, args["objects"].([]*model.VehicleDriverBindingInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_driver_binding_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_driver_binding_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleDriverBindingOne(rctx, args["objects"].(model.VehicleDriverBindingInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDriverBinding(rctx, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["where"].(model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDriverBindingByPk(rctx, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_case_approval_review_call(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_case_approval_review_call_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CaseApprovalReviewCall(rctx, args["distinct_on"].([]model.CaseApprovalReviewCallSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewCallOrderBy), args["where"].(*model.CaseApprovalReviewCallBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.CaseApprovalReviewCall)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewCall2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCallᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_case_approval_review_call_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_case_approval_review_call_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CaseApprovalReviewCallAggregate(rctx, args["distinct_on"].([]model.CaseApprovalReviewCallSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewCallOrderBy), args["where"].(*model.CaseApprovalReviewCallBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewCallAggregate)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewCallAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_case_approval_review_call_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_case_approval_review_call_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CaseApprovalReviewCallByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewCall)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_case_approval_review_operation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_case_approval_review_operation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CaseApprovalReviewOperation(rctx, args["distinct_on"].([]model.CaseApprovalReviewOperationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewOperationOrderBy), args["where"].(*model.CaseApprovalReviewOperationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.CaseApprovalReviewOperation)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewOperation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_case_approval_review_operation_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_case_approval_review_operation_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CaseApprovalReviewOperationAggregate(rctx, args["distinct_on"].([]model.CaseApprovalReviewOperationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.CaseApprovalReviewOperationOrderBy), args["where"].(*model.CaseApprovalReviewOperationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CaseApprovalReviewOperationAggregate)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewOperationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_case_approval_review_operation_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_case_approval_review_operation_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CaseApprovalReviewOperationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.CaseApprovalReviewOperation)
	fc.Result = res
	return ec.marshalNCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecord(rctx, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalNDisputeViolationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordAggregate(rctx, args["distinct_on"].([]model.DisputeViolationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordOrderBy), args["where"].(*model.DisputeViolationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordAggregate)
	fc.Result = res
	return ec.marshalNDisputeViolationRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecord)
	fc.Result = res
	return ec.marshalNDisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordLog(rctx, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalNDisputeViolationRecordLog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordLogAggregate(rctx, args["distinct_on"].([]model.DisputeViolationRecordLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DisputeViolationRecordLogOrderBy), args["where"].(*model.DisputeViolationRecordLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DisputeViolationRecordLogAggregate)
	fc.Result = res
	return ec.marshalNDisputeViolationRecordLogAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dispute_violation_record_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dispute_violation_record_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DisputeViolationRecordLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DisputeViolationRecordLog)
	fc.Result = res
	return ec.marshalNDisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driving_log_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driving_log_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DrivingLogInfo(rctx, args["distinct_on"].([]model.DrivingLogInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLogInfoOrderBy), args["where"].(*model.DrivingLogInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLogInfo)
	fc.Result = res
	return ec.marshalNDrivingLogInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driving_log_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driving_log_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DrivingLogInfoAggregate(rctx, args["distinct_on"].([]model.DrivingLogInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLogInfoOrderBy), args["where"].(*model.DrivingLogInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogInfoAggregate)
	fc.Result = res
	return ec.marshalNDrivingLogInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driving_log_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driving_log_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DrivingLogInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLogInfo)
	fc.Result = res
	return ec.marshalNDrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDriverBinding(rctx, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_driver_binding_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_driver_binding_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDriverBindingAggregate(rctx, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingAggregate)
	fc.Result = res
	return ec.marshalNVehicleDriverBindingAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDriverBindingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBinding_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBinding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingAvgFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMaxFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMinFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingStddevFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingSumFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleDriverBindingVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNVehicleDriverBinding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleDriverBindingVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleDriverBindingVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewCallBoolExp(ctx context.Context, obj interface{}) (model.CaseApprovalReviewCallBoolExp, error) {
	var it model.CaseApprovalReviewCallBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOCaseApprovalReviewCallBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOCaseApprovalReviewCallBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOCaseApprovalReviewCallBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_call_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_call_id"))
			it.CaseApprovalReviewCallID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone_number"))
			it.TelephoneNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dial_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dial_time"))
			it.DialTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_connected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_connected"))
			it.IsConnected, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "inform_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inform_content"))
			it.InformContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewCallIncInput(ctx context.Context, obj interface{}) (model.CaseApprovalReviewCallIncInput, error) {
	var it model.CaseApprovalReviewCallIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewCallInsertInput(ctx context.Context, obj interface{}) (model.CaseApprovalReviewCallInsertInput, error) {
	var it model.CaseApprovalReviewCallInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone_number"))
			it.TelephoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dial_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dial_time"))
			it.DialTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_connected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_connected"))
			it.IsConnected, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inform_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inform_content"))
			it.InformContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewCallOrderBy(ctx context.Context, obj interface{}) (model.CaseApprovalReviewCallOrderBy, error) {
	var it model.CaseApprovalReviewCallOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_call_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_call_id"))
			it.CaseApprovalReviewCallID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone_number"))
			it.TelephoneNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dial_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dial_time"))
			it.DialTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_connected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_connected"))
			it.IsConnected, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "inform_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inform_content"))
			it.InformContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewCallSetInput(ctx context.Context, obj interface{}) (model.CaseApprovalReviewCallSetInput, error) {
	var it model.CaseApprovalReviewCallSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_call_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_call_id"))
			it.CaseApprovalReviewCallID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone_number"))
			it.TelephoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dial_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dial_time"))
			it.DialTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_connected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_connected"))
			it.IsConnected, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inform_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inform_content"))
			it.InformContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewOperationBoolExp(ctx context.Context, obj interface{}) (model.CaseApprovalReviewOperationBoolExp, error) {
	var it model.CaseApprovalReviewOperationBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOCaseApprovalReviewOperationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOCaseApprovalReviewOperationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOCaseApprovalReviewOperationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewOperationIncInput(ctx context.Context, obj interface{}) (model.CaseApprovalReviewOperationIncInput, error) {
	var it model.CaseApprovalReviewOperationIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewOperationInsertInput(ctx context.Context, obj interface{}) (model.CaseApprovalReviewOperationInsertInput, error) {
	var it model.CaseApprovalReviewOperationInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewOperationOrderBy(ctx context.Context, obj interface{}) (model.CaseApprovalReviewOperationOrderBy, error) {
	var it model.CaseApprovalReviewOperationOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaseApprovalReviewOperationSetInput(ctx context.Context, obj interface{}) (model.CaseApprovalReviewOperationSetInput, error) {
	var it model.CaseApprovalReviewOperationSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "case_approval_review_operation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("case_approval_review_operation_id"))
			it.CaseApprovalReviewOperationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordBoolExp(ctx context.Context, obj interface{}) (model.DisputeViolationRecordBoolExp, error) {
	var it model.DisputeViolationRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODisputeViolationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODisputeViolationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODisputeViolationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordIncInput(ctx context.Context, obj interface{}) (model.DisputeViolationRecordIncInput, error) {
	var it model.DisputeViolationRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordInsertInput(ctx context.Context, obj interface{}) (model.DisputeViolationRecordInsertInput, error) {
	var it model.DisputeViolationRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordLogBoolExp(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogBoolExp, error) {
	var it model.DisputeViolationRecordLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODisputeViolationRecordLogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODisputeViolationRecordLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODisputeViolationRecordLogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordLogIncInput(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogIncInput, error) {
	var it model.DisputeViolationRecordLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordLogInsertInput(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogInsertInput, error) {
	var it model.DisputeViolationRecordLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordLogOrderBy(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogOrderBy, error) {
	var it model.DisputeViolationRecordLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordLogSetInput(ctx context.Context, obj interface{}) (model.DisputeViolationRecordLogSetInput, error) {
	var it model.DisputeViolationRecordLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_log_id"))
			it.DisputeViolationLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewer"))
			it.Reviewer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_time"))
			it.ReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_opinion"))
			it.ReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_result"))
			it.ReviewResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_action_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_action_name"))
			it.ReviewActionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approver"))
			it.Approver, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordOrderBy(ctx context.Context, obj interface{}) (model.DisputeViolationRecordOrderBy, error) {
	var it model.DisputeViolationRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisputeViolationRecordSetInput(ctx context.Context, obj interface{}) (model.DisputeViolationRecordSetInput, error) {
	var it model.DisputeViolationRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dispute_violation_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dispute_violation_id"))
			it.DisputeViolationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violation_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violation_detail_id"))
			it.ViolationDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "written_application_materials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("written_application_materials"))
			it.WrittenApplicationMaterials, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log"))
			it.DrivingLog, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "witness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("witness"))
			it.Witness, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statement"))
			it.Statement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pic_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pic_evidence"))
			it.PicEvidence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license"))
			it.DriverLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_license"))
			it.DrivingLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card"))
			it.IDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_manager_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_manager_id_card"))
			it.VehicleManagerIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_evidence"))
			it.OtherEvidence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "approve_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approve_state"))
			it.ApproveState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLogInfoBoolExp(ctx context.Context, obj interface{}) (model.DrivingLogInfoBoolExp, error) {
	var it model.DrivingLogInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODrivingLogInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODrivingLogInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODrivingLogInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_info_id"))
			it.DrivingLogInfoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_agecy_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_agecy_level"))
			it.ReviewAgecyLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_markup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_markup"))
			it.IsMarkup, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLogInfoIncInput(ctx context.Context, obj interface{}) (model.DrivingLogInfoIncInput, error) {
	var it model.DrivingLogInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_agecy_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_agecy_level"))
			it.ReviewAgecyLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLogInfoInsertInput(ctx context.Context, obj interface{}) (model.DrivingLogInfoInsertInput, error) {
	var it model.DrivingLogInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_agecy_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_agecy_level"))
			it.ReviewAgecyLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_markup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_markup"))
			it.IsMarkup, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLogInfoOrderBy(ctx context.Context, obj interface{}) (model.DrivingLogInfoOrderBy, error) {
	var it model.DrivingLogInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_info_id"))
			it.DrivingLogInfoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_agecy_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_agecy_level"))
			it.ReviewAgecyLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_markup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_markup"))
			it.IsMarkup, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLogInfoSetInput(ctx context.Context, obj interface{}) (model.DrivingLogInfoSetInput, error) {
	var it model.DrivingLogInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_info_id"))
			it.DrivingLogInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_status"))
			it.ReviewStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "review_agecy_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review_agecy_level"))
			it.ReviewAgecyLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_markup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_markup"))
			it.IsMarkup, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model1.FloatComparisonExp, error) {
	var it model1.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDriverBindingBoolExp(ctx context.Context, obj interface{}) (model.VehicleDriverBindingBoolExp, error) {
	var it model.VehicleDriverBindingBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleDriverBindingBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleDriverBindingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleDriverBindingBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDriverBindingIncInput(ctx context.Context, obj interface{}) (model.VehicleDriverBindingIncInput, error) {
	var it model.VehicleDriverBindingIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDriverBindingInsertInput(ctx context.Context, obj interface{}) (model.VehicleDriverBindingInsertInput, error) {
	var it model.VehicleDriverBindingInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDriverBindingOrderBy(ctx context.Context, obj interface{}) (model.VehicleDriverBindingOrderBy, error) {
	var it model.VehicleDriverBindingOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleDriverBindingSetInput(ctx context.Context, obj interface{}) (model.VehicleDriverBindingSetInput, error) {
	var it model.VehicleDriverBindingSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var caseApprovalReviewCallImplementors = []string{"CaseApprovalReviewCall"}

func (ec *executionContext) _CaseApprovalReviewCall(ctx context.Context, sel ast.SelectionSet, obj *model1.CaseApprovalReviewCall) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCall")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCall_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "case_approval_review_call_id":
			out.Values[i] = ec._CaseApprovalReviewCall_case_approval_review_call_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "case_approval_review_operation_id":
			out.Values[i] = ec._CaseApprovalReviewCall_case_approval_review_operation_id(ctx, field, obj)
		case "telephone_number":
			out.Values[i] = ec._CaseApprovalReviewCall_telephone_number(ctx, field, obj)
		case "dial_time":
			out.Values[i] = ec._CaseApprovalReviewCall_dial_time(ctx, field, obj)
		case "is_connected":
			out.Values[i] = ec._CaseApprovalReviewCall_is_connected(ctx, field, obj)
		case "inform_content":
			out.Values[i] = ec._CaseApprovalReviewCall_inform_content(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._CaseApprovalReviewCall_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._CaseApprovalReviewCall_review_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._CaseApprovalReviewCall_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._CaseApprovalReviewCall_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._CaseApprovalReviewCall_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._CaseApprovalReviewCall_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._CaseApprovalReviewCall_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._CaseApprovalReviewCall_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallAggregateImplementors = []string{"CaseApprovalReviewCallAggregate"}

func (ec *executionContext) _CaseApprovalReviewCallAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallAggregate")
		case "aggregate":
			out.Values[i] = ec._CaseApprovalReviewCallAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallAggregateFieldsImplementors = []string{"CaseApprovalReviewCallAggregateFields"}

func (ec *executionContext) _CaseApprovalReviewCallAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallAggregateFields")
		case "avg":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._CaseApprovalReviewCallAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallAvgFieldsImplementors = []string{"CaseApprovalReviewCallAvgFields"}

func (ec *executionContext) _CaseApprovalReviewCallAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallAvgFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallMaxFieldsImplementors = []string{"CaseApprovalReviewCallMaxFields"}

func (ec *executionContext) _CaseApprovalReviewCallMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallMaxFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_id(ctx, field, obj)
		case "case_approval_review_call_id":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_case_approval_review_call_id(ctx, field, obj)
		case "case_approval_review_operation_id":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_case_approval_review_operation_id(ctx, field, obj)
		case "telephone_number":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_telephone_number(ctx, field, obj)
		case "dial_time":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_dial_time(ctx, field, obj)
		case "is_connected":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_is_connected(ctx, field, obj)
		case "inform_content":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_inform_content(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_review_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._CaseApprovalReviewCallMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallMinFieldsImplementors = []string{"CaseApprovalReviewCallMinFields"}

func (ec *executionContext) _CaseApprovalReviewCallMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallMinFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_id(ctx, field, obj)
		case "case_approval_review_call_id":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_case_approval_review_call_id(ctx, field, obj)
		case "case_approval_review_operation_id":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_case_approval_review_operation_id(ctx, field, obj)
		case "telephone_number":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_telephone_number(ctx, field, obj)
		case "dial_time":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_dial_time(ctx, field, obj)
		case "is_connected":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_is_connected(ctx, field, obj)
		case "inform_content":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_inform_content(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_review_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._CaseApprovalReviewCallMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallMutationResponseImplementors = []string{"CaseApprovalReviewCallMutationResponse"}

func (ec *executionContext) _CaseApprovalReviewCallMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._CaseApprovalReviewCallMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._CaseApprovalReviewCallMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallStddevFieldsImplementors = []string{"CaseApprovalReviewCallStddevFields"}

func (ec *executionContext) _CaseApprovalReviewCallStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallStddevFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallStddevPopFieldsImplementors = []string{"CaseApprovalReviewCallStddevPopFields"}

func (ec *executionContext) _CaseApprovalReviewCallStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallStddevPopFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallStddevSampFieldsImplementors = []string{"CaseApprovalReviewCallStddevSampFields"}

func (ec *executionContext) _CaseApprovalReviewCallStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallStddevSampFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallSumFieldsImplementors = []string{"CaseApprovalReviewCallSumFields"}

func (ec *executionContext) _CaseApprovalReviewCallSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallSumFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallVarPopFieldsImplementors = []string{"CaseApprovalReviewCallVarPopFields"}

func (ec *executionContext) _CaseApprovalReviewCallVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallVarPopFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallVarSampFieldsImplementors = []string{"CaseApprovalReviewCallVarSampFields"}

func (ec *executionContext) _CaseApprovalReviewCallVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallVarSampFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewCallVarianceFieldsImplementors = []string{"CaseApprovalReviewCallVarianceFields"}

func (ec *executionContext) _CaseApprovalReviewCallVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewCallVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewCallVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewCallVarianceFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewCallVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationImplementors = []string{"CaseApprovalReviewOperation"}

func (ec *executionContext) _CaseApprovalReviewOperation(ctx context.Context, sel ast.SelectionSet, obj *model1.CaseApprovalReviewOperation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperation")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "case_approval_review_operation_id":
			out.Values[i] = ec._CaseApprovalReviewOperation_case_approval_review_operation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "review_opinion":
			out.Values[i] = ec._CaseApprovalReviewOperation_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._CaseApprovalReviewOperation_review_result(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._CaseApprovalReviewOperation_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._CaseApprovalReviewOperation_review_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._CaseApprovalReviewOperation_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._CaseApprovalReviewOperation_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._CaseApprovalReviewOperation_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._CaseApprovalReviewOperation_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._CaseApprovalReviewOperation_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._CaseApprovalReviewOperation_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationAggregateImplementors = []string{"CaseApprovalReviewOperationAggregate"}

func (ec *executionContext) _CaseApprovalReviewOperationAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationAggregate")
		case "aggregate":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationAggregateFieldsImplementors = []string{"CaseApprovalReviewOperationAggregateFields"}

func (ec *executionContext) _CaseApprovalReviewOperationAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationAggregateFields")
		case "avg":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._CaseApprovalReviewOperationAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationAvgFieldsImplementors = []string{"CaseApprovalReviewOperationAvgFields"}

func (ec *executionContext) _CaseApprovalReviewOperationAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationAvgFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationMaxFieldsImplementors = []string{"CaseApprovalReviewOperationMaxFields"}

func (ec *executionContext) _CaseApprovalReviewOperationMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationMaxFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_id(ctx, field, obj)
		case "case_approval_review_operation_id":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_case_approval_review_operation_id(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_review_result(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_review_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._CaseApprovalReviewOperationMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationMinFieldsImplementors = []string{"CaseApprovalReviewOperationMinFields"}

func (ec *executionContext) _CaseApprovalReviewOperationMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationMinFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_id(ctx, field, obj)
		case "case_approval_review_operation_id":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_case_approval_review_operation_id(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_review_result(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_review_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._CaseApprovalReviewOperationMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationMutationResponseImplementors = []string{"CaseApprovalReviewOperationMutationResponse"}

func (ec *executionContext) _CaseApprovalReviewOperationMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._CaseApprovalReviewOperationMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._CaseApprovalReviewOperationMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationStddevFieldsImplementors = []string{"CaseApprovalReviewOperationStddevFields"}

func (ec *executionContext) _CaseApprovalReviewOperationStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationStddevFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationStddevPopFieldsImplementors = []string{"CaseApprovalReviewOperationStddevPopFields"}

func (ec *executionContext) _CaseApprovalReviewOperationStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationStddevPopFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationStddevSampFieldsImplementors = []string{"CaseApprovalReviewOperationStddevSampFields"}

func (ec *executionContext) _CaseApprovalReviewOperationStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationStddevSampFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationSumFieldsImplementors = []string{"CaseApprovalReviewOperationSumFields"}

func (ec *executionContext) _CaseApprovalReviewOperationSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationSumFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationVarPopFieldsImplementors = []string{"CaseApprovalReviewOperationVarPopFields"}

func (ec *executionContext) _CaseApprovalReviewOperationVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationVarPopFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationVarSampFieldsImplementors = []string{"CaseApprovalReviewOperationVarSampFields"}

func (ec *executionContext) _CaseApprovalReviewOperationVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationVarSampFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caseApprovalReviewOperationVarianceFieldsImplementors = []string{"CaseApprovalReviewOperationVarianceFields"}

func (ec *executionContext) _CaseApprovalReviewOperationVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.CaseApprovalReviewOperationVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caseApprovalReviewOperationVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaseApprovalReviewOperationVarianceFields")
		case "id":
			out.Values[i] = ec._CaseApprovalReviewOperationVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordImplementors = []string{"DisputeViolationRecord"}

func (ec *executionContext) _DisputeViolationRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.DisputeViolationRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecord")
		case "id":
			out.Values[i] = ec._DisputeViolationRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dispute_violation_id":
			out.Values[i] = ec._DisputeViolationRecord_dispute_violation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "violation_detail_id":
			out.Values[i] = ec._DisputeViolationRecord_violation_detail_id(ctx, field, obj)
		case "written_application_materials":
			out.Values[i] = ec._DisputeViolationRecord_written_application_materials(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DisputeViolationRecord_labor_contract(ctx, field, obj)
		case "driving_log":
			out.Values[i] = ec._DisputeViolationRecord_driving_log(ctx, field, obj)
		case "witness":
			out.Values[i] = ec._DisputeViolationRecord_witness(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._DisputeViolationRecord_statement(ctx, field, obj)
		case "pic_evidence":
			out.Values[i] = ec._DisputeViolationRecord_pic_evidence(ctx, field, obj)
		case "driver_license":
			out.Values[i] = ec._DisputeViolationRecord_driver_license(ctx, field, obj)
		case "driving_license":
			out.Values[i] = ec._DisputeViolationRecord_driving_license(ctx, field, obj)
		case "id_card":
			out.Values[i] = ec._DisputeViolationRecord_id_card(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._DisputeViolationRecord_business_license(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._DisputeViolationRecord_organization_code(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._DisputeViolationRecord_legal_person_id_number(ctx, field, obj)
		case "agent_id_number":
			out.Values[i] = ec._DisputeViolationRecord_agent_id_number(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._DisputeViolationRecord_vehicle_manager_id_card(ctx, field, obj)
		case "other_evidence":
			out.Values[i] = ec._DisputeViolationRecord_other_evidence(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecord_approve_state(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DisputeViolationRecord_update_time_in(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DisputeViolationRecord_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DisputeViolationRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DisputeViolationRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DisputeViolationRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DisputeViolationRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DisputeViolationRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DisputeViolationRecord_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DisputeViolationRecord_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordAggregateImplementors = []string{"DisputeViolationRecordAggregate"}

func (ec *executionContext) _DisputeViolationRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._DisputeViolationRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordAggregateFieldsImplementors = []string{"DisputeViolationRecordAggregateFields"}

func (ec *executionContext) _DisputeViolationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DisputeViolationRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordAvgFieldsImplementors = []string{"DisputeViolationRecordAvgFields"}

func (ec *executionContext) _DisputeViolationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordAvgFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordAvgFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordAvgFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogImplementors = []string{"DisputeViolationRecordLog"}

func (ec *executionContext) _DisputeViolationRecordLog(ctx context.Context, sel ast.SelectionSet, obj *model1.DisputeViolationRecordLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLog")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dispute_violation_log_id":
			out.Values[i] = ec._DisputeViolationRecordLog_dispute_violation_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dispute_violation_id":
			out.Values[i] = ec._DisputeViolationRecordLog_dispute_violation_id(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._DisputeViolationRecordLog_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._DisputeViolationRecordLog_review_time(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._DisputeViolationRecordLog_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._DisputeViolationRecordLog_review_result(ctx, field, obj)
		case "review_action_name":
			out.Values[i] = ec._DisputeViolationRecordLog_review_action_name(ctx, field, obj)
		case "approver":
			out.Values[i] = ec._DisputeViolationRecordLog_approver(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DisputeViolationRecordLog_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogAggregateImplementors = []string{"DisputeViolationRecordLogAggregate"}

func (ec *executionContext) _DisputeViolationRecordLogAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogAggregate")
		case "aggregate":
			out.Values[i] = ec._DisputeViolationRecordLogAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogAggregateFieldsImplementors = []string{"DisputeViolationRecordLogAggregateFields"}

func (ec *executionContext) _DisputeViolationRecordLogAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogAggregateFields")
		case "avg":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DisputeViolationRecordLogAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogAvgFieldsImplementors = []string{"DisputeViolationRecordLogAvgFields"}

func (ec *executionContext) _DisputeViolationRecordLogAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogAvgFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogMaxFieldsImplementors = []string{"DisputeViolationRecordLogMaxFields"}

func (ec *executionContext) _DisputeViolationRecordLogMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogMaxFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_id(ctx, field, obj)
		case "dispute_violation_log_id":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_dispute_violation_log_id(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_dispute_violation_id(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_review_time(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_review_result(ctx, field, obj)
		case "review_action_name":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_review_action_name(ctx, field, obj)
		case "approver":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_approver(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DisputeViolationRecordLogMaxFields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogMinFieldsImplementors = []string{"DisputeViolationRecordLogMinFields"}

func (ec *executionContext) _DisputeViolationRecordLogMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogMinFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_id(ctx, field, obj)
		case "dispute_violation_log_id":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_dispute_violation_log_id(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_dispute_violation_id(ctx, field, obj)
		case "reviewer":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_reviewer(ctx, field, obj)
		case "review_time":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_review_time(ctx, field, obj)
		case "review_opinion":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_review_opinion(ctx, field, obj)
		case "review_result":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_review_result(ctx, field, obj)
		case "review_action_name":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_review_action_name(ctx, field, obj)
		case "approver":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_approver(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DisputeViolationRecordLogMinFields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogMutationResponseImplementors = []string{"DisputeViolationRecordLogMutationResponse"}

func (ec *executionContext) _DisputeViolationRecordLogMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DisputeViolationRecordLogMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DisputeViolationRecordLogMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogStddevFieldsImplementors = []string{"DisputeViolationRecordLogStddevFields"}

func (ec *executionContext) _DisputeViolationRecordLogStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogStddevFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogStddevPopFieldsImplementors = []string{"DisputeViolationRecordLogStddevPopFields"}

func (ec *executionContext) _DisputeViolationRecordLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogStddevPopFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogStddevSampFieldsImplementors = []string{"DisputeViolationRecordLogStddevSampFields"}

func (ec *executionContext) _DisputeViolationRecordLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogStddevSampFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogSumFieldsImplementors = []string{"DisputeViolationRecordLogSumFields"}

func (ec *executionContext) _DisputeViolationRecordLogSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogSumFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogVarPopFieldsImplementors = []string{"DisputeViolationRecordLogVarPopFields"}

func (ec *executionContext) _DisputeViolationRecordLogVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogVarPopFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogVarSampFieldsImplementors = []string{"DisputeViolationRecordLogVarSampFields"}

func (ec *executionContext) _DisputeViolationRecordLogVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogVarSampFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordLogVarianceFieldsImplementors = []string{"DisputeViolationRecordLogVarianceFields"}

func (ec *executionContext) _DisputeViolationRecordLogVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordLogVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordLogVarianceFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordLogVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordMaxFieldsImplementors = []string{"DisputeViolationRecordMaxFields"}

func (ec *executionContext) _DisputeViolationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordMaxFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_id(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_dispute_violation_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_violation_detail_id(ctx, field, obj)
		case "written_application_materials":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_written_application_materials(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_labor_contract(ctx, field, obj)
		case "driving_log":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_driving_log(ctx, field, obj)
		case "witness":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_witness(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_statement(ctx, field, obj)
		case "pic_evidence":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_pic_evidence(ctx, field, obj)
		case "driver_license":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_driver_license(ctx, field, obj)
		case "driving_license":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_driving_license(ctx, field, obj)
		case "id_card":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_id_card(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_business_license(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_organization_code(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_legal_person_id_number(ctx, field, obj)
		case "agent_id_number":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_agent_id_number(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_vehicle_manager_id_card(ctx, field, obj)
		case "other_evidence":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_other_evidence(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_approve_state(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_update_time_in(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DisputeViolationRecordMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordMinFieldsImplementors = []string{"DisputeViolationRecordMinFields"}

func (ec *executionContext) _DisputeViolationRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordMinFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordMinFields_id(ctx, field, obj)
		case "dispute_violation_id":
			out.Values[i] = ec._DisputeViolationRecordMinFields_dispute_violation_id(ctx, field, obj)
		case "violation_detail_id":
			out.Values[i] = ec._DisputeViolationRecordMinFields_violation_detail_id(ctx, field, obj)
		case "written_application_materials":
			out.Values[i] = ec._DisputeViolationRecordMinFields_written_application_materials(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DisputeViolationRecordMinFields_labor_contract(ctx, field, obj)
		case "driving_log":
			out.Values[i] = ec._DisputeViolationRecordMinFields_driving_log(ctx, field, obj)
		case "witness":
			out.Values[i] = ec._DisputeViolationRecordMinFields_witness(ctx, field, obj)
		case "statement":
			out.Values[i] = ec._DisputeViolationRecordMinFields_statement(ctx, field, obj)
		case "pic_evidence":
			out.Values[i] = ec._DisputeViolationRecordMinFields_pic_evidence(ctx, field, obj)
		case "driver_license":
			out.Values[i] = ec._DisputeViolationRecordMinFields_driver_license(ctx, field, obj)
		case "driving_license":
			out.Values[i] = ec._DisputeViolationRecordMinFields_driving_license(ctx, field, obj)
		case "id_card":
			out.Values[i] = ec._DisputeViolationRecordMinFields_id_card(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._DisputeViolationRecordMinFields_business_license(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._DisputeViolationRecordMinFields_organization_code(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._DisputeViolationRecordMinFields_legal_person_id_number(ctx, field, obj)
		case "agent_id_number":
			out.Values[i] = ec._DisputeViolationRecordMinFields_agent_id_number(ctx, field, obj)
		case "vehicle_manager_id_card":
			out.Values[i] = ec._DisputeViolationRecordMinFields_vehicle_manager_id_card(ctx, field, obj)
		case "other_evidence":
			out.Values[i] = ec._DisputeViolationRecordMinFields_other_evidence(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordMinFields_approve_state(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DisputeViolationRecordMinFields_update_time_in(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DisputeViolationRecordMinFields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DisputeViolationRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DisputeViolationRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DisputeViolationRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DisputeViolationRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DisputeViolationRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DisputeViolationRecordMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DisputeViolationRecordMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordMutationResponseImplementors = []string{"DisputeViolationRecordMutationResponse"}

func (ec *executionContext) _DisputeViolationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DisputeViolationRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DisputeViolationRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordStddevFieldsImplementors = []string{"DisputeViolationRecordStddevFields"}

func (ec *executionContext) _DisputeViolationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordStddevFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordStddevFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordStddevFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordStddevPopFieldsImplementors = []string{"DisputeViolationRecordStddevPopFields"}

func (ec *executionContext) _DisputeViolationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordStddevPopFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordStddevPopFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordStddevSampFieldsImplementors = []string{"DisputeViolationRecordStddevSampFields"}

func (ec *executionContext) _DisputeViolationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordStddevSampFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordStddevSampFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordSumFieldsImplementors = []string{"DisputeViolationRecordSumFields"}

func (ec *executionContext) _DisputeViolationRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordSumFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordSumFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordSumFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordVarPopFieldsImplementors = []string{"DisputeViolationRecordVarPopFields"}

func (ec *executionContext) _DisputeViolationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordVarPopFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordVarPopFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordVarPopFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordVarSampFieldsImplementors = []string{"DisputeViolationRecordVarSampFields"}

func (ec *executionContext) _DisputeViolationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordVarSampFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordVarSampFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordVarSampFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var disputeViolationRecordVarianceFieldsImplementors = []string{"DisputeViolationRecordVarianceFields"}

func (ec *executionContext) _DisputeViolationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DisputeViolationRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, disputeViolationRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DisputeViolationRecordVarianceFields")
		case "id":
			out.Values[i] = ec._DisputeViolationRecordVarianceFields_id(ctx, field, obj)
		case "approve_state":
			out.Values[i] = ec._DisputeViolationRecordVarianceFields_approve_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoImplementors = []string{"DrivingLogInfo"}

func (ec *executionContext) _DrivingLogInfo(ctx context.Context, sel ast.SelectionSet, obj *model1.DrivingLogInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfo")
		case "id":
			out.Values[i] = ec._DrivingLogInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driving_log_info_id":
			out.Values[i] = ec._DrivingLogInfo_driving_log_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._DrivingLogInfo_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DrivingLogInfo_driver_id(ctx, field, obj)
		case "driving_start_time":
			out.Values[i] = ec._DrivingLogInfo_driving_start_time(ctx, field, obj)
		case "driving_end_time":
			out.Values[i] = ec._DrivingLogInfo_driving_end_time(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._DrivingLogInfo_cause(ctx, field, obj)
		case "route":
			out.Values[i] = ec._DrivingLogInfo_route(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DrivingLogInfo_remarks(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._DrivingLogInfo_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._DrivingLogInfo_end_time(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfo_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfo_review_agecy_level(ctx, field, obj)
		case "is_markup":
			out.Values[i] = ec._DrivingLogInfo_is_markup(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DrivingLogInfo_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DrivingLogInfo_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DrivingLogInfo_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DrivingLogInfo_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DrivingLogInfo_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DrivingLogInfo_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoAggregateImplementors = []string{"DrivingLogInfoAggregate"}

func (ec *executionContext) _DrivingLogInfoAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoAggregate")
		case "aggregate":
			out.Values[i] = ec._DrivingLogInfoAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoAggregateFieldsImplementors = []string{"DrivingLogInfoAggregateFields"}

func (ec *executionContext) _DrivingLogInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoAggregateFields")
		case "avg":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DrivingLogInfoAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoAvgFieldsImplementors = []string{"DrivingLogInfoAvgFields"}

func (ec *executionContext) _DrivingLogInfoAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoAvgFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoAvgFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoAvgFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoAvgFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoMaxFieldsImplementors = []string{"DrivingLogInfoMaxFields"}

func (ec *executionContext) _DrivingLogInfoMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoMaxFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoMaxFields_id(ctx, field, obj)
		case "driving_log_info_id":
			out.Values[i] = ec._DrivingLogInfoMaxFields_driving_log_info_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DrivingLogInfoMaxFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DrivingLogInfoMaxFields_driver_id(ctx, field, obj)
		case "driving_start_time":
			out.Values[i] = ec._DrivingLogInfoMaxFields_driving_start_time(ctx, field, obj)
		case "driving_end_time":
			out.Values[i] = ec._DrivingLogInfoMaxFields_driving_end_time(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._DrivingLogInfoMaxFields_cause(ctx, field, obj)
		case "route":
			out.Values[i] = ec._DrivingLogInfoMaxFields_route(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DrivingLogInfoMaxFields_remarks(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._DrivingLogInfoMaxFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._DrivingLogInfoMaxFields_end_time(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoMaxFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoMaxFields_review_agecy_level(ctx, field, obj)
		case "is_markup":
			out.Values[i] = ec._DrivingLogInfoMaxFields_is_markup(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DrivingLogInfoMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DrivingLogInfoMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DrivingLogInfoMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DrivingLogInfoMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DrivingLogInfoMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DrivingLogInfoMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoMinFieldsImplementors = []string{"DrivingLogInfoMinFields"}

func (ec *executionContext) _DrivingLogInfoMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoMinFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoMinFields_id(ctx, field, obj)
		case "driving_log_info_id":
			out.Values[i] = ec._DrivingLogInfoMinFields_driving_log_info_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DrivingLogInfoMinFields_vehicle_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DrivingLogInfoMinFields_driver_id(ctx, field, obj)
		case "driving_start_time":
			out.Values[i] = ec._DrivingLogInfoMinFields_driving_start_time(ctx, field, obj)
		case "driving_end_time":
			out.Values[i] = ec._DrivingLogInfoMinFields_driving_end_time(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._DrivingLogInfoMinFields_cause(ctx, field, obj)
		case "route":
			out.Values[i] = ec._DrivingLogInfoMinFields_route(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DrivingLogInfoMinFields_remarks(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._DrivingLogInfoMinFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._DrivingLogInfoMinFields_end_time(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoMinFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoMinFields_review_agecy_level(ctx, field, obj)
		case "is_markup":
			out.Values[i] = ec._DrivingLogInfoMinFields_is_markup(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DrivingLogInfoMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DrivingLogInfoMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DrivingLogInfoMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DrivingLogInfoMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DrivingLogInfoMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DrivingLogInfoMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoMutationResponseImplementors = []string{"DrivingLogInfoMutationResponse"}

func (ec *executionContext) _DrivingLogInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DrivingLogInfoMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DrivingLogInfoMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoStddevFieldsImplementors = []string{"DrivingLogInfoStddevFields"}

func (ec *executionContext) _DrivingLogInfoStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoStddevFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoStddevFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoStddevFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoStddevFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoStddevPopFieldsImplementors = []string{"DrivingLogInfoStddevPopFields"}

func (ec *executionContext) _DrivingLogInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoStddevPopFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoStddevPopFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoStddevPopFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoStddevPopFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoStddevSampFieldsImplementors = []string{"DrivingLogInfoStddevSampFields"}

func (ec *executionContext) _DrivingLogInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoStddevSampFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoStddevSampFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoStddevSampFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoStddevSampFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoSumFieldsImplementors = []string{"DrivingLogInfoSumFields"}

func (ec *executionContext) _DrivingLogInfoSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoSumFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoSumFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoSumFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoSumFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoVarPopFieldsImplementors = []string{"DrivingLogInfoVarPopFields"}

func (ec *executionContext) _DrivingLogInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoVarPopFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoVarPopFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoVarPopFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoVarPopFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoVarSampFieldsImplementors = []string{"DrivingLogInfoVarSampFields"}

func (ec *executionContext) _DrivingLogInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoVarSampFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoVarSampFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoVarSampFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoVarSampFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLogInfoVarianceFieldsImplementors = []string{"DrivingLogInfoVarianceFields"}

func (ec *executionContext) _DrivingLogInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLogInfoVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLogInfoVarianceFields")
		case "id":
			out.Values[i] = ec._DrivingLogInfoVarianceFields_id(ctx, field, obj)
		case "review_status":
			out.Values[i] = ec._DrivingLogInfoVarianceFields_review_status(ctx, field, obj)
		case "review_agecy_level":
			out.Values[i] = ec._DrivingLogInfoVarianceFields_review_agecy_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_case_approval_review_call":
			out.Values[i] = ec._Mutation_delete_case_approval_review_call(ctx, field)
		case "delete_case_approval_review_call_by_pk":
			out.Values[i] = ec._Mutation_delete_case_approval_review_call_by_pk(ctx, field)
		case "insert_case_approval_review_call":
			out.Values[i] = ec._Mutation_insert_case_approval_review_call(ctx, field)
		case "insert_case_approval_review_call_one":
			out.Values[i] = ec._Mutation_insert_case_approval_review_call_one(ctx, field)
		case "update_case_approval_review_call":
			out.Values[i] = ec._Mutation_update_case_approval_review_call(ctx, field)
		case "update_case_approval_review_call_by_pk":
			out.Values[i] = ec._Mutation_update_case_approval_review_call_by_pk(ctx, field)
		case "delete_case_approval_review_operation":
			out.Values[i] = ec._Mutation_delete_case_approval_review_operation(ctx, field)
		case "delete_case_approval_review_operation_by_pk":
			out.Values[i] = ec._Mutation_delete_case_approval_review_operation_by_pk(ctx, field)
		case "insert_case_approval_review_operation":
			out.Values[i] = ec._Mutation_insert_case_approval_review_operation(ctx, field)
		case "insert_case_approval_review_operation_one":
			out.Values[i] = ec._Mutation_insert_case_approval_review_operation_one(ctx, field)
		case "update_case_approval_review_operation":
			out.Values[i] = ec._Mutation_update_case_approval_review_operation(ctx, field)
		case "update_case_approval_review_operation_by_pk":
			out.Values[i] = ec._Mutation_update_case_approval_review_operation_by_pk(ctx, field)
		case "delete_dispute_violation_record":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record(ctx, field)
		case "delete_dispute_violation_record_by_pk":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record_by_pk(ctx, field)
		case "insert_dispute_violation_record":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record(ctx, field)
		case "insert_dispute_violation_record_one":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record_one(ctx, field)
		case "update_dispute_violation_record":
			out.Values[i] = ec._Mutation_update_dispute_violation_record(ctx, field)
		case "update_dispute_violation_record_by_pk":
			out.Values[i] = ec._Mutation_update_dispute_violation_record_by_pk(ctx, field)
		case "delete_dispute_violation_record_log":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record_log(ctx, field)
		case "delete_dispute_violation_record_log_by_pk":
			out.Values[i] = ec._Mutation_delete_dispute_violation_record_log_by_pk(ctx, field)
		case "insert_dispute_violation_record_log":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record_log(ctx, field)
		case "insert_dispute_violation_record_log_one":
			out.Values[i] = ec._Mutation_insert_dispute_violation_record_log_one(ctx, field)
		case "update_dispute_violation_record_log":
			out.Values[i] = ec._Mutation_update_dispute_violation_record_log(ctx, field)
		case "update_dispute_violation_record_log_by_pk":
			out.Values[i] = ec._Mutation_update_dispute_violation_record_log_by_pk(ctx, field)
		case "delete_driving_log_info":
			out.Values[i] = ec._Mutation_delete_driving_log_info(ctx, field)
		case "delete_driving_log_info_by_pk":
			out.Values[i] = ec._Mutation_delete_driving_log_info_by_pk(ctx, field)
		case "insert_driving_log_info":
			out.Values[i] = ec._Mutation_insert_driving_log_info(ctx, field)
		case "insert_driving_log_info_one":
			out.Values[i] = ec._Mutation_insert_driving_log_info_one(ctx, field)
		case "update_driving_log_info":
			out.Values[i] = ec._Mutation_update_driving_log_info(ctx, field)
		case "update_driving_log_info_by_pk":
			out.Values[i] = ec._Mutation_update_driving_log_info_by_pk(ctx, field)
		case "delete_vehicle_driver_binding":
			out.Values[i] = ec._Mutation_delete_vehicle_driver_binding(ctx, field)
		case "delete_vehicle_driver_binding_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_driver_binding_by_pk(ctx, field)
		case "insert_vehicle_driver_binding":
			out.Values[i] = ec._Mutation_insert_vehicle_driver_binding(ctx, field)
		case "insert_vehicle_driver_binding_one":
			out.Values[i] = ec._Mutation_insert_vehicle_driver_binding_one(ctx, field)
		case "update_vehicle_driver_binding":
			out.Values[i] = ec._Mutation_update_vehicle_driver_binding(ctx, field)
		case "update_vehicle_driver_binding_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_driver_binding_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "case_approval_review_call":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_case_approval_review_call(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "case_approval_review_call_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_case_approval_review_call_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "case_approval_review_call_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_case_approval_review_call_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "case_approval_review_operation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_case_approval_review_operation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "case_approval_review_operation_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_case_approval_review_operation_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "case_approval_review_operation_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_case_approval_review_operation_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dispute_violation_record_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dispute_violation_record_log_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driving_log_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driving_log_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driving_log_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driving_log_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driving_log_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driving_log_info_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_driver_binding":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_driver_binding(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_driver_binding_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_driver_binding_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_driver_binding_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_driver_binding_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingImplementors = []string{"VehicleDriverBinding"}

func (ec *executionContext) _VehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleDriverBinding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBinding")
		case "id":
			out.Values[i] = ec._VehicleDriverBinding_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._VehicleDriverBinding_vehicle_driver_binding_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._VehicleDriverBinding_driver_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleDriverBinding_vehicle_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleDriverBinding_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleDriverBinding_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleDriverBinding_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleDriverBinding_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleDriverBinding_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleDriverBinding_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleDriverBinding_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleDriverBinding_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingAggregateImplementors = []string{"VehicleDriverBindingAggregate"}

func (ec *executionContext) _VehicleDriverBindingAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleDriverBindingAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingAggregateFieldsImplementors = []string{"VehicleDriverBindingAggregateFields"}

func (ec *executionContext) _VehicleDriverBindingAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleDriverBindingAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingAvgFieldsImplementors = []string{"VehicleDriverBindingAvgFields"}

func (ec *executionContext) _VehicleDriverBindingAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingAvgFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingMaxFieldsImplementors = []string{"VehicleDriverBindingMaxFields"}

func (ec *executionContext) _VehicleDriverBindingMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingMaxFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_id(ctx, field, obj)
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_vehicle_driver_binding_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_driver_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_vehicle_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleDriverBindingMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingMinFieldsImplementors = []string{"VehicleDriverBindingMinFields"}

func (ec *executionContext) _VehicleDriverBindingMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingMinFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingMinFields_id(ctx, field, obj)
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._VehicleDriverBindingMinFields_vehicle_driver_binding_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._VehicleDriverBindingMinFields_driver_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleDriverBindingMinFields_vehicle_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleDriverBindingMinFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleDriverBindingMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleDriverBindingMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleDriverBindingMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleDriverBindingMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleDriverBindingMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleDriverBindingMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleDriverBindingMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingMutationResponseImplementors = []string{"VehicleDriverBindingMutationResponse"}

func (ec *executionContext) _VehicleDriverBindingMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleDriverBindingMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleDriverBindingMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingStddevFieldsImplementors = []string{"VehicleDriverBindingStddevFields"}

func (ec *executionContext) _VehicleDriverBindingStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingStddevFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingStddevPopFieldsImplementors = []string{"VehicleDriverBindingStddevPopFields"}

func (ec *executionContext) _VehicleDriverBindingStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingStddevSampFieldsImplementors = []string{"VehicleDriverBindingStddevSampFields"}

func (ec *executionContext) _VehicleDriverBindingStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingSumFieldsImplementors = []string{"VehicleDriverBindingSumFields"}

func (ec *executionContext) _VehicleDriverBindingSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingSumFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingVarPopFieldsImplementors = []string{"VehicleDriverBindingVarPopFields"}

func (ec *executionContext) _VehicleDriverBindingVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingVarSampFieldsImplementors = []string{"VehicleDriverBindingVarSampFields"}

func (ec *executionContext) _VehicleDriverBindingVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleDriverBindingVarianceFieldsImplementors = []string{"VehicleDriverBindingVarianceFields"}

func (ec *executionContext) _VehicleDriverBindingVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDriverBindingVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleDriverBindingVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleDriverBindingVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCaseApprovalReviewCall2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx context.Context, sel ast.SelectionSet, v model1.CaseApprovalReviewCall) graphql.Marshaler {
	return ec._CaseApprovalReviewCall(ctx, sel, &v)
}

func (ec *executionContext) marshalNCaseApprovalReviewCall2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCallᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.CaseApprovalReviewCall) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx context.Context, sel ast.SelectionSet, v *model1.CaseApprovalReviewCall) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CaseApprovalReviewCall(ctx, sel, v)
}

func (ec *executionContext) marshalNCaseApprovalReviewCallAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAggregate(ctx context.Context, sel ast.SelectionSet, v model.CaseApprovalReviewCallAggregate) graphql.Marshaler {
	return ec._CaseApprovalReviewCallAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNCaseApprovalReviewCallAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAggregate(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewCallBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx context.Context, v interface{}) (model.CaseApprovalReviewCallBoolExp, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewCallBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewCallInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallInsertInput(ctx context.Context, v interface{}) (model.CaseApprovalReviewCallInsertInput, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewCallInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewCallInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.CaseApprovalReviewCallInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CaseApprovalReviewCallInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCaseApprovalReviewCallInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCaseApprovalReviewCallInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallInsertInput(ctx context.Context, v interface{}) (*model.CaseApprovalReviewCallInsertInput, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewCallInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewCallOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallOrderBy(ctx context.Context, v interface{}) (*model.CaseApprovalReviewCallOrderBy, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewCallOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewCallSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumn(ctx context.Context, v interface{}) (model.CaseApprovalReviewCallSelectColumn, error) {
	var res model.CaseApprovalReviewCallSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCaseApprovalReviewCallSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.CaseApprovalReviewCallSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCaseApprovalReviewOperation2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx context.Context, sel ast.SelectionSet, v model1.CaseApprovalReviewOperation) graphql.Marshaler {
	return ec._CaseApprovalReviewOperation(ctx, sel, &v)
}

func (ec *executionContext) marshalNCaseApprovalReviewOperation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.CaseApprovalReviewOperation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx context.Context, sel ast.SelectionSet, v *model1.CaseApprovalReviewOperation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperation(ctx, sel, v)
}

func (ec *executionContext) marshalNCaseApprovalReviewOperationAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAggregate(ctx context.Context, sel ast.SelectionSet, v model.CaseApprovalReviewOperationAggregate) graphql.Marshaler {
	return ec._CaseApprovalReviewOperationAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNCaseApprovalReviewOperationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAggregate(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewOperationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx context.Context, v interface{}) (model.CaseApprovalReviewOperationBoolExp, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewOperationBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewOperationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationInsertInput(ctx context.Context, v interface{}) (model.CaseApprovalReviewOperationInsertInput, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewOperationInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewOperationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.CaseApprovalReviewOperationInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CaseApprovalReviewOperationInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCaseApprovalReviewOperationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCaseApprovalReviewOperationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationInsertInput(ctx context.Context, v interface{}) (*model.CaseApprovalReviewOperationInsertInput, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewOperationInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewOperationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationOrderBy(ctx context.Context, v interface{}) (*model.CaseApprovalReviewOperationOrderBy, error) {
	res, err := ec.unmarshalInputCaseApprovalReviewOperationOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCaseApprovalReviewOperationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumn(ctx context.Context, v interface{}) (model.CaseApprovalReviewOperationSelectColumn, error) {
	var res model.CaseApprovalReviewOperationSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCaseApprovalReviewOperationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.CaseApprovalReviewOperationSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDisputeViolationRecord2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx context.Context, sel ast.SelectionSet, v model1.DisputeViolationRecord) graphql.Marshaler {
	return ec._DisputeViolationRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNDisputeViolationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DisputeViolationRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.DisputeViolationRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DisputeViolationRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNDisputeViolationRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordAggregate) graphql.Marshaler {
	return ec._DisputeViolationRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDisputeViolationRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DisputeViolationRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx context.Context, v interface{}) (model.DisputeViolationRecordBoolExp, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx context.Context, v interface{}) (model.DisputeViolationRecordInsertInput, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDisputeViolationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDisputeViolationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordInsertInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordInsertInput, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDisputeViolationRecordLog2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx context.Context, sel ast.SelectionSet, v model1.DisputeViolationRecordLog) graphql.Marshaler {
	return ec._DisputeViolationRecordLog(ctx, sel, &v)
}

func (ec *executionContext) marshalNDisputeViolationRecordLog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DisputeViolationRecordLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx context.Context, sel ast.SelectionSet, v *model1.DisputeViolationRecordLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DisputeViolationRecordLog(ctx, sel, v)
}

func (ec *executionContext) marshalNDisputeViolationRecordLogAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordLogAggregate) graphql.Marshaler {
	return ec._DisputeViolationRecordLogAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDisputeViolationRecordLogAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordLogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogBoolExp, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordLogBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordLogInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogInsertInput, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordLogInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordLogInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDisputeViolationRecordLogInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDisputeViolationRecordLogInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogInsertInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogInsertInput, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordLogInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordLogOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogOrderBy, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordLogOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx context.Context, v interface{}) (model.DisputeViolationRecordLogSelectColumn, error) {
	var res model.DisputeViolationRecordLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDisputeViolationRecordLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDisputeViolationRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordOrderBy(ctx context.Context, v interface{}) (*model.DisputeViolationRecordOrderBy, error) {
	res, err := ec.unmarshalInputDisputeViolationRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDisputeViolationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx context.Context, v interface{}) (model.DisputeViolationRecordSelectColumn, error) {
	var res model.DisputeViolationRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDisputeViolationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DisputeViolationRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDrivingLogInfo2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx context.Context, sel ast.SelectionSet, v model1.DrivingLogInfo) graphql.Marshaler {
	return ec._DrivingLogInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNDrivingLogInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DrivingLogInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx context.Context, sel ast.SelectionSet, v *model1.DrivingLogInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DrivingLogInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNDrivingLogInfoAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.DrivingLogInfoAggregate) graphql.Marshaler {
	return ec._DrivingLogInfoAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDrivingLogInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DrivingLogInfoAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDrivingLogInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx context.Context, v interface{}) (model.DrivingLogInfoBoolExp, error) {
	res, err := ec.unmarshalInputDrivingLogInfoBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLogInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoInsertInput(ctx context.Context, v interface{}) (model.DrivingLogInfoInsertInput, error) {
	res, err := ec.unmarshalInputDrivingLogInfoInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLogInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DrivingLogInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLogInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDrivingLogInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDrivingLogInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoInsertInput(ctx context.Context, v interface{}) (*model.DrivingLogInfoInsertInput, error) {
	res, err := ec.unmarshalInputDrivingLogInfoInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLogInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogInfoOrderBy, error) {
	res, err := ec.unmarshalInputDrivingLogInfoOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLogInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumn(ctx context.Context, v interface{}) (model.DrivingLogInfoSelectColumn, error) {
	var res model.DrivingLogInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDrivingLogInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DrivingLogInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleDriverBinding2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v model1.VehicleDriverBinding) graphql.Marshaler {
	return ec._VehicleDriverBinding(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleDriverBinding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBindingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleDriverBinding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleDriverBinding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleDriverBinding(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleDriverBindingAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBindingAggregate) graphql.Marshaler {
	return ec._VehicleDriverBindingAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleDriverBindingAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleDriverBindingAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleDriverBindingBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx context.Context, v interface{}) (model.VehicleDriverBindingBoolExp, error) {
	res, err := ec.unmarshalInputVehicleDriverBindingBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleDriverBindingInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx context.Context, v interface{}) (model.VehicleDriverBindingInsertInput, error) {
	res, err := ec.unmarshalInputVehicleDriverBindingInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleDriverBindingInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleDriverBindingInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDriverBindingInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleDriverBindingInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleDriverBindingInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx context.Context, v interface{}) (*model.VehicleDriverBindingInsertInput, error) {
	res, err := ec.unmarshalInputVehicleDriverBindingInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleDriverBindingOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingOrderBy, error) {
	res, err := ec.unmarshalInputVehicleDriverBindingOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleDriverBindingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx context.Context, v interface{}) (model.VehicleDriverBindingSelectColumn, error) {
	var res model.VehicleDriverBindingSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleDriverBindingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBindingSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCaseApprovalReviewCall2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewCall(ctx context.Context, sel ast.SelectionSet, v *model1.CaseApprovalReviewCall) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCall(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCaseApprovalReviewCallBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx context.Context, v interface{}) ([]*model.CaseApprovalReviewCallBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CaseApprovalReviewCallBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCaseApprovalReviewCallBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCaseApprovalReviewCallBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallBoolExp(ctx context.Context, v interface{}) (*model.CaseApprovalReviewCallBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCaseApprovalReviewCallBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCaseApprovalReviewCallIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallIncInput(ctx context.Context, v interface{}) (*model.CaseApprovalReviewCallIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCaseApprovalReviewCallIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMinFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCaseApprovalReviewCallOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallOrderByᚄ(ctx context.Context, v interface{}) ([]*model.CaseApprovalReviewCallOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CaseApprovalReviewCallOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCaseApprovalReviewCallOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCaseApprovalReviewCallSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.CaseApprovalReviewCallSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.CaseApprovalReviewCallSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCaseApprovalReviewCallSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCaseApprovalReviewCallSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CaseApprovalReviewCallSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCaseApprovalReviewCallSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCaseApprovalReviewCallSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSetInput(ctx context.Context, v interface{}) (*model.CaseApprovalReviewCallSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCaseApprovalReviewCallSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallSumFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewCallVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewCallVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewCallVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewCallVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐCaseApprovalReviewOperation(ctx context.Context, sel ast.SelectionSet, v *model1.CaseApprovalReviewOperation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperation(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCaseApprovalReviewOperationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx context.Context, v interface{}) ([]*model.CaseApprovalReviewOperationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CaseApprovalReviewOperationBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCaseApprovalReviewOperationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCaseApprovalReviewOperationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationBoolExp(ctx context.Context, v interface{}) (*model.CaseApprovalReviewOperationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCaseApprovalReviewOperationBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCaseApprovalReviewOperationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationIncInput(ctx context.Context, v interface{}) (*model.CaseApprovalReviewOperationIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCaseApprovalReviewOperationIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMinFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCaseApprovalReviewOperationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationOrderByᚄ(ctx context.Context, v interface{}) ([]*model.CaseApprovalReviewOperationOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.CaseApprovalReviewOperationOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCaseApprovalReviewOperationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCaseApprovalReviewOperationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.CaseApprovalReviewOperationSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.CaseApprovalReviewOperationSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCaseApprovalReviewOperationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CaseApprovalReviewOperationSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCaseApprovalReviewOperationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCaseApprovalReviewOperationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSetInput(ctx context.Context, v interface{}) (*model.CaseApprovalReviewOperationSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCaseApprovalReviewOperationSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationSumFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOCaseApprovalReviewOperationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐCaseApprovalReviewOperationVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.CaseApprovalReviewOperationVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaseApprovalReviewOperationVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.DisputeViolationRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecord(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODisputeViolationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODisputeViolationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODisputeViolationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordBoolExp(ctx context.Context, v interface{}) (*model.DisputeViolationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDisputeViolationRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODisputeViolationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordIncInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDisputeViolationRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODisputeViolationRecordLog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDisputeViolationRecordLog(ctx context.Context, sel ast.SelectionSet, v *model1.DisputeViolationRecordLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLog(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODisputeViolationRecordLogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODisputeViolationRecordLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODisputeViolationRecordLogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogBoolExp(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDisputeViolationRecordLogBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODisputeViolationRecordLogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogIncInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDisputeViolationRecordLogIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODisputeViolationRecordLogMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODisputeViolationRecordLogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDisputeViolationRecordLogOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODisputeViolationRecordLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DisputeViolationRecordLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DisputeViolationRecordLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDisputeViolationRecordLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODisputeViolationRecordLogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DisputeViolationRecordLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDisputeViolationRecordLogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODisputeViolationRecordLogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSetInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDisputeViolationRecordLogSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODisputeViolationRecordLogStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordLogVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordLogVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODisputeViolationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DisputeViolationRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DisputeViolationRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDisputeViolationRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODisputeViolationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DisputeViolationRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DisputeViolationRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDisputeViolationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODisputeViolationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DisputeViolationRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDisputeViolationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODisputeViolationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSetInput(ctx context.Context, v interface{}) (*model.DisputeViolationRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDisputeViolationRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODisputeViolationRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODisputeViolationRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDisputeViolationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DisputeViolationRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DisputeViolationRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐDrivingLogInfo(ctx context.Context, sel ast.SelectionSet, v *model1.DrivingLogInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODrivingLogInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx context.Context, v interface{}) ([]*model.DrivingLogInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLogInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODrivingLogInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODrivingLogInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoBoolExp(ctx context.Context, v interface{}) (*model.DrivingLogInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDrivingLogInfoBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODrivingLogInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoIncInput(ctx context.Context, v interface{}) (*model.DrivingLogInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDrivingLogInfoIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODrivingLogInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODrivingLogInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DrivingLogInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLogInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDrivingLogInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODrivingLogInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DrivingLogInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DrivingLogInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDrivingLogInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODrivingLogInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DrivingLogInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDrivingLogInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODrivingLogInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSetInput(ctx context.Context, v interface{}) (*model.DrivingLogInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDrivingLogInfoSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODrivingLogInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLogInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐDrivingLogInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLogInfoVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleDriverBinding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleDriverBinding) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBinding(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleDriverBindingBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleDriverBindingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDriverBindingBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleDriverBindingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleDriverBindingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx context.Context, v interface{}) (*model.VehicleDriverBindingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleDriverBindingBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleDriverBindingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingIncInput(ctx context.Context, v interface{}) (*model.VehicleDriverBindingIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleDriverBindingIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleDriverBindingMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleDriverBindingOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleDriverBindingOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDriverBindingOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleDriverBindingOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleDriverBindingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleDriverBindingSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleDriverBindingSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleDriverBindingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleDriverBindingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleDriverBindingSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleDriverBindingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleDriverBindingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSetInput(ctx context.Context, v interface{}) (*model.VehicleDriverBindingSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleDriverBindingSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleDriverBindingStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleDriverBindingVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_driver_separationᚋgraphᚋmodelᚐVehicleDriverBindingVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleDriverBindingVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
