schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

scalar _text

# expression to compare columns of type _text. All fields are combined with logical 'AND'.
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

# mutation root
type mutation_root {
    # delete data from the table: "vehicle_driver_binding"
    delete_vehicle_driver_binding(
        # filter the rows which have to be deleted
        where: vehicle_driver_binding_bool_exp!
    ): vehicle_driver_binding_mutation_response

    # delete single row from the table: "vehicle_driver_binding"
    delete_vehicle_driver_binding_by_pk(
        # 主键
        id: bigint!
    ): vehicle_driver_binding

    # insert data into the table: "vehicle_driver_binding"
    insert_vehicle_driver_binding(
        # the rows to be inserted
        objects: [vehicle_driver_binding_insert_input!]!

        # on conflict condition
        on_conflict: vehicle_driver_binding_on_conflict
    ): vehicle_driver_binding_mutation_response

    # insert a single row into the table: "vehicle_driver_binding"
    insert_vehicle_driver_binding_one(
        # the row to be inserted
        object: vehicle_driver_binding_insert_input!

        # on conflict condition
        on_conflict: vehicle_driver_binding_on_conflict
    ): vehicle_driver_binding

    # update data of the table: "vehicle_driver_binding"
    update_vehicle_driver_binding(
        # increments the integer columns with given value of the filtered values
        _inc: vehicle_driver_binding_inc_input

        # sets the columns of the filtered rows to the given values
        _set: vehicle_driver_binding_set_input

        # filter the rows which have to be updated
        where: vehicle_driver_binding_bool_exp!
    ): vehicle_driver_binding_mutation_response

    # update single row of the table: "vehicle_driver_binding"
    update_vehicle_driver_binding_by_pk(
        # increments the integer columns with given value of the filtered values
        _inc: vehicle_driver_binding_inc_input

        # sets the columns of the filtered rows to the given values
        _set: vehicle_driver_binding_set_input
        pk_columns: vehicle_driver_binding_pk_columns_input!
    ): vehicle_driver_binding
}

# column ordering options
enum order_by {
    # in the ascending order, nulls last
    asc

    # in the ascending order, nulls first
    asc_nulls_first

    # in the ascending order, nulls last
    asc_nulls_last

    # in the descending order, nulls first
    desc

    # in the descending order, nulls first
    desc_nulls_first

    # in the descending order, nulls last
    desc_nulls_last
}

# query root
type query_root {
    # fetch data from the table: "vehicle_driver_binding"
    vehicle_driver_binding(
        # distinct select on columns
        distinct_on: [vehicle_driver_binding_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [vehicle_driver_binding_order_by!]

        # filter the rows returned
        where: vehicle_driver_binding_bool_exp
    ): [vehicle_driver_binding!]!

    # fetch aggregated fields from the table: "vehicle_driver_binding"
    vehicle_driver_binding_aggregate(
        # distinct select on columns
        distinct_on: [vehicle_driver_binding_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [vehicle_driver_binding_order_by!]

        # filter the rows returned
        where: vehicle_driver_binding_bool_exp
    ): vehicle_driver_binding_aggregate!

    # fetch data from the table: "vehicle_driver_binding" using primary key columns
    vehicle_driver_binding_by_pk(
        # 主键
        id: bigint!
    ): vehicle_driver_binding
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

# subscription root
type subscription_root {
    # fetch data from the table: "vehicle_driver_binding"
    vehicle_driver_binding(
        # distinct select on columns
        distinct_on: [vehicle_driver_binding_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [vehicle_driver_binding_order_by!]

        # filter the rows returned
        where: vehicle_driver_binding_bool_exp
    ): [vehicle_driver_binding!]!

    # fetch aggregated fields from the table: "vehicle_driver_binding"
    vehicle_driver_binding_aggregate(
        # distinct select on columns
        distinct_on: [vehicle_driver_binding_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [vehicle_driver_binding_order_by!]

        # filter the rows returned
        where: vehicle_driver_binding_bool_exp
    ): vehicle_driver_binding_aggregate!

    # fetch data from the table: "vehicle_driver_binding" using primary key columns
    vehicle_driver_binding_by_pk(
        # 主键
        id: bigint!
    ): vehicle_driver_binding
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

# 车辆驾驶员绑定表
#
#
# columns and relationships of "vehicle_driver_binding"
#
type vehicle_driver_binding {
    # 创建时间
    create_at: timestamptz!

    # 创建人
    created_by: String!

    # 删除时间
    deleted_at: timestamptz

    # 删除人
    deleted_by: String

    # 驾驶员id
    driver_id: String

    # 主键
    id: bigint!

    # 是否删除
    is_delete: Boolean

    # 租赁合同,,云储存系统返回的完整租赁合同的图片路径
    lease_contract: _text

    # 备注
    remarks: String

    # 修改时间
    updated_at: timestamptz

    # 修改人
    updated_by: String

    # 车辆驾驶员绑定外部编码，由golang程序生成的xid，暴露到外部使用
    vehicle_driver_binding_id: String!

    # 车辆id
    vehicle_id: String
}

# aggregated selection of "vehicle_driver_binding"
type vehicle_driver_binding_aggregate {
    aggregate: vehicle_driver_binding_aggregate_fields
    nodes: [vehicle_driver_binding!]!
}

# aggregate fields of "vehicle_driver_binding"
type vehicle_driver_binding_aggregate_fields {
    avg: vehicle_driver_binding_avg_fields
    count(columns: [vehicle_driver_binding_select_column!], distinct: Boolean): Int
    max: vehicle_driver_binding_max_fields
    min: vehicle_driver_binding_min_fields
    stddev: vehicle_driver_binding_stddev_fields
    stddev_pop: vehicle_driver_binding_stddev_pop_fields
    stddev_samp: vehicle_driver_binding_stddev_samp_fields
    sum: vehicle_driver_binding_sum_fields
    var_pop: vehicle_driver_binding_var_pop_fields
    var_samp: vehicle_driver_binding_var_samp_fields
    variance: vehicle_driver_binding_variance_fields
}

# order by aggregate values of table "vehicle_driver_binding"
input vehicle_driver_binding_aggregate_order_by {
    avg: vehicle_driver_binding_avg_order_by
    count: order_by
    max: vehicle_driver_binding_max_order_by
    min: vehicle_driver_binding_min_order_by
    stddev: vehicle_driver_binding_stddev_order_by
    stddev_pop: vehicle_driver_binding_stddev_pop_order_by
    stddev_samp: vehicle_driver_binding_stddev_samp_order_by
    sum: vehicle_driver_binding_sum_order_by
    var_pop: vehicle_driver_binding_var_pop_order_by
    var_samp: vehicle_driver_binding_var_samp_order_by
    variance: vehicle_driver_binding_variance_order_by
}

# input type for inserting array relation for remote table "vehicle_driver_binding"
input vehicle_driver_binding_arr_rel_insert_input {
    data: [vehicle_driver_binding_insert_input!]!
    on_conflict: vehicle_driver_binding_on_conflict
}

# aggregate avg on columns
type vehicle_driver_binding_avg_fields {
    id: Float
}

# order by avg() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "vehicle_driver_binding". All fields are combined with a logical 'AND'.
input vehicle_driver_binding_bool_exp {
    _and: [vehicle_driver_binding_bool_exp]
    _not: vehicle_driver_binding_bool_exp
    _or: [vehicle_driver_binding_bool_exp]
    create_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    driver_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    lease_contract: _text_comparison_exp
    remarks: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_driver_binding_id: String_comparison_exp
    vehicle_id: String_comparison_exp
}

# unique or primary key constraints on table "vehicle_driver_binding"
enum vehicle_driver_binding_constraint {
    # unique or primary key constraint
    vehicle_driver_binding_pkey
}

# input type for incrementing integer column in table "vehicle_driver_binding"
input vehicle_driver_binding_inc_input {
    id: bigint
}

# input type for inserting data into table "vehicle_driver_binding"
input vehicle_driver_binding_insert_input {
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    is_delete: Boolean
    lease_contract: _text
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

# aggregate max on columns
type vehicle_driver_binding_max_fields {
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

# order by max() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_max_order_by {
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_driver_binding_id: order_by
    vehicle_id: order_by
}

# aggregate min on columns
type vehicle_driver_binding_min_fields {
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

# order by min() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_min_order_by {
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_driver_binding_id: order_by
    vehicle_id: order_by
}

# response of any mutation on the table "vehicle_driver_binding"
type vehicle_driver_binding_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!

    # data of the affected rows by the mutation
    returning: [vehicle_driver_binding!]!
}

# input type for inserting object relation for remote table "vehicle_driver_binding"
input vehicle_driver_binding_obj_rel_insert_input {
    data: vehicle_driver_binding_insert_input!
    on_conflict: vehicle_driver_binding_on_conflict
}

# on conflict condition type for table "vehicle_driver_binding"
input vehicle_driver_binding_on_conflict {
    constraint: vehicle_driver_binding_constraint!
    update_columns: [vehicle_driver_binding_update_column!]!
    where: vehicle_driver_binding_bool_exp
}

# ordering options when selecting data from "vehicle_driver_binding"
input vehicle_driver_binding_order_by {
    create_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    is_delete: order_by
    lease_contract: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_driver_binding_id: order_by
    vehicle_id: order_by
}

# primary key columns input for table: "vehicle_driver_binding"
input vehicle_driver_binding_pk_columns_input {
    # 主键
    id: bigint!
}

# select columns of table "vehicle_driver_binding"
enum vehicle_driver_binding_select_column {
    # column name
    create_at

    # column name
    created_by

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    driver_id

    # column name
    id

    # column name
    is_delete

    # column name
    lease_contract

    # column name
    remarks

    # column name
    updated_at

    # column name
    updated_by

    # column name
    vehicle_driver_binding_id

    # column name
    vehicle_id
}

# input type for updating data in table "vehicle_driver_binding"
input vehicle_driver_binding_set_input {
    create_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    is_delete: Boolean
    lease_contract: _text
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

# aggregate stddev on columns
type vehicle_driver_binding_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type vehicle_driver_binding_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type vehicle_driver_binding_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type vehicle_driver_binding_sum_fields {
    id: bigint
}

# order by sum() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_sum_order_by {
    id: order_by
}

# update columns of table "vehicle_driver_binding"
enum vehicle_driver_binding_update_column {
    # column name
    create_at

    # column name
    created_by

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    driver_id

    # column name
    id

    # column name
    is_delete

    # column name
    lease_contract

    # column name
    remarks

    # column name
    updated_at

    # column name
    updated_by

    # column name
    vehicle_driver_binding_id

    # column name
    vehicle_id
}

# aggregate var_pop on columns
type vehicle_driver_binding_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type vehicle_driver_binding_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type vehicle_driver_binding_variance_fields {
    id: Float
}

# order by variance() on columns of table "vehicle_driver_binding"
input vehicle_driver_binding_variance_order_by {
    id: order_by
}

