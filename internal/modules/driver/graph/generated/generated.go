// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/driver/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteDriverIdentity           func(childComplexity int, where model.DriverIdentityBoolExp) int
		DeleteDriverIdentityByPk       func(childComplexity int, id int64, identityID string) int
		DeleteDriverInfo               func(childComplexity int, where model.DriverInfoBoolExp) int
		DeleteDriverInfoByPk           func(childComplexity int, driverID string, id int64) int
		DeleteDriverInfoChangeLog      func(childComplexity int, where model.DriverInfoChangeLogBoolExp) int
		DeleteDriverInfoChangeLogByPk  func(childComplexity int, driverID string, id int64) int
		DeleteVehicleDriverBinding     func(childComplexity int, where model.VehicleDriverBindingBoolExp) int
		DeleteVehicleDriverBindingByPk func(childComplexity int, id int64) int
		InsertDriverIdentity           func(childComplexity int, objects []*model.DriverIdentityInsertInput, onConflict *model.DriverIdentityOnConflict) int
		InsertDriverIdentityOne        func(childComplexity int, object model.DriverIdentityInsertInput, onConflict *model.DriverIdentityOnConflict) int
		InsertDriverInfo               func(childComplexity int, objects []*model.DriverInfoInsertInput, onConflict *model.DriverInfoOnConflict) int
		InsertDriverInfoChangeLog      func(childComplexity int, objects []*model.DriverInfoChangeLogInsertInput, onConflict *model.DriverInfoChangeLogOnConflict) int
		InsertDriverInfoChangeLogOne   func(childComplexity int, object model.DriverInfoChangeLogInsertInput, onConflict *model.DriverInfoChangeLogOnConflict) int
		InsertDriverInfoOne            func(childComplexity int, object model.DriverInfoInsertInput, onConflict *model.DriverInfoOnConflict) int
		InsertVehicleDriverBinding     func(childComplexity int, objects []*model.VehicleDriverBindingInsertInput, onConflict *model.VehicleDriverBindingOnConflict) int
		InsertVehicleDriverBindingOne  func(childComplexity int, object model.VehicleDriverBindingInsertInput, onConflict *model.VehicleDriverBindingOnConflict) int
		UpdateDriverIdentity           func(childComplexity int, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, where model.DriverIdentityBoolExp) int
		UpdateDriverIdentityByPk       func(childComplexity int, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, pkColumns model.DriverIdentityPkColumnsInput) int
		UpdateDriverInfo               func(childComplexity int, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, where model.DriverInfoBoolExp) int
		UpdateDriverInfoByPk           func(childComplexity int, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, pkColumns model.DriverInfoPkColumnsInput) int
		UpdateDriverInfoChangeLog      func(childComplexity int, inc *model.DriverInfoChangeLogIncInput, set *model.DriverInfoChangeLogSetInput, where model.DriverInfoChangeLogBoolExp) int
		UpdateDriverInfoChangeLogByPk  func(childComplexity int, inc *model.DriverInfoChangeLogIncInput, set *model.DriverInfoChangeLogSetInput, pkColumns model.DriverInfoChangeLogPkColumnsInput) int
		UpdateVehicleDriverBinding     func(childComplexity int, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, where model.VehicleDriverBindingBoolExp) int
		UpdateVehicleDriverBindingByPk func(childComplexity int, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, pkColumns model.VehicleDriverBindingPkColumnsInput) int
	}

	Query struct {
		DriverIdentity                func(childComplexity int, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) int
		DriverIdentityAggregate       func(childComplexity int, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) int
		DriverIdentityByPk            func(childComplexity int, id int64, identityID string) int
		DriverInfo                    func(childComplexity int, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) int
		DriverInfoAggregate           func(childComplexity int, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) int
		DriverInfoByPk                func(childComplexity int, driverID string, id int64) int
		DriverInfoChangeLog           func(childComplexity int, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) int
		DriverInfoChangeLogAggregate  func(childComplexity int, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) int
		DriverInfoChangeLogByPk       func(childComplexity int, driverID string, id int64) int
		VehicleDriverBinding          func(childComplexity int, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) int
		VehicleDriverBindingAggregate func(childComplexity int, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) int
		VehicleDriverBindingByPk      func(childComplexity int, id int64) int
	}

	Subscription struct {
		DriverIdentity                func(childComplexity int, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) int
		DriverIdentityAggregate       func(childComplexity int, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) int
		DriverIdentityByPk            func(childComplexity int, id int64, identityID string) int
		DriverInfo                    func(childComplexity int, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) int
		DriverInfoAggregate           func(childComplexity int, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) int
		DriverInfoByPk                func(childComplexity int, driverID string, id int64) int
		DriverInfoChangeLog           func(childComplexity int, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) int
		DriverInfoChangeLogAggregate  func(childComplexity int, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) int
		DriverInfoChangeLogByPk       func(childComplexity int, driverID string, id int64) int
		VehicleDriverBinding          func(childComplexity int, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) int
		VehicleDriverBindingAggregate func(childComplexity int, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) int
		VehicleDriverBindingByPk      func(childComplexity int, id int64) int
	}

	DriverIdentity struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		IsDelete                      func(childComplexity int) int
		IsReview                      func(childComplexity int) int
		LaborContract                 func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverIdentityAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DriverIdentityAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DriverIdentitySelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverIdentityAvgFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityMaxFields struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverIdentityMinFields struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverIdentityMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverIdentityStddevFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityStddevPopFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityStddevSampFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentitySumFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityVarPopFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityVarSampFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityVarianceFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverInfo struct {
		Agent            func(childComplexity int) int
		CheckAt          func(childComplexity int) int
		CheckBy          func(childComplexity int) int
		ContactAddress   func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		DepartmentID     func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DriverIdentityID func(childComplexity int) int
		DriverName       func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		FilesNumber      func(childComplexity int) int
		ID               func(childComplexity int) int
		InputAt          func(childComplexity int) int
		InputBy          func(childComplexity int) int
		IsBlack          func(childComplexity int) int
		IsCheckData      func(childComplexity int) int
		IsCheckSms       func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		IsInput          func(childComplexity int) int
		IsManualInput    func(childComplexity int) int
		IsSubmit         func(childComplexity int) int
		MailingAddress   func(childComplexity int) int
		Operator         func(childComplexity int) int
		RemarkIn         func(childComplexity int) int
		Remarks          func(childComplexity int) int
		Sex              func(childComplexity int) int
		SubmitAt         func(childComplexity int) int
		SubmitBy         func(childComplexity int) int
		SubmitContent    func(childComplexity int) int
		Telephone        func(childComplexity int) int
		UpdateTimeIn     func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
	}

	DriverInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DriverInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DriverInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverInfoAvgFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoChangeLog struct {
		AccumulativedPoints           func(childComplexity int) int
		Agent                         func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CheckAt                       func(childComplexity int) int
		CheckBy                       func(childComplexity int) int
		ContactAddress                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DepartmentID                  func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverID                      func(childComplexity int) int
		DriverInfoChangeLogID         func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverName                    func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FilesNumber                   func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		InputAt                       func(childComplexity int) int
		InputBy                       func(childComplexity int) int
		IsBlack                       func(childComplexity int) int
		IsCheckData                   func(childComplexity int) int
		IsCheckSms                    func(childComplexity int) int
		IsDelete                      func(childComplexity int) int
		IsInput                       func(childComplexity int) int
		IsManualInput                 func(childComplexity int) int
		IsReview                      func(childComplexity int) int
		IsSubmit                      func(childComplexity int) int
		LaborContract                 func(childComplexity int) int
		MailingAddress                func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		Operator                      func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RemarkIn                      func(childComplexity int) int
		Remarks                       func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		Sex                           func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		SubmitAt                      func(childComplexity int) int
		SubmitBy                      func(childComplexity int) int
		SubmitContent                 func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdateTimeIn                  func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverInfoChangeLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DriverInfoChangeLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DriverInfoChangeLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverInfoChangeLogAvgFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogMaxFields struct {
		AccumulativedPoints           func(childComplexity int) int
		Agent                         func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CheckAt                       func(childComplexity int) int
		CheckBy                       func(childComplexity int) int
		ContactAddress                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DepartmentID                  func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverID                      func(childComplexity int) int
		DriverInfoChangeLogID         func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverName                    func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FilesNumber                   func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		InputAt                       func(childComplexity int) int
		InputBy                       func(childComplexity int) int
		MailingAddress                func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		Operator                      func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RemarkIn                      func(childComplexity int) int
		Remarks                       func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		Sex                           func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		SubmitAt                      func(childComplexity int) int
		SubmitBy                      func(childComplexity int) int
		SubmitContent                 func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdateTimeIn                  func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverInfoChangeLogMinFields struct {
		AccumulativedPoints           func(childComplexity int) int
		Agent                         func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CheckAt                       func(childComplexity int) int
		CheckBy                       func(childComplexity int) int
		ContactAddress                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DepartmentID                  func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverID                      func(childComplexity int) int
		DriverInfoChangeLogID         func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverName                    func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FilesNumber                   func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		InputAt                       func(childComplexity int) int
		InputBy                       func(childComplexity int) int
		MailingAddress                func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		Operator                      func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RemarkIn                      func(childComplexity int) int
		Remarks                       func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		Sex                           func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		SubmitAt                      func(childComplexity int) int
		SubmitBy                      func(childComplexity int) int
		SubmitContent                 func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdateTimeIn                  func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverInfoChangeLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverInfoChangeLogStddevFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogStddevPopFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogStddevSampFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogSumFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogVarPopFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogVarSampFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoChangeLogVarianceFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
		Sex                 func(childComplexity int) int
	}

	DriverInfoMaxFields struct {
		Agent            func(childComplexity int) int
		CheckAt          func(childComplexity int) int
		CheckBy          func(childComplexity int) int
		ContactAddress   func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		DepartmentID     func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DriverIdentityID func(childComplexity int) int
		DriverName       func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		FilesNumber      func(childComplexity int) int
		ID               func(childComplexity int) int
		InputAt          func(childComplexity int) int
		InputBy          func(childComplexity int) int
		MailingAddress   func(childComplexity int) int
		Operator         func(childComplexity int) int
		RemarkIn         func(childComplexity int) int
		Remarks          func(childComplexity int) int
		Sex              func(childComplexity int) int
		SubmitAt         func(childComplexity int) int
		SubmitBy         func(childComplexity int) int
		SubmitContent    func(childComplexity int) int
		Telephone        func(childComplexity int) int
		UpdateTimeIn     func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
	}

	DriverInfoMinFields struct {
		Agent            func(childComplexity int) int
		CheckAt          func(childComplexity int) int
		CheckBy          func(childComplexity int) int
		ContactAddress   func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		DeletedBy        func(childComplexity int) int
		DepartmentID     func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DriverIdentityID func(childComplexity int) int
		DriverName       func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		FilesNumber      func(childComplexity int) int
		ID               func(childComplexity int) int
		InputAt          func(childComplexity int) int
		InputBy          func(childComplexity int) int
		MailingAddress   func(childComplexity int) int
		Operator         func(childComplexity int) int
		RemarkIn         func(childComplexity int) int
		Remarks          func(childComplexity int) int
		Sex              func(childComplexity int) int
		SubmitAt         func(childComplexity int) int
		SubmitBy         func(childComplexity int) int
		SubmitContent    func(childComplexity int) int
		Telephone        func(childComplexity int) int
		UpdateTimeIn     func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
	}

	DriverInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverInfoStddevFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoStddevPopFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoStddevSampFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoSumFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoVarPopFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoVarSampFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoVarianceFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	VehicleDriverBinding struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DriverID               func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		LeaseContract          func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleDriverBindingAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleDriverBindingAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleDriverBindingSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleDriverBindingAvgFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingMaxFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DriverID               func(childComplexity int) int
		ID                     func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleDriverBindingMinFields struct {
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		DriverID               func(childComplexity int) int
		ID                     func(childComplexity int) int
		Remarks                func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDriverBindingID func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	VehicleDriverBindingMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleDriverBindingStddevFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingStddevPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingStddevSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingSumFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingVarPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingVarSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleDriverBindingVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteVehicleDriverBinding(ctx context.Context, where model.VehicleDriverBindingBoolExp) (*model.VehicleDriverBindingMutationResponse, error)
	DeleteVehicleDriverBindingByPk(ctx context.Context, id int64) (*model.VehicleDriverBinding, error)
	InsertVehicleDriverBinding(ctx context.Context, objects []*model.VehicleDriverBindingInsertInput, onConflict *model.VehicleDriverBindingOnConflict) (*model.VehicleDriverBindingMutationResponse, error)
	InsertVehicleDriverBindingOne(ctx context.Context, object model.VehicleDriverBindingInsertInput, onConflict *model.VehicleDriverBindingOnConflict) (*model.VehicleDriverBinding, error)
	UpdateVehicleDriverBinding(ctx context.Context, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, where model.VehicleDriverBindingBoolExp) (*model.VehicleDriverBindingMutationResponse, error)
	UpdateVehicleDriverBindingByPk(ctx context.Context, inc *model.VehicleDriverBindingIncInput, set *model.VehicleDriverBindingSetInput, pkColumns model.VehicleDriverBindingPkColumnsInput) (*model.VehicleDriverBinding, error)
	DeleteDriverIdentity(ctx context.Context, where model.DriverIdentityBoolExp) (*model.DriverIdentityMutationResponse, error)
	DeleteDriverIdentityByPk(ctx context.Context, id int64, identityID string) (*model.DriverIdentity, error)
	InsertDriverIdentity(ctx context.Context, objects []*model.DriverIdentityInsertInput, onConflict *model.DriverIdentityOnConflict) (*model.DriverIdentityMutationResponse, error)
	InsertDriverIdentityOne(ctx context.Context, object model.DriverIdentityInsertInput, onConflict *model.DriverIdentityOnConflict) (*model.DriverIdentity, error)
	UpdateDriverIdentity(ctx context.Context, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, where model.DriverIdentityBoolExp) (*model.DriverIdentityMutationResponse, error)
	UpdateDriverIdentityByPk(ctx context.Context, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, pkColumns model.DriverIdentityPkColumnsInput) (*model.DriverIdentity, error)
	DeleteDriverInfo(ctx context.Context, where model.DriverInfoBoolExp) (*model.DriverInfoMutationResponse, error)
	DeleteDriverInfoByPk(ctx context.Context, driverID string, id int64) (*model.DriverInfo, error)
	InsertDriverInfo(ctx context.Context, objects []*model.DriverInfoInsertInput, onConflict *model.DriverInfoOnConflict) (*model.DriverInfoMutationResponse, error)
	InsertDriverInfoOne(ctx context.Context, object model.DriverInfoInsertInput, onConflict *model.DriverInfoOnConflict) (*model.DriverInfo, error)
	UpdateDriverInfo(ctx context.Context, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, where model.DriverInfoBoolExp) (*model.DriverInfoMutationResponse, error)
	UpdateDriverInfoByPk(ctx context.Context, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, pkColumns model.DriverInfoPkColumnsInput) (*model.DriverInfo, error)
	DeleteDriverInfoChangeLog(ctx context.Context, where model.DriverInfoChangeLogBoolExp) (*model.DriverInfoChangeLogMutationResponse, error)
	DeleteDriverInfoChangeLogByPk(ctx context.Context, driverID string, id int64) (*model.DriverInfoChangeLog, error)
	InsertDriverInfoChangeLog(ctx context.Context, objects []*model.DriverInfoChangeLogInsertInput, onConflict *model.DriverInfoChangeLogOnConflict) (*model.DriverInfoChangeLogMutationResponse, error)
	InsertDriverInfoChangeLogOne(ctx context.Context, object model.DriverInfoChangeLogInsertInput, onConflict *model.DriverInfoChangeLogOnConflict) (*model.DriverInfoChangeLog, error)
	UpdateDriverInfoChangeLog(ctx context.Context, inc *model.DriverInfoChangeLogIncInput, set *model.DriverInfoChangeLogSetInput, where model.DriverInfoChangeLogBoolExp) (*model.DriverInfoChangeLogMutationResponse, error)
	UpdateDriverInfoChangeLogByPk(ctx context.Context, inc *model.DriverInfoChangeLogIncInput, set *model.DriverInfoChangeLogSetInput, pkColumns model.DriverInfoChangeLogPkColumnsInput) (*model.DriverInfoChangeLog, error)
}
type QueryResolver interface {
	VehicleDriverBinding(ctx context.Context, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) ([]*model.VehicleDriverBinding, error)
	VehicleDriverBindingAggregate(ctx context.Context, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) (*model.VehicleDriverBindingAggregate, error)
	VehicleDriverBindingByPk(ctx context.Context, id int64) (*model.VehicleDriverBinding, error)
	DriverIdentity(ctx context.Context, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) ([]*model.DriverIdentity, error)
	DriverIdentityAggregate(ctx context.Context, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) (*model.DriverIdentityAggregate, error)
	DriverIdentityByPk(ctx context.Context, id int64, identityID string) (*model.DriverIdentity, error)
	DriverInfo(ctx context.Context, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) ([]*model.DriverInfo, error)
	DriverInfoAggregate(ctx context.Context, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) (*model.DriverInfoAggregate, error)
	DriverInfoByPk(ctx context.Context, driverID string, id int64) (*model.DriverInfo, error)
	DriverInfoChangeLog(ctx context.Context, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) ([]*model.DriverInfoChangeLog, error)
	DriverInfoChangeLogAggregate(ctx context.Context, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) (*model.DriverInfoChangeLogAggregate, error)
	DriverInfoChangeLogByPk(ctx context.Context, driverID string, id int64) (*model.DriverInfoChangeLog, error)
}
type SubscriptionResolver interface {
	VehicleDriverBinding(ctx context.Context, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) (<-chan []*model.VehicleDriverBinding, error)
	VehicleDriverBindingAggregate(ctx context.Context, distinctOn []model.VehicleDriverBindingSelectColumn, limit *int, offset *int, orderBy []*model.VehicleDriverBindingOrderBy, where *model.VehicleDriverBindingBoolExp) (<-chan *model.VehicleDriverBindingAggregate, error)
	VehicleDriverBindingByPk(ctx context.Context, id int64) (<-chan *model.VehicleDriverBinding, error)
	DriverIdentity(ctx context.Context, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) (<-chan []*model.DriverIdentity, error)
	DriverIdentityAggregate(ctx context.Context, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) (<-chan *model.DriverIdentityAggregate, error)
	DriverIdentityByPk(ctx context.Context, id int64, identityID string) (<-chan *model.DriverIdentity, error)
	DriverInfo(ctx context.Context, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) (<-chan []*model.DriverInfo, error)
	DriverInfoAggregate(ctx context.Context, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) (<-chan *model.DriverInfoAggregate, error)
	DriverInfoByPk(ctx context.Context, driverID string, id int64) (<-chan *model.DriverInfo, error)
	DriverInfoChangeLog(ctx context.Context, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) (<-chan []*model.DriverInfoChangeLog, error)
	DriverInfoChangeLogAggregate(ctx context.Context, distinctOn []model.DriverInfoChangeLogSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoChangeLogOrderBy, where *model.DriverInfoChangeLogBoolExp) (<-chan *model.DriverInfoChangeLogAggregate, error)
	DriverInfoChangeLogByPk(ctx context.Context, driverID string, id int64) (<-chan *model.DriverInfoChangeLog, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_driver_identity":
		if e.complexity.Mutation.DeleteDriverIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentity(childComplexity, args["where"].(model.DriverIdentityBoolExp)), true

	case "Mutation.delete_driver_identity_by_pk":
		if e.complexity.Mutation.DeleteDriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentityByPk(childComplexity, args["id"].(int64), args["identity_id"].(string)), true

	case "Mutation.delete_driver_info":
		if e.complexity.Mutation.DeleteDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfo(childComplexity, args["where"].(model.DriverInfoBoolExp)), true

	case "Mutation.delete_driver_info_by_pk":
		if e.complexity.Mutation.DeleteDriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfoByPk(childComplexity, args["driver_id"].(string), args["id"].(int64)), true

	case "Mutation.delete_driver_info_change_log":
		if e.complexity.Mutation.DeleteDriverInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfoChangeLog(childComplexity, args["where"].(model.DriverInfoChangeLogBoolExp)), true

	case "Mutation.delete_driver_info_change_log_by_pk":
		if e.complexity.Mutation.DeleteDriverInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfoChangeLogByPk(childComplexity, args["driver_id"].(string), args["id"].(int64)), true

	case "Mutation.delete_vehicle_driver_binding":
		if e.complexity.Mutation.DeleteVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDriverBinding(childComplexity, args["where"].(model.VehicleDriverBindingBoolExp)), true

	case "Mutation.delete_vehicle_driver_binding_by_pk":
		if e.complexity.Mutation.DeleteVehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleDriverBindingByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_driver_identity":
		if e.complexity.Mutation.InsertDriverIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverIdentity(childComplexity, args["objects"].([]*model.DriverIdentityInsertInput), args["on_conflict"].(*model.DriverIdentityOnConflict)), true

	case "Mutation.insert_driver_identity_one":
		if e.complexity.Mutation.InsertDriverIdentityOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_identity_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverIdentityOne(childComplexity, args["object"].(model.DriverIdentityInsertInput), args["on_conflict"].(*model.DriverIdentityOnConflict)), true

	case "Mutation.insert_driver_info":
		if e.complexity.Mutation.InsertDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverInfo(childComplexity, args["objects"].([]*model.DriverInfoInsertInput), args["on_conflict"].(*model.DriverInfoOnConflict)), true

	case "Mutation.insert_driver_info_change_log":
		if e.complexity.Mutation.InsertDriverInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverInfoChangeLog(childComplexity, args["objects"].([]*model.DriverInfoChangeLogInsertInput), args["on_conflict"].(*model.DriverInfoChangeLogOnConflict)), true

	case "Mutation.insert_driver_info_change_log_one":
		if e.complexity.Mutation.InsertDriverInfoChangeLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_info_change_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverInfoChangeLogOne(childComplexity, args["object"].(model.DriverInfoChangeLogInsertInput), args["on_conflict"].(*model.DriverInfoChangeLogOnConflict)), true

	case "Mutation.insert_driver_info_one":
		if e.complexity.Mutation.InsertDriverInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverInfoOne(childComplexity, args["object"].(model.DriverInfoInsertInput), args["on_conflict"].(*model.DriverInfoOnConflict)), true

	case "Mutation.insert_vehicle_driver_binding":
		if e.complexity.Mutation.InsertVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleDriverBinding(childComplexity, args["objects"].([]*model.VehicleDriverBindingInsertInput), args["on_conflict"].(*model.VehicleDriverBindingOnConflict)), true

	case "Mutation.insert_vehicle_driver_binding_one":
		if e.complexity.Mutation.InsertVehicleDriverBindingOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_driver_binding_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleDriverBindingOne(childComplexity, args["object"].(model.VehicleDriverBindingInsertInput), args["on_conflict"].(*model.VehicleDriverBindingOnConflict)), true

	case "Mutation.update_driver_identity":
		if e.complexity.Mutation.UpdateDriverIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentity(childComplexity, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["where"].(model.DriverIdentityBoolExp)), true

	case "Mutation.update_driver_identity_by_pk":
		if e.complexity.Mutation.UpdateDriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentityByPk(childComplexity, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["pk_columns"].(model.DriverIdentityPkColumnsInput)), true

	case "Mutation.update_driver_info":
		if e.complexity.Mutation.UpdateDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfo(childComplexity, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["where"].(model.DriverInfoBoolExp)), true

	case "Mutation.update_driver_info_by_pk":
		if e.complexity.Mutation.UpdateDriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfoByPk(childComplexity, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["pk_columns"].(model.DriverInfoPkColumnsInput)), true

	case "Mutation.update_driver_info_change_log":
		if e.complexity.Mutation.UpdateDriverInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfoChangeLog(childComplexity, args["_inc"].(*model.DriverInfoChangeLogIncInput), args["_set"].(*model.DriverInfoChangeLogSetInput), args["where"].(model.DriverInfoChangeLogBoolExp)), true

	case "Mutation.update_driver_info_change_log_by_pk":
		if e.complexity.Mutation.UpdateDriverInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfoChangeLogByPk(childComplexity, args["_inc"].(*model.DriverInfoChangeLogIncInput), args["_set"].(*model.DriverInfoChangeLogSetInput), args["pk_columns"].(model.DriverInfoChangeLogPkColumnsInput)), true

	case "Mutation.update_vehicle_driver_binding":
		if e.complexity.Mutation.UpdateVehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDriverBinding(childComplexity, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["where"].(model.VehicleDriverBindingBoolExp)), true

	case "Mutation.update_vehicle_driver_binding_by_pk":
		if e.complexity.Mutation.UpdateVehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleDriverBindingByPk(childComplexity, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["pk_columns"].(model.VehicleDriverBindingPkColumnsInput)), true

	case "Query.driver_identity":
		if e.complexity.Query.DriverIdentity == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentity(childComplexity, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp)), true

	case "Query.driver_identity_aggregate":
		if e.complexity.Query.DriverIdentityAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityAggregate(childComplexity, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp)), true

	case "Query.driver_identity_by_pk":
		if e.complexity.Query.DriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityByPk(childComplexity, args["id"].(int64), args["identity_id"].(string)), true

	case "Query.driver_info":
		if e.complexity.Query.DriverInfo == nil {
			break
		}

		args, err := ec.field_Query_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfo(childComplexity, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp)), true

	case "Query.driver_info_aggregate":
		if e.complexity.Query.DriverInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoAggregate(childComplexity, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp)), true

	case "Query.driver_info_by_pk":
		if e.complexity.Query.DriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoByPk(childComplexity, args["driver_id"].(string), args["id"].(int64)), true

	case "Query.driver_info_change_log":
		if e.complexity.Query.DriverInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Query_driver_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoChangeLog(childComplexity, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp)), true

	case "Query.driver_info_change_log_aggregate":
		if e.complexity.Query.DriverInfoChangeLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_info_change_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoChangeLogAggregate(childComplexity, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp)), true

	case "Query.driver_info_change_log_by_pk":
		if e.complexity.Query.DriverInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoChangeLogByPk(childComplexity, args["driver_id"].(string), args["id"].(int64)), true

	case "Query.vehicle_driver_binding":
		if e.complexity.Query.VehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Query_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDriverBinding(childComplexity, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp)), true

	case "Query.vehicle_driver_binding_aggregate":
		if e.complexity.Query.VehicleDriverBindingAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_driver_binding_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDriverBindingAggregate(childComplexity, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp)), true

	case "Query.vehicle_driver_binding_by_pk":
		if e.complexity.Query.VehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleDriverBindingByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.driver_identity":
		if e.complexity.Subscription.DriverIdentity == nil {
			break
		}

		args, err := ec.field_Subscription_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverIdentity(childComplexity, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp)), true

	case "Subscription.driver_identity_aggregate":
		if e.complexity.Subscription.DriverIdentityAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_driver_identity_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverIdentityAggregate(childComplexity, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp)), true

	case "Subscription.driver_identity_by_pk":
		if e.complexity.Subscription.DriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Subscription_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverIdentityByPk(childComplexity, args["id"].(int64), args["identity_id"].(string)), true

	case "Subscription.driver_info":
		if e.complexity.Subscription.DriverInfo == nil {
			break
		}

		args, err := ec.field_Subscription_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverInfo(childComplexity, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp)), true

	case "Subscription.driver_info_aggregate":
		if e.complexity.Subscription.DriverInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_driver_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverInfoAggregate(childComplexity, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp)), true

	case "Subscription.driver_info_by_pk":
		if e.complexity.Subscription.DriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverInfoByPk(childComplexity, args["driver_id"].(string), args["id"].(int64)), true

	case "Subscription.driver_info_change_log":
		if e.complexity.Subscription.DriverInfoChangeLog == nil {
			break
		}

		args, err := ec.field_Subscription_driver_info_change_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverInfoChangeLog(childComplexity, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp)), true

	case "Subscription.driver_info_change_log_aggregate":
		if e.complexity.Subscription.DriverInfoChangeLogAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_driver_info_change_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverInfoChangeLogAggregate(childComplexity, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp)), true

	case "Subscription.driver_info_change_log_by_pk":
		if e.complexity.Subscription.DriverInfoChangeLogByPk == nil {
			break
		}

		args, err := ec.field_Subscription_driver_info_change_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DriverInfoChangeLogByPk(childComplexity, args["driver_id"].(string), args["id"].(int64)), true

	case "Subscription.vehicle_driver_binding":
		if e.complexity.Subscription.VehicleDriverBinding == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_driver_binding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleDriverBinding(childComplexity, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp)), true

	case "Subscription.vehicle_driver_binding_aggregate":
		if e.complexity.Subscription.VehicleDriverBindingAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_driver_binding_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleDriverBindingAggregate(childComplexity, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp)), true

	case "Subscription.vehicle_driver_binding_by_pk":
		if e.complexity.Subscription.VehicleDriverBindingByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_driver_binding_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleDriverBindingByPk(childComplexity, args["id"].(int64)), true

	case "driver_identity.accumulatived_points":
		if e.complexity.DriverIdentity.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentity.AccumulativedPoints(childComplexity), true

	case "driver_identity.annual_review_date":
		if e.complexity.DriverIdentity.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentity.AnnualReviewDate(childComplexity), true

	case "driver_identity.created_at":
		if e.complexity.DriverIdentity.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentity.CreatedAt(childComplexity), true

	case "driver_identity.created_by":
		if e.complexity.DriverIdentity.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentity.CreatedBy(childComplexity), true

	case "driver_identity.deleted_at":
		if e.complexity.DriverIdentity.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentity.DeletedAt(childComplexity), true

	case "driver_identity.deleted_by":
		if e.complexity.DriverIdentity.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentity.DeletedBy(childComplexity), true

	case "driver_identity.driver_holding_id_photo":
		if e.complexity.DriverIdentity.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverHoldingIDPhoto(childComplexity), true

	case "driver_identity.driver_license_city_id":
		if e.complexity.DriverIdentity.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseCityID(childComplexity), true

	case "driver_identity.driver_license_district_id":
		if e.complexity.DriverIdentity.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseDistrictID(childComplexity), true

	case "driver_identity.driver_license_issue_date":
		if e.complexity.DriverIdentity.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseIssueDate(childComplexity), true

	case "driver_identity.driver_license_issuing_authority":
		if e.complexity.DriverIdentity.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseIssuingAuthority(childComplexity), true

	case "driver_identity.driver_license_pic":
		if e.complexity.DriverIdentity.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicensePic(childComplexity), true

	case "driver_identity.driver_license_province_id":
		if e.complexity.DriverIdentity.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseProvinceID(childComplexity), true

	case "driver_identity.driver_license_status":
		if e.complexity.DriverIdentity.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseStatus(childComplexity), true

	case "driver_identity.driver_photo":
		if e.complexity.DriverIdentity.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverPhoto(childComplexity), true

	case "driver_identity.driver_signature":
		if e.complexity.DriverIdentity.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverSignature(childComplexity), true

	case "driver_identity.id":
		if e.complexity.DriverIdentity.ID == nil {
			break
		}

		return e.complexity.DriverIdentity.ID(childComplexity), true

	case "driver_identity.id_card_address":
		if e.complexity.DriverIdentity.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardAddress(childComplexity), true

	case "driver_identity.id_card_back_pic":
		if e.complexity.DriverIdentity.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardBackPic(childComplexity), true

	case "driver_identity.id_card_birthday":
		if e.complexity.DriverIdentity.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardBirthday(childComplexity), true

	case "driver_identity.id_card_end_date":
		if e.complexity.DriverIdentity.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardEndDate(childComplexity), true

	case "driver_identity.id_card_front_pic":
		if e.complexity.DriverIdentity.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardFrontPic(childComplexity), true

	case "driver_identity.id_card_nation":
		if e.complexity.DriverIdentity.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardNation(childComplexity), true

	case "driver_identity.id_card_num":
		if e.complexity.DriverIdentity.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardNum(childComplexity), true

	case "driver_identity.id_card_sign_government":
		if e.complexity.DriverIdentity.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardSignGovernment(childComplexity), true

	case "driver_identity.id_card_start_date":
		if e.complexity.DriverIdentity.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardStartDate(childComplexity), true

	case "driver_identity.identity_id":
		if e.complexity.DriverIdentity.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentity.IdentityID(childComplexity), true

	case "driver_identity.is_delete":
		if e.complexity.DriverIdentity.IsDelete == nil {
			break
		}

		return e.complexity.DriverIdentity.IsDelete(childComplexity), true

	case "driver_identity.is_review":
		if e.complexity.DriverIdentity.IsReview == nil {
			break
		}

		return e.complexity.DriverIdentity.IsReview(childComplexity), true

	case "driver_identity.labor_contract":
		if e.complexity.DriverIdentity.LaborContract == nil {
			break
		}

		return e.complexity.DriverIdentity.LaborContract(childComplexity), true

	case "driver_identity.occupational_expire_date":
		if e.complexity.DriverIdentity.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalExpireDate(childComplexity), true

	case "driver_identity.occupational_issuing_authority":
		if e.complexity.DriverIdentity.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalIssuingAuthority(childComplexity), true

	case "driver_identity.occupational_number":
		if e.complexity.DriverIdentity.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalNumber(childComplexity), true

	case "driver_identity.quasi_driving_models":
		if e.complexity.DriverIdentity.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentity.QuasiDrivingModels(childComplexity), true

	case "driver_identity.renewal_date":
		if e.complexity.DriverIdentity.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentity.RenewalDate(childComplexity), true

	case "driver_identity.sorting_date":
		if e.complexity.DriverIdentity.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentity.SortingDate(childComplexity), true

	case "driver_identity.updated_at":
		if e.complexity.DriverIdentity.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentity.UpdatedAt(childComplexity), true

	case "driver_identity.updated_by":
		if e.complexity.DriverIdentity.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentity.UpdatedBy(childComplexity), true

	case "driver_identity.working_time":
		if e.complexity.DriverIdentity.WorkingTime == nil {
			break
		}

		return e.complexity.DriverIdentity.WorkingTime(childComplexity), true

	case "driver_identity_aggregate.aggregate":
		if e.complexity.DriverIdentityAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverIdentityAggregate.Aggregate(childComplexity), true

	case "driver_identity_aggregate.nodes":
		if e.complexity.DriverIdentityAggregate.Nodes == nil {
			break
		}

		return e.complexity.DriverIdentityAggregate.Nodes(childComplexity), true

	case "driver_identity_aggregate_fields.avg":
		if e.complexity.DriverIdentityAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Avg(childComplexity), true

	case "driver_identity_aggregate_fields.count":
		if e.complexity.DriverIdentityAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_driver_identity_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DriverIdentityAggregateFields.Count(childComplexity, args["columns"].([]model.DriverIdentitySelectColumn), args["distinct"].(*bool)), true

	case "driver_identity_aggregate_fields.max":
		if e.complexity.DriverIdentityAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Max(childComplexity), true

	case "driver_identity_aggregate_fields.min":
		if e.complexity.DriverIdentityAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Min(childComplexity), true

	case "driver_identity_aggregate_fields.stddev":
		if e.complexity.DriverIdentityAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Stddev(childComplexity), true

	case "driver_identity_aggregate_fields.stddev_pop":
		if e.complexity.DriverIdentityAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.StddevPop(childComplexity), true

	case "driver_identity_aggregate_fields.stddev_samp":
		if e.complexity.DriverIdentityAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.StddevSamp(childComplexity), true

	case "driver_identity_aggregate_fields.sum":
		if e.complexity.DriverIdentityAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Sum(childComplexity), true

	case "driver_identity_aggregate_fields.var_pop":
		if e.complexity.DriverIdentityAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.VarPop(childComplexity), true

	case "driver_identity_aggregate_fields.var_samp":
		if e.complexity.DriverIdentityAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.VarSamp(childComplexity), true

	case "driver_identity_aggregate_fields.variance":
		if e.complexity.DriverIdentityAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Variance(childComplexity), true

	case "driver_identity_avg_fields.accumulatived_points":
		if e.complexity.DriverIdentityAvgFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_avg_fields.driver_license_status":
		if e.complexity.DriverIdentityAvgFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_avg_fields.id":
		if e.complexity.DriverIdentityAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.ID(childComplexity), true

	case "driver_identity_avg_fields.quasi_driving_models":
		if e.complexity.DriverIdentityAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_max_fields.accumulatived_points":
		if e.complexity.DriverIdentityMaxFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_max_fields.annual_review_date":
		if e.complexity.DriverIdentityMaxFields.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.AnnualReviewDate(childComplexity), true

	case "driver_identity_max_fields.created_at":
		if e.complexity.DriverIdentityMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.CreatedAt(childComplexity), true

	case "driver_identity_max_fields.created_by":
		if e.complexity.DriverIdentityMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.CreatedBy(childComplexity), true

	case "driver_identity_max_fields.deleted_at":
		if e.complexity.DriverIdentityMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DeletedAt(childComplexity), true

	case "driver_identity_max_fields.deleted_by":
		if e.complexity.DriverIdentityMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DeletedBy(childComplexity), true

	case "driver_identity_max_fields.driver_holding_id_photo":
		if e.complexity.DriverIdentityMaxFields.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverHoldingIDPhoto(childComplexity), true

	case "driver_identity_max_fields.driver_license_city_id":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseCityID(childComplexity), true

	case "driver_identity_max_fields.driver_license_district_id":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseDistrictID(childComplexity), true

	case "driver_identity_max_fields.driver_license_issue_date":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseIssueDate(childComplexity), true

	case "driver_identity_max_fields.driver_license_issuing_authority":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseIssuingAuthority(childComplexity), true

	case "driver_identity_max_fields.driver_license_pic":
		if e.complexity.DriverIdentityMaxFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicensePic(childComplexity), true

	case "driver_identity_max_fields.driver_license_province_id":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseProvinceID(childComplexity), true

	case "driver_identity_max_fields.driver_license_status":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_max_fields.driver_photo":
		if e.complexity.DriverIdentityMaxFields.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverPhoto(childComplexity), true

	case "driver_identity_max_fields.driver_signature":
		if e.complexity.DriverIdentityMaxFields.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverSignature(childComplexity), true

	case "driver_identity_max_fields.id":
		if e.complexity.DriverIdentityMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.ID(childComplexity), true

	case "driver_identity_max_fields.id_card_address":
		if e.complexity.DriverIdentityMaxFields.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardAddress(childComplexity), true

	case "driver_identity_max_fields.id_card_back_pic":
		if e.complexity.DriverIdentityMaxFields.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardBackPic(childComplexity), true

	case "driver_identity_max_fields.id_card_birthday":
		if e.complexity.DriverIdentityMaxFields.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardBirthday(childComplexity), true

	case "driver_identity_max_fields.id_card_end_date":
		if e.complexity.DriverIdentityMaxFields.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardEndDate(childComplexity), true

	case "driver_identity_max_fields.id_card_front_pic":
		if e.complexity.DriverIdentityMaxFields.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardFrontPic(childComplexity), true

	case "driver_identity_max_fields.id_card_nation":
		if e.complexity.DriverIdentityMaxFields.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardNation(childComplexity), true

	case "driver_identity_max_fields.id_card_num":
		if e.complexity.DriverIdentityMaxFields.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardNum(childComplexity), true

	case "driver_identity_max_fields.id_card_sign_government":
		if e.complexity.DriverIdentityMaxFields.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardSignGovernment(childComplexity), true

	case "driver_identity_max_fields.id_card_start_date":
		if e.complexity.DriverIdentityMaxFields.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardStartDate(childComplexity), true

	case "driver_identity_max_fields.identity_id":
		if e.complexity.DriverIdentityMaxFields.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IdentityID(childComplexity), true

	case "driver_identity_max_fields.occupational_expire_date":
		if e.complexity.DriverIdentityMaxFields.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.OccupationalExpireDate(childComplexity), true

	case "driver_identity_max_fields.occupational_issuing_authority":
		if e.complexity.DriverIdentityMaxFields.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.OccupationalIssuingAuthority(childComplexity), true

	case "driver_identity_max_fields.occupational_number":
		if e.complexity.DriverIdentityMaxFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.OccupationalNumber(childComplexity), true

	case "driver_identity_max_fields.quasi_driving_models":
		if e.complexity.DriverIdentityMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_max_fields.renewal_date":
		if e.complexity.DriverIdentityMaxFields.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.RenewalDate(childComplexity), true

	case "driver_identity_max_fields.sorting_date":
		if e.complexity.DriverIdentityMaxFields.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.SortingDate(childComplexity), true

	case "driver_identity_max_fields.updated_at":
		if e.complexity.DriverIdentityMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.UpdatedAt(childComplexity), true

	case "driver_identity_max_fields.updated_by":
		if e.complexity.DriverIdentityMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.UpdatedBy(childComplexity), true

	case "driver_identity_max_fields.working_time":
		if e.complexity.DriverIdentityMaxFields.WorkingTime == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.WorkingTime(childComplexity), true

	case "driver_identity_min_fields.accumulatived_points":
		if e.complexity.DriverIdentityMinFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_min_fields.annual_review_date":
		if e.complexity.DriverIdentityMinFields.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.AnnualReviewDate(childComplexity), true

	case "driver_identity_min_fields.created_at":
		if e.complexity.DriverIdentityMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.CreatedAt(childComplexity), true

	case "driver_identity_min_fields.created_by":
		if e.complexity.DriverIdentityMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.CreatedBy(childComplexity), true

	case "driver_identity_min_fields.deleted_at":
		if e.complexity.DriverIdentityMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DeletedAt(childComplexity), true

	case "driver_identity_min_fields.deleted_by":
		if e.complexity.DriverIdentityMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DeletedBy(childComplexity), true

	case "driver_identity_min_fields.driver_holding_id_photo":
		if e.complexity.DriverIdentityMinFields.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverHoldingIDPhoto(childComplexity), true

	case "driver_identity_min_fields.driver_license_city_id":
		if e.complexity.DriverIdentityMinFields.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseCityID(childComplexity), true

	case "driver_identity_min_fields.driver_license_district_id":
		if e.complexity.DriverIdentityMinFields.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseDistrictID(childComplexity), true

	case "driver_identity_min_fields.driver_license_issue_date":
		if e.complexity.DriverIdentityMinFields.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseIssueDate(childComplexity), true

	case "driver_identity_min_fields.driver_license_issuing_authority":
		if e.complexity.DriverIdentityMinFields.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseIssuingAuthority(childComplexity), true

	case "driver_identity_min_fields.driver_license_pic":
		if e.complexity.DriverIdentityMinFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicensePic(childComplexity), true

	case "driver_identity_min_fields.driver_license_province_id":
		if e.complexity.DriverIdentityMinFields.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseProvinceID(childComplexity), true

	case "driver_identity_min_fields.driver_license_status":
		if e.complexity.DriverIdentityMinFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_min_fields.driver_photo":
		if e.complexity.DriverIdentityMinFields.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverPhoto(childComplexity), true

	case "driver_identity_min_fields.driver_signature":
		if e.complexity.DriverIdentityMinFields.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverSignature(childComplexity), true

	case "driver_identity_min_fields.id":
		if e.complexity.DriverIdentityMinFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.ID(childComplexity), true

	case "driver_identity_min_fields.id_card_address":
		if e.complexity.DriverIdentityMinFields.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardAddress(childComplexity), true

	case "driver_identity_min_fields.id_card_back_pic":
		if e.complexity.DriverIdentityMinFields.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardBackPic(childComplexity), true

	case "driver_identity_min_fields.id_card_birthday":
		if e.complexity.DriverIdentityMinFields.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardBirthday(childComplexity), true

	case "driver_identity_min_fields.id_card_end_date":
		if e.complexity.DriverIdentityMinFields.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardEndDate(childComplexity), true

	case "driver_identity_min_fields.id_card_front_pic":
		if e.complexity.DriverIdentityMinFields.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardFrontPic(childComplexity), true

	case "driver_identity_min_fields.id_card_nation":
		if e.complexity.DriverIdentityMinFields.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardNation(childComplexity), true

	case "driver_identity_min_fields.id_card_num":
		if e.complexity.DriverIdentityMinFields.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardNum(childComplexity), true

	case "driver_identity_min_fields.id_card_sign_government":
		if e.complexity.DriverIdentityMinFields.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardSignGovernment(childComplexity), true

	case "driver_identity_min_fields.id_card_start_date":
		if e.complexity.DriverIdentityMinFields.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardStartDate(childComplexity), true

	case "driver_identity_min_fields.identity_id":
		if e.complexity.DriverIdentityMinFields.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IdentityID(childComplexity), true

	case "driver_identity_min_fields.occupational_expire_date":
		if e.complexity.DriverIdentityMinFields.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.OccupationalExpireDate(childComplexity), true

	case "driver_identity_min_fields.occupational_issuing_authority":
		if e.complexity.DriverIdentityMinFields.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.OccupationalIssuingAuthority(childComplexity), true

	case "driver_identity_min_fields.occupational_number":
		if e.complexity.DriverIdentityMinFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.OccupationalNumber(childComplexity), true

	case "driver_identity_min_fields.quasi_driving_models":
		if e.complexity.DriverIdentityMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_min_fields.renewal_date":
		if e.complexity.DriverIdentityMinFields.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.RenewalDate(childComplexity), true

	case "driver_identity_min_fields.sorting_date":
		if e.complexity.DriverIdentityMinFields.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.SortingDate(childComplexity), true

	case "driver_identity_min_fields.updated_at":
		if e.complexity.DriverIdentityMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.UpdatedAt(childComplexity), true

	case "driver_identity_min_fields.updated_by":
		if e.complexity.DriverIdentityMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.UpdatedBy(childComplexity), true

	case "driver_identity_min_fields.working_time":
		if e.complexity.DriverIdentityMinFields.WorkingTime == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.WorkingTime(childComplexity), true

	case "driver_identity_mutation_response.affected_rows":
		if e.complexity.DriverIdentityMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverIdentityMutationResponse.AffectedRows(childComplexity), true

	case "driver_identity_mutation_response.returning":
		if e.complexity.DriverIdentityMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverIdentityMutationResponse.Returning(childComplexity), true

	case "driver_identity_stddev_fields.accumulatived_points":
		if e.complexity.DriverIdentityStddevFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_stddev_fields.driver_license_status":
		if e.complexity.DriverIdentityStddevFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_stddev_fields.id":
		if e.complexity.DriverIdentityStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.ID(childComplexity), true

	case "driver_identity_stddev_fields.quasi_driving_models":
		if e.complexity.DriverIdentityStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_stddev_pop_fields.accumulatived_points":
		if e.complexity.DriverIdentityStddevPopFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_stddev_pop_fields.driver_license_status":
		if e.complexity.DriverIdentityStddevPopFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_stddev_pop_fields.id":
		if e.complexity.DriverIdentityStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.ID(childComplexity), true

	case "driver_identity_stddev_pop_fields.quasi_driving_models":
		if e.complexity.DriverIdentityStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_stddev_samp_fields.accumulatived_points":
		if e.complexity.DriverIdentityStddevSampFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_stddev_samp_fields.driver_license_status":
		if e.complexity.DriverIdentityStddevSampFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_stddev_samp_fields.id":
		if e.complexity.DriverIdentityStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.ID(childComplexity), true

	case "driver_identity_stddev_samp_fields.quasi_driving_models":
		if e.complexity.DriverIdentityStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_sum_fields.accumulatived_points":
		if e.complexity.DriverIdentitySumFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_sum_fields.driver_license_status":
		if e.complexity.DriverIdentitySumFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_sum_fields.id":
		if e.complexity.DriverIdentitySumFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.ID(childComplexity), true

	case "driver_identity_sum_fields.quasi_driving_models":
		if e.complexity.DriverIdentitySumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_var_pop_fields.accumulatived_points":
		if e.complexity.DriverIdentityVarPopFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_var_pop_fields.driver_license_status":
		if e.complexity.DriverIdentityVarPopFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_var_pop_fields.id":
		if e.complexity.DriverIdentityVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.ID(childComplexity), true

	case "driver_identity_var_pop_fields.quasi_driving_models":
		if e.complexity.DriverIdentityVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_var_samp_fields.accumulatived_points":
		if e.complexity.DriverIdentityVarSampFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_var_samp_fields.driver_license_status":
		if e.complexity.DriverIdentityVarSampFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_var_samp_fields.id":
		if e.complexity.DriverIdentityVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.ID(childComplexity), true

	case "driver_identity_var_samp_fields.quasi_driving_models":
		if e.complexity.DriverIdentityVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.QuasiDrivingModels(childComplexity), true

	case "driver_identity_variance_fields.accumulatived_points":
		if e.complexity.DriverIdentityVarianceFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.AccumulativedPoints(childComplexity), true

	case "driver_identity_variance_fields.driver_license_status":
		if e.complexity.DriverIdentityVarianceFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.DriverLicenseStatus(childComplexity), true

	case "driver_identity_variance_fields.id":
		if e.complexity.DriverIdentityVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.ID(childComplexity), true

	case "driver_identity_variance_fields.quasi_driving_models":
		if e.complexity.DriverIdentityVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.QuasiDrivingModels(childComplexity), true

	case "driver_info.agent":
		if e.complexity.DriverInfo.Agent == nil {
			break
		}

		return e.complexity.DriverInfo.Agent(childComplexity), true

	case "driver_info.check_at":
		if e.complexity.DriverInfo.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfo.CheckAt(childComplexity), true

	case "driver_info.check_by":
		if e.complexity.DriverInfo.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfo.CheckBy(childComplexity), true

	case "driver_info.contact_address":
		if e.complexity.DriverInfo.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfo.ContactAddress(childComplexity), true

	case "driver_info.created_at":
		if e.complexity.DriverInfo.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfo.CreatedAt(childComplexity), true

	case "driver_info.created_by":
		if e.complexity.DriverInfo.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfo.CreatedBy(childComplexity), true

	case "driver_info.deleted_at":
		if e.complexity.DriverInfo.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfo.DeletedAt(childComplexity), true

	case "driver_info.deleted_by":
		if e.complexity.DriverInfo.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfo.DeletedBy(childComplexity), true

	case "driver_info.department_id":
		if e.complexity.DriverInfo.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfo.DepartmentID(childComplexity), true

	case "driver_info.driver_id":
		if e.complexity.DriverInfo.DriverID == nil {
			break
		}

		return e.complexity.DriverInfo.DriverID(childComplexity), true

	case "driver_info.driver_identity_id":
		if e.complexity.DriverInfo.DriverIdentityID == nil {
			break
		}

		return e.complexity.DriverInfo.DriverIdentityID(childComplexity), true

	case "driver_info.driver_name":
		if e.complexity.DriverInfo.DriverName == nil {
			break
		}

		return e.complexity.DriverInfo.DriverName(childComplexity), true

	case "driver_info.enterprise_id":
		if e.complexity.DriverInfo.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfo.EnterpriseID(childComplexity), true

	case "driver_info.files_number":
		if e.complexity.DriverInfo.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfo.FilesNumber(childComplexity), true

	case "driver_info.id":
		if e.complexity.DriverInfo.ID == nil {
			break
		}

		return e.complexity.DriverInfo.ID(childComplexity), true

	case "driver_info.input_at":
		if e.complexity.DriverInfo.InputAt == nil {
			break
		}

		return e.complexity.DriverInfo.InputAt(childComplexity), true

	case "driver_info.input_by":
		if e.complexity.DriverInfo.InputBy == nil {
			break
		}

		return e.complexity.DriverInfo.InputBy(childComplexity), true

	case "driver_info.is_black":
		if e.complexity.DriverInfo.IsBlack == nil {
			break
		}

		return e.complexity.DriverInfo.IsBlack(childComplexity), true

	case "driver_info.is_check_data":
		if e.complexity.DriverInfo.IsCheckData == nil {
			break
		}

		return e.complexity.DriverInfo.IsCheckData(childComplexity), true

	case "driver_info.is_check_sms":
		if e.complexity.DriverInfo.IsCheckSms == nil {
			break
		}

		return e.complexity.DriverInfo.IsCheckSms(childComplexity), true

	case "driver_info.is_delete":
		if e.complexity.DriverInfo.IsDelete == nil {
			break
		}

		return e.complexity.DriverInfo.IsDelete(childComplexity), true

	case "driver_info.is_input":
		if e.complexity.DriverInfo.IsInput == nil {
			break
		}

		return e.complexity.DriverInfo.IsInput(childComplexity), true

	case "driver_info.is_manual_input":
		if e.complexity.DriverInfo.IsManualInput == nil {
			break
		}

		return e.complexity.DriverInfo.IsManualInput(childComplexity), true

	case "driver_info.is_submit":
		if e.complexity.DriverInfo.IsSubmit == nil {
			break
		}

		return e.complexity.DriverInfo.IsSubmit(childComplexity), true

	case "driver_info.mailing_address":
		if e.complexity.DriverInfo.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfo.MailingAddress(childComplexity), true

	case "driver_info.operator":
		if e.complexity.DriverInfo.Operator == nil {
			break
		}

		return e.complexity.DriverInfo.Operator(childComplexity), true

	case "driver_info.remark_in":
		if e.complexity.DriverInfo.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfo.RemarkIn(childComplexity), true

	case "driver_info.remarks":
		if e.complexity.DriverInfo.Remarks == nil {
			break
		}

		return e.complexity.DriverInfo.Remarks(childComplexity), true

	case "driver_info.sex":
		if e.complexity.DriverInfo.Sex == nil {
			break
		}

		return e.complexity.DriverInfo.Sex(childComplexity), true

	case "driver_info.submit_at":
		if e.complexity.DriverInfo.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitAt(childComplexity), true

	case "driver_info.submit_by":
		if e.complexity.DriverInfo.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitBy(childComplexity), true

	case "driver_info.submit_content":
		if e.complexity.DriverInfo.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitContent(childComplexity), true

	case "driver_info.telephone":
		if e.complexity.DriverInfo.Telephone == nil {
			break
		}

		return e.complexity.DriverInfo.Telephone(childComplexity), true

	case "driver_info.update_time_in":
		if e.complexity.DriverInfo.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfo.UpdateTimeIn(childComplexity), true

	case "driver_info.updated_at":
		if e.complexity.DriverInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfo.UpdatedAt(childComplexity), true

	case "driver_info.updated_by":
		if e.complexity.DriverInfo.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfo.UpdatedBy(childComplexity), true

	case "driver_info_aggregate.aggregate":
		if e.complexity.DriverInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverInfoAggregate.Aggregate(childComplexity), true

	case "driver_info_aggregate.nodes":
		if e.complexity.DriverInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.DriverInfoAggregate.Nodes(childComplexity), true

	case "driver_info_aggregate_fields.avg":
		if e.complexity.DriverInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Avg(childComplexity), true

	case "driver_info_aggregate_fields.count":
		if e.complexity.DriverInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_driver_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DriverInfoAggregateFields.Count(childComplexity, args["columns"].([]model.DriverInfoSelectColumn), args["distinct"].(*bool)), true

	case "driver_info_aggregate_fields.max":
		if e.complexity.DriverInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Max(childComplexity), true

	case "driver_info_aggregate_fields.min":
		if e.complexity.DriverInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Min(childComplexity), true

	case "driver_info_aggregate_fields.stddev":
		if e.complexity.DriverInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Stddev(childComplexity), true

	case "driver_info_aggregate_fields.stddev_pop":
		if e.complexity.DriverInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.StddevPop(childComplexity), true

	case "driver_info_aggregate_fields.stddev_samp":
		if e.complexity.DriverInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.StddevSamp(childComplexity), true

	case "driver_info_aggregate_fields.sum":
		if e.complexity.DriverInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Sum(childComplexity), true

	case "driver_info_aggregate_fields.var_pop":
		if e.complexity.DriverInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.VarPop(childComplexity), true

	case "driver_info_aggregate_fields.var_samp":
		if e.complexity.DriverInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.VarSamp(childComplexity), true

	case "driver_info_aggregate_fields.variance":
		if e.complexity.DriverInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Variance(childComplexity), true

	case "driver_info_avg_fields.id":
		if e.complexity.DriverInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoAvgFields.ID(childComplexity), true

	case "driver_info_avg_fields.sex":
		if e.complexity.DriverInfoAvgFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoAvgFields.Sex(childComplexity), true

	case "driver_info_change_log.accumulatived_points":
		if e.complexity.DriverInfoChangeLog.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log.agent":
		if e.complexity.DriverInfoChangeLog.Agent == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.Agent(childComplexity), true

	case "driver_info_change_log.annual_review_date":
		if e.complexity.DriverInfoChangeLog.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.AnnualReviewDate(childComplexity), true

	case "driver_info_change_log.check_at":
		if e.complexity.DriverInfoChangeLog.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.CheckAt(childComplexity), true

	case "driver_info_change_log.check_by":
		if e.complexity.DriverInfoChangeLog.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.CheckBy(childComplexity), true

	case "driver_info_change_log.contact_address":
		if e.complexity.DriverInfoChangeLog.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.ContactAddress(childComplexity), true

	case "driver_info_change_log.created_at":
		if e.complexity.DriverInfoChangeLog.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.CreatedAt(childComplexity), true

	case "driver_info_change_log.created_by":
		if e.complexity.DriverInfoChangeLog.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.CreatedBy(childComplexity), true

	case "driver_info_change_log.deleted_at":
		if e.complexity.DriverInfoChangeLog.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DeletedAt(childComplexity), true

	case "driver_info_change_log.deleted_by":
		if e.complexity.DriverInfoChangeLog.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DeletedBy(childComplexity), true

	case "driver_info_change_log.department_id":
		if e.complexity.DriverInfoChangeLog.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DepartmentID(childComplexity), true

	case "driver_info_change_log.driver_holding_id_photo":
		if e.complexity.DriverInfoChangeLog.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverHoldingIDPhoto(childComplexity), true

	case "driver_info_change_log.driver_id":
		if e.complexity.DriverInfoChangeLog.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverID(childComplexity), true

	case "driver_info_change_log.driver_info_change_log_id":
		if e.complexity.DriverInfoChangeLog.DriverInfoChangeLogID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverInfoChangeLogID(childComplexity), true

	case "driver_info_change_log.driver_license_city_id":
		if e.complexity.DriverInfoChangeLog.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicenseCityID(childComplexity), true

	case "driver_info_change_log.driver_license_district_id":
		if e.complexity.DriverInfoChangeLog.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicenseDistrictID(childComplexity), true

	case "driver_info_change_log.driver_license_issue_date":
		if e.complexity.DriverInfoChangeLog.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicenseIssueDate(childComplexity), true

	case "driver_info_change_log.driver_license_issuing_authority":
		if e.complexity.DriverInfoChangeLog.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicenseIssuingAuthority(childComplexity), true

	case "driver_info_change_log.driver_license_pic":
		if e.complexity.DriverInfoChangeLog.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicensePic(childComplexity), true

	case "driver_info_change_log.driver_license_province_id":
		if e.complexity.DriverInfoChangeLog.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicenseProvinceID(childComplexity), true

	case "driver_info_change_log.driver_license_status":
		if e.complexity.DriverInfoChangeLog.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log.driver_name":
		if e.complexity.DriverInfoChangeLog.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverName(childComplexity), true

	case "driver_info_change_log.driver_photo":
		if e.complexity.DriverInfoChangeLog.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverPhoto(childComplexity), true

	case "driver_info_change_log.driver_signature":
		if e.complexity.DriverInfoChangeLog.DriverSignature == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.DriverSignature(childComplexity), true

	case "driver_info_change_log.enterprise_id":
		if e.complexity.DriverInfoChangeLog.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.EnterpriseID(childComplexity), true

	case "driver_info_change_log.files_number":
		if e.complexity.DriverInfoChangeLog.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.FilesNumber(childComplexity), true

	case "driver_info_change_log.id":
		if e.complexity.DriverInfoChangeLog.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.ID(childComplexity), true

	case "driver_info_change_log.id_card_address":
		if e.complexity.DriverInfoChangeLog.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardAddress(childComplexity), true

	case "driver_info_change_log.id_card_back_pic":
		if e.complexity.DriverInfoChangeLog.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardBackPic(childComplexity), true

	case "driver_info_change_log.id_card_birthday":
		if e.complexity.DriverInfoChangeLog.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardBirthday(childComplexity), true

	case "driver_info_change_log.id_card_end_date":
		if e.complexity.DriverInfoChangeLog.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardEndDate(childComplexity), true

	case "driver_info_change_log.id_card_front_pic":
		if e.complexity.DriverInfoChangeLog.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardFrontPic(childComplexity), true

	case "driver_info_change_log.id_card_nation":
		if e.complexity.DriverInfoChangeLog.IDCardNation == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardNation(childComplexity), true

	case "driver_info_change_log.id_card_num":
		if e.complexity.DriverInfoChangeLog.IDCardNum == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardNum(childComplexity), true

	case "driver_info_change_log.id_card_sign_government":
		if e.complexity.DriverInfoChangeLog.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardSignGovernment(childComplexity), true

	case "driver_info_change_log.id_card_start_date":
		if e.complexity.DriverInfoChangeLog.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IDCardStartDate(childComplexity), true

	case "driver_info_change_log.input_at":
		if e.complexity.DriverInfoChangeLog.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.InputAt(childComplexity), true

	case "driver_info_change_log.input_by":
		if e.complexity.DriverInfoChangeLog.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.InputBy(childComplexity), true

	case "driver_info_change_log.is_black":
		if e.complexity.DriverInfoChangeLog.IsBlack == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsBlack(childComplexity), true

	case "driver_info_change_log.is_check_data":
		if e.complexity.DriverInfoChangeLog.IsCheckData == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsCheckData(childComplexity), true

	case "driver_info_change_log.is_check_sms":
		if e.complexity.DriverInfoChangeLog.IsCheckSms == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsCheckSms(childComplexity), true

	case "driver_info_change_log.is_delete":
		if e.complexity.DriverInfoChangeLog.IsDelete == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsDelete(childComplexity), true

	case "driver_info_change_log.is_input":
		if e.complexity.DriverInfoChangeLog.IsInput == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsInput(childComplexity), true

	case "driver_info_change_log.is_manual_input":
		if e.complexity.DriverInfoChangeLog.IsManualInput == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsManualInput(childComplexity), true

	case "driver_info_change_log.is_review":
		if e.complexity.DriverInfoChangeLog.IsReview == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsReview(childComplexity), true

	case "driver_info_change_log.is_submit":
		if e.complexity.DriverInfoChangeLog.IsSubmit == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.IsSubmit(childComplexity), true

	case "driver_info_change_log.labor_contract":
		if e.complexity.DriverInfoChangeLog.LaborContract == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.LaborContract(childComplexity), true

	case "driver_info_change_log.mailing_address":
		if e.complexity.DriverInfoChangeLog.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.MailingAddress(childComplexity), true

	case "driver_info_change_log.occupational_expire_date":
		if e.complexity.DriverInfoChangeLog.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.OccupationalExpireDate(childComplexity), true

	case "driver_info_change_log.occupational_issuing_authority":
		if e.complexity.DriverInfoChangeLog.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.OccupationalIssuingAuthority(childComplexity), true

	case "driver_info_change_log.occupational_number":
		if e.complexity.DriverInfoChangeLog.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.OccupationalNumber(childComplexity), true

	case "driver_info_change_log.operator":
		if e.complexity.DriverInfoChangeLog.Operator == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.Operator(childComplexity), true

	case "driver_info_change_log.quasi_driving_models":
		if e.complexity.DriverInfoChangeLog.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log.remark_in":
		if e.complexity.DriverInfoChangeLog.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.RemarkIn(childComplexity), true

	case "driver_info_change_log.remarks":
		if e.complexity.DriverInfoChangeLog.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.Remarks(childComplexity), true

	case "driver_info_change_log.renewal_date":
		if e.complexity.DriverInfoChangeLog.RenewalDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.RenewalDate(childComplexity), true

	case "driver_info_change_log.sex":
		if e.complexity.DriverInfoChangeLog.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.Sex(childComplexity), true

	case "driver_info_change_log.sorting_date":
		if e.complexity.DriverInfoChangeLog.SortingDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.SortingDate(childComplexity), true

	case "driver_info_change_log.submit_at":
		if e.complexity.DriverInfoChangeLog.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.SubmitAt(childComplexity), true

	case "driver_info_change_log.submit_by":
		if e.complexity.DriverInfoChangeLog.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.SubmitBy(childComplexity), true

	case "driver_info_change_log.submit_content":
		if e.complexity.DriverInfoChangeLog.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.SubmitContent(childComplexity), true

	case "driver_info_change_log.telephone":
		if e.complexity.DriverInfoChangeLog.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.Telephone(childComplexity), true

	case "driver_info_change_log.update_time_in":
		if e.complexity.DriverInfoChangeLog.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.UpdateTimeIn(childComplexity), true

	case "driver_info_change_log.updated_at":
		if e.complexity.DriverInfoChangeLog.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.UpdatedAt(childComplexity), true

	case "driver_info_change_log.updated_by":
		if e.complexity.DriverInfoChangeLog.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.UpdatedBy(childComplexity), true

	case "driver_info_change_log.working_time":
		if e.complexity.DriverInfoChangeLog.WorkingTime == nil {
			break
		}

		return e.complexity.DriverInfoChangeLog.WorkingTime(childComplexity), true

	case "driver_info_change_log_aggregate.aggregate":
		if e.complexity.DriverInfoChangeLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregate.Aggregate(childComplexity), true

	case "driver_info_change_log_aggregate.nodes":
		if e.complexity.DriverInfoChangeLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregate.Nodes(childComplexity), true

	case "driver_info_change_log_aggregate_fields.avg":
		if e.complexity.DriverInfoChangeLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Avg(childComplexity), true

	case "driver_info_change_log_aggregate_fields.count":
		if e.complexity.DriverInfoChangeLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_driver_info_change_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Count(childComplexity, args["columns"].([]model.DriverInfoChangeLogSelectColumn), args["distinct"].(*bool)), true

	case "driver_info_change_log_aggregate_fields.max":
		if e.complexity.DriverInfoChangeLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Max(childComplexity), true

	case "driver_info_change_log_aggregate_fields.min":
		if e.complexity.DriverInfoChangeLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Min(childComplexity), true

	case "driver_info_change_log_aggregate_fields.stddev":
		if e.complexity.DriverInfoChangeLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Stddev(childComplexity), true

	case "driver_info_change_log_aggregate_fields.stddev_pop":
		if e.complexity.DriverInfoChangeLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.StddevPop(childComplexity), true

	case "driver_info_change_log_aggregate_fields.stddev_samp":
		if e.complexity.DriverInfoChangeLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.StddevSamp(childComplexity), true

	case "driver_info_change_log_aggregate_fields.sum":
		if e.complexity.DriverInfoChangeLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Sum(childComplexity), true

	case "driver_info_change_log_aggregate_fields.var_pop":
		if e.complexity.DriverInfoChangeLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.VarPop(childComplexity), true

	case "driver_info_change_log_aggregate_fields.var_samp":
		if e.complexity.DriverInfoChangeLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.VarSamp(childComplexity), true

	case "driver_info_change_log_aggregate_fields.variance":
		if e.complexity.DriverInfoChangeLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAggregateFields.Variance(childComplexity), true

	case "driver_info_change_log_avg_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogAvgFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAvgFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_avg_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogAvgFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAvgFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_avg_fields.id":
		if e.complexity.DriverInfoChangeLogAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAvgFields.ID(childComplexity), true

	case "driver_info_change_log_avg_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAvgFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_avg_fields.sex":
		if e.complexity.DriverInfoChangeLogAvgFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogAvgFields.Sex(childComplexity), true

	case "driver_info_change_log_max_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogMaxFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_max_fields.agent":
		if e.complexity.DriverInfoChangeLogMaxFields.Agent == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.Agent(childComplexity), true

	case "driver_info_change_log_max_fields.annual_review_date":
		if e.complexity.DriverInfoChangeLogMaxFields.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.AnnualReviewDate(childComplexity), true

	case "driver_info_change_log_max_fields.check_at":
		if e.complexity.DriverInfoChangeLogMaxFields.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.CheckAt(childComplexity), true

	case "driver_info_change_log_max_fields.check_by":
		if e.complexity.DriverInfoChangeLogMaxFields.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.CheckBy(childComplexity), true

	case "driver_info_change_log_max_fields.contact_address":
		if e.complexity.DriverInfoChangeLogMaxFields.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.ContactAddress(childComplexity), true

	case "driver_info_change_log_max_fields.created_at":
		if e.complexity.DriverInfoChangeLogMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.CreatedAt(childComplexity), true

	case "driver_info_change_log_max_fields.created_by":
		if e.complexity.DriverInfoChangeLogMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.CreatedBy(childComplexity), true

	case "driver_info_change_log_max_fields.deleted_at":
		if e.complexity.DriverInfoChangeLogMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DeletedAt(childComplexity), true

	case "driver_info_change_log_max_fields.deleted_by":
		if e.complexity.DriverInfoChangeLogMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DeletedBy(childComplexity), true

	case "driver_info_change_log_max_fields.department_id":
		if e.complexity.DriverInfoChangeLogMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DepartmentID(childComplexity), true

	case "driver_info_change_log_max_fields.driver_holding_id_photo":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverHoldingIDPhoto(childComplexity), true

	case "driver_info_change_log_max_fields.driver_id":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverID(childComplexity), true

	case "driver_info_change_log_max_fields.driver_info_change_log_id":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverInfoChangeLogID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverInfoChangeLogID(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_city_id":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseCityID(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_district_id":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseDistrictID(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_issue_date":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseIssueDate(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_issuing_authority":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseIssuingAuthority(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_pic":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicensePic(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_province_id":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseProvinceID(childComplexity), true

	case "driver_info_change_log_max_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_max_fields.driver_name":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverName(childComplexity), true

	case "driver_info_change_log_max_fields.driver_photo":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverPhoto(childComplexity), true

	case "driver_info_change_log_max_fields.driver_signature":
		if e.complexity.DriverInfoChangeLogMaxFields.DriverSignature == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.DriverSignature(childComplexity), true

	case "driver_info_change_log_max_fields.enterprise_id":
		if e.complexity.DriverInfoChangeLogMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.EnterpriseID(childComplexity), true

	case "driver_info_change_log_max_fields.files_number":
		if e.complexity.DriverInfoChangeLogMaxFields.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.FilesNumber(childComplexity), true

	case "driver_info_change_log_max_fields.id":
		if e.complexity.DriverInfoChangeLogMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.ID(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_address":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardAddress(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_back_pic":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardBackPic(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_birthday":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardBirthday(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_end_date":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardEndDate(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_front_pic":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardFrontPic(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_nation":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardNation == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardNation(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_num":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardNum == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardNum(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_sign_government":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardSignGovernment(childComplexity), true

	case "driver_info_change_log_max_fields.id_card_start_date":
		if e.complexity.DriverInfoChangeLogMaxFields.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.IDCardStartDate(childComplexity), true

	case "driver_info_change_log_max_fields.input_at":
		if e.complexity.DriverInfoChangeLogMaxFields.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.InputAt(childComplexity), true

	case "driver_info_change_log_max_fields.input_by":
		if e.complexity.DriverInfoChangeLogMaxFields.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.InputBy(childComplexity), true

	case "driver_info_change_log_max_fields.mailing_address":
		if e.complexity.DriverInfoChangeLogMaxFields.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.MailingAddress(childComplexity), true

	case "driver_info_change_log_max_fields.occupational_expire_date":
		if e.complexity.DriverInfoChangeLogMaxFields.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.OccupationalExpireDate(childComplexity), true

	case "driver_info_change_log_max_fields.occupational_issuing_authority":
		if e.complexity.DriverInfoChangeLogMaxFields.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.OccupationalIssuingAuthority(childComplexity), true

	case "driver_info_change_log_max_fields.occupational_number":
		if e.complexity.DriverInfoChangeLogMaxFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.OccupationalNumber(childComplexity), true

	case "driver_info_change_log_max_fields.operator":
		if e.complexity.DriverInfoChangeLogMaxFields.Operator == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.Operator(childComplexity), true

	case "driver_info_change_log_max_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_max_fields.remark_in":
		if e.complexity.DriverInfoChangeLogMaxFields.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.RemarkIn(childComplexity), true

	case "driver_info_change_log_max_fields.remarks":
		if e.complexity.DriverInfoChangeLogMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.Remarks(childComplexity), true

	case "driver_info_change_log_max_fields.renewal_date":
		if e.complexity.DriverInfoChangeLogMaxFields.RenewalDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.RenewalDate(childComplexity), true

	case "driver_info_change_log_max_fields.sex":
		if e.complexity.DriverInfoChangeLogMaxFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.Sex(childComplexity), true

	case "driver_info_change_log_max_fields.sorting_date":
		if e.complexity.DriverInfoChangeLogMaxFields.SortingDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.SortingDate(childComplexity), true

	case "driver_info_change_log_max_fields.submit_at":
		if e.complexity.DriverInfoChangeLogMaxFields.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.SubmitAt(childComplexity), true

	case "driver_info_change_log_max_fields.submit_by":
		if e.complexity.DriverInfoChangeLogMaxFields.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.SubmitBy(childComplexity), true

	case "driver_info_change_log_max_fields.submit_content":
		if e.complexity.DriverInfoChangeLogMaxFields.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.SubmitContent(childComplexity), true

	case "driver_info_change_log_max_fields.telephone":
		if e.complexity.DriverInfoChangeLogMaxFields.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.Telephone(childComplexity), true

	case "driver_info_change_log_max_fields.update_time_in":
		if e.complexity.DriverInfoChangeLogMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.UpdateTimeIn(childComplexity), true

	case "driver_info_change_log_max_fields.updated_at":
		if e.complexity.DriverInfoChangeLogMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.UpdatedAt(childComplexity), true

	case "driver_info_change_log_max_fields.updated_by":
		if e.complexity.DriverInfoChangeLogMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.UpdatedBy(childComplexity), true

	case "driver_info_change_log_max_fields.working_time":
		if e.complexity.DriverInfoChangeLogMaxFields.WorkingTime == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMaxFields.WorkingTime(childComplexity), true

	case "driver_info_change_log_min_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogMinFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_min_fields.agent":
		if e.complexity.DriverInfoChangeLogMinFields.Agent == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.Agent(childComplexity), true

	case "driver_info_change_log_min_fields.annual_review_date":
		if e.complexity.DriverInfoChangeLogMinFields.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.AnnualReviewDate(childComplexity), true

	case "driver_info_change_log_min_fields.check_at":
		if e.complexity.DriverInfoChangeLogMinFields.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.CheckAt(childComplexity), true

	case "driver_info_change_log_min_fields.check_by":
		if e.complexity.DriverInfoChangeLogMinFields.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.CheckBy(childComplexity), true

	case "driver_info_change_log_min_fields.contact_address":
		if e.complexity.DriverInfoChangeLogMinFields.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.ContactAddress(childComplexity), true

	case "driver_info_change_log_min_fields.created_at":
		if e.complexity.DriverInfoChangeLogMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.CreatedAt(childComplexity), true

	case "driver_info_change_log_min_fields.created_by":
		if e.complexity.DriverInfoChangeLogMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.CreatedBy(childComplexity), true

	case "driver_info_change_log_min_fields.deleted_at":
		if e.complexity.DriverInfoChangeLogMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DeletedAt(childComplexity), true

	case "driver_info_change_log_min_fields.deleted_by":
		if e.complexity.DriverInfoChangeLogMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DeletedBy(childComplexity), true

	case "driver_info_change_log_min_fields.department_id":
		if e.complexity.DriverInfoChangeLogMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DepartmentID(childComplexity), true

	case "driver_info_change_log_min_fields.driver_holding_id_photo":
		if e.complexity.DriverInfoChangeLogMinFields.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverHoldingIDPhoto(childComplexity), true

	case "driver_info_change_log_min_fields.driver_id":
		if e.complexity.DriverInfoChangeLogMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverID(childComplexity), true

	case "driver_info_change_log_min_fields.driver_info_change_log_id":
		if e.complexity.DriverInfoChangeLogMinFields.DriverInfoChangeLogID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverInfoChangeLogID(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_city_id":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicenseCityID(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_district_id":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicenseDistrictID(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_issue_date":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicenseIssueDate(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_issuing_authority":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicenseIssuingAuthority(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_pic":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicensePic(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_province_id":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicenseProvinceID(childComplexity), true

	case "driver_info_change_log_min_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogMinFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_min_fields.driver_name":
		if e.complexity.DriverInfoChangeLogMinFields.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverName(childComplexity), true

	case "driver_info_change_log_min_fields.driver_photo":
		if e.complexity.DriverInfoChangeLogMinFields.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverPhoto(childComplexity), true

	case "driver_info_change_log_min_fields.driver_signature":
		if e.complexity.DriverInfoChangeLogMinFields.DriverSignature == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.DriverSignature(childComplexity), true

	case "driver_info_change_log_min_fields.enterprise_id":
		if e.complexity.DriverInfoChangeLogMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.EnterpriseID(childComplexity), true

	case "driver_info_change_log_min_fields.files_number":
		if e.complexity.DriverInfoChangeLogMinFields.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.FilesNumber(childComplexity), true

	case "driver_info_change_log_min_fields.id":
		if e.complexity.DriverInfoChangeLogMinFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.ID(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_address":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardAddress(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_back_pic":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardBackPic(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_birthday":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardBirthday(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_end_date":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardEndDate(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_front_pic":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardFrontPic(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_nation":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardNation == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardNation(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_num":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardNum == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardNum(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_sign_government":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardSignGovernment(childComplexity), true

	case "driver_info_change_log_min_fields.id_card_start_date":
		if e.complexity.DriverInfoChangeLogMinFields.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.IDCardStartDate(childComplexity), true

	case "driver_info_change_log_min_fields.input_at":
		if e.complexity.DriverInfoChangeLogMinFields.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.InputAt(childComplexity), true

	case "driver_info_change_log_min_fields.input_by":
		if e.complexity.DriverInfoChangeLogMinFields.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.InputBy(childComplexity), true

	case "driver_info_change_log_min_fields.mailing_address":
		if e.complexity.DriverInfoChangeLogMinFields.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.MailingAddress(childComplexity), true

	case "driver_info_change_log_min_fields.occupational_expire_date":
		if e.complexity.DriverInfoChangeLogMinFields.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.OccupationalExpireDate(childComplexity), true

	case "driver_info_change_log_min_fields.occupational_issuing_authority":
		if e.complexity.DriverInfoChangeLogMinFields.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.OccupationalIssuingAuthority(childComplexity), true

	case "driver_info_change_log_min_fields.occupational_number":
		if e.complexity.DriverInfoChangeLogMinFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.OccupationalNumber(childComplexity), true

	case "driver_info_change_log_min_fields.operator":
		if e.complexity.DriverInfoChangeLogMinFields.Operator == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.Operator(childComplexity), true

	case "driver_info_change_log_min_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_min_fields.remark_in":
		if e.complexity.DriverInfoChangeLogMinFields.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.RemarkIn(childComplexity), true

	case "driver_info_change_log_min_fields.remarks":
		if e.complexity.DriverInfoChangeLogMinFields.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.Remarks(childComplexity), true

	case "driver_info_change_log_min_fields.renewal_date":
		if e.complexity.DriverInfoChangeLogMinFields.RenewalDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.RenewalDate(childComplexity), true

	case "driver_info_change_log_min_fields.sex":
		if e.complexity.DriverInfoChangeLogMinFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.Sex(childComplexity), true

	case "driver_info_change_log_min_fields.sorting_date":
		if e.complexity.DriverInfoChangeLogMinFields.SortingDate == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.SortingDate(childComplexity), true

	case "driver_info_change_log_min_fields.submit_at":
		if e.complexity.DriverInfoChangeLogMinFields.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.SubmitAt(childComplexity), true

	case "driver_info_change_log_min_fields.submit_by":
		if e.complexity.DriverInfoChangeLogMinFields.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.SubmitBy(childComplexity), true

	case "driver_info_change_log_min_fields.submit_content":
		if e.complexity.DriverInfoChangeLogMinFields.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.SubmitContent(childComplexity), true

	case "driver_info_change_log_min_fields.telephone":
		if e.complexity.DriverInfoChangeLogMinFields.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.Telephone(childComplexity), true

	case "driver_info_change_log_min_fields.update_time_in":
		if e.complexity.DriverInfoChangeLogMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.UpdateTimeIn(childComplexity), true

	case "driver_info_change_log_min_fields.updated_at":
		if e.complexity.DriverInfoChangeLogMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.UpdatedAt(childComplexity), true

	case "driver_info_change_log_min_fields.updated_by":
		if e.complexity.DriverInfoChangeLogMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.UpdatedBy(childComplexity), true

	case "driver_info_change_log_min_fields.working_time":
		if e.complexity.DriverInfoChangeLogMinFields.WorkingTime == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMinFields.WorkingTime(childComplexity), true

	case "driver_info_change_log_mutation_response.affected_rows":
		if e.complexity.DriverInfoChangeLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMutationResponse.AffectedRows(childComplexity), true

	case "driver_info_change_log_mutation_response.returning":
		if e.complexity.DriverInfoChangeLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogMutationResponse.Returning(childComplexity), true

	case "driver_info_change_log_stddev_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogStddevFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_stddev_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogStddevFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_stddev_fields.id":
		if e.complexity.DriverInfoChangeLogStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevFields.ID(childComplexity), true

	case "driver_info_change_log_stddev_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_stddev_fields.sex":
		if e.complexity.DriverInfoChangeLogStddevFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevFields.Sex(childComplexity), true

	case "driver_info_change_log_stddev_pop_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogStddevPopFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevPopFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_stddev_pop_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogStddevPopFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevPopFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_stddev_pop_fields.id":
		if e.complexity.DriverInfoChangeLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevPopFields.ID(childComplexity), true

	case "driver_info_change_log_stddev_pop_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_stddev_pop_fields.sex":
		if e.complexity.DriverInfoChangeLogStddevPopFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevPopFields.Sex(childComplexity), true

	case "driver_info_change_log_stddev_samp_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogStddevSampFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevSampFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_stddev_samp_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogStddevSampFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevSampFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_stddev_samp_fields.id":
		if e.complexity.DriverInfoChangeLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevSampFields.ID(childComplexity), true

	case "driver_info_change_log_stddev_samp_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_stddev_samp_fields.sex":
		if e.complexity.DriverInfoChangeLogStddevSampFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogStddevSampFields.Sex(childComplexity), true

	case "driver_info_change_log_sum_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogSumFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogSumFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_sum_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogSumFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogSumFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_sum_fields.id":
		if e.complexity.DriverInfoChangeLogSumFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogSumFields.ID(childComplexity), true

	case "driver_info_change_log_sum_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogSumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogSumFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_sum_fields.sex":
		if e.complexity.DriverInfoChangeLogSumFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogSumFields.Sex(childComplexity), true

	case "driver_info_change_log_var_pop_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogVarPopFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarPopFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_var_pop_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogVarPopFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarPopFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_var_pop_fields.id":
		if e.complexity.DriverInfoChangeLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarPopFields.ID(childComplexity), true

	case "driver_info_change_log_var_pop_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarPopFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_var_pop_fields.sex":
		if e.complexity.DriverInfoChangeLogVarPopFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarPopFields.Sex(childComplexity), true

	case "driver_info_change_log_var_samp_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogVarSampFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarSampFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_var_samp_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogVarSampFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarSampFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_var_samp_fields.id":
		if e.complexity.DriverInfoChangeLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarSampFields.ID(childComplexity), true

	case "driver_info_change_log_var_samp_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarSampFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_var_samp_fields.sex":
		if e.complexity.DriverInfoChangeLogVarSampFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarSampFields.Sex(childComplexity), true

	case "driver_info_change_log_variance_fields.accumulatived_points":
		if e.complexity.DriverInfoChangeLogVarianceFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarianceFields.AccumulativedPoints(childComplexity), true

	case "driver_info_change_log_variance_fields.driver_license_status":
		if e.complexity.DriverInfoChangeLogVarianceFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarianceFields.DriverLicenseStatus(childComplexity), true

	case "driver_info_change_log_variance_fields.id":
		if e.complexity.DriverInfoChangeLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarianceFields.ID(childComplexity), true

	case "driver_info_change_log_variance_fields.quasi_driving_models":
		if e.complexity.DriverInfoChangeLogVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarianceFields.QuasiDrivingModels(childComplexity), true

	case "driver_info_change_log_variance_fields.sex":
		if e.complexity.DriverInfoChangeLogVarianceFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoChangeLogVarianceFields.Sex(childComplexity), true

	case "driver_info_max_fields.agent":
		if e.complexity.DriverInfoMaxFields.Agent == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Agent(childComplexity), true

	case "driver_info_max_fields.check_at":
		if e.complexity.DriverInfoMaxFields.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CheckAt(childComplexity), true

	case "driver_info_max_fields.check_by":
		if e.complexity.DriverInfoMaxFields.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CheckBy(childComplexity), true

	case "driver_info_max_fields.contact_address":
		if e.complexity.DriverInfoMaxFields.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.ContactAddress(childComplexity), true

	case "driver_info_max_fields.created_at":
		if e.complexity.DriverInfoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CreatedAt(childComplexity), true

	case "driver_info_max_fields.created_by":
		if e.complexity.DriverInfoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CreatedBy(childComplexity), true

	case "driver_info_max_fields.deleted_at":
		if e.complexity.DriverInfoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DeletedAt(childComplexity), true

	case "driver_info_max_fields.deleted_by":
		if e.complexity.DriverInfoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DeletedBy(childComplexity), true

	case "driver_info_max_fields.department_id":
		if e.complexity.DriverInfoMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DepartmentID(childComplexity), true

	case "driver_info_max_fields.driver_id":
		if e.complexity.DriverInfoMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DriverID(childComplexity), true

	case "driver_info_max_fields.driver_identity_id":
		if e.complexity.DriverInfoMaxFields.DriverIdentityID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DriverIdentityID(childComplexity), true

	case "driver_info_max_fields.driver_name":
		if e.complexity.DriverInfoMaxFields.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DriverName(childComplexity), true

	case "driver_info_max_fields.enterprise_id":
		if e.complexity.DriverInfoMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.EnterpriseID(childComplexity), true

	case "driver_info_max_fields.files_number":
		if e.complexity.DriverInfoMaxFields.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.FilesNumber(childComplexity), true

	case "driver_info_max_fields.id":
		if e.complexity.DriverInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.ID(childComplexity), true

	case "driver_info_max_fields.input_at":
		if e.complexity.DriverInfoMaxFields.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.InputAt(childComplexity), true

	case "driver_info_max_fields.input_by":
		if e.complexity.DriverInfoMaxFields.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.InputBy(childComplexity), true

	case "driver_info_max_fields.mailing_address":
		if e.complexity.DriverInfoMaxFields.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.MailingAddress(childComplexity), true

	case "driver_info_max_fields.operator":
		if e.complexity.DriverInfoMaxFields.Operator == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Operator(childComplexity), true

	case "driver_info_max_fields.remark_in":
		if e.complexity.DriverInfoMaxFields.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.RemarkIn(childComplexity), true

	case "driver_info_max_fields.remarks":
		if e.complexity.DriverInfoMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Remarks(childComplexity), true

	case "driver_info_max_fields.sex":
		if e.complexity.DriverInfoMaxFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Sex(childComplexity), true

	case "driver_info_max_fields.submit_at":
		if e.complexity.DriverInfoMaxFields.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.SubmitAt(childComplexity), true

	case "driver_info_max_fields.submit_by":
		if e.complexity.DriverInfoMaxFields.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.SubmitBy(childComplexity), true

	case "driver_info_max_fields.submit_content":
		if e.complexity.DriverInfoMaxFields.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.SubmitContent(childComplexity), true

	case "driver_info_max_fields.telephone":
		if e.complexity.DriverInfoMaxFields.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Telephone(childComplexity), true

	case "driver_info_max_fields.update_time_in":
		if e.complexity.DriverInfoMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.UpdateTimeIn(childComplexity), true

	case "driver_info_max_fields.updated_at":
		if e.complexity.DriverInfoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.UpdatedAt(childComplexity), true

	case "driver_info_max_fields.updated_by":
		if e.complexity.DriverInfoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.UpdatedBy(childComplexity), true

	case "driver_info_min_fields.agent":
		if e.complexity.DriverInfoMinFields.Agent == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Agent(childComplexity), true

	case "driver_info_min_fields.check_at":
		if e.complexity.DriverInfoMinFields.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CheckAt(childComplexity), true

	case "driver_info_min_fields.check_by":
		if e.complexity.DriverInfoMinFields.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CheckBy(childComplexity), true

	case "driver_info_min_fields.contact_address":
		if e.complexity.DriverInfoMinFields.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.ContactAddress(childComplexity), true

	case "driver_info_min_fields.created_at":
		if e.complexity.DriverInfoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CreatedAt(childComplexity), true

	case "driver_info_min_fields.created_by":
		if e.complexity.DriverInfoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CreatedBy(childComplexity), true

	case "driver_info_min_fields.deleted_at":
		if e.complexity.DriverInfoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DeletedAt(childComplexity), true

	case "driver_info_min_fields.deleted_by":
		if e.complexity.DriverInfoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DeletedBy(childComplexity), true

	case "driver_info_min_fields.department_id":
		if e.complexity.DriverInfoMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DepartmentID(childComplexity), true

	case "driver_info_min_fields.driver_id":
		if e.complexity.DriverInfoMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DriverID(childComplexity), true

	case "driver_info_min_fields.driver_identity_id":
		if e.complexity.DriverInfoMinFields.DriverIdentityID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DriverIdentityID(childComplexity), true

	case "driver_info_min_fields.driver_name":
		if e.complexity.DriverInfoMinFields.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DriverName(childComplexity), true

	case "driver_info_min_fields.enterprise_id":
		if e.complexity.DriverInfoMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.EnterpriseID(childComplexity), true

	case "driver_info_min_fields.files_number":
		if e.complexity.DriverInfoMinFields.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.FilesNumber(childComplexity), true

	case "driver_info_min_fields.id":
		if e.complexity.DriverInfoMinFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.ID(childComplexity), true

	case "driver_info_min_fields.input_at":
		if e.complexity.DriverInfoMinFields.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.InputAt(childComplexity), true

	case "driver_info_min_fields.input_by":
		if e.complexity.DriverInfoMinFields.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.InputBy(childComplexity), true

	case "driver_info_min_fields.mailing_address":
		if e.complexity.DriverInfoMinFields.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.MailingAddress(childComplexity), true

	case "driver_info_min_fields.operator":
		if e.complexity.DriverInfoMinFields.Operator == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Operator(childComplexity), true

	case "driver_info_min_fields.remark_in":
		if e.complexity.DriverInfoMinFields.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.RemarkIn(childComplexity), true

	case "driver_info_min_fields.remarks":
		if e.complexity.DriverInfoMinFields.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Remarks(childComplexity), true

	case "driver_info_min_fields.sex":
		if e.complexity.DriverInfoMinFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Sex(childComplexity), true

	case "driver_info_min_fields.submit_at":
		if e.complexity.DriverInfoMinFields.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.SubmitAt(childComplexity), true

	case "driver_info_min_fields.submit_by":
		if e.complexity.DriverInfoMinFields.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.SubmitBy(childComplexity), true

	case "driver_info_min_fields.submit_content":
		if e.complexity.DriverInfoMinFields.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.SubmitContent(childComplexity), true

	case "driver_info_min_fields.telephone":
		if e.complexity.DriverInfoMinFields.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Telephone(childComplexity), true

	case "driver_info_min_fields.update_time_in":
		if e.complexity.DriverInfoMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.UpdateTimeIn(childComplexity), true

	case "driver_info_min_fields.updated_at":
		if e.complexity.DriverInfoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.UpdatedAt(childComplexity), true

	case "driver_info_min_fields.updated_by":
		if e.complexity.DriverInfoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.UpdatedBy(childComplexity), true

	case "driver_info_mutation_response.affected_rows":
		if e.complexity.DriverInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverInfoMutationResponse.AffectedRows(childComplexity), true

	case "driver_info_mutation_response.returning":
		if e.complexity.DriverInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverInfoMutationResponse.Returning(childComplexity), true

	case "driver_info_stddev_fields.id":
		if e.complexity.DriverInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoStddevFields.ID(childComplexity), true

	case "driver_info_stddev_fields.sex":
		if e.complexity.DriverInfoStddevFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoStddevFields.Sex(childComplexity), true

	case "driver_info_stddev_pop_fields.id":
		if e.complexity.DriverInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoStddevPopFields.ID(childComplexity), true

	case "driver_info_stddev_pop_fields.sex":
		if e.complexity.DriverInfoStddevPopFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoStddevPopFields.Sex(childComplexity), true

	case "driver_info_stddev_samp_fields.id":
		if e.complexity.DriverInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoStddevSampFields.ID(childComplexity), true

	case "driver_info_stddev_samp_fields.sex":
		if e.complexity.DriverInfoStddevSampFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoStddevSampFields.Sex(childComplexity), true

	case "driver_info_sum_fields.id":
		if e.complexity.DriverInfoSumFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoSumFields.ID(childComplexity), true

	case "driver_info_sum_fields.sex":
		if e.complexity.DriverInfoSumFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoSumFields.Sex(childComplexity), true

	case "driver_info_var_pop_fields.id":
		if e.complexity.DriverInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoVarPopFields.ID(childComplexity), true

	case "driver_info_var_pop_fields.sex":
		if e.complexity.DriverInfoVarPopFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoVarPopFields.Sex(childComplexity), true

	case "driver_info_var_samp_fields.id":
		if e.complexity.DriverInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoVarSampFields.ID(childComplexity), true

	case "driver_info_var_samp_fields.sex":
		if e.complexity.DriverInfoVarSampFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoVarSampFields.Sex(childComplexity), true

	case "driver_info_variance_fields.id":
		if e.complexity.DriverInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoVarianceFields.ID(childComplexity), true

	case "driver_info_variance_fields.sex":
		if e.complexity.DriverInfoVarianceFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoVarianceFields.Sex(childComplexity), true

	case "vehicle_driver_binding.created_at":
		if e.complexity.VehicleDriverBinding.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.CreatedAt(childComplexity), true

	case "vehicle_driver_binding.created_by":
		if e.complexity.VehicleDriverBinding.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.CreatedBy(childComplexity), true

	case "vehicle_driver_binding.deleted_at":
		if e.complexity.VehicleDriverBinding.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DeletedAt(childComplexity), true

	case "vehicle_driver_binding.deleted_by":
		if e.complexity.VehicleDriverBinding.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DeletedBy(childComplexity), true

	case "vehicle_driver_binding.driver_id":
		if e.complexity.VehicleDriverBinding.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.DriverID(childComplexity), true

	case "vehicle_driver_binding.id":
		if e.complexity.VehicleDriverBinding.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.ID(childComplexity), true

	case "vehicle_driver_binding.is_delete":
		if e.complexity.VehicleDriverBinding.IsDelete == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.IsDelete(childComplexity), true

	case "vehicle_driver_binding.lease_contract":
		if e.complexity.VehicleDriverBinding.LeaseContract == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.LeaseContract(childComplexity), true

	case "vehicle_driver_binding.remarks":
		if e.complexity.VehicleDriverBinding.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.Remarks(childComplexity), true

	case "vehicle_driver_binding.updated_at":
		if e.complexity.VehicleDriverBinding.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.UpdatedAt(childComplexity), true

	case "vehicle_driver_binding.updated_by":
		if e.complexity.VehicleDriverBinding.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.UpdatedBy(childComplexity), true

	case "vehicle_driver_binding.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBinding.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.VehicleDriverBindingID(childComplexity), true

	case "vehicle_driver_binding.vehicle_id":
		if e.complexity.VehicleDriverBinding.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBinding.VehicleID(childComplexity), true

	case "vehicle_driver_binding_aggregate.aggregate":
		if e.complexity.VehicleDriverBindingAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregate.Aggregate(childComplexity), true

	case "vehicle_driver_binding_aggregate.nodes":
		if e.complexity.VehicleDriverBindingAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregate.Nodes(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.avg":
		if e.complexity.VehicleDriverBindingAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Avg(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.count":
		if e.complexity.VehicleDriverBindingAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_driver_binding_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleDriverBindingSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_driver_binding_aggregate_fields.max":
		if e.complexity.VehicleDriverBindingAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Max(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.min":
		if e.complexity.VehicleDriverBindingAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Min(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.stddev":
		if e.complexity.VehicleDriverBindingAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Stddev(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.stddev_pop":
		if e.complexity.VehicleDriverBindingAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.StddevPop(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.stddev_samp":
		if e.complexity.VehicleDriverBindingAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.sum":
		if e.complexity.VehicleDriverBindingAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Sum(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.var_pop":
		if e.complexity.VehicleDriverBindingAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.VarPop(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.var_samp":
		if e.complexity.VehicleDriverBindingAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.VarSamp(childComplexity), true

	case "vehicle_driver_binding_aggregate_fields.variance":
		if e.complexity.VehicleDriverBindingAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAggregateFields.Variance(childComplexity), true

	case "vehicle_driver_binding_avg_fields.id":
		if e.complexity.VehicleDriverBindingAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingAvgFields.ID(childComplexity), true

	case "vehicle_driver_binding_max_fields.created_at":
		if e.complexity.VehicleDriverBindingMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.CreatedAt(childComplexity), true

	case "vehicle_driver_binding_max_fields.created_by":
		if e.complexity.VehicleDriverBindingMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.CreatedBy(childComplexity), true

	case "vehicle_driver_binding_max_fields.deleted_at":
		if e.complexity.VehicleDriverBindingMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.DeletedAt(childComplexity), true

	case "vehicle_driver_binding_max_fields.deleted_by":
		if e.complexity.VehicleDriverBindingMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.DeletedBy(childComplexity), true

	case "vehicle_driver_binding_max_fields.driver_id":
		if e.complexity.VehicleDriverBindingMaxFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.DriverID(childComplexity), true

	case "vehicle_driver_binding_max_fields.id":
		if e.complexity.VehicleDriverBindingMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.ID(childComplexity), true

	case "vehicle_driver_binding_max_fields.remarks":
		if e.complexity.VehicleDriverBindingMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.Remarks(childComplexity), true

	case "vehicle_driver_binding_max_fields.updated_at":
		if e.complexity.VehicleDriverBindingMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.UpdatedAt(childComplexity), true

	case "vehicle_driver_binding_max_fields.updated_by":
		if e.complexity.VehicleDriverBindingMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.UpdatedBy(childComplexity), true

	case "vehicle_driver_binding_max_fields.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBindingMaxFields.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.VehicleDriverBindingID(childComplexity), true

	case "vehicle_driver_binding_max_fields.vehicle_id":
		if e.complexity.VehicleDriverBindingMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMaxFields.VehicleID(childComplexity), true

	case "vehicle_driver_binding_min_fields.created_at":
		if e.complexity.VehicleDriverBindingMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.CreatedAt(childComplexity), true

	case "vehicle_driver_binding_min_fields.created_by":
		if e.complexity.VehicleDriverBindingMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.CreatedBy(childComplexity), true

	case "vehicle_driver_binding_min_fields.deleted_at":
		if e.complexity.VehicleDriverBindingMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.DeletedAt(childComplexity), true

	case "vehicle_driver_binding_min_fields.deleted_by":
		if e.complexity.VehicleDriverBindingMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.DeletedBy(childComplexity), true

	case "vehicle_driver_binding_min_fields.driver_id":
		if e.complexity.VehicleDriverBindingMinFields.DriverID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.DriverID(childComplexity), true

	case "vehicle_driver_binding_min_fields.id":
		if e.complexity.VehicleDriverBindingMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.ID(childComplexity), true

	case "vehicle_driver_binding_min_fields.remarks":
		if e.complexity.VehicleDriverBindingMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.Remarks(childComplexity), true

	case "vehicle_driver_binding_min_fields.updated_at":
		if e.complexity.VehicleDriverBindingMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.UpdatedAt(childComplexity), true

	case "vehicle_driver_binding_min_fields.updated_by":
		if e.complexity.VehicleDriverBindingMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.UpdatedBy(childComplexity), true

	case "vehicle_driver_binding_min_fields.vehicle_driver_binding_id":
		if e.complexity.VehicleDriverBindingMinFields.VehicleDriverBindingID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.VehicleDriverBindingID(childComplexity), true

	case "vehicle_driver_binding_min_fields.vehicle_id":
		if e.complexity.VehicleDriverBindingMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMinFields.VehicleID(childComplexity), true

	case "vehicle_driver_binding_mutation_response.affected_rows":
		if e.complexity.VehicleDriverBindingMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_driver_binding_mutation_response.returning":
		if e.complexity.VehicleDriverBindingMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleDriverBindingMutationResponse.Returning(childComplexity), true

	case "vehicle_driver_binding_stddev_fields.id":
		if e.complexity.VehicleDriverBindingStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingStddevFields.ID(childComplexity), true

	case "vehicle_driver_binding_stddev_pop_fields.id":
		if e.complexity.VehicleDriverBindingStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingStddevPopFields.ID(childComplexity), true

	case "vehicle_driver_binding_stddev_samp_fields.id":
		if e.complexity.VehicleDriverBindingStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingStddevSampFields.ID(childComplexity), true

	case "vehicle_driver_binding_sum_fields.id":
		if e.complexity.VehicleDriverBindingSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingSumFields.ID(childComplexity), true

	case "vehicle_driver_binding_var_pop_fields.id":
		if e.complexity.VehicleDriverBindingVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingVarPopFields.ID(childComplexity), true

	case "vehicle_driver_binding_var_samp_fields.id":
		if e.complexity.VehicleDriverBindingVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingVarSampFields.ID(childComplexity), true

	case "vehicle_driver_binding_variance_fields.id":
		if e.complexity.VehicleDriverBindingVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleDriverBindingVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/driver_identity.graphqls", Input: `

"""
驾驶员身份验证信息(各种证件信息，验证状态)


columns and relationships of "driver_identity"

"""
type driver_identity {
    """累计积分（六合一）"""
    accumulatived_points: numeric

    """年审日期（六合一）"""
    annual_review_date: timestamptz

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """驾驶员手持身份证照片,云储存系统返回的路径"""
    driver_holding_id_photo: String

    """驾驶证发证所在地的城市ID"""
    driver_license_city_id: String

    """驾驶证发证所在地的区域ID"""
    driver_license_district_id: String

    """驾驶证初次领证日期"""
    driver_license_issue_date: timestamptz

    """驾驶证发证机关"""
    driver_license_issuing_authority: String

    """驾驶员驾驶证,云储存系统返回的路径"""
    driver_license_pic: String

    """驾驶证发证所在地的省份ID"""
    driver_license_province_id: String

    """驾驶证状态字典"""
    driver_license_status: Int

    """驾驶员的正面照,云储存系统返回的路径"""
    driver_photo: String

    """驾驶员签名,云储存系统返回的路径"""
    driver_signature: String
    id: bigint!

    """身份证住址"""
    id_card_address: String

    """身份证背面照，云存储地址"""
    id_card_back_pic: String

    """身份证出生日期"""
    id_card_birthday: timestamptz

    """身份证有效截止日期"""
    id_card_end_date: timestamptz

    """身份证正面照，云存储地址"""
    id_card_front_pic: String

    """身份证民族"""
    id_card_nation: String

    """身份证号码"""
    id_card_num: String

    """身份证签发机关"""
    id_card_sign_government: String

    """身份证有效起始日期"""
    id_card_start_date: timestamptz

    """联合主键"""
    identity_id: String!

    """是否删除"""
    is_delete: Boolean

    """是否审核"""
    is_review: Boolean

    """劳动合同,云储存系统返回的完整劳动合同的图片路径"""
    labor_contract: _text

    """从业资格证有效期至"""
    occupational_expire_date: timestamptz

    """从业资格证发证机构"""
    occupational_issuing_authority: String

    """从业资格证号码"""
    occupational_number: String

    """准驾车型（六合一）,准驾车型字典"""
    quasi_driving_models: Int

    """换证日期（六合一）"""
    renewal_date: timestamptz

    """清分日期（六合一）"""
    sorting_date: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """从业时间"""
    working_time: timestamptz
}

"""
aggregated selection of "driver_identity"
"""
type driver_identity_aggregate {
    aggregate: driver_identity_aggregate_fields
    nodes: [driver_identity!]!
}

"""
aggregate fields of "driver_identity"
"""
type driver_identity_aggregate_fields {
    avg: driver_identity_avg_fields
    count(columns: [driver_identity_select_column!], distinct: Boolean): Int
    max: driver_identity_max_fields
    min: driver_identity_min_fields
    stddev: driver_identity_stddev_fields
    stddev_pop: driver_identity_stddev_pop_fields
    stddev_samp: driver_identity_stddev_samp_fields
    sum: driver_identity_sum_fields
    var_pop: driver_identity_var_pop_fields
    var_samp: driver_identity_var_samp_fields
    variance: driver_identity_variance_fields
}

"""
order by aggregate values of table "driver_identity"
"""
input driver_identity_aggregate_order_by {
    avg: driver_identity_avg_order_by
    count: order_by
    max: driver_identity_max_order_by
    min: driver_identity_min_order_by
    stddev: driver_identity_stddev_order_by
    stddev_pop: driver_identity_stddev_pop_order_by
    stddev_samp: driver_identity_stddev_samp_order_by
    sum: driver_identity_sum_order_by
    var_pop: driver_identity_var_pop_order_by
    var_samp: driver_identity_var_samp_order_by
    variance: driver_identity_variance_order_by
}

"""
input type for inserting array relation for remote table "driver_identity"
"""
input driver_identity_arr_rel_insert_input {
    data: [driver_identity_insert_input!]!
    on_conflict: driver_identity_on_conflict
}

"""aggregate avg on columns"""
type driver_identity_avg_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by avg() on columns of table "driver_identity"
"""
input driver_identity_avg_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""
Boolean expression to filter rows from the table "driver_identity". All fields are combined with a logical 'AND'.
"""
input driver_identity_bool_exp {
    _and: [driver_identity_bool_exp]
    _not: driver_identity_bool_exp
    _or: [driver_identity_bool_exp]
    accumulatived_points: numeric_comparison_exp
    annual_review_date: timestamptz_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    driver_holding_id_photo: String_comparison_exp
    driver_license_city_id: String_comparison_exp
    driver_license_district_id: String_comparison_exp
    driver_license_issue_date: timestamptz_comparison_exp
    driver_license_issuing_authority: String_comparison_exp
    driver_license_pic: String_comparison_exp
    driver_license_province_id: String_comparison_exp
    driver_license_status: Int_comparison_exp
    driver_photo: String_comparison_exp
    driver_signature: String_comparison_exp
    id: bigint_comparison_exp
    id_card_address: String_comparison_exp
    id_card_back_pic: String_comparison_exp
    id_card_birthday: timestamptz_comparison_exp
    id_card_end_date: timestamptz_comparison_exp
    id_card_front_pic: String_comparison_exp
    id_card_nation: String_comparison_exp
    id_card_num: String_comparison_exp
    id_card_sign_government: String_comparison_exp
    id_card_start_date: timestamptz_comparison_exp
    identity_id: String_comparison_exp
    is_delete: Boolean_comparison_exp
    is_review: Boolean_comparison_exp
    labor_contract: _text_comparison_exp
    occupational_expire_date: timestamptz_comparison_exp
    occupational_issuing_authority: String_comparison_exp
    occupational_number: String_comparison_exp
    quasi_driving_models: Int_comparison_exp
    renewal_date: timestamptz_comparison_exp
    sorting_date: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    working_time: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "driver_identity"
"""
enum driver_identity_constraint {
    """unique or primary key constraint"""
    driver_identity_pkey
}

"""
input type for incrementing integer column in table "driver_identity"
"""
input driver_identity_inc_input {
    accumulatived_points: numeric
    driver_license_status: Int
    id: bigint
    quasi_driving_models: Int
}

"""
input type for inserting data into table "driver_identity"
"""
input driver_identity_insert_input {
    accumulatived_points: numeric
    annual_review_date: timestamptz
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_holding_id_photo: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_photo: String
    driver_signature: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    identity_id: String
    is_delete: Boolean
    is_review: Boolean
    labor_contract: _text
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    quasi_driving_models: Int
    renewal_date: timestamptz
    sorting_date: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""aggregate max on columns"""
type driver_identity_max_fields {
    accumulatived_points: numeric
    annual_review_date: timestamptz
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_holding_id_photo: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_photo: String
    driver_signature: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    identity_id: String
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    quasi_driving_models: Int
    renewal_date: timestamptz
    sorting_date: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""
order by max() on columns of table "driver_identity"
"""
input driver_identity_max_order_by {
    accumulatived_points: order_by
    annual_review_date: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_holding_id_photo: order_by
    driver_license_city_id: order_by
    driver_license_district_id: order_by
    driver_license_issue_date: order_by
    driver_license_issuing_authority: order_by
    driver_license_pic: order_by
    driver_license_province_id: order_by
    driver_license_status: order_by
    driver_photo: order_by
    driver_signature: order_by
    id: order_by
    id_card_address: order_by
    id_card_back_pic: order_by
    id_card_birthday: order_by
    id_card_end_date: order_by
    id_card_front_pic: order_by
    id_card_nation: order_by
    id_card_num: order_by
    id_card_sign_government: order_by
    id_card_start_date: order_by
    identity_id: order_by
    occupational_expire_date: order_by
    occupational_issuing_authority: order_by
    occupational_number: order_by
    quasi_driving_models: order_by
    renewal_date: order_by
    sorting_date: order_by
    updated_at: order_by
    updated_by: order_by
    working_time: order_by
}

"""aggregate min on columns"""
type driver_identity_min_fields {
    accumulatived_points: numeric
    annual_review_date: timestamptz
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_holding_id_photo: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_photo: String
    driver_signature: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    identity_id: String
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    quasi_driving_models: Int
    renewal_date: timestamptz
    sorting_date: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""
order by min() on columns of table "driver_identity"
"""
input driver_identity_min_order_by {
    accumulatived_points: order_by
    annual_review_date: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_holding_id_photo: order_by
    driver_license_city_id: order_by
    driver_license_district_id: order_by
    driver_license_issue_date: order_by
    driver_license_issuing_authority: order_by
    driver_license_pic: order_by
    driver_license_province_id: order_by
    driver_license_status: order_by
    driver_photo: order_by
    driver_signature: order_by
    id: order_by
    id_card_address: order_by
    id_card_back_pic: order_by
    id_card_birthday: order_by
    id_card_end_date: order_by
    id_card_front_pic: order_by
    id_card_nation: order_by
    id_card_num: order_by
    id_card_sign_government: order_by
    id_card_start_date: order_by
    identity_id: order_by
    occupational_expire_date: order_by
    occupational_issuing_authority: order_by
    occupational_number: order_by
    quasi_driving_models: order_by
    renewal_date: order_by
    sorting_date: order_by
    updated_at: order_by
    updated_by: order_by
    working_time: order_by
}

"""
response of any mutation on the table "driver_identity"
"""
type driver_identity_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [driver_identity!]!
}

"""
input type for inserting object relation for remote table "driver_identity"
"""
input driver_identity_obj_rel_insert_input {
    data: driver_identity_insert_input!
    on_conflict: driver_identity_on_conflict
}

"""
on conflict condition type for table "driver_identity"
"""
input driver_identity_on_conflict {
    constraint: driver_identity_constraint!
    update_columns: [driver_identity_update_column!]!
    where: driver_identity_bool_exp
}

"""
ordering options when selecting data from "driver_identity"
"""
input driver_identity_order_by {
    accumulatived_points: order_by
    annual_review_date: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_holding_id_photo: order_by
    driver_license_city_id: order_by
    driver_license_district_id: order_by
    driver_license_issue_date: order_by
    driver_license_issuing_authority: order_by
    driver_license_pic: order_by
    driver_license_province_id: order_by
    driver_license_status: order_by
    driver_photo: order_by
    driver_signature: order_by
    id: order_by
    id_card_address: order_by
    id_card_back_pic: order_by
    id_card_birthday: order_by
    id_card_end_date: order_by
    id_card_front_pic: order_by
    id_card_nation: order_by
    id_card_num: order_by
    id_card_sign_government: order_by
    id_card_start_date: order_by
    identity_id: order_by
    is_delete: order_by
    is_review: order_by
    labor_contract: order_by
    occupational_expire_date: order_by
    occupational_issuing_authority: order_by
    occupational_number: order_by
    quasi_driving_models: order_by
    renewal_date: order_by
    sorting_date: order_by
    updated_at: order_by
    updated_by: order_by
    working_time: order_by
}

"""
primary key columns input for table: "driver_identity"
"""
input driver_identity_pk_columns_input {
    id: bigint!

    """联合主键"""
    identity_id: String!
}

"""
select columns of table "driver_identity"
"""
enum driver_identity_select_column {
    """column name"""
    accumulatived_points

    """column name"""
    annual_review_date

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_holding_id_photo

    """column name"""
    driver_license_city_id

    """column name"""
    driver_license_district_id

    """column name"""
    driver_license_issue_date

    """column name"""
    driver_license_issuing_authority

    """column name"""
    driver_license_pic

    """column name"""
    driver_license_province_id

    """column name"""
    driver_license_status

    """column name"""
    driver_photo

    """column name"""
    driver_signature

    """column name"""
    id

    """column name"""
    id_card_address

    """column name"""
    id_card_back_pic

    """column name"""
    id_card_birthday

    """column name"""
    id_card_end_date

    """column name"""
    id_card_front_pic

    """column name"""
    id_card_nation

    """column name"""
    id_card_num

    """column name"""
    id_card_sign_government

    """column name"""
    id_card_start_date

    """column name"""
    identity_id

    """column name"""
    is_delete

    """column name"""
    is_review

    """column name"""
    labor_contract

    """column name"""
    occupational_expire_date

    """column name"""
    occupational_issuing_authority

    """column name"""
    occupational_number

    """column name"""
    quasi_driving_models

    """column name"""
    renewal_date

    """column name"""
    sorting_date

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    working_time
}

"""
input type for updating data in table "driver_identity"
"""
input driver_identity_set_input {
    accumulatived_points: numeric
    annual_review_date: timestamptz
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_holding_id_photo: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_photo: String
    driver_signature: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    identity_id: String
    is_delete: Boolean
    is_review: Boolean
    labor_contract: _text
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    quasi_driving_models: Int
    renewal_date: timestamptz
    sorting_date: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""aggregate stddev on columns"""
type driver_identity_stddev_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by stddev() on columns of table "driver_identity"
"""
input driver_identity_stddev_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""aggregate stddev_pop on columns"""
type driver_identity_stddev_pop_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by stddev_pop() on columns of table "driver_identity"
"""
input driver_identity_stddev_pop_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""aggregate stddev_samp on columns"""
type driver_identity_stddev_samp_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by stddev_samp() on columns of table "driver_identity"
"""
input driver_identity_stddev_samp_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""aggregate sum on columns"""
type driver_identity_sum_fields {
    accumulatived_points: numeric
    driver_license_status: Int
    id: bigint
    quasi_driving_models: Int
}

"""
order by sum() on columns of table "driver_identity"
"""
input driver_identity_sum_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""
update columns of table "driver_identity"
"""
enum driver_identity_update_column {
    """column name"""
    accumulatived_points

    """column name"""
    annual_review_date

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_holding_id_photo

    """column name"""
    driver_license_city_id

    """column name"""
    driver_license_district_id

    """column name"""
    driver_license_issue_date

    """column name"""
    driver_license_issuing_authority

    """column name"""
    driver_license_pic

    """column name"""
    driver_license_province_id

    """column name"""
    driver_license_status

    """column name"""
    driver_photo

    """column name"""
    driver_signature

    """column name"""
    id

    """column name"""
    id_card_address

    """column name"""
    id_card_back_pic

    """column name"""
    id_card_birthday

    """column name"""
    id_card_end_date

    """column name"""
    id_card_front_pic

    """column name"""
    id_card_nation

    """column name"""
    id_card_num

    """column name"""
    id_card_sign_government

    """column name"""
    id_card_start_date

    """column name"""
    identity_id

    """column name"""
    is_delete

    """column name"""
    is_review

    """column name"""
    labor_contract

    """column name"""
    occupational_expire_date

    """column name"""
    occupational_issuing_authority

    """column name"""
    occupational_number

    """column name"""
    quasi_driving_models

    """column name"""
    renewal_date

    """column name"""
    sorting_date

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    working_time
}

"""aggregate var_pop on columns"""
type driver_identity_var_pop_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by var_pop() on columns of table "driver_identity"
"""
input driver_identity_var_pop_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""aggregate var_samp on columns"""
type driver_identity_var_samp_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by var_samp() on columns of table "driver_identity"
"""
input driver_identity_var_samp_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}

"""aggregate variance on columns"""
type driver_identity_variance_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
}

"""
order by variance() on columns of table "driver_identity"
"""
input driver_identity_variance_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
}



extend type Mutation {
    """
    delete data from the table: "driver_identity"
  """
    delete_driver_identity(
        """filter the rows which have to be deleted"""
        where: driver_identity_bool_exp!
    ): driver_identity_mutation_response

    """
    delete single row from the table: "driver_identity"
  """
    delete_driver_identity_by_pk(
        id: bigint!

        """联合主键"""
        identity_id: String!
    ): driver_identity

    """
    insert data into the table: "driver_identity"
  """
    insert_driver_identity(
        """the rows to be inserted"""
        objects: [driver_identity_insert_input!]!

        """on conflict condition"""
        on_conflict: driver_identity_on_conflict
    ): driver_identity_mutation_response

    """
    insert a single row into the table: "driver_identity"
  """
    insert_driver_identity_one(
        """the row to be inserted"""
        object: driver_identity_insert_input!

        """on conflict condition"""
        on_conflict: driver_identity_on_conflict
    ): driver_identity

    """
    update data of the table: "driver_identity"
  """
    update_driver_identity(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_identity_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_identity_set_input

        """filter the rows which have to be updated"""
        where: driver_identity_bool_exp!
    ): driver_identity_mutation_response

    """
    update single row of the table: "driver_identity"
  """
    update_driver_identity_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_identity_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_identity_set_input
        pk_columns: driver_identity_pk_columns_input!
    ): driver_identity
}




extend type Query {
    """
    fetch data from the table: "driver_identity"
  """
    driver_identity(
        """distinct select on columns"""
        distinct_on: [driver_identity_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_identity_order_by!]

        """filter the rows returned"""
        where: driver_identity_bool_exp
    ): [driver_identity!]!

    """
    fetch aggregated fields from the table: "driver_identity"
  """
    driver_identity_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_identity_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_identity_order_by!]

        """filter the rows returned"""
        where: driver_identity_bool_exp
    ): driver_identity_aggregate!

    """fetch data from the table: "driver_identity" using primary key columns"""
    driver_identity_by_pk(
        id: bigint!

        """联合主键"""
        identity_id: String!
    ): driver_identity
}



extend type Subscription {
    """
    fetch data from the table: "driver_identity"
  """
    driver_identity(
        """distinct select on columns"""
        distinct_on: [driver_identity_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_identity_order_by!]

        """filter the rows returned"""
        where: driver_identity_bool_exp
    ): [driver_identity!]!

    """
    fetch aggregated fields from the table: "driver_identity"
  """
    driver_identity_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_identity_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_identity_order_by!]

        """filter the rows returned"""
        where: driver_identity_bool_exp
    ): driver_identity_aggregate!

    """fetch data from the table: "driver_identity" using primary key columns"""
    driver_identity_by_pk(
        id: bigint!

        """联合主键"""
        identity_id: String!
    ): driver_identity
}


`, BuiltIn: false},
	{Name: "graph/graphqls/driver_info.graphqls", Input: `

"""
驾驶员信息表


columns and relationships of "driver_info"

"""
type driver_info {
    """代理商"""
    agent: String

    """检验时间"""
    check_at: timestamptz

    """校验人"""
    check_by: String

    """联系地址"""
    contact_address: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """所在部门id"""
    department_id: String

    """联合主键"""
    driver_id: String!

    """驾驶员身份验证信息ID"""
    driver_identity_id: String

    """驾驶员姓名"""
    driver_name: String

    """所在企业id"""
    enterprise_id: String

    """档案编号(后6位)"""
    files_number: String

    """主键"""
    id: bigint!

    """录入时间"""
    input_at: timestamptz

    """录入人"""
    input_by: String

    """是否黑名单"""
    is_black: Boolean

    """是否校验数据,该字段代表是否用于校验驾驶员信息，未正式录入系统，但会同步到公安内容，用于查询驾驶员的违章数据。"""
    is_check_data: Boolean

    """是否通过短信验证"""
    is_check_sms: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否录入"""
    is_input: Boolean

    """是否手动录入,驾驶员资料分为使用身份证读卡器读取身份证自动录入资料和手动填写资料"""
    is_manual_input: Boolean

    """是否提交,用于标志驾驶员资料是否处于确定状态。未确定状态的驾驶员信息在系统上除驾驶员管理外的功能中都查不到。"""
    is_submit: Boolean

    """邮寄地址"""
    mailing_address: String

    """运营商"""
    operator: String

    """驾驶员信息同步内网反馈信息。驾驶员信息同步到公安内网后内网的反馈内容，如档案编号填写错误会反馈档案编号后六位不正确"""
    remark_in: String

    """备注"""
    remarks: String

    """性别字典"""
    sex: Int

    """提交时间"""
    submit_at: timestamptz

    """提交人"""
    submit_by: String

    """提交内容"""
    submit_content: String

    """手机号码"""
    telephone: String

    """内网更新时间"""
    update_time_in: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String
}

"""
aggregated selection of "driver_info"
"""
type driver_info_aggregate {
    aggregate: driver_info_aggregate_fields
    nodes: [driver_info!]!
}

"""
aggregate fields of "driver_info"
"""
type driver_info_aggregate_fields {
    avg: driver_info_avg_fields
    count(columns: [driver_info_select_column!], distinct: Boolean): Int
    max: driver_info_max_fields
    min: driver_info_min_fields
    stddev: driver_info_stddev_fields
    stddev_pop: driver_info_stddev_pop_fields
    stddev_samp: driver_info_stddev_samp_fields
    sum: driver_info_sum_fields
    var_pop: driver_info_var_pop_fields
    var_samp: driver_info_var_samp_fields
    variance: driver_info_variance_fields
}

"""
order by aggregate values of table "driver_info"
"""
input driver_info_aggregate_order_by {
    avg: driver_info_avg_order_by
    count: order_by
    max: driver_info_max_order_by
    min: driver_info_min_order_by
    stddev: driver_info_stddev_order_by
    stddev_pop: driver_info_stddev_pop_order_by
    stddev_samp: driver_info_stddev_samp_order_by
    sum: driver_info_sum_order_by
    var_pop: driver_info_var_pop_order_by
    var_samp: driver_info_var_samp_order_by
    variance: driver_info_variance_order_by
}

"""
input type for inserting array relation for remote table "driver_info"
"""
input driver_info_arr_rel_insert_input {
    data: [driver_info_insert_input!]!
    on_conflict: driver_info_on_conflict
}

"""aggregate avg on columns"""
type driver_info_avg_fields {
    id: Float
    sex: Float
}

"""
order by avg() on columns of table "driver_info"
"""
input driver_info_avg_order_by {
    id: order_by
    sex: order_by
}

"""
Boolean expression to filter rows from the table "driver_info". All fields are combined with a logical 'AND'.
"""
input driver_info_bool_exp {
    _and: [driver_info_bool_exp]
    _not: driver_info_bool_exp
    _or: [driver_info_bool_exp]
    agent: String_comparison_exp
    check_at: timestamptz_comparison_exp
    check_by: String_comparison_exp
    contact_address: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    department_id: String_comparison_exp
    driver_id: String_comparison_exp
    driver_identity_id: String_comparison_exp
    driver_name: String_comparison_exp
    enterprise_id: String_comparison_exp
    files_number: String_comparison_exp
    id: bigint_comparison_exp
    input_at: timestamptz_comparison_exp
    input_by: String_comparison_exp
    is_black: Boolean_comparison_exp
    is_check_data: Boolean_comparison_exp
    is_check_sms: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_input: Boolean_comparison_exp
    is_manual_input: Boolean_comparison_exp
    is_submit: Boolean_comparison_exp
    mailing_address: String_comparison_exp
    operator: String_comparison_exp
    remark_in: String_comparison_exp
    remarks: String_comparison_exp
    sex: Int_comparison_exp
    submit_at: timestamptz_comparison_exp
    submit_by: String_comparison_exp
    submit_content: String_comparison_exp
    telephone: String_comparison_exp
    update_time_in: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "driver_info"
"""
enum driver_info_constraint {
    """unique or primary key constraint"""
    driver_info_pkey
}

"""
input type for incrementing integer column in table "driver_info"
"""
input driver_info_inc_input {
    id: bigint
    sex: Int
}

"""
input type for inserting data into table "driver_info"
"""
input driver_info_insert_input {
    agent: String
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_id: String
    driver_identity_id: String
    driver_name: String
    enterprise_id: String
    files_number: String
    id: bigint
    input_at: timestamptz
    input_by: String
    is_black: Boolean
    is_check_data: Boolean
    is_check_sms: Boolean
    is_delete: Boolean
    is_input: Boolean
    is_manual_input: Boolean
    is_submit: Boolean
    mailing_address: String
    operator: String
    remark_in: String
    remarks: String
    sex: Int
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
}

"""aggregate max on columns"""
type driver_info_max_fields {
    agent: String
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_id: String
    driver_identity_id: String
    driver_name: String
    enterprise_id: String
    files_number: String
    id: bigint
    input_at: timestamptz
    input_by: String
    mailing_address: String
    operator: String
    remark_in: String
    remarks: String
    sex: Int
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
}

"""
order by max() on columns of table "driver_info"
"""
input driver_info_max_order_by {
    agent: order_by
    check_at: order_by
    check_by: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    department_id: order_by
    driver_id: order_by
    driver_identity_id: order_by
    driver_name: order_by
    enterprise_id: order_by
    files_number: order_by
    id: order_by
    input_at: order_by
    input_by: order_by
    mailing_address: order_by
    operator: order_by
    remark_in: order_by
    remarks: order_by
    sex: order_by
    submit_at: order_by
    submit_by: order_by
    submit_content: order_by
    telephone: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
}

"""aggregate min on columns"""
type driver_info_min_fields {
    agent: String
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_id: String
    driver_identity_id: String
    driver_name: String
    enterprise_id: String
    files_number: String
    id: bigint
    input_at: timestamptz
    input_by: String
    mailing_address: String
    operator: String
    remark_in: String
    remarks: String
    sex: Int
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
}

"""
order by min() on columns of table "driver_info"
"""
input driver_info_min_order_by {
    agent: order_by
    check_at: order_by
    check_by: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    department_id: order_by
    driver_id: order_by
    driver_identity_id: order_by
    driver_name: order_by
    enterprise_id: order_by
    files_number: order_by
    id: order_by
    input_at: order_by
    input_by: order_by
    mailing_address: order_by
    operator: order_by
    remark_in: order_by
    remarks: order_by
    sex: order_by
    submit_at: order_by
    submit_by: order_by
    submit_content: order_by
    telephone: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
response of any mutation on the table "driver_info"
"""
type driver_info_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [driver_info!]!
}

"""
input type for inserting object relation for remote table "driver_info"
"""
input driver_info_obj_rel_insert_input {
    data: driver_info_insert_input!
    on_conflict: driver_info_on_conflict
}

"""
on conflict condition type for table "driver_info"
"""
input driver_info_on_conflict {
    constraint: driver_info_constraint!
    update_columns: [driver_info_update_column!]!
    where: driver_info_bool_exp
}

"""
ordering options when selecting data from "driver_info"
"""
input driver_info_order_by {
    agent: order_by
    check_at: order_by
    check_by: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    department_id: order_by
    driver_id: order_by
    driver_identity_id: order_by
    driver_name: order_by
    enterprise_id: order_by
    files_number: order_by
    id: order_by
    input_at: order_by
    input_by: order_by
    is_black: order_by
    is_check_data: order_by
    is_check_sms: order_by
    is_delete: order_by
    is_input: order_by
    is_manual_input: order_by
    is_submit: order_by
    mailing_address: order_by
    operator: order_by
    remark_in: order_by
    remarks: order_by
    sex: order_by
    submit_at: order_by
    submit_by: order_by
    submit_content: order_by
    telephone: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
primary key columns input for table: "driver_info"
"""
input driver_info_pk_columns_input {
    """联合主键"""
    driver_id: String!

    """主键"""
    id: bigint!
}

"""
select columns of table "driver_info"
"""
enum driver_info_select_column {
    """column name"""
    agent

    """column name"""
    check_at

    """column name"""
    check_by

    """column name"""
    contact_address

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    department_id

    """column name"""
    driver_id

    """column name"""
    driver_identity_id

    """column name"""
    driver_name

    """column name"""
    enterprise_id

    """column name"""
    files_number

    """column name"""
    id

    """column name"""
    input_at

    """column name"""
    input_by

    """column name"""
    is_black

    """column name"""
    is_check_data

    """column name"""
    is_check_sms

    """column name"""
    is_delete

    """column name"""
    is_input

    """column name"""
    is_manual_input

    """column name"""
    is_submit

    """column name"""
    mailing_address

    """column name"""
    operator

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    sex

    """column name"""
    submit_at

    """column name"""
    submit_by

    """column name"""
    submit_content

    """column name"""
    telephone

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""
input type for updating data in table "driver_info"
"""
input driver_info_set_input {
    agent: String
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_id: String
    driver_identity_id: String
    driver_name: String
    enterprise_id: String
    files_number: String
    id: bigint
    input_at: timestamptz
    input_by: String
    is_black: Boolean
    is_check_data: Boolean
    is_check_sms: Boolean
    is_delete: Boolean
    is_input: Boolean
    is_manual_input: Boolean
    is_submit: Boolean
    mailing_address: String
    operator: String
    remark_in: String
    remarks: String
    sex: Int
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
}

"""aggregate stddev on columns"""
type driver_info_stddev_fields {
    id: Float
    sex: Float
}

"""
order by stddev() on columns of table "driver_info"
"""
input driver_info_stddev_order_by {
    id: order_by
    sex: order_by
}

"""aggregate stddev_pop on columns"""
type driver_info_stddev_pop_fields {
    id: Float
    sex: Float
}

"""
order by stddev_pop() on columns of table "driver_info"
"""
input driver_info_stddev_pop_order_by {
    id: order_by
    sex: order_by
}

"""aggregate stddev_samp on columns"""
type driver_info_stddev_samp_fields {
    id: Float
    sex: Float
}

"""
order by stddev_samp() on columns of table "driver_info"
"""
input driver_info_stddev_samp_order_by {
    id: order_by
    sex: order_by
}

"""aggregate sum on columns"""
type driver_info_sum_fields {
    id: bigint
    sex: Int
}

"""
order by sum() on columns of table "driver_info"
"""
input driver_info_sum_order_by {
    id: order_by
    sex: order_by
}

"""
update columns of table "driver_info"
"""
enum driver_info_update_column {
    """column name"""
    agent

    """column name"""
    check_at

    """column name"""
    check_by

    """column name"""
    contact_address

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    department_id

    """column name"""
    driver_id

    """column name"""
    driver_identity_id

    """column name"""
    driver_name

    """column name"""
    enterprise_id

    """column name"""
    files_number

    """column name"""
    id

    """column name"""
    input_at

    """column name"""
    input_by

    """column name"""
    is_black

    """column name"""
    is_check_data

    """column name"""
    is_check_sms

    """column name"""
    is_delete

    """column name"""
    is_input

    """column name"""
    is_manual_input

    """column name"""
    is_submit

    """column name"""
    mailing_address

    """column name"""
    operator

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    sex

    """column name"""
    submit_at

    """column name"""
    submit_by

    """column name"""
    submit_content

    """column name"""
    telephone

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""aggregate var_pop on columns"""
type driver_info_var_pop_fields {
    id: Float
    sex: Float
}

"""
order by var_pop() on columns of table "driver_info"
"""
input driver_info_var_pop_order_by {
    id: order_by
    sex: order_by
}

"""aggregate var_samp on columns"""
type driver_info_var_samp_fields {
    id: Float
    sex: Float
}

"""
order by var_samp() on columns of table "driver_info"
"""
input driver_info_var_samp_order_by {
    id: order_by
    sex: order_by
}

"""aggregate variance on columns"""
type driver_info_variance_fields {
    id: Float
    sex: Float
}

"""
order by variance() on columns of table "driver_info"
"""
input driver_info_variance_order_by {
    id: order_by
    sex: order_by
}


extend type Mutation {
    """
    delete data from the table: "driver_info"
  """
    delete_driver_info(
        """filter the rows which have to be deleted"""
        where: driver_info_bool_exp!
    ): driver_info_mutation_response

    """
    delete single row from the table: "driver_info"
  """
    delete_driver_info_by_pk(
        """联合主键"""
        driver_id: String!

        """主键"""
        id: bigint!
    ): driver_info

    """
    insert data into the table: "driver_info"
  """
    insert_driver_info(
        """the rows to be inserted"""
        objects: [driver_info_insert_input!]!

        """on conflict condition"""
        on_conflict: driver_info_on_conflict
    ): driver_info_mutation_response

    """
    insert a single row into the table: "driver_info"
  """
    insert_driver_info_one(
        """the row to be inserted"""
        object: driver_info_insert_input!

        """on conflict condition"""
        on_conflict: driver_info_on_conflict
    ): driver_info

    """
    update data of the table: "driver_info"
  """
    update_driver_info(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_info_set_input

        """filter the rows which have to be updated"""
        where: driver_info_bool_exp!
    ): driver_info_mutation_response

    """
    update single row of the table: "driver_info"
  """
    update_driver_info_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_info_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_info_set_input
        pk_columns: driver_info_pk_columns_input!
    ): driver_info
}



extend type Query {
    """
    fetch data from the table: "driver_info"
  """
    driver_info(
        """distinct select on columns"""
        distinct_on: [driver_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_order_by!]

        """filter the rows returned"""
        where: driver_info_bool_exp
    ): [driver_info!]!

    """
    fetch aggregated fields from the table: "driver_info"
  """
    driver_info_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_order_by!]

        """filter the rows returned"""
        where: driver_info_bool_exp
    ): driver_info_aggregate!

    """fetch data from the table: "driver_info" using primary key columns"""
    driver_info_by_pk(
        """联合主键"""
        driver_id: String!

        """主键"""
        id: bigint!
    ): driver_info
}



extend type Subscription {
    """
    fetch data from the table: "driver_info"
  """
    driver_info(
        """distinct select on columns"""
        distinct_on: [driver_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_order_by!]

        """filter the rows returned"""
        where: driver_info_bool_exp
    ): [driver_info!]!

    """
    fetch aggregated fields from the table: "driver_info"
  """
    driver_info_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_info_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_order_by!]

        """filter the rows returned"""
        where: driver_info_bool_exp
    ): driver_info_aggregate!

    """fetch data from the table: "driver_info" using primary key columns"""
    driver_info_by_pk(
        """联合主键"""
        driver_id: String!

        """主键"""
        id: bigint!
    ): driver_info
}

`, BuiltIn: false},
	{Name: "graph/graphqls/driver_info_change_log.graphqls", Input: `
"""
驾驶员信息表


columns and relationships of "driver_info_change_log"

"""
type driver_info_change_log {
    """累计积分（六合一）"""
    accumulatived_points: numeric

    """代理商"""
    agent: String

    """年审日期（六合一）"""
    annual_review_date: timestamptz

    """检验时间"""
    check_at: timestamptz

    """校验人"""
    check_by: String

    """联系地址"""
    contact_address: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """所在部门id"""
    department_id: String

    """驾驶员手持身份证照片,云储存系统返回的路径"""
    driver_holding_id_photo: String

    """联合主键"""
    driver_id: String!

    """驾驶员身份验证信息ID"""
    driver_info_change_log_id: String

    """驾驶证发证所在地的城市ID"""
    driver_license_city_id: String

    """驾驶证发证所在地的区域ID"""
    driver_license_district_id: String

    """驾驶证初次领证日期"""
    driver_license_issue_date: timestamptz

    """驾驶证发证机关"""
    driver_license_issuing_authority: String

    """驾驶员驾驶证,云储存系统返回的路径"""
    driver_license_pic: String

    """驾驶证发证所在地的省份ID"""
    driver_license_province_id: String

    """驾驶证状态字典"""
    driver_license_status: Int

    """驾驶员姓名"""
    driver_name: String

    """驾驶员的正面照,云储存系统返回的路径"""
    driver_photo: String

    """驾驶员签名,云储存系统返回的路径"""
    driver_signature: String

    """所在企业id"""
    enterprise_id: String

    """档案编号(后6位)"""
    files_number: String

    """主键"""
    id: bigint!

    """身份证住址"""
    id_card_address: String

    """身份证背面照，云存储地址"""
    id_card_back_pic: String

    """身份证出生日期"""
    id_card_birthday: timestamptz

    """身份证有效截止日期"""
    id_card_end_date: timestamptz

    """身份证正面照，云存储地址"""
    id_card_front_pic: String

    """身份证民族"""
    id_card_nation: String

    """身份证号码"""
    id_card_num: String

    """身份证签发机关"""
    id_card_sign_government: String

    """身份证有效起始日期"""
    id_card_start_date: timestamptz

    """录入时间"""
    input_at: timestamptz

    """录入人"""
    input_by: String

    """是否黑名单"""
    is_black: Boolean

    """是否校验数据,该字段代表是否用于校验驾驶员信息，未正式录入系统，但会同步到公安内容，用于查询驾驶员的违章数据。"""
    is_check_data: Boolean

    """是否通过短信验证"""
    is_check_sms: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否录入"""
    is_input: Boolean

    """是否手动录入,驾驶员资料分为使用身份证读卡器读取身份证自动录入资料和手动填写资料"""
    is_manual_input: Boolean

    """是否审核"""
    is_review: Boolean

    """是否提交,用于标志驾驶员资料是否处于确定状态。未确定状态的驾驶员信息在系统上除驾驶员管理外的功能中都查不到。"""
    is_submit: Boolean

    """劳动合同,云储存系统返回的完整劳动合同的图片路径"""
    labor_contract: _text

    """邮寄地址"""
    mailing_address: String

    """从业资格证有效期至"""
    occupational_expire_date: timestamptz

    """从业资格证发证机构"""
    occupational_issuing_authority: String

    """从业资格证号码"""
    occupational_number: String

    """运营商"""
    operator: String

    """准驾车型（六合一）,准驾车型字典"""
    quasi_driving_models: Int

    """驾驶员信息同步内网反馈信息。驾驶员信息同步到公安内网后内网的反馈内容，如档案编号填写错误会反馈档案编号后六位不正确"""
    remark_in: String

    """备注"""
    remarks: String

    """换证日期（六合一）"""
    renewal_date: timestamptz

    """性别字典"""
    sex: Int

    """清分日期（六合一）"""
    sorting_date: timestamptz

    """提交时间"""
    submit_at: timestamptz

    """提交人"""
    submit_by: String

    """提交内容"""
    submit_content: String

    """手机号码"""
    telephone: String

    """内网更新时间"""
    update_time_in: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """从业时间"""
    working_time: timestamptz
}

"""
aggregated selection of "driver_info_change_log"
"""
type driver_info_change_log_aggregate {
    aggregate: driver_info_change_log_aggregate_fields
    nodes: [driver_info_change_log!]!
}

"""
aggregate fields of "driver_info_change_log"
"""
type driver_info_change_log_aggregate_fields {
    avg: driver_info_change_log_avg_fields
    count(columns: [driver_info_change_log_select_column!], distinct: Boolean): Int
    max: driver_info_change_log_max_fields
    min: driver_info_change_log_min_fields
    stddev: driver_info_change_log_stddev_fields
    stddev_pop: driver_info_change_log_stddev_pop_fields
    stddev_samp: driver_info_change_log_stddev_samp_fields
    sum: driver_info_change_log_sum_fields
    var_pop: driver_info_change_log_var_pop_fields
    var_samp: driver_info_change_log_var_samp_fields
    variance: driver_info_change_log_variance_fields
}

"""
order by aggregate values of table "driver_info_change_log"
"""
input driver_info_change_log_aggregate_order_by {
    avg: driver_info_change_log_avg_order_by
    count: order_by
    max: driver_info_change_log_max_order_by
    min: driver_info_change_log_min_order_by
    stddev: driver_info_change_log_stddev_order_by
    stddev_pop: driver_info_change_log_stddev_pop_order_by
    stddev_samp: driver_info_change_log_stddev_samp_order_by
    sum: driver_info_change_log_sum_order_by
    var_pop: driver_info_change_log_var_pop_order_by
    var_samp: driver_info_change_log_var_samp_order_by
    variance: driver_info_change_log_variance_order_by
}

"""
input type for inserting array relation for remote table "driver_info_change_log"
"""
input driver_info_change_log_arr_rel_insert_input {
    data: [driver_info_change_log_insert_input!]!
    on_conflict: driver_info_change_log_on_conflict
}

"""aggregate avg on columns"""
type driver_info_change_log_avg_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by avg() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_avg_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""
Boolean expression to filter rows from the table "driver_info_change_log". All fields are combined with a logical 'AND'.
"""
input driver_info_change_log_bool_exp {
    _and: [driver_info_change_log_bool_exp]
    _not: driver_info_change_log_bool_exp
    _or: [driver_info_change_log_bool_exp]
    accumulatived_points: numeric_comparison_exp
    agent: String_comparison_exp
    annual_review_date: timestamptz_comparison_exp
    check_at: timestamptz_comparison_exp
    check_by: String_comparison_exp
    contact_address: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    department_id: String_comparison_exp
    driver_holding_id_photo: String_comparison_exp
    driver_id: String_comparison_exp
    driver_info_change_log_id: String_comparison_exp
    driver_license_city_id: String_comparison_exp
    driver_license_district_id: String_comparison_exp
    driver_license_issue_date: timestamptz_comparison_exp
    driver_license_issuing_authority: String_comparison_exp
    driver_license_pic: String_comparison_exp
    driver_license_province_id: String_comparison_exp
    driver_license_status: Int_comparison_exp
    driver_name: String_comparison_exp
    driver_photo: String_comparison_exp
    driver_signature: String_comparison_exp
    enterprise_id: String_comparison_exp
    files_number: String_comparison_exp
    id: bigint_comparison_exp
    id_card_address: String_comparison_exp
    id_card_back_pic: String_comparison_exp
    id_card_birthday: timestamptz_comparison_exp
    id_card_end_date: timestamptz_comparison_exp
    id_card_front_pic: String_comparison_exp
    id_card_nation: String_comparison_exp
    id_card_num: String_comparison_exp
    id_card_sign_government: String_comparison_exp
    id_card_start_date: timestamptz_comparison_exp
    input_at: timestamptz_comparison_exp
    input_by: String_comparison_exp
    is_black: Boolean_comparison_exp
    is_check_data: Boolean_comparison_exp
    is_check_sms: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_input: Boolean_comparison_exp
    is_manual_input: Boolean_comparison_exp
    is_review: Boolean_comparison_exp
    is_submit: Boolean_comparison_exp
    labor_contract: _text_comparison_exp
    mailing_address: String_comparison_exp
    occupational_expire_date: timestamptz_comparison_exp
    occupational_issuing_authority: String_comparison_exp
    occupational_number: String_comparison_exp
    operator: String_comparison_exp
    quasi_driving_models: Int_comparison_exp
    remark_in: String_comparison_exp
    remarks: String_comparison_exp
    renewal_date: timestamptz_comparison_exp
    sex: Int_comparison_exp
    sorting_date: timestamptz_comparison_exp
    submit_at: timestamptz_comparison_exp
    submit_by: String_comparison_exp
    submit_content: String_comparison_exp
    telephone: String_comparison_exp
    update_time_in: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    working_time: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "driver_info_change_log"
"""
enum driver_info_change_log_constraint {
    """unique or primary key constraint"""
    driver_info_change_log_pkey
}

"""
input type for incrementing integer column in table "driver_info_change_log"
"""
input driver_info_change_log_inc_input {
    accumulatived_points: numeric
    driver_license_status: Int
    id: bigint
    quasi_driving_models: Int
    sex: Int
}

"""
input type for inserting data into table "driver_info_change_log"
"""
input driver_info_change_log_insert_input {
    accumulatived_points: numeric
    agent: String
    annual_review_date: timestamptz
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_holding_id_photo: String
    driver_id: String
    driver_info_change_log_id: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_name: String
    driver_photo: String
    driver_signature: String
    enterprise_id: String
    files_number: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    input_at: timestamptz
    input_by: String
    is_black: Boolean
    is_check_data: Boolean
    is_check_sms: Boolean
    is_delete: Boolean
    is_input: Boolean
    is_manual_input: Boolean
    is_review: Boolean
    is_submit: Boolean
    labor_contract: _text
    mailing_address: String
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    operator: String
    quasi_driving_models: Int
    remark_in: String
    remarks: String
    renewal_date: timestamptz
    sex: Int
    sorting_date: timestamptz
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""aggregate max on columns"""
type driver_info_change_log_max_fields {
    accumulatived_points: numeric
    agent: String
    annual_review_date: timestamptz
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_holding_id_photo: String
    driver_id: String
    driver_info_change_log_id: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_name: String
    driver_photo: String
    driver_signature: String
    enterprise_id: String
    files_number: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    input_at: timestamptz
    input_by: String
    mailing_address: String
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    operator: String
    quasi_driving_models: Int
    remark_in: String
    remarks: String
    renewal_date: timestamptz
    sex: Int
    sorting_date: timestamptz
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""
order by max() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_max_order_by {
    accumulatived_points: order_by
    agent: order_by
    annual_review_date: order_by
    check_at: order_by
    check_by: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    department_id: order_by
    driver_holding_id_photo: order_by
    driver_id: order_by
    driver_info_change_log_id: order_by
    driver_license_city_id: order_by
    driver_license_district_id: order_by
    driver_license_issue_date: order_by
    driver_license_issuing_authority: order_by
    driver_license_pic: order_by
    driver_license_province_id: order_by
    driver_license_status: order_by
    driver_name: order_by
    driver_photo: order_by
    driver_signature: order_by
    enterprise_id: order_by
    files_number: order_by
    id: order_by
    id_card_address: order_by
    id_card_back_pic: order_by
    id_card_birthday: order_by
    id_card_end_date: order_by
    id_card_front_pic: order_by
    id_card_nation: order_by
    id_card_num: order_by
    id_card_sign_government: order_by
    id_card_start_date: order_by
    input_at: order_by
    input_by: order_by
    mailing_address: order_by
    occupational_expire_date: order_by
    occupational_issuing_authority: order_by
    occupational_number: order_by
    operator: order_by
    quasi_driving_models: order_by
    remark_in: order_by
    remarks: order_by
    renewal_date: order_by
    sex: order_by
    sorting_date: order_by
    submit_at: order_by
    submit_by: order_by
    submit_content: order_by
    telephone: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    working_time: order_by
}

"""aggregate min on columns"""
type driver_info_change_log_min_fields {
    accumulatived_points: numeric
    agent: String
    annual_review_date: timestamptz
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_holding_id_photo: String
    driver_id: String
    driver_info_change_log_id: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_name: String
    driver_photo: String
    driver_signature: String
    enterprise_id: String
    files_number: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    input_at: timestamptz
    input_by: String
    mailing_address: String
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    operator: String
    quasi_driving_models: Int
    remark_in: String
    remarks: String
    renewal_date: timestamptz
    sex: Int
    sorting_date: timestamptz
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""
order by min() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_min_order_by {
    accumulatived_points: order_by
    agent: order_by
    annual_review_date: order_by
    check_at: order_by
    check_by: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    department_id: order_by
    driver_holding_id_photo: order_by
    driver_id: order_by
    driver_info_change_log_id: order_by
    driver_license_city_id: order_by
    driver_license_district_id: order_by
    driver_license_issue_date: order_by
    driver_license_issuing_authority: order_by
    driver_license_pic: order_by
    driver_license_province_id: order_by
    driver_license_status: order_by
    driver_name: order_by
    driver_photo: order_by
    driver_signature: order_by
    enterprise_id: order_by
    files_number: order_by
    id: order_by
    id_card_address: order_by
    id_card_back_pic: order_by
    id_card_birthday: order_by
    id_card_end_date: order_by
    id_card_front_pic: order_by
    id_card_nation: order_by
    id_card_num: order_by
    id_card_sign_government: order_by
    id_card_start_date: order_by
    input_at: order_by
    input_by: order_by
    mailing_address: order_by
    occupational_expire_date: order_by
    occupational_issuing_authority: order_by
    occupational_number: order_by
    operator: order_by
    quasi_driving_models: order_by
    remark_in: order_by
    remarks: order_by
    renewal_date: order_by
    sex: order_by
    sorting_date: order_by
    submit_at: order_by
    submit_by: order_by
    submit_content: order_by
    telephone: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    working_time: order_by
}

"""
response of any mutation on the table "driver_info_change_log"
"""
type driver_info_change_log_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [driver_info_change_log!]!
}

"""
input type for inserting object relation for remote table "driver_info_change_log"
"""
input driver_info_change_log_obj_rel_insert_input {
    data: driver_info_change_log_insert_input!
    on_conflict: driver_info_change_log_on_conflict
}

"""
on conflict condition type for table "driver_info_change_log"
"""
input driver_info_change_log_on_conflict {
    constraint: driver_info_change_log_constraint!
    update_columns: [driver_info_change_log_update_column!]!
    where: driver_info_change_log_bool_exp
}

"""
ordering options when selecting data from "driver_info_change_log"
"""
input driver_info_change_log_order_by {
    accumulatived_points: order_by
    agent: order_by
    annual_review_date: order_by
    check_at: order_by
    check_by: order_by
    contact_address: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    department_id: order_by
    driver_holding_id_photo: order_by
    driver_id: order_by
    driver_info_change_log_id: order_by
    driver_license_city_id: order_by
    driver_license_district_id: order_by
    driver_license_issue_date: order_by
    driver_license_issuing_authority: order_by
    driver_license_pic: order_by
    driver_license_province_id: order_by
    driver_license_status: order_by
    driver_name: order_by
    driver_photo: order_by
    driver_signature: order_by
    enterprise_id: order_by
    files_number: order_by
    id: order_by
    id_card_address: order_by
    id_card_back_pic: order_by
    id_card_birthday: order_by
    id_card_end_date: order_by
    id_card_front_pic: order_by
    id_card_nation: order_by
    id_card_num: order_by
    id_card_sign_government: order_by
    id_card_start_date: order_by
    input_at: order_by
    input_by: order_by
    is_black: order_by
    is_check_data: order_by
    is_check_sms: order_by
    is_delete: order_by
    is_input: order_by
    is_manual_input: order_by
    is_review: order_by
    is_submit: order_by
    labor_contract: order_by
    mailing_address: order_by
    occupational_expire_date: order_by
    occupational_issuing_authority: order_by
    occupational_number: order_by
    operator: order_by
    quasi_driving_models: order_by
    remark_in: order_by
    remarks: order_by
    renewal_date: order_by
    sex: order_by
    sorting_date: order_by
    submit_at: order_by
    submit_by: order_by
    submit_content: order_by
    telephone: order_by
    update_time_in: order_by
    updated_at: order_by
    updated_by: order_by
    working_time: order_by
}

"""
primary key columns input for table: "driver_info_change_log"
"""
input driver_info_change_log_pk_columns_input {
    """联合主键"""
    driver_id: String!

    """主键"""
    id: bigint!
}

"""
select columns of table "driver_info_change_log"
"""
enum driver_info_change_log_select_column {
    """column name"""
    accumulatived_points

    """column name"""
    agent

    """column name"""
    annual_review_date

    """column name"""
    check_at

    """column name"""
    check_by

    """column name"""
    contact_address

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    department_id

    """column name"""
    driver_holding_id_photo

    """column name"""
    driver_id

    """column name"""
    driver_info_change_log_id

    """column name"""
    driver_license_city_id

    """column name"""
    driver_license_district_id

    """column name"""
    driver_license_issue_date

    """column name"""
    driver_license_issuing_authority

    """column name"""
    driver_license_pic

    """column name"""
    driver_license_province_id

    """column name"""
    driver_license_status

    """column name"""
    driver_name

    """column name"""
    driver_photo

    """column name"""
    driver_signature

    """column name"""
    enterprise_id

    """column name"""
    files_number

    """column name"""
    id

    """column name"""
    id_card_address

    """column name"""
    id_card_back_pic

    """column name"""
    id_card_birthday

    """column name"""
    id_card_end_date

    """column name"""
    id_card_front_pic

    """column name"""
    id_card_nation

    """column name"""
    id_card_num

    """column name"""
    id_card_sign_government

    """column name"""
    id_card_start_date

    """column name"""
    input_at

    """column name"""
    input_by

    """column name"""
    is_black

    """column name"""
    is_check_data

    """column name"""
    is_check_sms

    """column name"""
    is_delete

    """column name"""
    is_input

    """column name"""
    is_manual_input

    """column name"""
    is_review

    """column name"""
    is_submit

    """column name"""
    labor_contract

    """column name"""
    mailing_address

    """column name"""
    occupational_expire_date

    """column name"""
    occupational_issuing_authority

    """column name"""
    occupational_number

    """column name"""
    operator

    """column name"""
    quasi_driving_models

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    renewal_date

    """column name"""
    sex

    """column name"""
    sorting_date

    """column name"""
    submit_at

    """column name"""
    submit_by

    """column name"""
    submit_content

    """column name"""
    telephone

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    working_time
}

"""
input type for updating data in table "driver_info_change_log"
"""
input driver_info_change_log_set_input {
    accumulatived_points: numeric
    agent: String
    annual_review_date: timestamptz
    check_at: timestamptz
    check_by: String
    contact_address: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    department_id: String
    driver_holding_id_photo: String
    driver_id: String
    driver_info_change_log_id: String
    driver_license_city_id: String
    driver_license_district_id: String
    driver_license_issue_date: timestamptz
    driver_license_issuing_authority: String
    driver_license_pic: String
    driver_license_province_id: String
    driver_license_status: Int
    driver_name: String
    driver_photo: String
    driver_signature: String
    enterprise_id: String
    files_number: String
    id: bigint
    id_card_address: String
    id_card_back_pic: String
    id_card_birthday: timestamptz
    id_card_end_date: timestamptz
    id_card_front_pic: String
    id_card_nation: String
    id_card_num: String
    id_card_sign_government: String
    id_card_start_date: timestamptz
    input_at: timestamptz
    input_by: String
    is_black: Boolean
    is_check_data: Boolean
    is_check_sms: Boolean
    is_delete: Boolean
    is_input: Boolean
    is_manual_input: Boolean
    is_review: Boolean
    is_submit: Boolean
    labor_contract: _text
    mailing_address: String
    occupational_expire_date: timestamptz
    occupational_issuing_authority: String
    occupational_number: String
    operator: String
    quasi_driving_models: Int
    remark_in: String
    remarks: String
    renewal_date: timestamptz
    sex: Int
    sorting_date: timestamptz
    submit_at: timestamptz
    submit_by: String
    submit_content: String
    telephone: String
    update_time_in: timestamptz
    updated_at: timestamptz
    updated_by: String
    working_time: timestamptz
}

"""aggregate stddev on columns"""
type driver_info_change_log_stddev_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by stddev() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_stddev_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""aggregate stddev_pop on columns"""
type driver_info_change_log_stddev_pop_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by stddev_pop() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_stddev_pop_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""aggregate stddev_samp on columns"""
type driver_info_change_log_stddev_samp_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by stddev_samp() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_stddev_samp_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""aggregate sum on columns"""
type driver_info_change_log_sum_fields {
    accumulatived_points: numeric
    driver_license_status: Int
    id: bigint
    quasi_driving_models: Int
    sex: Int
}

"""
order by sum() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_sum_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""
update columns of table "driver_info_change_log"
"""
enum driver_info_change_log_update_column {
    """column name"""
    accumulatived_points

    """column name"""
    agent

    """column name"""
    annual_review_date

    """column name"""
    check_at

    """column name"""
    check_by

    """column name"""
    contact_address

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    department_id

    """column name"""
    driver_holding_id_photo

    """column name"""
    driver_id

    """column name"""
    driver_info_change_log_id

    """column name"""
    driver_license_city_id

    """column name"""
    driver_license_district_id

    """column name"""
    driver_license_issue_date

    """column name"""
    driver_license_issuing_authority

    """column name"""
    driver_license_pic

    """column name"""
    driver_license_province_id

    """column name"""
    driver_license_status

    """column name"""
    driver_name

    """column name"""
    driver_photo

    """column name"""
    driver_signature

    """column name"""
    enterprise_id

    """column name"""
    files_number

    """column name"""
    id

    """column name"""
    id_card_address

    """column name"""
    id_card_back_pic

    """column name"""
    id_card_birthday

    """column name"""
    id_card_end_date

    """column name"""
    id_card_front_pic

    """column name"""
    id_card_nation

    """column name"""
    id_card_num

    """column name"""
    id_card_sign_government

    """column name"""
    id_card_start_date

    """column name"""
    input_at

    """column name"""
    input_by

    """column name"""
    is_black

    """column name"""
    is_check_data

    """column name"""
    is_check_sms

    """column name"""
    is_delete

    """column name"""
    is_input

    """column name"""
    is_manual_input

    """column name"""
    is_review

    """column name"""
    is_submit

    """column name"""
    labor_contract

    """column name"""
    mailing_address

    """column name"""
    occupational_expire_date

    """column name"""
    occupational_issuing_authority

    """column name"""
    occupational_number

    """column name"""
    operator

    """column name"""
    quasi_driving_models

    """column name"""
    remark_in

    """column name"""
    remarks

    """column name"""
    renewal_date

    """column name"""
    sex

    """column name"""
    sorting_date

    """column name"""
    submit_at

    """column name"""
    submit_by

    """column name"""
    submit_content

    """column name"""
    telephone

    """column name"""
    update_time_in

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    working_time
}

"""aggregate var_pop on columns"""
type driver_info_change_log_var_pop_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by var_pop() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_var_pop_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""aggregate var_samp on columns"""
type driver_info_change_log_var_samp_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by var_samp() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_var_samp_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}

"""aggregate variance on columns"""
type driver_info_change_log_variance_fields {
    accumulatived_points: Float
    driver_license_status: Float
    id: Float
    quasi_driving_models: Float
    sex: Float
}

"""
order by variance() on columns of table "driver_info_change_log"
"""
input driver_info_change_log_variance_order_by {
    accumulatived_points: order_by
    driver_license_status: order_by
    id: order_by
    quasi_driving_models: order_by
    sex: order_by
}


extend type Mutation {
    """
    delete data from the table: "driver_info_change_log"
  """
    delete_driver_info_change_log(
        """filter the rows which have to be deleted"""
        where: driver_info_change_log_bool_exp!
    ): driver_info_change_log_mutation_response

    """
    delete single row from the table: "driver_info_change_log"
  """
    delete_driver_info_change_log_by_pk(
        """联合主键"""
        driver_id: String!

        """主键"""
        id: bigint!
    ): driver_info_change_log

    """
    insert data into the table: "driver_info_change_log"
  """
    insert_driver_info_change_log(
        """the rows to be inserted"""
        objects: [driver_info_change_log_insert_input!]!

        """on conflict condition"""
        on_conflict: driver_info_change_log_on_conflict
    ): driver_info_change_log_mutation_response

    """
    insert a single row into the table: "driver_info_change_log"
  """
    insert_driver_info_change_log_one(
        """the row to be inserted"""
        object: driver_info_change_log_insert_input!

        """on conflict condition"""
        on_conflict: driver_info_change_log_on_conflict
    ): driver_info_change_log

    """
    update data of the table: "driver_info_change_log"
  """
    update_driver_info_change_log(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_info_change_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_info_change_log_set_input

        """filter the rows which have to be updated"""
        where: driver_info_change_log_bool_exp!
    ): driver_info_change_log_mutation_response

    """
    update single row of the table: "driver_info_change_log"
  """
    update_driver_info_change_log_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: driver_info_change_log_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: driver_info_change_log_set_input
        pk_columns: driver_info_change_log_pk_columns_input!
    ): driver_info_change_log
}



extend type Query {
    """
    fetch data from the table: "driver_info_change_log"
  """
    driver_info_change_log(
        """distinct select on columns"""
        distinct_on: [driver_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_change_log_order_by!]

        """filter the rows returned"""
        where: driver_info_change_log_bool_exp
    ): [driver_info_change_log!]!

    """
    fetch aggregated fields from the table: "driver_info_change_log"
  """
    driver_info_change_log_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_change_log_order_by!]

        """filter the rows returned"""
        where: driver_info_change_log_bool_exp
    ): driver_info_change_log_aggregate!

    """
    fetch data from the table: "driver_info_change_log" using primary key columns
    """
    driver_info_change_log_by_pk(
        """联合主键"""
        driver_id: String!

        """主键"""
        id: bigint!
    ): driver_info_change_log
}


extend type Subscription {
    """
    fetch data from the table: "driver_info_change_log"
  """
    driver_info_change_log(
        """distinct select on columns"""
        distinct_on: [driver_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_change_log_order_by!]

        """filter the rows returned"""
        where: driver_info_change_log_bool_exp
    ): [driver_info_change_log!]!

    """
    fetch aggregated fields from the table: "driver_info_change_log"
  """
    driver_info_change_log_aggregate(
        """distinct select on columns"""
        distinct_on: [driver_info_change_log_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [driver_info_change_log_order_by!]

        """filter the rows returned"""
        where: driver_info_change_log_bool_exp
    ): driver_info_change_log_aggregate!

    """
    fetch data from the table: "driver_info_change_log" using primary key columns
    """
    driver_info_change_log_by_pk(
        """联合主键"""
        driver_id: String!

        """主键"""
        id: bigint!
    ): driver_info_change_log
}

`, BuiltIn: false},
	{Name: "graph/graphqls/schema.graphqls", Input: `
scalar _jsonb
scalar bigint
scalar numeric
scalar timestamptz
scalar _text

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"expression to compare columns of type _text. All fields are combined with logical 'AND'."
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}


`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_driver_binding.graphqls", Input: `
"""mutation root"""
type Mutation {
    """
    delete data from the table: "vehicle_driver_binding"
  """
    delete_vehicle_driver_binding(
        """filter the rows which have to be deleted"""
        where: vehicle_driver_binding_bool_exp!
    ): vehicle_driver_binding_mutation_response

    """
    delete single row from the table: "vehicle_driver_binding"
  """
    delete_vehicle_driver_binding_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_driver_binding

    """
    insert data into the table: "vehicle_driver_binding"
  """
    insert_vehicle_driver_binding(
        """the rows to be inserted"""
        objects: [vehicle_driver_binding_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_driver_binding_on_conflict
    ): vehicle_driver_binding_mutation_response

    """
    insert a single row into the table: "vehicle_driver_binding"
  """
    insert_vehicle_driver_binding_one(
        """the row to be inserted"""
        object: vehicle_driver_binding_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_driver_binding_on_conflict
    ): vehicle_driver_binding

    """
    update data of the table: "vehicle_driver_binding"
  """
    update_vehicle_driver_binding(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_driver_binding_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_driver_binding_set_input

        """filter the rows which have to be updated"""
        where: vehicle_driver_binding_bool_exp!
    ): vehicle_driver_binding_mutation_response

    """
    update single row of the table: "vehicle_driver_binding"
  """
    update_vehicle_driver_binding_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_driver_binding_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_driver_binding_set_input
        pk_columns: vehicle_driver_binding_pk_columns_input!
    ): vehicle_driver_binding
}

"""Query root"""
type Query {
    """
    fetch data from the table: "vehicle_driver_binding"
  """
    vehicle_driver_binding(
        """distinct select on columns"""
        distinct_on: [vehicle_driver_binding_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_driver_binding_order_by!]

        """filter the rows returned"""
        where: vehicle_driver_binding_bool_exp
    ): [vehicle_driver_binding!]!

    """
    fetch aggregated fields from the table: "vehicle_driver_binding"
  """
    vehicle_driver_binding_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_driver_binding_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_driver_binding_order_by!]

        """filter the rows returned"""
        where: vehicle_driver_binding_bool_exp
    ): vehicle_driver_binding_aggregate!

    """
    fetch data from the table: "vehicle_driver_binding" using primary key columns
    """
    vehicle_driver_binding_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_driver_binding
}



"""subscription root"""
type Subscription {
    """
    fetch data from the table: "vehicle_driver_binding"
  """
    vehicle_driver_binding(
        """distinct select on columns"""
        distinct_on: [vehicle_driver_binding_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_driver_binding_order_by!]

        """filter the rows returned"""
        where: vehicle_driver_binding_bool_exp
    ): [vehicle_driver_binding!]!

    """
    fetch aggregated fields from the table: "vehicle_driver_binding"
  """
    vehicle_driver_binding_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_driver_binding_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_driver_binding_order_by!]

        """filter the rows returned"""
        where: vehicle_driver_binding_bool_exp
    ): vehicle_driver_binding_aggregate!

    """
    fetch data from the table: "vehicle_driver_binding" using primary key columns
    """
    vehicle_driver_binding_by_pk(
        """主键"""
        id: bigint!
    ): vehicle_driver_binding
}



"""
车辆驾驶员绑定表


columns and relationships of "vehicle_driver_binding"

"""
type vehicle_driver_binding {
    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """驾驶员id"""
    driver_id: String

    """主键"""
    id: bigint!

    """是否删除"""
    is_delete: Boolean

    """租赁合同,,云储存系统返回的完整租赁合同的图片路径"""
    lease_contract: _text

    """备注"""
    remarks: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """车辆驾驶员绑定外部编码，由golang程序生成的xid，暴露到外部使用"""
    vehicle_driver_binding_id: String!

    """车辆id"""
    vehicle_id: String
}

"""
aggregated selection of "vehicle_driver_binding"
"""
type vehicle_driver_binding_aggregate {
    aggregate: vehicle_driver_binding_aggregate_fields
    nodes: [vehicle_driver_binding!]!
}

"""
aggregate fields of "vehicle_driver_binding"
"""
type vehicle_driver_binding_aggregate_fields {
    avg: vehicle_driver_binding_avg_fields
    count(columns: [vehicle_driver_binding_select_column!], distinct: Boolean): Int
    max: vehicle_driver_binding_max_fields
    min: vehicle_driver_binding_min_fields
    stddev: vehicle_driver_binding_stddev_fields
    stddev_pop: vehicle_driver_binding_stddev_pop_fields
    stddev_samp: vehicle_driver_binding_stddev_samp_fields
    sum: vehicle_driver_binding_sum_fields
    var_pop: vehicle_driver_binding_var_pop_fields
    var_samp: vehicle_driver_binding_var_samp_fields
    variance: vehicle_driver_binding_variance_fields
}

"""
order by aggregate values of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_aggregate_order_by {
    avg: vehicle_driver_binding_avg_order_by
    count: order_by
    max: vehicle_driver_binding_max_order_by
    min: vehicle_driver_binding_min_order_by
    stddev: vehicle_driver_binding_stddev_order_by
    stddev_pop: vehicle_driver_binding_stddev_pop_order_by
    stddev_samp: vehicle_driver_binding_stddev_samp_order_by
    sum: vehicle_driver_binding_sum_order_by
    var_pop: vehicle_driver_binding_var_pop_order_by
    var_samp: vehicle_driver_binding_var_samp_order_by
    variance: vehicle_driver_binding_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_driver_binding"
"""
input vehicle_driver_binding_arr_rel_insert_input {
    data: [vehicle_driver_binding_insert_input!]!
    on_conflict: vehicle_driver_binding_on_conflict
}

"""aggregate avg on columns"""
type vehicle_driver_binding_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_driver_binding". All fields are combined with a logical 'AND'.
"""
input vehicle_driver_binding_bool_exp {
    _and: [vehicle_driver_binding_bool_exp]
    _not: vehicle_driver_binding_bool_exp
    _or: [vehicle_driver_binding_bool_exp]
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    driver_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    lease_contract: _text_comparison_exp
    remarks: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_driver_binding_id: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_driver_binding"
"""
enum vehicle_driver_binding_constraint {
    """unique or primary key constraint"""
    vehicle_driver_binding_pkey
}

"""
input type for incrementing integer column in table "vehicle_driver_binding"
"""
input vehicle_driver_binding_inc_input {
    id: bigint
}

"""
input type for inserting data into table "vehicle_driver_binding"
"""
input vehicle_driver_binding_insert_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    is_delete: Boolean
    lease_contract: _text
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

"""aggregate max on columns"""
type vehicle_driver_binding_max_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

"""
order by max() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_max_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_driver_binding_id: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type vehicle_driver_binding_min_fields {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

"""
order by min() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_min_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_driver_binding_id: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "vehicle_driver_binding"
"""
type vehicle_driver_binding_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_driver_binding!]!
}

"""
input type for inserting object relation for remote table "vehicle_driver_binding"
"""
input vehicle_driver_binding_obj_rel_insert_input {
    data: vehicle_driver_binding_insert_input!
    on_conflict: vehicle_driver_binding_on_conflict
}

"""
on conflict condition type for table "vehicle_driver_binding"
"""
input vehicle_driver_binding_on_conflict {
    constraint: vehicle_driver_binding_constraint!
    update_columns: [vehicle_driver_binding_update_column!]!
    where: vehicle_driver_binding_bool_exp
}

"""
ordering options when selecting data from "vehicle_driver_binding"
"""
input vehicle_driver_binding_order_by {
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    driver_id: order_by
    id: order_by
    is_delete: order_by
    lease_contract: order_by
    remarks: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_driver_binding_id: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "vehicle_driver_binding"
"""
input vehicle_driver_binding_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "vehicle_driver_binding"
"""
enum vehicle_driver_binding_select_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    lease_contract

    """column name"""
    remarks

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_driver_binding_id

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "vehicle_driver_binding"
"""
input vehicle_driver_binding_set_input {
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    driver_id: String
    id: bigint
    is_delete: Boolean
    lease_contract: _text
    remarks: String
    updated_at: timestamptz
    updated_by: String
    vehicle_driver_binding_id: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type vehicle_driver_binding_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_driver_binding_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_driver_binding_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type vehicle_driver_binding_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_sum_order_by {
    id: order_by
}

"""
update columns of table "vehicle_driver_binding"
"""
enum vehicle_driver_binding_update_column {
    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    driver_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    lease_contract

    """column name"""
    remarks

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_driver_binding_id

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type vehicle_driver_binding_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type vehicle_driver_binding_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type vehicle_driver_binding_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "vehicle_driver_binding"
"""
input vehicle_driver_binding_variance_order_by {
    id: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdriver_identity_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["identity_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identity_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdriver_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdriver_info_change_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_driver_binding_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverIdentityInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdriver_identity_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DriverIdentityOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_identity_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_identity_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverIdentityInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdriver_identity_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DriverIdentityOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_identity_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdriver_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DriverInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverInfoChangeLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdriver_info_change_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DriverInfoChangeLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_info_change_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverInfoChangeLogInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdriver_info_change_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DriverInfoChangeLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdriver_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DriverInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriver_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleDriverBindingInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_driver_binding_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleDriverBindingOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_driver_binding_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_driver_binding_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleDriverBindingInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_driver_binding_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleDriverBindingOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_driver_binding_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_identity_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentitySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_identity_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdriver_identity_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_identity_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentitySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_identity_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverIdentityPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdriver_identity_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdriver_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdriver_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoChangeLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_info_change_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverInfoChangeLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_info_change_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdriver_info_change_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoChangeLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriver_info_change_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverInfoChangeLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriver_info_change_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverInfoChangeLogPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdriver_info_change_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleDriverBindingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleDriverBindingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_driver_binding_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_driver_binding_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleDriverBindingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleDriverBindingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_driver_binding_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleDriverBindingPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_driver_binding_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_identity_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_identity_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["identity_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identity_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_change_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_driver_binding_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDriverBindingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_driver_binding_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDriverBindingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_driver_binding_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_identity_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_identity_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_identity_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["identity_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identity_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_info_change_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_info_change_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoChangeLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoChangeLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_driver_info_change_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_id"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_driver_binding_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDriverBindingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_driver_binding_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_driver_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleDriverBindingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_driver_binding_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleDriverBindingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_driver_binding_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_driver_identity_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_driver_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_driver_info_change_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoChangeLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_driver_binding_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleDriverBindingSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDriverBinding(rctx, args["where"].(model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleDriverBindingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleDriverBinding(rctx, args["objects"].([]*model.VehicleDriverBindingInsertInput), args["on_conflict"].(*model.VehicleDriverBindingOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_driver_binding_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_driver_binding_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleDriverBindingOne(rctx, args["object"].(model.VehicleDriverBindingInsertInput), args["on_conflict"].(*model.VehicleDriverBindingOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDriverBinding(rctx, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["where"].(model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleDriverBindingByPk(rctx, args["_inc"].(*model.VehicleDriverBindingIncInput), args["_set"].(*model.VehicleDriverBindingSetInput), args["pk_columns"].(model.VehicleDriverBindingPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentity(rctx, args["where"].(model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_identity_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentityByPk(rctx, args["id"].(int64), args["identity_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentity)
	fc.Result = res
	return ec.marshalOdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverIdentity(rctx, args["objects"].([]*model.DriverIdentityInsertInput), args["on_conflict"].(*model.DriverIdentityOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_identity_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_identity_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_identity_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverIdentityOne(rctx, args["object"].(model.DriverIdentityInsertInput), args["on_conflict"].(*model.DriverIdentityOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentity)
	fc.Result = res
	return ec.marshalOdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentity(rctx, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["where"].(model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_identity_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentityByPk(rctx, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["pk_columns"].(model.DriverIdentityPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentity)
	fc.Result = res
	return ec.marshalOdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfo(rctx, args["where"].(model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfoByPk(rctx, args["driver_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalOdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverInfo(rctx, args["objects"].([]*model.DriverInfoInsertInput), args["on_conflict"].(*model.DriverInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverInfoOne(rctx, args["object"].(model.DriverInfoInsertInput), args["on_conflict"].(*model.DriverInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalOdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfo(rctx, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["where"].(model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfoByPk(rctx, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["pk_columns"].(model.DriverInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalOdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfoChangeLog(rctx, args["where"].(model.DriverInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfoChangeLogByPk(rctx, args["driver_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalOdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverInfoChangeLog(rctx, args["objects"].([]*model.DriverInfoChangeLogInsertInput), args["on_conflict"].(*model.DriverInfoChangeLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_info_change_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_info_change_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverInfoChangeLogOne(rctx, args["object"].(model.DriverInfoChangeLogInsertInput), args["on_conflict"].(*model.DriverInfoChangeLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalOdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfoChangeLog(rctx, args["_inc"].(*model.DriverInfoChangeLogIncInput), args["_set"].(*model.DriverInfoChangeLogSetInput), args["where"].(model.DriverInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogMutationResponse)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfoChangeLogByPk(rctx, args["_inc"].(*model.DriverInfoChangeLogIncInput), args["_set"].(*model.DriverInfoChangeLogSetInput), args["pk_columns"].(model.DriverInfoChangeLogPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalOdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDriverBinding(rctx, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNvehicle_driver_binding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_driver_binding_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_driver_binding_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDriverBindingAggregate(rctx, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingAggregate)
	fc.Result = res
	return ec.marshalNvehicle_driver_binding_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleDriverBindingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentity(rctx, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverIdentity)
	fc.Result = res
	return ec.marshalNdriver_identity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityAggregate(rctx, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityAggregate)
	fc.Result = res
	return ec.marshalNdriver_identity_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityByPk(rctx, args["id"].(int64), args["identity_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentity)
	fc.Result = res
	return ec.marshalOdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfo(rctx, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfo)
	fc.Result = res
	return ec.marshalNdriver_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoAggregate(rctx, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoAggregate)
	fc.Result = res
	return ec.marshalNdriver_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoByPk(rctx, args["driver_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfo)
	fc.Result = res
	return ec.marshalOdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_change_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoChangeLog(rctx, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalNdriver_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_change_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_change_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoChangeLogAggregate(rctx, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogAggregate)
	fc.Result = res
	return ec.marshalNdriver_info_change_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoChangeLogByPk(rctx, args["driver_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalOdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_vehicle_driver_binding(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_driver_binding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleDriverBinding(rctx, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleDriverBinding)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_driver_binding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_driver_binding_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_driver_binding_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleDriverBindingAggregate(rctx, args["distinct_on"].([]model.VehicleDriverBindingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleDriverBindingOrderBy), args["where"].(*model.VehicleDriverBindingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleDriverBindingAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_driver_binding_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_driver_binding_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_driver_binding_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleDriverBindingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleDriverBinding)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_identity(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverIdentity(rctx, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DriverIdentity)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_identity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_identity_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_identity_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverIdentityAggregate(rctx, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverIdentityAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_identity_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverIdentityByPk(rctx, args["id"].(int64), args["identity_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverIdentity)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverInfo(rctx, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DriverInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverInfoAggregate(rctx, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverInfoByPk(rctx, args["driver_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_info_change_log(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_info_change_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverInfoChangeLog(rctx, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DriverInfoChangeLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_info_change_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_info_change_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverInfoChangeLogAggregate(rctx, args["distinct_on"].([]model.DriverInfoChangeLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoChangeLogOrderBy), args["where"].(*model.DriverInfoChangeLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverInfoChangeLogAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdriver_info_change_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_driver_info_change_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_driver_info_change_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DriverInfoChangeLogByPk(rctx, args["driver_id"].(string), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DriverInfoChangeLog)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_is_review(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_text2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityAggregateFields)
	fc.Result = res
	return ec.marshalOdriver_identity_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverIdentity)
	fc.Result = res
	return ec.marshalNdriver_identity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityAvgFields)
	fc.Result = res
	return ec.marshalOdriver_identity_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_driver_identity_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMaxFields)
	fc.Result = res
	return ec.marshalOdriver_identity_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMinFields)
	fc.Result = res
	return ec.marshalOdriver_identity_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityStddevFields)
	fc.Result = res
	return ec.marshalOdriver_identity_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityStddevPopFields)
	fc.Result = res
	return ec.marshalOdriver_identity_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityStddevSampFields)
	fc.Result = res
	return ec.marshalOdriver_identity_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentitySumFields)
	fc.Result = res
	return ec.marshalOdriver_identity_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityVarPopFields)
	fc.Result = res
	return ec.marshalOdriver_identity_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityVarSampFields)
	fc.Result = res
	return ec.marshalOdriver_identity_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityVarianceFields)
	fc.Result = res
	return ec.marshalOdriver_identity_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_avg_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_avg_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_avg_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_max_fields_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_min_fields_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverIdentity)
	fc.Result = res
	return ec.marshalNdriver_identity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_pop_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_pop_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_samp_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_samp_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_stddev_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_sum_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_sum_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_sum_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_pop_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_pop_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_samp_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_samp_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_var_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_variance_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_variance_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_identity_variance_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_identity_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_black(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_check_data(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_check_sms(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_manual_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManualInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_is_submit(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoAggregateFields)
	fc.Result = res
	return ec.marshalOdriver_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfo)
	fc.Result = res
	return ec.marshalNdriver_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoAvgFields)
	fc.Result = res
	return ec.marshalOdriver_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_driver_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMaxFields)
	fc.Result = res
	return ec.marshalOdriver_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMinFields)
	fc.Result = res
	return ec.marshalOdriver_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoStddevFields)
	fc.Result = res
	return ec.marshalOdriver_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOdriver_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOdriver_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoSumFields)
	fc.Result = res
	return ec.marshalOdriver_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoVarPopFields)
	fc.Result = res
	return ec.marshalOdriver_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoVarSampFields)
	fc.Result = res
	return ec.marshalOdriver_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoVarianceFields)
	fc.Result = res
	return ec.marshalOdriver_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_avg_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_info_change_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverInfoChangeLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_black(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_check_data(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_check_sms(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_manual_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManualInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_review(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_is_submit(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_text2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogAggregateFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalNdriver_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogAvgFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_driver_info_change_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogMaxFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogMinFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogStddevFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogStddevPopFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogStddevSampFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogSumFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogVarPopFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogVarSampFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoChangeLogVarianceFields)
	fc.Result = res
	return ec.marshalOdriver_info_change_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_avg_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_avg_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_avg_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_avg_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_info_change_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverInfoChangeLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_max_fields_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_info_change_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverInfoChangeLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_min_fields_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfoChangeLog)
	fc.Result = res
	return ec.marshalNdriver_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_pop_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_pop_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_samp_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_samp_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_stddev_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sum_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sum_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sum_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_sum_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_pop_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_pop_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_samp_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_samp_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_var_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_variance_fields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_variance_fields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_variance_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_change_log_variance_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoChangeLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_change_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfo)
	fc.Result = res
	return ec.marshalNdriver_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_stddev_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_stddev_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_stddev_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_sum_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_var_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_var_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_info_variance_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_lease_contract(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaseContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_text2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBinding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNvehicle_driver_binding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_driver_binding_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingMinFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingSumFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleDriverBindingVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_driver_binding_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_vehicle_driver_binding_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDriverBindingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleDriverBinding)
	fc.Result = res
	return ec.marshalNvehicle_driver_binding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_driver_binding_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleDriverBindingVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_driver_binding_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_text_comparison_exp(ctx context.Context, obj interface{}) (model.TextComparisonExp, error) {
	var it model.TextComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_aggregate_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityAggregateOrderBy, error) {
	var it model.DriverIdentityAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdriver_identity_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdriver_identity_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdriver_identity_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdriver_identity_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdriver_identity_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdriver_identity_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdriver_identity_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdriver_identity_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdriver_identity_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdriver_identity_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverIdentityArrRelInsertInput, error) {
	var it model.DriverIdentityArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_identity_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_identity_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_avg_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityAvgOrderBy, error) {
	var it model.DriverIdentityAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_bool_exp(ctx context.Context, obj interface{}) (model.DriverIdentityBoolExp, error) {
	var it model.DriverIdentityBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdriver_identity_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdriver_identity_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalO_text_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐTextComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_inc_input(ctx context.Context, obj interface{}) (model.DriverIdentityIncInput, error) {
	var it model.DriverIdentityIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_insert_input(ctx context.Context, obj interface{}) (model.DriverIdentityInsertInput, error) {
	var it model.DriverIdentityInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_max_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityMaxOrderBy, error) {
	var it model.DriverIdentityMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_min_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityMinOrderBy, error) {
	var it model.DriverIdentityMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverIdentityObjRelInsertInput, error) {
	var it model.DriverIdentityObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_identity_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_identity_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_on_conflict(ctx context.Context, obj interface{}) (model.DriverIdentityOnConflict, error) {
	var it model.DriverIdentityOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdriver_identity_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdriver_identity_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityOrderBy, error) {
	var it model.DriverIdentityOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_pk_columns_input(ctx context.Context, obj interface{}) (model.DriverIdentityPkColumnsInput, error) {
	var it model.DriverIdentityPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_set_input(ctx context.Context, obj interface{}) (model.DriverIdentitySetInput, error) {
	var it model.DriverIdentitySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_stddev_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityStddevOrderBy, error) {
	var it model.DriverIdentityStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityStddevPopOrderBy, error) {
	var it model.DriverIdentityStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityStddevSampOrderBy, error) {
	var it model.DriverIdentityStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_sum_order_by(ctx context.Context, obj interface{}) (model.DriverIdentitySumOrderBy, error) {
	var it model.DriverIdentitySumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_var_pop_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityVarPopOrderBy, error) {
	var it model.DriverIdentityVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_var_samp_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityVarSampOrderBy, error) {
	var it model.DriverIdentityVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_identity_variance_order_by(ctx context.Context, obj interface{}) (model.DriverIdentityVarianceOrderBy, error) {
	var it model.DriverIdentityVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.DriverInfoAggregateOrderBy, error) {
	var it model.DriverInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdriver_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdriver_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdriver_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdriver_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdriver_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdriver_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdriver_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdriver_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdriver_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdriver_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverInfoArrRelInsertInput, error) {
	var it model.DriverInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_avg_order_by(ctx context.Context, obj interface{}) (model.DriverInfoAvgOrderBy, error) {
	var it model.DriverInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_bool_exp(ctx context.Context, obj interface{}) (model.DriverInfoBoolExp, error) {
	var it model.DriverInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdriver_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdriver_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogAggregateOrderBy, error) {
	var it model.DriverInfoChangeLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdriver_info_change_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdriver_info_change_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdriver_info_change_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdriver_info_change_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdriver_info_change_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdriver_info_change_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdriver_info_change_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdriver_info_change_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdriver_info_change_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdriver_info_change_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogArrRelInsertInput, error) {
	var it model.DriverInfoChangeLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_info_change_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_avg_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogAvgOrderBy, error) {
	var it model.DriverInfoChangeLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_bool_exp(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogBoolExp, error) {
	var it model.DriverInfoChangeLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_info_change_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_info_change_log_id"))
			it.DriverInfoChangeLogID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalO_text_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐTextComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_inc_input(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogIncInput, error) {
	var it model.DriverInfoChangeLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_insert_input(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogInsertInput, error) {
	var it model.DriverInfoChangeLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_info_change_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_info_change_log_id"))
			it.DriverInfoChangeLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_max_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogMaxOrderBy, error) {
	var it model.DriverInfoChangeLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_info_change_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_info_change_log_id"))
			it.DriverInfoChangeLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_min_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogMinOrderBy, error) {
	var it model.DriverInfoChangeLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_info_change_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_info_change_log_id"))
			it.DriverInfoChangeLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogObjRelInsertInput, error) {
	var it model.DriverInfoChangeLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_info_change_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_on_conflict(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogOnConflict, error) {
	var it model.DriverInfoChangeLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdriver_info_change_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdriver_info_change_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogOrderBy, error) {
	var it model.DriverInfoChangeLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_info_change_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_info_change_log_id"))
			it.DriverInfoChangeLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_pk_columns_input(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogPkColumnsInput, error) {
	var it model.DriverInfoChangeLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_set_input(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogSetInput, error) {
	var it model.DriverInfoChangeLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_info_change_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_info_change_log_id"))
			it.DriverInfoChangeLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_stddev_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogStddevOrderBy, error) {
	var it model.DriverInfoChangeLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogStddevPopOrderBy, error) {
	var it model.DriverInfoChangeLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogStddevSampOrderBy, error) {
	var it model.DriverInfoChangeLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_sum_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogSumOrderBy, error) {
	var it model.DriverInfoChangeLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogVarPopOrderBy, error) {
	var it model.DriverInfoChangeLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogVarSampOrderBy, error) {
	var it model.DriverInfoChangeLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_change_log_variance_order_by(ctx context.Context, obj interface{}) (model.DriverInfoChangeLogVarianceOrderBy, error) {
	var it model.DriverInfoChangeLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_inc_input(ctx context.Context, obj interface{}) (model.DriverInfoIncInput, error) {
	var it model.DriverInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_insert_input(ctx context.Context, obj interface{}) (model.DriverInfoInsertInput, error) {
	var it model.DriverInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_max_order_by(ctx context.Context, obj interface{}) (model.DriverInfoMaxOrderBy, error) {
	var it model.DriverInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_min_order_by(ctx context.Context, obj interface{}) (model.DriverInfoMinOrderBy, error) {
	var it model.DriverInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverInfoObjRelInsertInput, error) {
	var it model.DriverInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_on_conflict(ctx context.Context, obj interface{}) (model.DriverInfoOnConflict, error) {
	var it model.DriverInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdriver_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdriver_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_order_by(ctx context.Context, obj interface{}) (model.DriverInfoOrderBy, error) {
	var it model.DriverInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_pk_columns_input(ctx context.Context, obj interface{}) (model.DriverInfoPkColumnsInput, error) {
	var it model.DriverInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_set_input(ctx context.Context, obj interface{}) (model.DriverInfoSetInput, error) {
	var it model.DriverInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_stddev_order_by(ctx context.Context, obj interface{}) (model.DriverInfoStddevOrderBy, error) {
	var it model.DriverInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DriverInfoStddevPopOrderBy, error) {
	var it model.DriverInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DriverInfoStddevSampOrderBy, error) {
	var it model.DriverInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_sum_order_by(ctx context.Context, obj interface{}) (model.DriverInfoSumOrderBy, error) {
	var it model.DriverInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.DriverInfoVarPopOrderBy, error) {
	var it model.DriverInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.DriverInfoVarSampOrderBy, error) {
	var it model.DriverInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_info_variance_order_by(ctx context.Context, obj interface{}) (model.DriverInfoVarianceOrderBy, error) {
	var it model.DriverInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model1.NumericComparisonExp, error) {
	var it model1.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingAggregateOrderBy, error) {
	var it model.VehicleDriverBindingAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_driver_binding_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_driver_binding_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_driver_binding_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_driver_binding_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_driver_binding_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_driver_binding_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_driver_binding_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_driver_binding_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_driver_binding_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_driver_binding_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleDriverBindingArrRelInsertInput, error) {
	var it model.VehicleDriverBindingArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_driver_binding_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_driver_binding_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingAvgOrderBy, error) {
	var it model.VehicleDriverBindingAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_bool_exp(ctx context.Context, obj interface{}) (model.VehicleDriverBindingBoolExp, error) {
	var it model.VehicleDriverBindingBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "lease_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lease_contract"))
			it.LeaseContract, err = ec.unmarshalO_text_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐTextComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_inc_input(ctx context.Context, obj interface{}) (model.VehicleDriverBindingIncInput, error) {
	var it model.VehicleDriverBindingIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_insert_input(ctx context.Context, obj interface{}) (model.VehicleDriverBindingInsertInput, error) {
	var it model.VehicleDriverBindingInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lease_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lease_contract"))
			it.LeaseContract, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_max_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingMaxOrderBy, error) {
	var it model.VehicleDriverBindingMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_min_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingMinOrderBy, error) {
	var it model.VehicleDriverBindingMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleDriverBindingObjRelInsertInput, error) {
	var it model.VehicleDriverBindingObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_driver_binding_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_driver_binding_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_on_conflict(ctx context.Context, obj interface{}) (model.VehicleDriverBindingOnConflict, error) {
	var it model.VehicleDriverBindingOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_driver_binding_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_driver_binding_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingOrderBy, error) {
	var it model.VehicleDriverBindingOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lease_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lease_contract"))
			it.LeaseContract, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleDriverBindingPkColumnsInput, error) {
	var it model.VehicleDriverBindingPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_set_input(ctx context.Context, obj interface{}) (model.VehicleDriverBindingSetInput, error) {
	var it model.VehicleDriverBindingSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "lease_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lease_contract"))
			it.LeaseContract, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_driver_binding_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_driver_binding_id"))
			it.VehicleDriverBindingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingStddevOrderBy, error) {
	var it model.VehicleDriverBindingStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingStddevPopOrderBy, error) {
	var it model.VehicleDriverBindingStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingStddevSampOrderBy, error) {
	var it model.VehicleDriverBindingStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingSumOrderBy, error) {
	var it model.VehicleDriverBindingSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingVarPopOrderBy, error) {
	var it model.VehicleDriverBindingVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingVarSampOrderBy, error) {
	var it model.VehicleDriverBindingVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_driver_binding_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleDriverBindingVarianceOrderBy, error) {
	var it model.VehicleDriverBindingVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_vehicle_driver_binding":
			out.Values[i] = ec._Mutation_delete_vehicle_driver_binding(ctx, field)
		case "delete_vehicle_driver_binding_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_driver_binding_by_pk(ctx, field)
		case "insert_vehicle_driver_binding":
			out.Values[i] = ec._Mutation_insert_vehicle_driver_binding(ctx, field)
		case "insert_vehicle_driver_binding_one":
			out.Values[i] = ec._Mutation_insert_vehicle_driver_binding_one(ctx, field)
		case "update_vehicle_driver_binding":
			out.Values[i] = ec._Mutation_update_vehicle_driver_binding(ctx, field)
		case "update_vehicle_driver_binding_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_driver_binding_by_pk(ctx, field)
		case "delete_driver_identity":
			out.Values[i] = ec._Mutation_delete_driver_identity(ctx, field)
		case "delete_driver_identity_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_identity_by_pk(ctx, field)
		case "insert_driver_identity":
			out.Values[i] = ec._Mutation_insert_driver_identity(ctx, field)
		case "insert_driver_identity_one":
			out.Values[i] = ec._Mutation_insert_driver_identity_one(ctx, field)
		case "update_driver_identity":
			out.Values[i] = ec._Mutation_update_driver_identity(ctx, field)
		case "update_driver_identity_by_pk":
			out.Values[i] = ec._Mutation_update_driver_identity_by_pk(ctx, field)
		case "delete_driver_info":
			out.Values[i] = ec._Mutation_delete_driver_info(ctx, field)
		case "delete_driver_info_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_info_by_pk(ctx, field)
		case "insert_driver_info":
			out.Values[i] = ec._Mutation_insert_driver_info(ctx, field)
		case "insert_driver_info_one":
			out.Values[i] = ec._Mutation_insert_driver_info_one(ctx, field)
		case "update_driver_info":
			out.Values[i] = ec._Mutation_update_driver_info(ctx, field)
		case "update_driver_info_by_pk":
			out.Values[i] = ec._Mutation_update_driver_info_by_pk(ctx, field)
		case "delete_driver_info_change_log":
			out.Values[i] = ec._Mutation_delete_driver_info_change_log(ctx, field)
		case "delete_driver_info_change_log_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_info_change_log_by_pk(ctx, field)
		case "insert_driver_info_change_log":
			out.Values[i] = ec._Mutation_insert_driver_info_change_log(ctx, field)
		case "insert_driver_info_change_log_one":
			out.Values[i] = ec._Mutation_insert_driver_info_change_log_one(ctx, field)
		case "update_driver_info_change_log":
			out.Values[i] = ec._Mutation_update_driver_info_change_log(ctx, field)
		case "update_driver_info_change_log_by_pk":
			out.Values[i] = ec._Mutation_update_driver_info_change_log_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "vehicle_driver_binding":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_driver_binding(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_driver_binding_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_driver_binding_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_driver_binding_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_driver_binding_by_pk(ctx, field)
				return res
			})
		case "driver_identity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_by_pk(ctx, field)
				return res
			})
		case "driver_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_by_pk(ctx, field)
				return res
			})
		case "driver_info_change_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_change_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info_change_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_change_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info_change_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_change_log_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "vehicle_driver_binding":
		return ec._Subscription_vehicle_driver_binding(ctx, fields[0])
	case "vehicle_driver_binding_aggregate":
		return ec._Subscription_vehicle_driver_binding_aggregate(ctx, fields[0])
	case "vehicle_driver_binding_by_pk":
		return ec._Subscription_vehicle_driver_binding_by_pk(ctx, fields[0])
	case "driver_identity":
		return ec._Subscription_driver_identity(ctx, fields[0])
	case "driver_identity_aggregate":
		return ec._Subscription_driver_identity_aggregate(ctx, fields[0])
	case "driver_identity_by_pk":
		return ec._Subscription_driver_identity_by_pk(ctx, fields[0])
	case "driver_info":
		return ec._Subscription_driver_info(ctx, fields[0])
	case "driver_info_aggregate":
		return ec._Subscription_driver_info_aggregate(ctx, fields[0])
	case "driver_info_by_pk":
		return ec._Subscription_driver_info_by_pk(ctx, fields[0])
	case "driver_info_change_log":
		return ec._Subscription_driver_info_change_log(ctx, fields[0])
	case "driver_info_change_log_aggregate":
		return ec._Subscription_driver_info_change_log_aggregate(ctx, fields[0])
	case "driver_info_change_log_by_pk":
		return ec._Subscription_driver_info_change_log_by_pk(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identityImplementors = []string{"driver_identity"}

func (ec *executionContext) _driver_identity(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_accumulatived_points(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._driver_identity_annual_review_date(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_identity_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._driver_identity_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._driver_identity_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_identity_deleted_by(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._driver_identity_driver_holding_id_photo(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._driver_identity_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._driver_identity_driver_license_district_id(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._driver_identity_driver_license_issue_date(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._driver_identity_driver_license_issuing_authority(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._driver_identity_driver_license_pic(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._driver_identity_driver_license_province_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_driver_license_status(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._driver_identity_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._driver_identity_driver_signature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_card_address":
			out.Values[i] = ec._driver_identity_id_card_address(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._driver_identity_id_card_back_pic(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._driver_identity_id_card_birthday(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._driver_identity_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._driver_identity_id_card_front_pic(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._driver_identity_id_card_nation(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._driver_identity_id_card_num(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._driver_identity_id_card_sign_government(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._driver_identity_id_card_start_date(ctx, field, obj)
		case "identity_id":
			out.Values[i] = ec._driver_identity_identity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._driver_identity_is_delete(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._driver_identity_is_review(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._driver_identity_labor_contract(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._driver_identity_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._driver_identity_occupational_issuing_authority(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._driver_identity_occupational_number(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_quasi_driving_models(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._driver_identity_renewal_date(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._driver_identity_sorting_date(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_identity_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_identity_updated_by(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._driver_identity_working_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_aggregateImplementors = []string{"driver_identity_aggregate"}

func (ec *executionContext) _driver_identity_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_aggregate")
		case "aggregate":
			out.Values[i] = ec._driver_identity_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._driver_identity_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_aggregate_fieldsImplementors = []string{"driver_identity_aggregate_fields"}

func (ec *executionContext) _driver_identity_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_aggregate_fields")
		case "avg":
			out.Values[i] = ec._driver_identity_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._driver_identity_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._driver_identity_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._driver_identity_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._driver_identity_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._driver_identity_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._driver_identity_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._driver_identity_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._driver_identity_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._driver_identity_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._driver_identity_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_avg_fieldsImplementors = []string{"driver_identity_avg_fields"}

func (ec *executionContext) _driver_identity_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_avg_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_avg_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_avg_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_avg_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_avg_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_max_fieldsImplementors = []string{"driver_identity_max_fields"}

func (ec *executionContext) _driver_identity_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_max_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_max_fields_accumulatived_points(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._driver_identity_max_fields_annual_review_date(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_identity_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_identity_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_identity_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_identity_max_fields_deleted_by(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._driver_identity_max_fields_driver_holding_id_photo(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_district_id(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_issue_date(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_issuing_authority(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_pic(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_province_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_max_fields_driver_license_status(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._driver_identity_max_fields_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._driver_identity_max_fields_driver_signature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_max_fields_id(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._driver_identity_max_fields_id_card_address(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._driver_identity_max_fields_id_card_back_pic(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._driver_identity_max_fields_id_card_birthday(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._driver_identity_max_fields_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._driver_identity_max_fields_id_card_front_pic(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._driver_identity_max_fields_id_card_nation(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._driver_identity_max_fields_id_card_num(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._driver_identity_max_fields_id_card_sign_government(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._driver_identity_max_fields_id_card_start_date(ctx, field, obj)
		case "identity_id":
			out.Values[i] = ec._driver_identity_max_fields_identity_id(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._driver_identity_max_fields_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._driver_identity_max_fields_occupational_issuing_authority(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._driver_identity_max_fields_occupational_number(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_max_fields_quasi_driving_models(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._driver_identity_max_fields_renewal_date(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._driver_identity_max_fields_sorting_date(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_identity_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_identity_max_fields_updated_by(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._driver_identity_max_fields_working_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_min_fieldsImplementors = []string{"driver_identity_min_fields"}

func (ec *executionContext) _driver_identity_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_min_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_min_fields_accumulatived_points(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._driver_identity_min_fields_annual_review_date(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_identity_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_identity_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_identity_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_identity_min_fields_deleted_by(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._driver_identity_min_fields_driver_holding_id_photo(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_district_id(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_issue_date(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_issuing_authority(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_pic(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_province_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_min_fields_driver_license_status(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._driver_identity_min_fields_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._driver_identity_min_fields_driver_signature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_min_fields_id(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._driver_identity_min_fields_id_card_address(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._driver_identity_min_fields_id_card_back_pic(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._driver_identity_min_fields_id_card_birthday(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._driver_identity_min_fields_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._driver_identity_min_fields_id_card_front_pic(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._driver_identity_min_fields_id_card_nation(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._driver_identity_min_fields_id_card_num(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._driver_identity_min_fields_id_card_sign_government(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._driver_identity_min_fields_id_card_start_date(ctx, field, obj)
		case "identity_id":
			out.Values[i] = ec._driver_identity_min_fields_identity_id(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._driver_identity_min_fields_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._driver_identity_min_fields_occupational_issuing_authority(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._driver_identity_min_fields_occupational_number(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_min_fields_quasi_driving_models(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._driver_identity_min_fields_renewal_date(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._driver_identity_min_fields_sorting_date(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_identity_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_identity_min_fields_updated_by(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._driver_identity_min_fields_working_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_mutation_responseImplementors = []string{"driver_identity_mutation_response"}

func (ec *executionContext) _driver_identity_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._driver_identity_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._driver_identity_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_stddev_fieldsImplementors = []string{"driver_identity_stddev_fields"}

func (ec *executionContext) _driver_identity_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_stddev_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_stddev_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_stddev_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_stddev_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_stddev_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_stddev_pop_fieldsImplementors = []string{"driver_identity_stddev_pop_fields"}

func (ec *executionContext) _driver_identity_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_stddev_pop_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_stddev_pop_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_stddev_pop_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_stddev_pop_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_stddev_pop_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_stddev_samp_fieldsImplementors = []string{"driver_identity_stddev_samp_fields"}

func (ec *executionContext) _driver_identity_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_stddev_samp_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_stddev_samp_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_stddev_samp_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_stddev_samp_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_stddev_samp_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_sum_fieldsImplementors = []string{"driver_identity_sum_fields"}

func (ec *executionContext) _driver_identity_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentitySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_sum_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_sum_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_sum_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_sum_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_sum_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_var_pop_fieldsImplementors = []string{"driver_identity_var_pop_fields"}

func (ec *executionContext) _driver_identity_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_var_pop_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_var_pop_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_var_pop_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_var_pop_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_var_pop_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_var_samp_fieldsImplementors = []string{"driver_identity_var_samp_fields"}

func (ec *executionContext) _driver_identity_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_var_samp_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_var_samp_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_var_samp_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_var_samp_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_var_samp_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_identity_variance_fieldsImplementors = []string{"driver_identity_variance_fields"}

func (ec *executionContext) _driver_identity_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_identity_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_identity_variance_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_identity_variance_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_identity_variance_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_identity_variance_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_identity_variance_fields_quasi_driving_models(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_infoImplementors = []string{"driver_info"}

func (ec *executionContext) _driver_info(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info")
		case "agent":
			out.Values[i] = ec._driver_info_agent(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._driver_info_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._driver_info_check_by(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._driver_info_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_info_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._driver_info_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._driver_info_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_info_deleted_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._driver_info_department_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_info_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_identity_id":
			out.Values[i] = ec._driver_info_driver_identity_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._driver_info_driver_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_info_enterprise_id(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._driver_info_files_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "input_at":
			out.Values[i] = ec._driver_info_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._driver_info_input_by(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._driver_info_is_black(ctx, field, obj)
		case "is_check_data":
			out.Values[i] = ec._driver_info_is_check_data(ctx, field, obj)
		case "is_check_sms":
			out.Values[i] = ec._driver_info_is_check_sms(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._driver_info_is_delete(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._driver_info_is_input(ctx, field, obj)
		case "is_manual_input":
			out.Values[i] = ec._driver_info_is_manual_input(ctx, field, obj)
		case "is_submit":
			out.Values[i] = ec._driver_info_is_submit(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._driver_info_mailing_address(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._driver_info_operator(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._driver_info_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driver_info_remarks(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_sex(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._driver_info_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._driver_info_submit_by(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._driver_info_submit_content(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._driver_info_telephone(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._driver_info_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_info_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_info_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_aggregateImplementors = []string{"driver_info_aggregate"}

func (ec *executionContext) _driver_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._driver_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._driver_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_aggregate_fieldsImplementors = []string{"driver_info_aggregate_fields"}

func (ec *executionContext) _driver_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._driver_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._driver_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._driver_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._driver_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._driver_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._driver_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._driver_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._driver_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._driver_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._driver_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._driver_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_avg_fieldsImplementors = []string{"driver_info_avg_fields"}

func (ec *executionContext) _driver_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_avg_fields")
		case "id":
			out.Values[i] = ec._driver_info_avg_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_avg_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_logImplementors = []string{"driver_info_change_log"}

func (ec *executionContext) _driver_info_change_log(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_accumulatived_points(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._driver_info_change_log_agent(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._driver_info_change_log_annual_review_date(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._driver_info_change_log_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._driver_info_change_log_check_by(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._driver_info_change_log_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_info_change_log_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._driver_info_change_log_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._driver_info_change_log_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_info_change_log_deleted_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._driver_info_change_log_department_id(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._driver_info_change_log_driver_holding_id_photo(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_info_change_log_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_info_change_log_id":
			out.Values[i] = ec._driver_info_change_log_driver_info_change_log_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._driver_info_change_log_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._driver_info_change_log_driver_license_district_id(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._driver_info_change_log_driver_license_issue_date(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._driver_info_change_log_driver_license_issuing_authority(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._driver_info_change_log_driver_license_pic(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._driver_info_change_log_driver_license_province_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_driver_license_status(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._driver_info_change_log_driver_name(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._driver_info_change_log_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._driver_info_change_log_driver_signature(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_info_change_log_enterprise_id(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._driver_info_change_log_files_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_card_address":
			out.Values[i] = ec._driver_info_change_log_id_card_address(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._driver_info_change_log_id_card_back_pic(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._driver_info_change_log_id_card_birthday(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._driver_info_change_log_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._driver_info_change_log_id_card_front_pic(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._driver_info_change_log_id_card_nation(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._driver_info_change_log_id_card_num(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._driver_info_change_log_id_card_sign_government(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._driver_info_change_log_id_card_start_date(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._driver_info_change_log_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._driver_info_change_log_input_by(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._driver_info_change_log_is_black(ctx, field, obj)
		case "is_check_data":
			out.Values[i] = ec._driver_info_change_log_is_check_data(ctx, field, obj)
		case "is_check_sms":
			out.Values[i] = ec._driver_info_change_log_is_check_sms(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._driver_info_change_log_is_delete(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._driver_info_change_log_is_input(ctx, field, obj)
		case "is_manual_input":
			out.Values[i] = ec._driver_info_change_log_is_manual_input(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._driver_info_change_log_is_review(ctx, field, obj)
		case "is_submit":
			out.Values[i] = ec._driver_info_change_log_is_submit(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._driver_info_change_log_labor_contract(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._driver_info_change_log_mailing_address(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._driver_info_change_log_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._driver_info_change_log_occupational_issuing_authority(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._driver_info_change_log_occupational_number(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._driver_info_change_log_operator(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_quasi_driving_models(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._driver_info_change_log_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driver_info_change_log_remarks(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._driver_info_change_log_renewal_date(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_sex(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._driver_info_change_log_sorting_date(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._driver_info_change_log_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._driver_info_change_log_submit_by(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._driver_info_change_log_submit_content(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._driver_info_change_log_telephone(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._driver_info_change_log_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_info_change_log_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_info_change_log_updated_by(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._driver_info_change_log_working_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_aggregateImplementors = []string{"driver_info_change_log_aggregate"}

func (ec *executionContext) _driver_info_change_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._driver_info_change_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._driver_info_change_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_aggregate_fieldsImplementors = []string{"driver_info_change_log_aggregate_fields"}

func (ec *executionContext) _driver_info_change_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._driver_info_change_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_avg_fieldsImplementors = []string{"driver_info_change_log_avg_fields"}

func (ec *executionContext) _driver_info_change_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_avg_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_avg_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_avg_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_avg_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_avg_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_avg_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_max_fieldsImplementors = []string{"driver_info_change_log_max_fields"}

func (ec *executionContext) _driver_info_change_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_max_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_max_fields_accumulatived_points(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._driver_info_change_log_max_fields_agent(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_annual_review_date(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._driver_info_change_log_max_fields_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._driver_info_change_log_max_fields_check_by(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._driver_info_change_log_max_fields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_info_change_log_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_info_change_log_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_info_change_log_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_info_change_log_max_fields_deleted_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_department_id(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_holding_id_photo(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_id(ctx, field, obj)
		case "driver_info_change_log_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_info_change_log_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_district_id(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_issue_date(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_issuing_authority(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_pic(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_province_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_license_status(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_name(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._driver_info_change_log_max_fields_driver_signature(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_info_change_log_max_fields_enterprise_id(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._driver_info_change_log_max_fields_files_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_max_fields_id(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_address(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_back_pic(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_birthday(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_front_pic(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_nation(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_num(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_sign_government(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_id_card_start_date(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._driver_info_change_log_max_fields_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._driver_info_change_log_max_fields_input_by(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._driver_info_change_log_max_fields_mailing_address(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._driver_info_change_log_max_fields_occupational_issuing_authority(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._driver_info_change_log_max_fields_occupational_number(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._driver_info_change_log_max_fields_operator(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_max_fields_quasi_driving_models(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._driver_info_change_log_max_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driver_info_change_log_max_fields_remarks(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_renewal_date(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_max_fields_sex(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._driver_info_change_log_max_fields_sorting_date(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._driver_info_change_log_max_fields_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._driver_info_change_log_max_fields_submit_by(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._driver_info_change_log_max_fields_submit_content(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._driver_info_change_log_max_fields_telephone(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._driver_info_change_log_max_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_info_change_log_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_info_change_log_max_fields_updated_by(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._driver_info_change_log_max_fields_working_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_min_fieldsImplementors = []string{"driver_info_change_log_min_fields"}

func (ec *executionContext) _driver_info_change_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_min_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_min_fields_accumulatived_points(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._driver_info_change_log_min_fields_agent(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_annual_review_date(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._driver_info_change_log_min_fields_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._driver_info_change_log_min_fields_check_by(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._driver_info_change_log_min_fields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_info_change_log_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_info_change_log_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_info_change_log_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_info_change_log_min_fields_deleted_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_department_id(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_holding_id_photo(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_id(ctx, field, obj)
		case "driver_info_change_log_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_info_change_log_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_district_id(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_issue_date(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_issuing_authority(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_pic(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_province_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_license_status(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_name(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._driver_info_change_log_min_fields_driver_signature(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_info_change_log_min_fields_enterprise_id(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._driver_info_change_log_min_fields_files_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_min_fields_id(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_address(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_back_pic(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_birthday(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_front_pic(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_nation(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_num(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_sign_government(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_id_card_start_date(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._driver_info_change_log_min_fields_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._driver_info_change_log_min_fields_input_by(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._driver_info_change_log_min_fields_mailing_address(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._driver_info_change_log_min_fields_occupational_issuing_authority(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._driver_info_change_log_min_fields_occupational_number(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._driver_info_change_log_min_fields_operator(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_min_fields_quasi_driving_models(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._driver_info_change_log_min_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driver_info_change_log_min_fields_remarks(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_renewal_date(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_min_fields_sex(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._driver_info_change_log_min_fields_sorting_date(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._driver_info_change_log_min_fields_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._driver_info_change_log_min_fields_submit_by(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._driver_info_change_log_min_fields_submit_content(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._driver_info_change_log_min_fields_telephone(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._driver_info_change_log_min_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_info_change_log_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_info_change_log_min_fields_updated_by(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._driver_info_change_log_min_fields_working_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_mutation_responseImplementors = []string{"driver_info_change_log_mutation_response"}

func (ec *executionContext) _driver_info_change_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._driver_info_change_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._driver_info_change_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_stddev_fieldsImplementors = []string{"driver_info_change_log_stddev_fields"}

func (ec *executionContext) _driver_info_change_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_stddev_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_stddev_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_stddev_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_stddev_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_stddev_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_stddev_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_stddev_pop_fieldsImplementors = []string{"driver_info_change_log_stddev_pop_fields"}

func (ec *executionContext) _driver_info_change_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_stddev_pop_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_stddev_pop_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_stddev_pop_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_stddev_pop_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_stddev_pop_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_stddev_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_stddev_samp_fieldsImplementors = []string{"driver_info_change_log_stddev_samp_fields"}

func (ec *executionContext) _driver_info_change_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_stddev_samp_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_stddev_samp_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_stddev_samp_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_stddev_samp_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_stddev_samp_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_stddev_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_sum_fieldsImplementors = []string{"driver_info_change_log_sum_fields"}

func (ec *executionContext) _driver_info_change_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_sum_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_sum_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_sum_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_sum_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_sum_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_sum_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_var_pop_fieldsImplementors = []string{"driver_info_change_log_var_pop_fields"}

func (ec *executionContext) _driver_info_change_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_var_pop_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_var_pop_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_var_pop_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_var_pop_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_var_pop_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_var_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_var_samp_fieldsImplementors = []string{"driver_info_change_log_var_samp_fields"}

func (ec *executionContext) _driver_info_change_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_var_samp_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_var_samp_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_var_samp_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_var_samp_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_var_samp_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_var_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_change_log_variance_fieldsImplementors = []string{"driver_info_change_log_variance_fields"}

func (ec *executionContext) _driver_info_change_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoChangeLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_change_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_change_log_variance_fields")
		case "accumulatived_points":
			out.Values[i] = ec._driver_info_change_log_variance_fields_accumulatived_points(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._driver_info_change_log_variance_fields_driver_license_status(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_change_log_variance_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._driver_info_change_log_variance_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_change_log_variance_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_max_fieldsImplementors = []string{"driver_info_max_fields"}

func (ec *executionContext) _driver_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_max_fields")
		case "agent":
			out.Values[i] = ec._driver_info_max_fields_agent(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._driver_info_max_fields_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._driver_info_max_fields_check_by(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._driver_info_max_fields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_info_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_info_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_info_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_info_max_fields_deleted_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._driver_info_max_fields_department_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_info_max_fields_driver_id(ctx, field, obj)
		case "driver_identity_id":
			out.Values[i] = ec._driver_info_max_fields_driver_identity_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._driver_info_max_fields_driver_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_info_max_fields_enterprise_id(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._driver_info_max_fields_files_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_max_fields_id(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._driver_info_max_fields_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._driver_info_max_fields_input_by(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._driver_info_max_fields_mailing_address(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._driver_info_max_fields_operator(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._driver_info_max_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driver_info_max_fields_remarks(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_max_fields_sex(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._driver_info_max_fields_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._driver_info_max_fields_submit_by(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._driver_info_max_fields_submit_content(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._driver_info_max_fields_telephone(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._driver_info_max_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_info_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_info_max_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_min_fieldsImplementors = []string{"driver_info_min_fields"}

func (ec *executionContext) _driver_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_min_fields")
		case "agent":
			out.Values[i] = ec._driver_info_min_fields_agent(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._driver_info_min_fields_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._driver_info_min_fields_check_by(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._driver_info_min_fields_contact_address(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._driver_info_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._driver_info_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._driver_info_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._driver_info_min_fields_deleted_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._driver_info_min_fields_department_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_info_min_fields_driver_id(ctx, field, obj)
		case "driver_identity_id":
			out.Values[i] = ec._driver_info_min_fields_driver_identity_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._driver_info_min_fields_driver_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_info_min_fields_enterprise_id(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._driver_info_min_fields_files_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_info_min_fields_id(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._driver_info_min_fields_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._driver_info_min_fields_input_by(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._driver_info_min_fields_mailing_address(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._driver_info_min_fields_operator(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._driver_info_min_fields_remark_in(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driver_info_min_fields_remarks(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_min_fields_sex(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._driver_info_min_fields_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._driver_info_min_fields_submit_by(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._driver_info_min_fields_submit_content(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._driver_info_min_fields_telephone(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._driver_info_min_fields_update_time_in(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._driver_info_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._driver_info_min_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_mutation_responseImplementors = []string{"driver_info_mutation_response"}

func (ec *executionContext) _driver_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._driver_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._driver_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_stddev_fieldsImplementors = []string{"driver_info_stddev_fields"}

func (ec *executionContext) _driver_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_stddev_fields")
		case "id":
			out.Values[i] = ec._driver_info_stddev_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_stddev_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_stddev_pop_fieldsImplementors = []string{"driver_info_stddev_pop_fields"}

func (ec *executionContext) _driver_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._driver_info_stddev_pop_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_stddev_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_stddev_samp_fieldsImplementors = []string{"driver_info_stddev_samp_fields"}

func (ec *executionContext) _driver_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._driver_info_stddev_samp_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_stddev_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_sum_fieldsImplementors = []string{"driver_info_sum_fields"}

func (ec *executionContext) _driver_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_sum_fields")
		case "id":
			out.Values[i] = ec._driver_info_sum_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_sum_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_var_pop_fieldsImplementors = []string{"driver_info_var_pop_fields"}

func (ec *executionContext) _driver_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_var_pop_fields")
		case "id":
			out.Values[i] = ec._driver_info_var_pop_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_var_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_var_samp_fieldsImplementors = []string{"driver_info_var_samp_fields"}

func (ec *executionContext) _driver_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_var_samp_fields")
		case "id":
			out.Values[i] = ec._driver_info_var_samp_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_var_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_info_variance_fieldsImplementors = []string{"driver_info_variance_fields"}

func (ec *executionContext) _driver_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_info_variance_fields")
		case "id":
			out.Values[i] = ec._driver_info_variance_fields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._driver_info_variance_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_bindingImplementors = []string{"vehicle_driver_binding"}

func (ec *executionContext) _vehicle_driver_binding(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBinding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_bindingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding")
		case "created_at":
			out.Values[i] = ec._vehicle_driver_binding_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._vehicle_driver_binding_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._vehicle_driver_binding_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_driver_binding_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_driver_binding_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._vehicle_driver_binding_is_delete(ctx, field, obj)
		case "lease_contract":
			out.Values[i] = ec._vehicle_driver_binding_lease_contract(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_driver_binding_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_driver_binding_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_driver_binding_updated_by(ctx, field, obj)
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._vehicle_driver_binding_vehicle_driver_binding_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._vehicle_driver_binding_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_aggregateImplementors = []string{"vehicle_driver_binding_aggregate"}

func (ec *executionContext) _vehicle_driver_binding_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_aggregate_fieldsImplementors = []string{"vehicle_driver_binding_aggregate_fields"}

func (ec *executionContext) _vehicle_driver_binding_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_driver_binding_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_avg_fieldsImplementors = []string{"vehicle_driver_binding_avg_fields"}

func (ec *executionContext) _vehicle_driver_binding_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_avg_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_max_fieldsImplementors = []string{"vehicle_driver_binding_max_fields"}

func (ec *executionContext) _vehicle_driver_binding_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_max_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_updated_by(ctx, field, obj)
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_vehicle_driver_binding_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_driver_binding_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_min_fieldsImplementors = []string{"vehicle_driver_binding_min_fields"}

func (ec *executionContext) _vehicle_driver_binding_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_min_fields")
		case "created_at":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_deleted_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_remarks(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_updated_by(ctx, field, obj)
		case "vehicle_driver_binding_id":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_vehicle_driver_binding_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_driver_binding_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_mutation_responseImplementors = []string{"vehicle_driver_binding_mutation_response"}

func (ec *executionContext) _vehicle_driver_binding_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_driver_binding_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_driver_binding_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_stddev_fieldsImplementors = []string{"vehicle_driver_binding_stddev_fields"}

func (ec *executionContext) _vehicle_driver_binding_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_stddev_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_stddev_pop_fieldsImplementors = []string{"vehicle_driver_binding_stddev_pop_fields"}

func (ec *executionContext) _vehicle_driver_binding_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_stddev_samp_fieldsImplementors = []string{"vehicle_driver_binding_stddev_samp_fields"}

func (ec *executionContext) _vehicle_driver_binding_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_sum_fieldsImplementors = []string{"vehicle_driver_binding_sum_fields"}

func (ec *executionContext) _vehicle_driver_binding_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_sum_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_var_pop_fieldsImplementors = []string{"vehicle_driver_binding_var_pop_fields"}

func (ec *executionContext) _vehicle_driver_binding_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_var_pop_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_var_samp_fieldsImplementors = []string{"vehicle_driver_binding_var_samp_fields"}

func (ec *executionContext) _vehicle_driver_binding_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_var_samp_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_driver_binding_variance_fieldsImplementors = []string{"vehicle_driver_binding_variance_fields"}

func (ec *executionContext) _vehicle_driver_binding_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleDriverBindingVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_driver_binding_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_driver_binding_variance_fields")
		case "id":
			out.Values[i] = ec._vehicle_driver_binding_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_text2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_text2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdriver_identity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverIdentity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_identity(ctx, sel, v)
}

func (ec *executionContext) marshalNdriver_identity_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentityAggregate) graphql.Marshaler {
	return ec._driver_identity_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdriver_identity_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_identity_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdriver_identity_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx context.Context, v interface{}) (model.DriverIdentityBoolExp, error) {
	res, err := ec.unmarshalInputdriver_identity_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_identity_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityConstraint(ctx context.Context, v interface{}) (model.DriverIdentityConstraint, error) {
	var res model.DriverIdentityConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_identity_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityConstraint(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentityConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_identity_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx context.Context, v interface{}) (model.DriverIdentityInsertInput, error) {
	res, err := ec.unmarshalInputdriver_identity_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_identity_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverIdentityInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_identity_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdriver_identity_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx context.Context, v interface{}) (*model.DriverIdentityInsertInput, error) {
	res, err := ec.unmarshalInputdriver_identity_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_identity_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityOrderBy, error) {
	res, err := ec.unmarshalInputdriver_identity_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_identity_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityPkColumnsInput(ctx context.Context, v interface{}) (model.DriverIdentityPkColumnsInput, error) {
	res, err := ec.unmarshalInputdriver_identity_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_identity_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx context.Context, v interface{}) (model.DriverIdentitySelectColumn, error) {
	var res model.DriverIdentitySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_identity_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentitySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_identity_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumn(ctx context.Context, v interface{}) (model.DriverIdentityUpdateColumn, error) {
	var res model.DriverIdentityUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_identity_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentityUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_identity_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverIdentityUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverIdentityUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_identity_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdriver_identity_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverIdentityUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_identity_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_info2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_info(ctx, sel, v)
}

func (ec *executionContext) marshalNdriver_info_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoAggregate) graphql.Marshaler {
	return ec._driver_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdriver_info_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdriver_info_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx context.Context, v interface{}) (model.DriverInfoBoolExp, error) {
	res, err := ec.unmarshalInputdriver_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_change_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverInfoChangeLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_info_change_log(ctx, sel, v)
}

func (ec *executionContext) marshalNdriver_info_change_log_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoChangeLogAggregate) graphql.Marshaler {
	return ec._driver_info_change_log_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdriver_info_change_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_info_change_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdriver_info_change_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx context.Context, v interface{}) (model.DriverInfoChangeLogBoolExp, error) {
	res, err := ec.unmarshalInputdriver_info_change_log_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_change_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogConstraint(ctx context.Context, v interface{}) (model.DriverInfoChangeLogConstraint, error) {
	var res model.DriverInfoChangeLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_change_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoChangeLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_info_change_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInput(ctx context.Context, v interface{}) (model.DriverInfoChangeLogInsertInput, error) {
	res, err := ec.unmarshalInputdriver_info_change_log_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_change_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverInfoChangeLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoChangeLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_change_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdriver_info_change_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogInsertInput(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogInsertInput, error) {
	res, err := ec.unmarshalInputdriver_info_change_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_change_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogOrderBy, error) {
	res, err := ec.unmarshalInputdriver_info_change_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_change_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogPkColumnsInput(ctx context.Context, v interface{}) (model.DriverInfoChangeLogPkColumnsInput, error) {
	res, err := ec.unmarshalInputdriver_info_change_log_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumn(ctx context.Context, v interface{}) (model.DriverInfoChangeLogSelectColumn, error) {
	var res model.DriverInfoChangeLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoChangeLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumn(ctx context.Context, v interface{}) (model.DriverInfoChangeLogUpdateColumn, error) {
	var res model.DriverInfoChangeLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoChangeLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_info_change_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverInfoChangeLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverInfoChangeLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdriver_info_change_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverInfoChangeLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_info_change_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNdriver_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoConstraint(ctx context.Context, v interface{}) (model.DriverInfoConstraint, error) {
	var res model.DriverInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_info_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx context.Context, v interface{}) (model.DriverInfoInsertInput, error) {
	res, err := ec.unmarshalInputdriver_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdriver_info_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx context.Context, v interface{}) (*model.DriverInfoInsertInput, error) {
	res, err := ec.unmarshalInputdriver_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoOrderBy, error) {
	res, err := ec.unmarshalInputdriver_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoPkColumnsInput(ctx context.Context, v interface{}) (model.DriverInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputdriver_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx context.Context, v interface{}) (model.DriverInfoSelectColumn, error) {
	var res model.DriverInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumn(ctx context.Context, v interface{}) (model.DriverInfoUpdateColumn, error) {
	var res model.DriverInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdriver_info_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_info_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNvehicle_driver_binding2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleDriverBinding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBinding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_driver_binding(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_driver_binding_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBindingAggregate) graphql.Marshaler {
	return ec._vehicle_driver_binding_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_driver_binding_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_driver_binding_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx context.Context, v interface{}) (model.VehicleDriverBindingBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_driver_binding_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingConstraint(ctx context.Context, v interface{}) (model.VehicleDriverBindingConstraint, error) {
	var res model.VehicleDriverBindingConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_driver_binding_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBindingConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx context.Context, v interface{}) (model.VehicleDriverBindingInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_driver_binding_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleDriverBindingInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDriverBindingInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_driver_binding_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingInsertInput(ctx context.Context, v interface{}) (*model.VehicleDriverBindingInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_driver_binding_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_driver_binding_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleDriverBindingPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_driver_binding_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx context.Context, v interface{}) (model.VehicleDriverBindingSelectColumn, error) {
	var res model.VehicleDriverBindingSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_driver_binding_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBindingSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumn(ctx context.Context, v interface{}) (model.VehicleDriverBindingUpdateColumn, error) {
	var res model.VehicleDriverBindingUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_driver_binding_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleDriverBindingUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_driver_binding_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleDriverBindingUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleDriverBindingUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_driver_binding_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_driver_binding_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleDriverBindingUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_driver_binding_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model1.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model1.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_text2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_text2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_text2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_text2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_text2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_text2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_text_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐTextComparisonExp(ctx context.Context, v interface{}) (*model.TextComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInput_text_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentity(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_identity_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_identity_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAvgOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_identity_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx context.Context, v interface{}) ([]*model.DriverIdentityBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_identity_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx context.Context, v interface{}) (*model.DriverIdentityBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_identity_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx context.Context, v interface{}) (*model.DriverIdentityIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMaxOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMinOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOnConflict(ctx context.Context, v interface{}) (*model.DriverIdentityOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_identity_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverIdentityOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_identity_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverIdentitySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverIdentitySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_identity_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdriver_identity_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverIdentitySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_identity_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdriver_identity_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx context.Context, v interface{}) (*model.DriverIdentitySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentitySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySumOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentitySumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarPopOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarSampOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_identity_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_identity_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_identity_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarianceOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_identity_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_info_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_info_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_info_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx context.Context, v interface{}) ([]*model.DriverInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_info_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx context.Context, v interface{}) (*model.DriverInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLog(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_info_change_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_info_change_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogAvgOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx context.Context, v interface{}) ([]*model.DriverInfoChangeLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoChangeLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_info_change_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogBoolExp(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogIncInput(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMaxOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMinOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOnConflict(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverInfoChangeLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoChangeLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_change_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverInfoChangeLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverInfoChangeLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdriver_info_change_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverInfoChangeLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_info_change_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdriver_info_change_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSetInput(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogSumOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_change_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoChangeLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_change_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_change_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoChangeLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoChangeLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_change_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_info_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoIncInput(ctx context.Context, v interface{}) (*model.DriverInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMinOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOnConflict(ctx context.Context, v interface{}) (*model.DriverInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_info_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdriver_info_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_info_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdriver_info_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSetInput(ctx context.Context, v interface{}) (*model.DriverInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSumOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_info_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_info_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model1.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBinding(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBinding) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_driver_binding_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_driver_binding_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleDriverBindingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDriverBindingBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingBoolExp(ctx context.Context, v interface{}) (*model.VehicleDriverBindingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingIncInput(ctx context.Context, v interface{}) (*model.VehicleDriverBindingIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOnConflict(ctx context.Context, v interface{}) (*model.VehicleDriverBindingOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleDriverBindingOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleDriverBindingOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_driver_binding_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleDriverBindingSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleDriverBindingSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_driver_binding_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_driver_binding_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleDriverBindingSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_driver_binding_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSetInput(ctx context.Context, v interface{}) (*model.VehicleDriverBindingSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_driver_binding_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleDriverBindingVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_driver_binding_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_driver_binding_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐVehicleDriverBindingVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleDriverBindingVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_driver_binding_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
