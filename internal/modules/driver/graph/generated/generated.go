// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/driver/graph/model"
	model1 "VehicleSupervision/internal/modules/driver/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DriverFingerprint struct {
		Content             func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		DriverFingerprintID func(childComplexity int) int
		DriverID            func(childComplexity int) int
		DriverName          func(childComplexity int) int
		FingerprintName     func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstructionID       func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsSuccess           func(childComplexity int) int
		OperationTime       func(childComplexity int) int
		OperationType       func(childComplexity int) int
		Signature           func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		TernimalID          func(childComplexity int) int
		Timestamp           func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		UploadTime          func(childComplexity int) int
		UserID              func(childComplexity int) int
	}

	DriverFingerprintAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverFingerprintAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverFingerprintAssociation struct {
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		DriverFingerprintAssociationID func(childComplexity int) int
		DriverFingerprintID            func(childComplexity int) int
		DriverID                       func(childComplexity int) int
		FingerprintName                func(childComplexity int) int
		ID                             func(childComplexity int) int
		IsDeleted                      func(childComplexity int) int
		PictureAddress                 func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	DriverFingerprintAssociationAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverFingerprintAssociationAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverFingerprintAssociationAvgFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationMaxFields struct {
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		DriverFingerprintAssociationID func(childComplexity int) int
		DriverFingerprintID            func(childComplexity int) int
		DriverID                       func(childComplexity int) int
		FingerprintName                func(childComplexity int) int
		ID                             func(childComplexity int) int
		IsDeleted                      func(childComplexity int) int
		PictureAddress                 func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	DriverFingerprintAssociationMinFields struct {
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		DriverFingerprintAssociationID func(childComplexity int) int
		DriverFingerprintID            func(childComplexity int) int
		DriverID                       func(childComplexity int) int
		FingerprintName                func(childComplexity int) int
		ID                             func(childComplexity int) int
		IsDeleted                      func(childComplexity int) int
		PictureAddress                 func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	DriverFingerprintAssociationMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverFingerprintAssociationStddevFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationSumFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationVarPopFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationVarSampFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAssociationVarianceFields struct {
		ID func(childComplexity int) int
	}

	DriverFingerprintAvgFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintMaxFields struct {
		Content             func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		DriverFingerprintID func(childComplexity int) int
		DriverID            func(childComplexity int) int
		DriverName          func(childComplexity int) int
		FingerprintName     func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstructionID       func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsSuccess           func(childComplexity int) int
		OperationTime       func(childComplexity int) int
		OperationType       func(childComplexity int) int
		Signature           func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		TernimalID          func(childComplexity int) int
		Timestamp           func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		UploadTime          func(childComplexity int) int
		UserID              func(childComplexity int) int
	}

	DriverFingerprintMinFields struct {
		Content             func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		DriverFingerprintID func(childComplexity int) int
		DriverID            func(childComplexity int) int
		DriverName          func(childComplexity int) int
		FingerprintName     func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstructionID       func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsSuccess           func(childComplexity int) int
		OperationTime       func(childComplexity int) int
		OperationType       func(childComplexity int) int
		Signature           func(childComplexity int) int
		SimNumber           func(childComplexity int) int
		TernimalID          func(childComplexity int) int
		Timestamp           func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		UploadTime          func(childComplexity int) int
		UserID              func(childComplexity int) int
	}

	DriverFingerprintMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverFingerprintStddevFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintStddevPopFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintStddevSampFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintSumFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintVarPopFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintVarSampFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverFingerprintVarianceFields struct {
		ID            func(childComplexity int) int
		OperationType func(childComplexity int) int
	}

	DriverIdentity struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		IsReview                      func(childComplexity int) int
		LaborContract                 func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverIdentityAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverIdentityAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverIdentityAvgFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityInfoReport struct {
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		DriverIdentityInfoReportID func(childComplexity int) int
		DriverLicenseName          func(childComplexity int) int
		DriverName                 func(childComplexity int) int
		ID                         func(childComplexity int) int
		IcCardReadingResult        func(childComplexity int) int
		IcCardStatus               func(childComplexity int) int
		Imel                       func(childComplexity int) int
		LicenseExpireDate          func(childComplexity int) int
		LicenseNumber              func(childComplexity int) int
		OccupationalNumber         func(childComplexity int) int
		OperationTime              func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	DriverIdentityInfoReportAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverIdentityInfoReportAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverIdentityInfoReportAvgFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportMaxFields struct {
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		DriverIdentityInfoReportID func(childComplexity int) int
		DriverLicenseName          func(childComplexity int) int
		DriverName                 func(childComplexity int) int
		ID                         func(childComplexity int) int
		IcCardReadingResult        func(childComplexity int) int
		IcCardStatus               func(childComplexity int) int
		Imel                       func(childComplexity int) int
		LicenseExpireDate          func(childComplexity int) int
		LicenseNumber              func(childComplexity int) int
		OccupationalNumber         func(childComplexity int) int
		OperationTime              func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	DriverIdentityInfoReportMinFields struct {
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		DeletedBy                  func(childComplexity int) int
		DriverIdentityInfoReportID func(childComplexity int) int
		DriverLicenseName          func(childComplexity int) int
		DriverName                 func(childComplexity int) int
		ID                         func(childComplexity int) int
		IcCardReadingResult        func(childComplexity int) int
		IcCardStatus               func(childComplexity int) int
		Imel                       func(childComplexity int) int
		LicenseExpireDate          func(childComplexity int) int
		LicenseNumber              func(childComplexity int) int
		OccupationalNumber         func(childComplexity int) int
		OperationTime              func(childComplexity int) int
		RegistrationTime           func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		UpdatedBy                  func(childComplexity int) int
		VehicleID                  func(childComplexity int) int
	}

	DriverIdentityInfoReportMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverIdentityInfoReportStddevFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportStddevPopFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportStddevSampFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportSumFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportVarPopFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportVarSampFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityInfoReportVarianceFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DriverIdentityMaxFields struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		IsReview                      func(childComplexity int) int
		LaborContract                 func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverIdentityMinFields struct {
		AccumulativedPoints           func(childComplexity int) int
		AnnualReviewDate              func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DriverHoldingIDPhoto          func(childComplexity int) int
		DriverLicenseCityID           func(childComplexity int) int
		DriverLicenseDistrictID       func(childComplexity int) int
		DriverLicenseIssueDate        func(childComplexity int) int
		DriverLicenseIssuingAuthority func(childComplexity int) int
		DriverLicensePic              func(childComplexity int) int
		DriverLicenseProvinceID       func(childComplexity int) int
		DriverLicenseStatus           func(childComplexity int) int
		DriverPhoto                   func(childComplexity int) int
		DriverSignature               func(childComplexity int) int
		ID                            func(childComplexity int) int
		IDCardAddress                 func(childComplexity int) int
		IDCardBackPic                 func(childComplexity int) int
		IDCardBirthday                func(childComplexity int) int
		IDCardEndDate                 func(childComplexity int) int
		IDCardFrontPic                func(childComplexity int) int
		IDCardNation                  func(childComplexity int) int
		IDCardNum                     func(childComplexity int) int
		IDCardSignGovernment          func(childComplexity int) int
		IDCardStartDate               func(childComplexity int) int
		IdentityID                    func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		IsReview                      func(childComplexity int) int
		LaborContract                 func(childComplexity int) int
		OccupationalExpireDate        func(childComplexity int) int
		OccupationalIssuingAuthority  func(childComplexity int) int
		OccupationalNumber            func(childComplexity int) int
		QuasiDrivingModels            func(childComplexity int) int
		RenewalDate                   func(childComplexity int) int
		SortingDate                   func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		WorkingTime                   func(childComplexity int) int
	}

	DriverIdentityMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverIdentityStddevFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityStddevPopFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityStddevSampFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentitySumFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityVarPopFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityVarSampFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverIdentityVarianceFields struct {
		AccumulativedPoints func(childComplexity int) int
		DriverLicenseStatus func(childComplexity int) int
		ID                  func(childComplexity int) int
		QuasiDrivingModels  func(childComplexity int) int
	}

	DriverInfo struct {
		Agent             func(childComplexity int) int
		BlacklistDeadline func(childComplexity int) int
		CheckAt           func(childComplexity int) int
		CheckBy           func(childComplexity int) int
		ContactAddress    func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DepartmentID      func(childComplexity int) int
		DriverID          func(childComplexity int) int
		DriverIdentityID  func(childComplexity int) int
		DriverName        func(childComplexity int) int
		EnterpriseID      func(childComplexity int) int
		FilesNumber       func(childComplexity int) int
		ID                func(childComplexity int) int
		InputAt           func(childComplexity int) int
		InputBy           func(childComplexity int) int
		IsBlacklist       func(childComplexity int) int
		IsCheckData       func(childComplexity int) int
		IsCheckSms        func(childComplexity int) int
		IsDeleted         func(childComplexity int) int
		IsInput           func(childComplexity int) int
		IsManualInput     func(childComplexity int) int
		IsSubmit          func(childComplexity int) int
		MailingAddress    func(childComplexity int) int
		Operator          func(childComplexity int) int
		RemarkIn          func(childComplexity int) int
		Remarks           func(childComplexity int) int
		Sex               func(childComplexity int) int
		SubmitAt          func(childComplexity int) int
		SubmitBy          func(childComplexity int) int
		SubmitContent     func(childComplexity int) int
		Telephone         func(childComplexity int) int
		UpdateTimeIn      func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	DriverInfoAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverInfoAvgFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoMaxFields struct {
		Agent             func(childComplexity int) int
		BlacklistDeadline func(childComplexity int) int
		CheckAt           func(childComplexity int) int
		CheckBy           func(childComplexity int) int
		ContactAddress    func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DepartmentID      func(childComplexity int) int
		DriverID          func(childComplexity int) int
		DriverIdentityID  func(childComplexity int) int
		DriverName        func(childComplexity int) int
		EnterpriseID      func(childComplexity int) int
		FilesNumber       func(childComplexity int) int
		ID                func(childComplexity int) int
		InputAt           func(childComplexity int) int
		InputBy           func(childComplexity int) int
		IsBlacklist       func(childComplexity int) int
		IsCheckData       func(childComplexity int) int
		IsCheckSms        func(childComplexity int) int
		IsDeleted         func(childComplexity int) int
		IsInput           func(childComplexity int) int
		IsManualInput     func(childComplexity int) int
		IsSubmit          func(childComplexity int) int
		MailingAddress    func(childComplexity int) int
		Operator          func(childComplexity int) int
		RemarkIn          func(childComplexity int) int
		Remarks           func(childComplexity int) int
		Sex               func(childComplexity int) int
		SubmitAt          func(childComplexity int) int
		SubmitBy          func(childComplexity int) int
		SubmitContent     func(childComplexity int) int
		Telephone         func(childComplexity int) int
		UpdateTimeIn      func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	DriverInfoMinFields struct {
		Agent             func(childComplexity int) int
		BlacklistDeadline func(childComplexity int) int
		CheckAt           func(childComplexity int) int
		CheckBy           func(childComplexity int) int
		ContactAddress    func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		DeletedBy         func(childComplexity int) int
		DepartmentID      func(childComplexity int) int
		DriverID          func(childComplexity int) int
		DriverIdentityID  func(childComplexity int) int
		DriverName        func(childComplexity int) int
		EnterpriseID      func(childComplexity int) int
		FilesNumber       func(childComplexity int) int
		ID                func(childComplexity int) int
		InputAt           func(childComplexity int) int
		InputBy           func(childComplexity int) int
		IsBlacklist       func(childComplexity int) int
		IsCheckData       func(childComplexity int) int
		IsCheckSms        func(childComplexity int) int
		IsDeleted         func(childComplexity int) int
		IsInput           func(childComplexity int) int
		IsManualInput     func(childComplexity int) int
		IsSubmit          func(childComplexity int) int
		MailingAddress    func(childComplexity int) int
		Operator          func(childComplexity int) int
		RemarkIn          func(childComplexity int) int
		Remarks           func(childComplexity int) int
		Sex               func(childComplexity int) int
		SubmitAt          func(childComplexity int) int
		SubmitBy          func(childComplexity int) int
		SubmitContent     func(childComplexity int) int
		Telephone         func(childComplexity int) int
		UpdateTimeIn      func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	DriverInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverInfoStddevFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoStddevPopFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoStddevSampFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoSumFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoVarPopFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoVarSampFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DriverInfoVarianceFields struct {
		ID  func(childComplexity int) int
		Sex func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspection struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DriverIDInfoReportID func(childComplexity int) int
		DriverLicenseName    func(childComplexity int) int
		DriverName           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IcCardReadingResult  func(childComplexity int) int
		IcCardStatus         func(childComplexity int) int
		Imel                 func(childComplexity int) int
		LicenseExpireDate    func(childComplexity int) int
		LicenseNumber        func(childComplexity int) int
		OccupationalNumber   func(childComplexity int) int
		OperationTime        func(childComplexity int) int
		RegistrationTime     func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		VehicleID            func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionAvgFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionMaxFields struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DriverIDInfoReportID func(childComplexity int) int
		DriverLicenseName    func(childComplexity int) int
		DriverName           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IcCardReadingResult  func(childComplexity int) int
		IcCardStatus         func(childComplexity int) int
		Imel                 func(childComplexity int) int
		LicenseExpireDate    func(childComplexity int) int
		LicenseNumber        func(childComplexity int) int
		OccupationalNumber   func(childComplexity int) int
		OperationTime        func(childComplexity int) int
		RegistrationTime     func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		VehicleID            func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionMinFields struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DriverIDInfoReportID func(childComplexity int) int
		DriverLicenseName    func(childComplexity int) int
		DriverName           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IcCardReadingResult  func(childComplexity int) int
		IcCardStatus         func(childComplexity int) int
		Imel                 func(childComplexity int) int
		LicenseExpireDate    func(childComplexity int) int
		LicenseNumber        func(childComplexity int) int
		OccupationalNumber   func(childComplexity int) int
		OperationTime        func(childComplexity int) int
		RegistrationTime     func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		VehicleID            func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionStddevFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionStddevPopFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionStddevSampFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionSumFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionVarPopFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionVarSampFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	DrivingLicenseRegistrationInspectionVarianceFields struct {
		ID           func(childComplexity int) int
		IcCardStatus func(childComplexity int) int
	}

	Mutation struct {
		DeleteDriverFingerprint                        func(childComplexity int, where model.DriverFingerprintBoolExp) int
		DeleteDriverFingerprintAssociation             func(childComplexity int, where model.DriverFingerprintAssociationBoolExp) int
		DeleteDriverFingerprintAssociationByPk         func(childComplexity int, id int64) int
		DeleteDriverFingerprintAssociationByUnionPk    func(childComplexity int, driverFingerprintAssociationID string) int
		DeleteDriverFingerprintByPk                    func(childComplexity int, id int64) int
		DeleteDriverFingerprintByUnionPk               func(childComplexity int, driverFingerprintID string) int
		DeleteDriverIdentity                           func(childComplexity int, where model.DriverIdentityBoolExp) int
		DeleteDriverIdentityByPk                       func(childComplexity int, id int64) int
		DeleteDriverIdentityByUnionPk                  func(childComplexity int, identityID string) int
		DeleteDriverIdentityInfoReport                 func(childComplexity int, where model.DriverIdentityInfoReportBoolExp) int
		DeleteDriverIdentityInfoReportByPk             func(childComplexity int, id int64) int
		DeleteDriverIdentityInfoReportByUnionPk        func(childComplexity int, driverIdentityInfoReportID string) int
		DeleteDriverInfo                               func(childComplexity int, where model.DriverInfoBoolExp) int
		DeleteDriverInfoByPk                           func(childComplexity int, id int64) int
		DeleteDrivingLicenseRegistrationInspection     func(childComplexity int, where model.DrivingLicenseRegistrationInspectionBoolExp) int
		DeleteDrivingLicenseRegistrationInspectionByPk func(childComplexity int, id int64) int
		InsertDriverFingerprint                        func(childComplexity int, objects []*model.DriverFingerprintInsertInput) int
		InsertDriverFingerprintAssociation             func(childComplexity int, objects []*model.DriverFingerprintAssociationInsertInput) int
		InsertDriverFingerprintAssociationOne          func(childComplexity int, objects model.DriverFingerprintAssociationInsertInput) int
		InsertDriverFingerprintOne                     func(childComplexity int, objects model.DriverFingerprintInsertInput) int
		InsertDriverIdentity                           func(childComplexity int, objects []*model.DriverIdentityInsertInput) int
		InsertDriverIdentityInfoReport                 func(childComplexity int, objects []*model.DriverIdentityInfoReportInsertInput) int
		InsertDriverIdentityInfoReportOne              func(childComplexity int, objects model.DriverIdentityInfoReportInsertInput) int
		InsertDriverIdentityOne                        func(childComplexity int, objects model.DriverIdentityInsertInput) int
		InsertDriverInfo                               func(childComplexity int, objects []*model.DriverInfoInsertInput) int
		InsertDriverInfoOne                            func(childComplexity int, objects model.DriverInfoInsertInput) int
		InsertDrivingLicenseRegistrationInspection     func(childComplexity int, objects []*model.DrivingLicenseRegistrationInspectionInsertInput) int
		InsertDrivingLicenseRegistrationInspectionOne  func(childComplexity int, objects model.DrivingLicenseRegistrationInspectionInsertInput) int
		UpdateDriverFingerprint                        func(childComplexity int, inc *model.DriverFingerprintIncInput, set *model.DriverFingerprintSetInput, where model.DriverFingerprintBoolExp) int
		UpdateDriverFingerprintAssociation             func(childComplexity int, inc *model.DriverFingerprintAssociationIncInput, set *model.DriverFingerprintAssociationSetInput, where model.DriverFingerprintAssociationBoolExp) int
		UpdateDriverFingerprintAssociationByPk         func(childComplexity int, inc *model.DriverFingerprintAssociationIncInput, set *model.DriverFingerprintAssociationSetInput, id int64) int
		UpdateDriverFingerprintAssociationByUnionPk    func(childComplexity int, inc *model.DriverFingerprintAssociationIncInput, set *model.DriverFingerprintAssociationSetInput, driverFingerprintAssociationID string) int
		UpdateDriverFingerprintByPk                    func(childComplexity int, inc *model.DriverFingerprintIncInput, set *model.DriverFingerprintSetInput, id int64) int
		UpdateDriverFingerprintByUnionPk               func(childComplexity int, inc *model.DriverFingerprintIncInput, set *model.DriverFingerprintSetInput, driverFingerprintID string) int
		UpdateDriverIdentity                           func(childComplexity int, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, where model.DriverIdentityBoolExp) int
		UpdateDriverIdentityByPk                       func(childComplexity int, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, id int64) int
		UpdateDriverIdentityByUnionPk                  func(childComplexity int, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, identityID string) int
		UpdateDriverIdentityInfoReport                 func(childComplexity int, inc *model.DriverIdentityInfoReportIncInput, set *model.DriverIdentityInfoReportSetInput, where model.DriverIdentityInfoReportBoolExp) int
		UpdateDriverIdentityInfoReportByPk             func(childComplexity int, inc *model.DriverIdentityInfoReportIncInput, set *model.DriverIdentityInfoReportSetInput, id int64) int
		UpdateDriverIdentityInfoReportByUnionPk        func(childComplexity int, inc *model.DriverIdentityInfoReportIncInput, set *model.DriverIdentityInfoReportSetInput, driverIdentityInfoReportID string) int
		UpdateDriverInfo                               func(childComplexity int, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, where model.DriverInfoBoolExp) int
		UpdateDriverInfoByPk                           func(childComplexity int, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, id int64) int
		UpdateDrivingLicenseRegistrationInspection     func(childComplexity int, inc *model.DrivingLicenseRegistrationInspectionIncInput, set *model.DrivingLicenseRegistrationInspectionSetInput, where model.DrivingLicenseRegistrationInspectionBoolExp) int
		UpdateDrivingLicenseRegistrationInspectionByPk func(childComplexity int, inc *model.DrivingLicenseRegistrationInspectionIncInput, set *model.DrivingLicenseRegistrationInspectionSetInput, id int64) int
	}

	Query struct {
		DriverFingerprint                             func(childComplexity int, distinctOn []model.DriverFingerprintSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintOrderBy, where *model.DriverFingerprintBoolExp) int
		DriverFingerprintAggregate                    func(childComplexity int, distinctOn []model.DriverFingerprintSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintOrderBy, where *model.DriverFingerprintBoolExp) int
		DriverFingerprintAssociation                  func(childComplexity int, distinctOn []model.DriverFingerprintAssociationSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintAssociationOrderBy, where *model.DriverFingerprintAssociationBoolExp) int
		DriverFingerprintAssociationAggregate         func(childComplexity int, distinctOn []model.DriverFingerprintAssociationSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintAssociationOrderBy, where *model.DriverFingerprintAssociationBoolExp) int
		DriverFingerprintAssociationByPk              func(childComplexity int, id int64) int
		DriverFingerprintAssociationByUnionPk         func(childComplexity int, driverFingerprintAssociationID string) int
		DriverFingerprintByPk                         func(childComplexity int, id int64) int
		DriverFingerprintByUnionPk                    func(childComplexity int, driverFingerprintID string) int
		DriverIdentity                                func(childComplexity int, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) int
		DriverIdentityAggregate                       func(childComplexity int, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) int
		DriverIdentityByPk                            func(childComplexity int, id int64) int
		DriverIdentityByUnionPk                       func(childComplexity int, identityID string) int
		DriverIdentityInfoReport                      func(childComplexity int, distinctOn []model.DriverIdentityInfoReportSelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityInfoReportOrderBy, where *model.DriverIdentityInfoReportBoolExp) int
		DriverIdentityInfoReportAggregate             func(childComplexity int, distinctOn []model.DriverIdentityInfoReportSelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityInfoReportOrderBy, where *model.DriverIdentityInfoReportBoolExp) int
		DriverIdentityInfoReportByPk                  func(childComplexity int, id int64) int
		DriverIdentityInfoReportByUnionPk             func(childComplexity int, driverIdentityInfoReportID string) int
		DriverInfo                                    func(childComplexity int, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) int
		DriverInfoAggregate                           func(childComplexity int, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) int
		DriverInfoByPk                                func(childComplexity int, id int64) int
		DrivingLicenseRegistrationInspection          func(childComplexity int, distinctOn []model.DrivingLicenseRegistrationInspectionSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLicenseRegistrationInspectionOrderBy, where *model.DrivingLicenseRegistrationInspectionBoolExp) int
		DrivingLicenseRegistrationInspectionAggregate func(childComplexity int, distinctOn []model.DrivingLicenseRegistrationInspectionSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLicenseRegistrationInspectionOrderBy, where *model.DrivingLicenseRegistrationInspectionBoolExp) int
		DrivingLicenseRegistrationInspectionByPk      func(childComplexity int, id int64) int
	}
}

type MutationResolver interface {
	DeleteDriverFingerprint(ctx context.Context, where model.DriverFingerprintBoolExp) (*model.DriverFingerprintMutationResponse, error)
	DeleteDriverFingerprintByPk(ctx context.Context, id int64) (*model1.DriverFingerprint, error)
	InsertDriverFingerprint(ctx context.Context, objects []*model.DriverFingerprintInsertInput) (*model.DriverFingerprintMutationResponse, error)
	InsertDriverFingerprintOne(ctx context.Context, objects model.DriverFingerprintInsertInput) (*model1.DriverFingerprint, error)
	UpdateDriverFingerprint(ctx context.Context, inc *model.DriverFingerprintIncInput, set *model.DriverFingerprintSetInput, where model.DriverFingerprintBoolExp) (*model.DriverFingerprintMutationResponse, error)
	UpdateDriverFingerprintByPk(ctx context.Context, inc *model.DriverFingerprintIncInput, set *model.DriverFingerprintSetInput, id int64) (*model1.DriverFingerprint, error)
	UpdateDriverFingerprintByUnionPk(ctx context.Context, inc *model.DriverFingerprintIncInput, set *model.DriverFingerprintSetInput, driverFingerprintID string) (*model1.DriverFingerprint, error)
	DeleteDriverFingerprintByUnionPk(ctx context.Context, driverFingerprintID string) (*model1.DriverFingerprint, error)
	DeleteDriverFingerprintAssociation(ctx context.Context, where model.DriverFingerprintAssociationBoolExp) (*model.DriverFingerprintAssociationMutationResponse, error)
	DeleteDriverFingerprintAssociationByPk(ctx context.Context, id int64) (*model1.DriverFingerprintAssociation, error)
	InsertDriverFingerprintAssociation(ctx context.Context, objects []*model.DriverFingerprintAssociationInsertInput) (*model.DriverFingerprintAssociationMutationResponse, error)
	InsertDriverFingerprintAssociationOne(ctx context.Context, objects model.DriverFingerprintAssociationInsertInput) (*model1.DriverFingerprintAssociation, error)
	UpdateDriverFingerprintAssociation(ctx context.Context, inc *model.DriverFingerprintAssociationIncInput, set *model.DriverFingerprintAssociationSetInput, where model.DriverFingerprintAssociationBoolExp) (*model.DriverFingerprintAssociationMutationResponse, error)
	UpdateDriverFingerprintAssociationByPk(ctx context.Context, inc *model.DriverFingerprintAssociationIncInput, set *model.DriverFingerprintAssociationSetInput, id int64) (*model1.DriverFingerprintAssociation, error)
	UpdateDriverFingerprintAssociationByUnionPk(ctx context.Context, inc *model.DriverFingerprintAssociationIncInput, set *model.DriverFingerprintAssociationSetInput, driverFingerprintAssociationID string) (*model1.DriverFingerprintAssociation, error)
	DeleteDriverFingerprintAssociationByUnionPk(ctx context.Context, driverFingerprintAssociationID string) (*model1.DriverFingerprintAssociation, error)
	DeleteDriverIdentity(ctx context.Context, where model.DriverIdentityBoolExp) (*model.DriverIdentityMutationResponse, error)
	DeleteDriverIdentityByPk(ctx context.Context, id int64) (*model1.DriverIdentity, error)
	InsertDriverIdentity(ctx context.Context, objects []*model.DriverIdentityInsertInput) (*model.DriverIdentityMutationResponse, error)
	InsertDriverIdentityOne(ctx context.Context, objects model.DriverIdentityInsertInput) (*model1.DriverIdentity, error)
	UpdateDriverIdentity(ctx context.Context, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, where model.DriverIdentityBoolExp) (*model.DriverIdentityMutationResponse, error)
	UpdateDriverIdentityByPk(ctx context.Context, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, id int64) (*model1.DriverIdentity, error)
	UpdateDriverIdentityByUnionPk(ctx context.Context, inc *model.DriverIdentityIncInput, set *model.DriverIdentitySetInput, identityID string) (*model1.DriverIdentity, error)
	DeleteDriverIdentityByUnionPk(ctx context.Context, identityID string) (*model1.DriverIdentity, error)
	DeleteDriverIdentityInfoReport(ctx context.Context, where model.DriverIdentityInfoReportBoolExp) (*model.DriverIdentityInfoReportMutationResponse, error)
	DeleteDriverIdentityInfoReportByPk(ctx context.Context, id int64) (*model1.DriverIdentityInfoReport, error)
	InsertDriverIdentityInfoReport(ctx context.Context, objects []*model.DriverIdentityInfoReportInsertInput) (*model.DriverIdentityInfoReportMutationResponse, error)
	InsertDriverIdentityInfoReportOne(ctx context.Context, objects model.DriverIdentityInfoReportInsertInput) (*model1.DriverIdentityInfoReport, error)
	UpdateDriverIdentityInfoReport(ctx context.Context, inc *model.DriverIdentityInfoReportIncInput, set *model.DriverIdentityInfoReportSetInput, where model.DriverIdentityInfoReportBoolExp) (*model.DriverIdentityInfoReportMutationResponse, error)
	UpdateDriverIdentityInfoReportByPk(ctx context.Context, inc *model.DriverIdentityInfoReportIncInput, set *model.DriverIdentityInfoReportSetInput, id int64) (*model1.DriverIdentityInfoReport, error)
	UpdateDriverIdentityInfoReportByUnionPk(ctx context.Context, inc *model.DriverIdentityInfoReportIncInput, set *model.DriverIdentityInfoReportSetInput, driverIdentityInfoReportID string) (*model1.DriverIdentityInfoReport, error)
	DeleteDriverIdentityInfoReportByUnionPk(ctx context.Context, driverIdentityInfoReportID string) (*model1.DriverIdentityInfoReport, error)
	DeleteDriverInfo(ctx context.Context, where model.DriverInfoBoolExp) (*model.DriverInfoMutationResponse, error)
	DeleteDriverInfoByPk(ctx context.Context, id int64) (*model1.DriverInfo, error)
	InsertDriverInfo(ctx context.Context, objects []*model.DriverInfoInsertInput) (*model.DriverInfoMutationResponse, error)
	InsertDriverInfoOne(ctx context.Context, objects model.DriverInfoInsertInput) (*model1.DriverInfo, error)
	UpdateDriverInfo(ctx context.Context, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, where model.DriverInfoBoolExp) (*model.DriverInfoMutationResponse, error)
	UpdateDriverInfoByPk(ctx context.Context, inc *model.DriverInfoIncInput, set *model.DriverInfoSetInput, id int64) (*model1.DriverInfo, error)
	DeleteDrivingLicenseRegistrationInspection(ctx context.Context, where model.DrivingLicenseRegistrationInspectionBoolExp) (*model.DrivingLicenseRegistrationInspectionMutationResponse, error)
	DeleteDrivingLicenseRegistrationInspectionByPk(ctx context.Context, id int64) (*model1.DrivingLicenseRegistrationInspection, error)
	InsertDrivingLicenseRegistrationInspection(ctx context.Context, objects []*model.DrivingLicenseRegistrationInspectionInsertInput) (*model.DrivingLicenseRegistrationInspectionMutationResponse, error)
	InsertDrivingLicenseRegistrationInspectionOne(ctx context.Context, objects model.DrivingLicenseRegistrationInspectionInsertInput) (*model1.DrivingLicenseRegistrationInspection, error)
	UpdateDrivingLicenseRegistrationInspection(ctx context.Context, inc *model.DrivingLicenseRegistrationInspectionIncInput, set *model.DrivingLicenseRegistrationInspectionSetInput, where model.DrivingLicenseRegistrationInspectionBoolExp) (*model.DrivingLicenseRegistrationInspectionMutationResponse, error)
	UpdateDrivingLicenseRegistrationInspectionByPk(ctx context.Context, inc *model.DrivingLicenseRegistrationInspectionIncInput, set *model.DrivingLicenseRegistrationInspectionSetInput, id int64) (*model1.DrivingLicenseRegistrationInspection, error)
}
type QueryResolver interface {
	DriverFingerprint(ctx context.Context, distinctOn []model.DriverFingerprintSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintOrderBy, where *model.DriverFingerprintBoolExp) ([]*model1.DriverFingerprint, error)
	DriverFingerprintAggregate(ctx context.Context, distinctOn []model.DriverFingerprintSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintOrderBy, where *model.DriverFingerprintBoolExp) (*model.DriverFingerprintAggregate, error)
	DriverFingerprintByPk(ctx context.Context, id int64) (*model1.DriverFingerprint, error)
	DriverFingerprintByUnionPk(ctx context.Context, driverFingerprintID string) (*model1.DriverFingerprint, error)
	DriverFingerprintAssociation(ctx context.Context, distinctOn []model.DriverFingerprintAssociationSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintAssociationOrderBy, where *model.DriverFingerprintAssociationBoolExp) ([]*model1.DriverFingerprintAssociation, error)
	DriverFingerprintAssociationAggregate(ctx context.Context, distinctOn []model.DriverFingerprintAssociationSelectColumn, limit *int, offset *int, orderBy []*model.DriverFingerprintAssociationOrderBy, where *model.DriverFingerprintAssociationBoolExp) (*model.DriverFingerprintAssociationAggregate, error)
	DriverFingerprintAssociationByPk(ctx context.Context, id int64) (*model1.DriverFingerprintAssociation, error)
	DriverFingerprintAssociationByUnionPk(ctx context.Context, driverFingerprintAssociationID string) (*model1.DriverFingerprintAssociation, error)
	DriverIdentity(ctx context.Context, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) ([]*model1.DriverIdentity, error)
	DriverIdentityAggregate(ctx context.Context, distinctOn []model.DriverIdentitySelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityOrderBy, where *model.DriverIdentityBoolExp) (*model.DriverIdentityAggregate, error)
	DriverIdentityByPk(ctx context.Context, id int64) (*model1.DriverIdentity, error)
	DriverIdentityByUnionPk(ctx context.Context, identityID string) (*model1.DriverIdentity, error)
	DriverIdentityInfoReport(ctx context.Context, distinctOn []model.DriverIdentityInfoReportSelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityInfoReportOrderBy, where *model.DriverIdentityInfoReportBoolExp) ([]*model1.DriverIdentityInfoReport, error)
	DriverIdentityInfoReportAggregate(ctx context.Context, distinctOn []model.DriverIdentityInfoReportSelectColumn, limit *int, offset *int, orderBy []*model.DriverIdentityInfoReportOrderBy, where *model.DriverIdentityInfoReportBoolExp) (*model.DriverIdentityInfoReportAggregate, error)
	DriverIdentityInfoReportByPk(ctx context.Context, id int64) (*model1.DriverIdentityInfoReport, error)
	DriverIdentityInfoReportByUnionPk(ctx context.Context, driverIdentityInfoReportID string) (*model1.DriverIdentityInfoReport, error)
	DriverInfo(ctx context.Context, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) ([]*model1.DriverInfo, error)
	DriverInfoAggregate(ctx context.Context, distinctOn []model.DriverInfoSelectColumn, limit *int, offset *int, orderBy []*model.DriverInfoOrderBy, where *model.DriverInfoBoolExp) (*model.DriverInfoAggregate, error)
	DriverInfoByPk(ctx context.Context, id int64) (*model1.DriverInfo, error)
	DrivingLicenseRegistrationInspection(ctx context.Context, distinctOn []model.DrivingLicenseRegistrationInspectionSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLicenseRegistrationInspectionOrderBy, where *model.DrivingLicenseRegistrationInspectionBoolExp) ([]*model1.DrivingLicenseRegistrationInspection, error)
	DrivingLicenseRegistrationInspectionAggregate(ctx context.Context, distinctOn []model.DrivingLicenseRegistrationInspectionSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLicenseRegistrationInspectionOrderBy, where *model.DrivingLicenseRegistrationInspectionBoolExp) (*model.DrivingLicenseRegistrationInspectionAggregate, error)
	DrivingLicenseRegistrationInspectionByPk(ctx context.Context, id int64) (*model1.DrivingLicenseRegistrationInspection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "DriverFingerprint.content":
		if e.complexity.DriverFingerprint.Content == nil {
			break
		}

		return e.complexity.DriverFingerprint.Content(childComplexity), true

	case "DriverFingerprint.created_at":
		if e.complexity.DriverFingerprint.CreatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprint.CreatedAt(childComplexity), true

	case "DriverFingerprint.created_by":
		if e.complexity.DriverFingerprint.CreatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprint.CreatedBy(childComplexity), true

	case "DriverFingerprint.deleted_at":
		if e.complexity.DriverFingerprint.DeletedAt == nil {
			break
		}

		return e.complexity.DriverFingerprint.DeletedAt(childComplexity), true

	case "DriverFingerprint.deleted_by":
		if e.complexity.DriverFingerprint.DeletedBy == nil {
			break
		}

		return e.complexity.DriverFingerprint.DeletedBy(childComplexity), true

	case "DriverFingerprint.driver_fingerprint_id":
		if e.complexity.DriverFingerprint.DriverFingerprintID == nil {
			break
		}

		return e.complexity.DriverFingerprint.DriverFingerprintID(childComplexity), true

	case "DriverFingerprint.driver_id":
		if e.complexity.DriverFingerprint.DriverID == nil {
			break
		}

		return e.complexity.DriverFingerprint.DriverID(childComplexity), true

	case "DriverFingerprint.driver_name":
		if e.complexity.DriverFingerprint.DriverName == nil {
			break
		}

		return e.complexity.DriverFingerprint.DriverName(childComplexity), true

	case "DriverFingerprint.fingerprint_name":
		if e.complexity.DriverFingerprint.FingerprintName == nil {
			break
		}

		return e.complexity.DriverFingerprint.FingerprintName(childComplexity), true

	case "DriverFingerprint.id":
		if e.complexity.DriverFingerprint.ID == nil {
			break
		}

		return e.complexity.DriverFingerprint.ID(childComplexity), true

	case "DriverFingerprint.instruction_id":
		if e.complexity.DriverFingerprint.InstructionID == nil {
			break
		}

		return e.complexity.DriverFingerprint.InstructionID(childComplexity), true

	case "DriverFingerprint.is_deleted":
		if e.complexity.DriverFingerprint.IsDeleted == nil {
			break
		}

		return e.complexity.DriverFingerprint.IsDeleted(childComplexity), true

	case "DriverFingerprint.is_success":
		if e.complexity.DriverFingerprint.IsSuccess == nil {
			break
		}

		return e.complexity.DriverFingerprint.IsSuccess(childComplexity), true

	case "DriverFingerprint.operation_time":
		if e.complexity.DriverFingerprint.OperationTime == nil {
			break
		}

		return e.complexity.DriverFingerprint.OperationTime(childComplexity), true

	case "DriverFingerprint.operation_type":
		if e.complexity.DriverFingerprint.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprint.OperationType(childComplexity), true

	case "DriverFingerprint.signature":
		if e.complexity.DriverFingerprint.Signature == nil {
			break
		}

		return e.complexity.DriverFingerprint.Signature(childComplexity), true

	case "DriverFingerprint.sim_number":
		if e.complexity.DriverFingerprint.SimNumber == nil {
			break
		}

		return e.complexity.DriverFingerprint.SimNumber(childComplexity), true

	case "DriverFingerprint.ternimal_id":
		if e.complexity.DriverFingerprint.TernimalID == nil {
			break
		}

		return e.complexity.DriverFingerprint.TernimalID(childComplexity), true

	case "DriverFingerprint.timestamp":
		if e.complexity.DriverFingerprint.Timestamp == nil {
			break
		}

		return e.complexity.DriverFingerprint.Timestamp(childComplexity), true

	case "DriverFingerprint.updated_at":
		if e.complexity.DriverFingerprint.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprint.UpdatedAt(childComplexity), true

	case "DriverFingerprint.updated_by":
		if e.complexity.DriverFingerprint.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprint.UpdatedBy(childComplexity), true

	case "DriverFingerprint.upload_time":
		if e.complexity.DriverFingerprint.UploadTime == nil {
			break
		}

		return e.complexity.DriverFingerprint.UploadTime(childComplexity), true

	case "DriverFingerprint.user_id":
		if e.complexity.DriverFingerprint.UserID == nil {
			break
		}

		return e.complexity.DriverFingerprint.UserID(childComplexity), true

	case "DriverFingerprintAggregate.aggregate":
		if e.complexity.DriverFingerprintAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregate.Aggregate(childComplexity), true

	case "DriverFingerprintAggregateFields.avg":
		if e.complexity.DriverFingerprintAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Avg(childComplexity), true

	case "DriverFingerprintAggregateFields.count":
		if e.complexity.DriverFingerprintAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Count(childComplexity), true

	case "DriverFingerprintAggregateFields.max":
		if e.complexity.DriverFingerprintAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Max(childComplexity), true

	case "DriverFingerprintAggregateFields.min":
		if e.complexity.DriverFingerprintAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Min(childComplexity), true

	case "DriverFingerprintAggregateFields.stddev":
		if e.complexity.DriverFingerprintAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Stddev(childComplexity), true

	case "DriverFingerprintAggregateFields.stddev_pop":
		if e.complexity.DriverFingerprintAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.StddevPop(childComplexity), true

	case "DriverFingerprintAggregateFields.stddev_samp":
		if e.complexity.DriverFingerprintAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.StddevSamp(childComplexity), true

	case "DriverFingerprintAggregateFields.sum":
		if e.complexity.DriverFingerprintAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Sum(childComplexity), true

	case "DriverFingerprintAggregateFields.var_pop":
		if e.complexity.DriverFingerprintAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.VarPop(childComplexity), true

	case "DriverFingerprintAggregateFields.var_samp":
		if e.complexity.DriverFingerprintAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.VarSamp(childComplexity), true

	case "DriverFingerprintAggregateFields.variance":
		if e.complexity.DriverFingerprintAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverFingerprintAggregateFields.Variance(childComplexity), true

	case "DriverFingerprintAssociation.created_at":
		if e.complexity.DriverFingerprintAssociation.CreatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.CreatedAt(childComplexity), true

	case "DriverFingerprintAssociation.created_by":
		if e.complexity.DriverFingerprintAssociation.CreatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.CreatedBy(childComplexity), true

	case "DriverFingerprintAssociation.deleted_at":
		if e.complexity.DriverFingerprintAssociation.DeletedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.DeletedAt(childComplexity), true

	case "DriverFingerprintAssociation.deleted_by":
		if e.complexity.DriverFingerprintAssociation.DeletedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.DeletedBy(childComplexity), true

	case "DriverFingerprintAssociation.driver_fingerprint_association_id":
		if e.complexity.DriverFingerprintAssociation.DriverFingerprintAssociationID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.DriverFingerprintAssociationID(childComplexity), true

	case "DriverFingerprintAssociation.driver_fingerprint_id":
		if e.complexity.DriverFingerprintAssociation.DriverFingerprintID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.DriverFingerprintID(childComplexity), true

	case "DriverFingerprintAssociation.driver_id":
		if e.complexity.DriverFingerprintAssociation.DriverID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.DriverID(childComplexity), true

	case "DriverFingerprintAssociation.fingerprint_name":
		if e.complexity.DriverFingerprintAssociation.FingerprintName == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.FingerprintName(childComplexity), true

	case "DriverFingerprintAssociation.id":
		if e.complexity.DriverFingerprintAssociation.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.ID(childComplexity), true

	case "DriverFingerprintAssociation.is_deleted":
		if e.complexity.DriverFingerprintAssociation.IsDeleted == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.IsDeleted(childComplexity), true

	case "DriverFingerprintAssociation.picture_address":
		if e.complexity.DriverFingerprintAssociation.PictureAddress == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.PictureAddress(childComplexity), true

	case "DriverFingerprintAssociation.updated_at":
		if e.complexity.DriverFingerprintAssociation.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.UpdatedAt(childComplexity), true

	case "DriverFingerprintAssociation.updated_by":
		if e.complexity.DriverFingerprintAssociation.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociation.UpdatedBy(childComplexity), true

	case "DriverFingerprintAssociationAggregate.aggregate":
		if e.complexity.DriverFingerprintAssociationAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregate.Aggregate(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.avg":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Avg(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.count":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Count(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.max":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Max(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.min":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Min(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.stddev":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Stddev(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.stddev_pop":
		if e.complexity.DriverFingerprintAssociationAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.StddevPop(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.stddev_samp":
		if e.complexity.DriverFingerprintAssociationAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.StddevSamp(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.sum":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Sum(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.var_pop":
		if e.complexity.DriverFingerprintAssociationAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.VarPop(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.var_samp":
		if e.complexity.DriverFingerprintAssociationAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.VarSamp(childComplexity), true

	case "DriverFingerprintAssociationAggregateFields.variance":
		if e.complexity.DriverFingerprintAssociationAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAggregateFields.Variance(childComplexity), true

	case "DriverFingerprintAssociationAvgFields.id":
		if e.complexity.DriverFingerprintAssociationAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationAvgFields.ID(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.created_at":
		if e.complexity.DriverFingerprintAssociationMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.CreatedAt(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.created_by":
		if e.complexity.DriverFingerprintAssociationMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.CreatedBy(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.deleted_at":
		if e.complexity.DriverFingerprintAssociationMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.DeletedAt(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.deleted_by":
		if e.complexity.DriverFingerprintAssociationMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.DeletedBy(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.driver_fingerprint_association_id":
		if e.complexity.DriverFingerprintAssociationMaxFields.DriverFingerprintAssociationID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.DriverFingerprintAssociationID(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.driver_fingerprint_id":
		if e.complexity.DriverFingerprintAssociationMaxFields.DriverFingerprintID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.DriverFingerprintID(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.driver_id":
		if e.complexity.DriverFingerprintAssociationMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.DriverID(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.fingerprint_name":
		if e.complexity.DriverFingerprintAssociationMaxFields.FingerprintName == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.FingerprintName(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.id":
		if e.complexity.DriverFingerprintAssociationMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.ID(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.is_deleted":
		if e.complexity.DriverFingerprintAssociationMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.IsDeleted(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.picture_address":
		if e.complexity.DriverFingerprintAssociationMaxFields.PictureAddress == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.PictureAddress(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.updated_at":
		if e.complexity.DriverFingerprintAssociationMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.UpdatedAt(childComplexity), true

	case "DriverFingerprintAssociationMaxFields.updated_by":
		if e.complexity.DriverFingerprintAssociationMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMaxFields.UpdatedBy(childComplexity), true

	case "DriverFingerprintAssociationMinFields.created_at":
		if e.complexity.DriverFingerprintAssociationMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.CreatedAt(childComplexity), true

	case "DriverFingerprintAssociationMinFields.created_by":
		if e.complexity.DriverFingerprintAssociationMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.CreatedBy(childComplexity), true

	case "DriverFingerprintAssociationMinFields.deleted_at":
		if e.complexity.DriverFingerprintAssociationMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.DeletedAt(childComplexity), true

	case "DriverFingerprintAssociationMinFields.deleted_by":
		if e.complexity.DriverFingerprintAssociationMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.DeletedBy(childComplexity), true

	case "DriverFingerprintAssociationMinFields.driver_fingerprint_association_id":
		if e.complexity.DriverFingerprintAssociationMinFields.DriverFingerprintAssociationID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.DriverFingerprintAssociationID(childComplexity), true

	case "DriverFingerprintAssociationMinFields.driver_fingerprint_id":
		if e.complexity.DriverFingerprintAssociationMinFields.DriverFingerprintID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.DriverFingerprintID(childComplexity), true

	case "DriverFingerprintAssociationMinFields.driver_id":
		if e.complexity.DriverFingerprintAssociationMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.DriverID(childComplexity), true

	case "DriverFingerprintAssociationMinFields.fingerprint_name":
		if e.complexity.DriverFingerprintAssociationMinFields.FingerprintName == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.FingerprintName(childComplexity), true

	case "DriverFingerprintAssociationMinFields.id":
		if e.complexity.DriverFingerprintAssociationMinFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.ID(childComplexity), true

	case "DriverFingerprintAssociationMinFields.is_deleted":
		if e.complexity.DriverFingerprintAssociationMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.IsDeleted(childComplexity), true

	case "DriverFingerprintAssociationMinFields.picture_address":
		if e.complexity.DriverFingerprintAssociationMinFields.PictureAddress == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.PictureAddress(childComplexity), true

	case "DriverFingerprintAssociationMinFields.updated_at":
		if e.complexity.DriverFingerprintAssociationMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.UpdatedAt(childComplexity), true

	case "DriverFingerprintAssociationMinFields.updated_by":
		if e.complexity.DriverFingerprintAssociationMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMinFields.UpdatedBy(childComplexity), true

	case "DriverFingerprintAssociationMutationResponse.affected_rows":
		if e.complexity.DriverFingerprintAssociationMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMutationResponse.AffectedRows(childComplexity), true

	case "DriverFingerprintAssociationMutationResponse.returning":
		if e.complexity.DriverFingerprintAssociationMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationMutationResponse.Returning(childComplexity), true

	case "DriverFingerprintAssociationStddevFields.id":
		if e.complexity.DriverFingerprintAssociationStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationStddevFields.ID(childComplexity), true

	case "DriverFingerprintAssociationStddevPopFields.id":
		if e.complexity.DriverFingerprintAssociationStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationStddevPopFields.ID(childComplexity), true

	case "DriverFingerprintAssociationStddevSampFields.id":
		if e.complexity.DriverFingerprintAssociationStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationStddevSampFields.ID(childComplexity), true

	case "DriverFingerprintAssociationSumFields.id":
		if e.complexity.DriverFingerprintAssociationSumFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationSumFields.ID(childComplexity), true

	case "DriverFingerprintAssociationVarPopFields.id":
		if e.complexity.DriverFingerprintAssociationVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationVarPopFields.ID(childComplexity), true

	case "DriverFingerprintAssociationVarSampFields.id":
		if e.complexity.DriverFingerprintAssociationVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationVarSampFields.ID(childComplexity), true

	case "DriverFingerprintAssociationVarianceFields.id":
		if e.complexity.DriverFingerprintAssociationVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAssociationVarianceFields.ID(childComplexity), true

	case "DriverFingerprintAvgFields.id":
		if e.complexity.DriverFingerprintAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintAvgFields.ID(childComplexity), true

	case "DriverFingerprintAvgFields.operation_type":
		if e.complexity.DriverFingerprintAvgFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintAvgFields.OperationType(childComplexity), true

	case "DriverFingerprintMaxFields.content":
		if e.complexity.DriverFingerprintMaxFields.Content == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.Content(childComplexity), true

	case "DriverFingerprintMaxFields.created_at":
		if e.complexity.DriverFingerprintMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.CreatedAt(childComplexity), true

	case "DriverFingerprintMaxFields.created_by":
		if e.complexity.DriverFingerprintMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.CreatedBy(childComplexity), true

	case "DriverFingerprintMaxFields.deleted_at":
		if e.complexity.DriverFingerprintMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.DeletedAt(childComplexity), true

	case "DriverFingerprintMaxFields.deleted_by":
		if e.complexity.DriverFingerprintMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.DeletedBy(childComplexity), true

	case "DriverFingerprintMaxFields.driver_fingerprint_id":
		if e.complexity.DriverFingerprintMaxFields.DriverFingerprintID == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.DriverFingerprintID(childComplexity), true

	case "DriverFingerprintMaxFields.driver_id":
		if e.complexity.DriverFingerprintMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.DriverID(childComplexity), true

	case "DriverFingerprintMaxFields.driver_name":
		if e.complexity.DriverFingerprintMaxFields.DriverName == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.DriverName(childComplexity), true

	case "DriverFingerprintMaxFields.fingerprint_name":
		if e.complexity.DriverFingerprintMaxFields.FingerprintName == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.FingerprintName(childComplexity), true

	case "DriverFingerprintMaxFields.id":
		if e.complexity.DriverFingerprintMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.ID(childComplexity), true

	case "DriverFingerprintMaxFields.instruction_id":
		if e.complexity.DriverFingerprintMaxFields.InstructionID == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.InstructionID(childComplexity), true

	case "DriverFingerprintMaxFields.is_deleted":
		if e.complexity.DriverFingerprintMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.IsDeleted(childComplexity), true

	case "DriverFingerprintMaxFields.is_success":
		if e.complexity.DriverFingerprintMaxFields.IsSuccess == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.IsSuccess(childComplexity), true

	case "DriverFingerprintMaxFields.operation_time":
		if e.complexity.DriverFingerprintMaxFields.OperationTime == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.OperationTime(childComplexity), true

	case "DriverFingerprintMaxFields.operation_type":
		if e.complexity.DriverFingerprintMaxFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.OperationType(childComplexity), true

	case "DriverFingerprintMaxFields.signature":
		if e.complexity.DriverFingerprintMaxFields.Signature == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.Signature(childComplexity), true

	case "DriverFingerprintMaxFields.sim_number":
		if e.complexity.DriverFingerprintMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.SimNumber(childComplexity), true

	case "DriverFingerprintMaxFields.ternimal_id":
		if e.complexity.DriverFingerprintMaxFields.TernimalID == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.TernimalID(childComplexity), true

	case "DriverFingerprintMaxFields.timestamp":
		if e.complexity.DriverFingerprintMaxFields.Timestamp == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.Timestamp(childComplexity), true

	case "DriverFingerprintMaxFields.updated_at":
		if e.complexity.DriverFingerprintMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.UpdatedAt(childComplexity), true

	case "DriverFingerprintMaxFields.updated_by":
		if e.complexity.DriverFingerprintMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.UpdatedBy(childComplexity), true

	case "DriverFingerprintMaxFields.upload_time":
		if e.complexity.DriverFingerprintMaxFields.UploadTime == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.UploadTime(childComplexity), true

	case "DriverFingerprintMaxFields.user_id":
		if e.complexity.DriverFingerprintMaxFields.UserID == nil {
			break
		}

		return e.complexity.DriverFingerprintMaxFields.UserID(childComplexity), true

	case "DriverFingerprintMinFields.content":
		if e.complexity.DriverFingerprintMinFields.Content == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.Content(childComplexity), true

	case "DriverFingerprintMinFields.created_at":
		if e.complexity.DriverFingerprintMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.CreatedAt(childComplexity), true

	case "DriverFingerprintMinFields.created_by":
		if e.complexity.DriverFingerprintMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.CreatedBy(childComplexity), true

	case "DriverFingerprintMinFields.deleted_at":
		if e.complexity.DriverFingerprintMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.DeletedAt(childComplexity), true

	case "DriverFingerprintMinFields.deleted_by":
		if e.complexity.DriverFingerprintMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.DeletedBy(childComplexity), true

	case "DriverFingerprintMinFields.driver_fingerprint_id":
		if e.complexity.DriverFingerprintMinFields.DriverFingerprintID == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.DriverFingerprintID(childComplexity), true

	case "DriverFingerprintMinFields.driver_id":
		if e.complexity.DriverFingerprintMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.DriverID(childComplexity), true

	case "DriverFingerprintMinFields.driver_name":
		if e.complexity.DriverFingerprintMinFields.DriverName == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.DriverName(childComplexity), true

	case "DriverFingerprintMinFields.fingerprint_name":
		if e.complexity.DriverFingerprintMinFields.FingerprintName == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.FingerprintName(childComplexity), true

	case "DriverFingerprintMinFields.id":
		if e.complexity.DriverFingerprintMinFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.ID(childComplexity), true

	case "DriverFingerprintMinFields.instruction_id":
		if e.complexity.DriverFingerprintMinFields.InstructionID == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.InstructionID(childComplexity), true

	case "DriverFingerprintMinFields.is_deleted":
		if e.complexity.DriverFingerprintMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.IsDeleted(childComplexity), true

	case "DriverFingerprintMinFields.is_success":
		if e.complexity.DriverFingerprintMinFields.IsSuccess == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.IsSuccess(childComplexity), true

	case "DriverFingerprintMinFields.operation_time":
		if e.complexity.DriverFingerprintMinFields.OperationTime == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.OperationTime(childComplexity), true

	case "DriverFingerprintMinFields.operation_type":
		if e.complexity.DriverFingerprintMinFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.OperationType(childComplexity), true

	case "DriverFingerprintMinFields.signature":
		if e.complexity.DriverFingerprintMinFields.Signature == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.Signature(childComplexity), true

	case "DriverFingerprintMinFields.sim_number":
		if e.complexity.DriverFingerprintMinFields.SimNumber == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.SimNumber(childComplexity), true

	case "DriverFingerprintMinFields.ternimal_id":
		if e.complexity.DriverFingerprintMinFields.TernimalID == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.TernimalID(childComplexity), true

	case "DriverFingerprintMinFields.timestamp":
		if e.complexity.DriverFingerprintMinFields.Timestamp == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.Timestamp(childComplexity), true

	case "DriverFingerprintMinFields.updated_at":
		if e.complexity.DriverFingerprintMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.UpdatedAt(childComplexity), true

	case "DriverFingerprintMinFields.updated_by":
		if e.complexity.DriverFingerprintMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.UpdatedBy(childComplexity), true

	case "DriverFingerprintMinFields.upload_time":
		if e.complexity.DriverFingerprintMinFields.UploadTime == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.UploadTime(childComplexity), true

	case "DriverFingerprintMinFields.user_id":
		if e.complexity.DriverFingerprintMinFields.UserID == nil {
			break
		}

		return e.complexity.DriverFingerprintMinFields.UserID(childComplexity), true

	case "DriverFingerprintMutationResponse.affected_rows":
		if e.complexity.DriverFingerprintMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverFingerprintMutationResponse.AffectedRows(childComplexity), true

	case "DriverFingerprintMutationResponse.returning":
		if e.complexity.DriverFingerprintMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverFingerprintMutationResponse.Returning(childComplexity), true

	case "DriverFingerprintStddevFields.id":
		if e.complexity.DriverFingerprintStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintStddevFields.ID(childComplexity), true

	case "DriverFingerprintStddevFields.operation_type":
		if e.complexity.DriverFingerprintStddevFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintStddevFields.OperationType(childComplexity), true

	case "DriverFingerprintStddevPopFields.id":
		if e.complexity.DriverFingerprintStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintStddevPopFields.ID(childComplexity), true

	case "DriverFingerprintStddevPopFields.operation_type":
		if e.complexity.DriverFingerprintStddevPopFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintStddevPopFields.OperationType(childComplexity), true

	case "DriverFingerprintStddevSampFields.id":
		if e.complexity.DriverFingerprintStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintStddevSampFields.ID(childComplexity), true

	case "DriverFingerprintStddevSampFields.operation_type":
		if e.complexity.DriverFingerprintStddevSampFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintStddevSampFields.OperationType(childComplexity), true

	case "DriverFingerprintSumFields.id":
		if e.complexity.DriverFingerprintSumFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintSumFields.ID(childComplexity), true

	case "DriverFingerprintSumFields.operation_type":
		if e.complexity.DriverFingerprintSumFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintSumFields.OperationType(childComplexity), true

	case "DriverFingerprintVarPopFields.id":
		if e.complexity.DriverFingerprintVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintVarPopFields.ID(childComplexity), true

	case "DriverFingerprintVarPopFields.operation_type":
		if e.complexity.DriverFingerprintVarPopFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintVarPopFields.OperationType(childComplexity), true

	case "DriverFingerprintVarSampFields.id":
		if e.complexity.DriverFingerprintVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintVarSampFields.ID(childComplexity), true

	case "DriverFingerprintVarSampFields.operation_type":
		if e.complexity.DriverFingerprintVarSampFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintVarSampFields.OperationType(childComplexity), true

	case "DriverFingerprintVarianceFields.id":
		if e.complexity.DriverFingerprintVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverFingerprintVarianceFields.ID(childComplexity), true

	case "DriverFingerprintVarianceFields.operation_type":
		if e.complexity.DriverFingerprintVarianceFields.OperationType == nil {
			break
		}

		return e.complexity.DriverFingerprintVarianceFields.OperationType(childComplexity), true

	case "DriverIdentity.accumulatived_points":
		if e.complexity.DriverIdentity.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentity.AccumulativedPoints(childComplexity), true

	case "DriverIdentity.annual_review_date":
		if e.complexity.DriverIdentity.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentity.AnnualReviewDate(childComplexity), true

	case "DriverIdentity.created_at":
		if e.complexity.DriverIdentity.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentity.CreatedAt(childComplexity), true

	case "DriverIdentity.created_by":
		if e.complexity.DriverIdentity.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentity.CreatedBy(childComplexity), true

	case "DriverIdentity.deleted_at":
		if e.complexity.DriverIdentity.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentity.DeletedAt(childComplexity), true

	case "DriverIdentity.deleted_by":
		if e.complexity.DriverIdentity.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentity.DeletedBy(childComplexity), true

	case "DriverIdentity.driver_holding_id_photo":
		if e.complexity.DriverIdentity.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverHoldingIDPhoto(childComplexity), true

	case "DriverIdentity.driver_license_city_id":
		if e.complexity.DriverIdentity.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseCityID(childComplexity), true

	case "DriverIdentity.driver_license_district_id":
		if e.complexity.DriverIdentity.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseDistrictID(childComplexity), true

	case "DriverIdentity.driver_license_issue_date":
		if e.complexity.DriverIdentity.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseIssueDate(childComplexity), true

	case "DriverIdentity.driver_license_issuing_authority":
		if e.complexity.DriverIdentity.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseIssuingAuthority(childComplexity), true

	case "DriverIdentity.driver_license_pic":
		if e.complexity.DriverIdentity.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicensePic(childComplexity), true

	case "DriverIdentity.driver_license_province_id":
		if e.complexity.DriverIdentity.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseProvinceID(childComplexity), true

	case "DriverIdentity.driver_license_status":
		if e.complexity.DriverIdentity.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverLicenseStatus(childComplexity), true

	case "DriverIdentity.driver_photo":
		if e.complexity.DriverIdentity.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverPhoto(childComplexity), true

	case "DriverIdentity.driver_signature":
		if e.complexity.DriverIdentity.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentity.DriverSignature(childComplexity), true

	case "DriverIdentity.id":
		if e.complexity.DriverIdentity.ID == nil {
			break
		}

		return e.complexity.DriverIdentity.ID(childComplexity), true

	case "DriverIdentity.id_card_address":
		if e.complexity.DriverIdentity.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardAddress(childComplexity), true

	case "DriverIdentity.id_card_back_pic":
		if e.complexity.DriverIdentity.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardBackPic(childComplexity), true

	case "DriverIdentity.id_card_birthday":
		if e.complexity.DriverIdentity.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardBirthday(childComplexity), true

	case "DriverIdentity.id_card_end_date":
		if e.complexity.DriverIdentity.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardEndDate(childComplexity), true

	case "DriverIdentity.id_card_front_pic":
		if e.complexity.DriverIdentity.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardFrontPic(childComplexity), true

	case "DriverIdentity.id_card_nation":
		if e.complexity.DriverIdentity.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardNation(childComplexity), true

	case "DriverIdentity.id_card_num":
		if e.complexity.DriverIdentity.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardNum(childComplexity), true

	case "DriverIdentity.id_card_sign_government":
		if e.complexity.DriverIdentity.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardSignGovernment(childComplexity), true

	case "DriverIdentity.id_card_start_date":
		if e.complexity.DriverIdentity.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentity.IDCardStartDate(childComplexity), true

	case "DriverIdentity.identity_id":
		if e.complexity.DriverIdentity.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentity.IdentityID(childComplexity), true

	case "DriverIdentity.is_deleted":
		if e.complexity.DriverIdentity.IsDeleted == nil {
			break
		}

		return e.complexity.DriverIdentity.IsDeleted(childComplexity), true

	case "DriverIdentity.is_review":
		if e.complexity.DriverIdentity.IsReview == nil {
			break
		}

		return e.complexity.DriverIdentity.IsReview(childComplexity), true

	case "DriverIdentity.labor_contract":
		if e.complexity.DriverIdentity.LaborContract == nil {
			break
		}

		return e.complexity.DriverIdentity.LaborContract(childComplexity), true

	case "DriverIdentity.occupational_expire_date":
		if e.complexity.DriverIdentity.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalExpireDate(childComplexity), true

	case "DriverIdentity.occupational_issuing_authority":
		if e.complexity.DriverIdentity.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalIssuingAuthority(childComplexity), true

	case "DriverIdentity.occupational_number":
		if e.complexity.DriverIdentity.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentity.OccupationalNumber(childComplexity), true

	case "DriverIdentity.quasi_driving_models":
		if e.complexity.DriverIdentity.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentity.QuasiDrivingModels(childComplexity), true

	case "DriverIdentity.renewal_date":
		if e.complexity.DriverIdentity.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentity.RenewalDate(childComplexity), true

	case "DriverIdentity.sorting_date":
		if e.complexity.DriverIdentity.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentity.SortingDate(childComplexity), true

	case "DriverIdentity.updated_at":
		if e.complexity.DriverIdentity.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentity.UpdatedAt(childComplexity), true

	case "DriverIdentity.updated_by":
		if e.complexity.DriverIdentity.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentity.UpdatedBy(childComplexity), true

	case "DriverIdentity.working_time":
		if e.complexity.DriverIdentity.WorkingTime == nil {
			break
		}

		return e.complexity.DriverIdentity.WorkingTime(childComplexity), true

	case "DriverIdentityAggregate.aggregate":
		if e.complexity.DriverIdentityAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverIdentityAggregate.Aggregate(childComplexity), true

	case "DriverIdentityAggregateFields.avg":
		if e.complexity.DriverIdentityAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Avg(childComplexity), true

	case "DriverIdentityAggregateFields.count":
		if e.complexity.DriverIdentityAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Count(childComplexity), true

	case "DriverIdentityAggregateFields.max":
		if e.complexity.DriverIdentityAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Max(childComplexity), true

	case "DriverIdentityAggregateFields.min":
		if e.complexity.DriverIdentityAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Min(childComplexity), true

	case "DriverIdentityAggregateFields.stddev":
		if e.complexity.DriverIdentityAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Stddev(childComplexity), true

	case "DriverIdentityAggregateFields.stddev_pop":
		if e.complexity.DriverIdentityAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.StddevPop(childComplexity), true

	case "DriverIdentityAggregateFields.stddev_samp":
		if e.complexity.DriverIdentityAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.StddevSamp(childComplexity), true

	case "DriverIdentityAggregateFields.sum":
		if e.complexity.DriverIdentityAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Sum(childComplexity), true

	case "DriverIdentityAggregateFields.var_pop":
		if e.complexity.DriverIdentityAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.VarPop(childComplexity), true

	case "DriverIdentityAggregateFields.var_samp":
		if e.complexity.DriverIdentityAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.VarSamp(childComplexity), true

	case "DriverIdentityAggregateFields.variance":
		if e.complexity.DriverIdentityAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverIdentityAggregateFields.Variance(childComplexity), true

	case "DriverIdentityAvgFields.accumulatived_points":
		if e.complexity.DriverIdentityAvgFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityAvgFields.driver_license_status":
		if e.complexity.DriverIdentityAvgFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityAvgFields.id":
		if e.complexity.DriverIdentityAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.ID(childComplexity), true

	case "DriverIdentityAvgFields.quasi_driving_models":
		if e.complexity.DriverIdentityAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityAvgFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityInfoReport.created_at":
		if e.complexity.DriverIdentityInfoReport.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.CreatedAt(childComplexity), true

	case "DriverIdentityInfoReport.created_by":
		if e.complexity.DriverIdentityInfoReport.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.CreatedBy(childComplexity), true

	case "DriverIdentityInfoReport.deleted_at":
		if e.complexity.DriverIdentityInfoReport.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.DeletedAt(childComplexity), true

	case "DriverIdentityInfoReport.deleted_by":
		if e.complexity.DriverIdentityInfoReport.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.DeletedBy(childComplexity), true

	case "DriverIdentityInfoReport.driver_identity_info_report_id":
		if e.complexity.DriverIdentityInfoReport.DriverIdentityInfoReportID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.DriverIdentityInfoReportID(childComplexity), true

	case "DriverIdentityInfoReport.driver_license_name":
		if e.complexity.DriverIdentityInfoReport.DriverLicenseName == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.DriverLicenseName(childComplexity), true

	case "DriverIdentityInfoReport.driver_name":
		if e.complexity.DriverIdentityInfoReport.DriverName == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.DriverName(childComplexity), true

	case "DriverIdentityInfoReport.id":
		if e.complexity.DriverIdentityInfoReport.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.ID(childComplexity), true

	case "DriverIdentityInfoReport.ic_card_reading_result":
		if e.complexity.DriverIdentityInfoReport.IcCardReadingResult == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.IcCardReadingResult(childComplexity), true

	case "DriverIdentityInfoReport.ic_card_status":
		if e.complexity.DriverIdentityInfoReport.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReport.imel":
		if e.complexity.DriverIdentityInfoReport.Imel == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.Imel(childComplexity), true

	case "DriverIdentityInfoReport.license_expire_date":
		if e.complexity.DriverIdentityInfoReport.LicenseExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.LicenseExpireDate(childComplexity), true

	case "DriverIdentityInfoReport.license_number":
		if e.complexity.DriverIdentityInfoReport.LicenseNumber == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.LicenseNumber(childComplexity), true

	case "DriverIdentityInfoReport.occupational_number":
		if e.complexity.DriverIdentityInfoReport.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.OccupationalNumber(childComplexity), true

	case "DriverIdentityInfoReport.operation_time":
		if e.complexity.DriverIdentityInfoReport.OperationTime == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.OperationTime(childComplexity), true

	case "DriverIdentityInfoReport.registration_time":
		if e.complexity.DriverIdentityInfoReport.RegistrationTime == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.RegistrationTime(childComplexity), true

	case "DriverIdentityInfoReport.updated_at":
		if e.complexity.DriverIdentityInfoReport.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.UpdatedAt(childComplexity), true

	case "DriverIdentityInfoReport.updated_by":
		if e.complexity.DriverIdentityInfoReport.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.UpdatedBy(childComplexity), true

	case "DriverIdentityInfoReport.vehicle_id":
		if e.complexity.DriverIdentityInfoReport.VehicleID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReport.VehicleID(childComplexity), true

	case "DriverIdentityInfoReportAggregate.aggregate":
		if e.complexity.DriverIdentityInfoReportAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregate.Aggregate(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.avg":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Avg(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.count":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Count(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.max":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Max(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.min":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Min(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.stddev":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Stddev(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.stddev_pop":
		if e.complexity.DriverIdentityInfoReportAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.StddevPop(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.stddev_samp":
		if e.complexity.DriverIdentityInfoReportAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.StddevSamp(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.sum":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Sum(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.var_pop":
		if e.complexity.DriverIdentityInfoReportAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.VarPop(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.var_samp":
		if e.complexity.DriverIdentityInfoReportAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.VarSamp(childComplexity), true

	case "DriverIdentityInfoReportAggregateFields.variance":
		if e.complexity.DriverIdentityInfoReportAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAggregateFields.Variance(childComplexity), true

	case "DriverIdentityInfoReportAvgFields.id":
		if e.complexity.DriverIdentityInfoReportAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAvgFields.ID(childComplexity), true

	case "DriverIdentityInfoReportAvgFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportAvgFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportAvgFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.created_at":
		if e.complexity.DriverIdentityInfoReportMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.CreatedAt(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.created_by":
		if e.complexity.DriverIdentityInfoReportMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.CreatedBy(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.deleted_at":
		if e.complexity.DriverIdentityInfoReportMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.DeletedAt(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.deleted_by":
		if e.complexity.DriverIdentityInfoReportMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.DeletedBy(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.driver_identity_info_report_id":
		if e.complexity.DriverIdentityInfoReportMaxFields.DriverIdentityInfoReportID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.DriverIdentityInfoReportID(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.driver_license_name":
		if e.complexity.DriverIdentityInfoReportMaxFields.DriverLicenseName == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.DriverLicenseName(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.driver_name":
		if e.complexity.DriverIdentityInfoReportMaxFields.DriverName == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.DriverName(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.id":
		if e.complexity.DriverIdentityInfoReportMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.ID(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.ic_card_reading_result":
		if e.complexity.DriverIdentityInfoReportMaxFields.IcCardReadingResult == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.IcCardReadingResult(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportMaxFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.imel":
		if e.complexity.DriverIdentityInfoReportMaxFields.Imel == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.Imel(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.license_expire_date":
		if e.complexity.DriverIdentityInfoReportMaxFields.LicenseExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.LicenseExpireDate(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.license_number":
		if e.complexity.DriverIdentityInfoReportMaxFields.LicenseNumber == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.LicenseNumber(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.occupational_number":
		if e.complexity.DriverIdentityInfoReportMaxFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.OccupationalNumber(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.operation_time":
		if e.complexity.DriverIdentityInfoReportMaxFields.OperationTime == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.OperationTime(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.registration_time":
		if e.complexity.DriverIdentityInfoReportMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.RegistrationTime(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.updated_at":
		if e.complexity.DriverIdentityInfoReportMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.UpdatedAt(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.updated_by":
		if e.complexity.DriverIdentityInfoReportMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.UpdatedBy(childComplexity), true

	case "DriverIdentityInfoReportMaxFields.vehicle_id":
		if e.complexity.DriverIdentityInfoReportMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMaxFields.VehicleID(childComplexity), true

	case "DriverIdentityInfoReportMinFields.created_at":
		if e.complexity.DriverIdentityInfoReportMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.CreatedAt(childComplexity), true

	case "DriverIdentityInfoReportMinFields.created_by":
		if e.complexity.DriverIdentityInfoReportMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.CreatedBy(childComplexity), true

	case "DriverIdentityInfoReportMinFields.deleted_at":
		if e.complexity.DriverIdentityInfoReportMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.DeletedAt(childComplexity), true

	case "DriverIdentityInfoReportMinFields.deleted_by":
		if e.complexity.DriverIdentityInfoReportMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.DeletedBy(childComplexity), true

	case "DriverIdentityInfoReportMinFields.driver_identity_info_report_id":
		if e.complexity.DriverIdentityInfoReportMinFields.DriverIdentityInfoReportID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.DriverIdentityInfoReportID(childComplexity), true

	case "DriverIdentityInfoReportMinFields.driver_license_name":
		if e.complexity.DriverIdentityInfoReportMinFields.DriverLicenseName == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.DriverLicenseName(childComplexity), true

	case "DriverIdentityInfoReportMinFields.driver_name":
		if e.complexity.DriverIdentityInfoReportMinFields.DriverName == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.DriverName(childComplexity), true

	case "DriverIdentityInfoReportMinFields.id":
		if e.complexity.DriverIdentityInfoReportMinFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.ID(childComplexity), true

	case "DriverIdentityInfoReportMinFields.ic_card_reading_result":
		if e.complexity.DriverIdentityInfoReportMinFields.IcCardReadingResult == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.IcCardReadingResult(childComplexity), true

	case "DriverIdentityInfoReportMinFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportMinFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportMinFields.imel":
		if e.complexity.DriverIdentityInfoReportMinFields.Imel == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.Imel(childComplexity), true

	case "DriverIdentityInfoReportMinFields.license_expire_date":
		if e.complexity.DriverIdentityInfoReportMinFields.LicenseExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.LicenseExpireDate(childComplexity), true

	case "DriverIdentityInfoReportMinFields.license_number":
		if e.complexity.DriverIdentityInfoReportMinFields.LicenseNumber == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.LicenseNumber(childComplexity), true

	case "DriverIdentityInfoReportMinFields.occupational_number":
		if e.complexity.DriverIdentityInfoReportMinFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.OccupationalNumber(childComplexity), true

	case "DriverIdentityInfoReportMinFields.operation_time":
		if e.complexity.DriverIdentityInfoReportMinFields.OperationTime == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.OperationTime(childComplexity), true

	case "DriverIdentityInfoReportMinFields.registration_time":
		if e.complexity.DriverIdentityInfoReportMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.RegistrationTime(childComplexity), true

	case "DriverIdentityInfoReportMinFields.updated_at":
		if e.complexity.DriverIdentityInfoReportMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.UpdatedAt(childComplexity), true

	case "DriverIdentityInfoReportMinFields.updated_by":
		if e.complexity.DriverIdentityInfoReportMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.UpdatedBy(childComplexity), true

	case "DriverIdentityInfoReportMinFields.vehicle_id":
		if e.complexity.DriverIdentityInfoReportMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMinFields.VehicleID(childComplexity), true

	case "DriverIdentityInfoReportMutationResponse.affected_rows":
		if e.complexity.DriverIdentityInfoReportMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMutationResponse.AffectedRows(childComplexity), true

	case "DriverIdentityInfoReportMutationResponse.returning":
		if e.complexity.DriverIdentityInfoReportMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportMutationResponse.Returning(childComplexity), true

	case "DriverIdentityInfoReportStddevFields.id":
		if e.complexity.DriverIdentityInfoReportStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportStddevFields.ID(childComplexity), true

	case "DriverIdentityInfoReportStddevFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportStddevFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportStddevFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportStddevPopFields.id":
		if e.complexity.DriverIdentityInfoReportStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportStddevPopFields.ID(childComplexity), true

	case "DriverIdentityInfoReportStddevPopFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportStddevPopFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportStddevPopFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportStddevSampFields.id":
		if e.complexity.DriverIdentityInfoReportStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportStddevSampFields.ID(childComplexity), true

	case "DriverIdentityInfoReportStddevSampFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportStddevSampFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportStddevSampFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportSumFields.id":
		if e.complexity.DriverIdentityInfoReportSumFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportSumFields.ID(childComplexity), true

	case "DriverIdentityInfoReportSumFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportSumFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportSumFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportVarPopFields.id":
		if e.complexity.DriverIdentityInfoReportVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportVarPopFields.ID(childComplexity), true

	case "DriverIdentityInfoReportVarPopFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportVarPopFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportVarPopFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportVarSampFields.id":
		if e.complexity.DriverIdentityInfoReportVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportVarSampFields.ID(childComplexity), true

	case "DriverIdentityInfoReportVarSampFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportVarSampFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportVarSampFields.IcCardStatus(childComplexity), true

	case "DriverIdentityInfoReportVarianceFields.id":
		if e.complexity.DriverIdentityInfoReportVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportVarianceFields.ID(childComplexity), true

	case "DriverIdentityInfoReportVarianceFields.ic_card_status":
		if e.complexity.DriverIdentityInfoReportVarianceFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DriverIdentityInfoReportVarianceFields.IcCardStatus(childComplexity), true

	case "DriverIdentityMaxFields.accumulatived_points":
		if e.complexity.DriverIdentityMaxFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityMaxFields.annual_review_date":
		if e.complexity.DriverIdentityMaxFields.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.AnnualReviewDate(childComplexity), true

	case "DriverIdentityMaxFields.created_at":
		if e.complexity.DriverIdentityMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.CreatedAt(childComplexity), true

	case "DriverIdentityMaxFields.created_by":
		if e.complexity.DriverIdentityMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.CreatedBy(childComplexity), true

	case "DriverIdentityMaxFields.deleted_at":
		if e.complexity.DriverIdentityMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DeletedAt(childComplexity), true

	case "DriverIdentityMaxFields.deleted_by":
		if e.complexity.DriverIdentityMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DeletedBy(childComplexity), true

	case "DriverIdentityMaxFields.driver_holding_id_photo":
		if e.complexity.DriverIdentityMaxFields.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverHoldingIDPhoto(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_city_id":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseCityID(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_district_id":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseDistrictID(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_issue_date":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseIssueDate(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_issuing_authority":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseIssuingAuthority(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_pic":
		if e.complexity.DriverIdentityMaxFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicensePic(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_province_id":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseProvinceID(childComplexity), true

	case "DriverIdentityMaxFields.driver_license_status":
		if e.complexity.DriverIdentityMaxFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityMaxFields.driver_photo":
		if e.complexity.DriverIdentityMaxFields.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverPhoto(childComplexity), true

	case "DriverIdentityMaxFields.driver_signature":
		if e.complexity.DriverIdentityMaxFields.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.DriverSignature(childComplexity), true

	case "DriverIdentityMaxFields.id":
		if e.complexity.DriverIdentityMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.ID(childComplexity), true

	case "DriverIdentityMaxFields.id_card_address":
		if e.complexity.DriverIdentityMaxFields.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardAddress(childComplexity), true

	case "DriverIdentityMaxFields.id_card_back_pic":
		if e.complexity.DriverIdentityMaxFields.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardBackPic(childComplexity), true

	case "DriverIdentityMaxFields.id_card_birthday":
		if e.complexity.DriverIdentityMaxFields.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardBirthday(childComplexity), true

	case "DriverIdentityMaxFields.id_card_end_date":
		if e.complexity.DriverIdentityMaxFields.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardEndDate(childComplexity), true

	case "DriverIdentityMaxFields.id_card_front_pic":
		if e.complexity.DriverIdentityMaxFields.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardFrontPic(childComplexity), true

	case "DriverIdentityMaxFields.id_card_nation":
		if e.complexity.DriverIdentityMaxFields.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardNation(childComplexity), true

	case "DriverIdentityMaxFields.id_card_num":
		if e.complexity.DriverIdentityMaxFields.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardNum(childComplexity), true

	case "DriverIdentityMaxFields.id_card_sign_government":
		if e.complexity.DriverIdentityMaxFields.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardSignGovernment(childComplexity), true

	case "DriverIdentityMaxFields.id_card_start_date":
		if e.complexity.DriverIdentityMaxFields.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IDCardStartDate(childComplexity), true

	case "DriverIdentityMaxFields.identity_id":
		if e.complexity.DriverIdentityMaxFields.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IdentityID(childComplexity), true

	case "DriverIdentityMaxFields.is_deleted":
		if e.complexity.DriverIdentityMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IsDeleted(childComplexity), true

	case "DriverIdentityMaxFields.is_review":
		if e.complexity.DriverIdentityMaxFields.IsReview == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.IsReview(childComplexity), true

	case "DriverIdentityMaxFields.labor_contract":
		if e.complexity.DriverIdentityMaxFields.LaborContract == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.LaborContract(childComplexity), true

	case "DriverIdentityMaxFields.occupational_expire_date":
		if e.complexity.DriverIdentityMaxFields.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.OccupationalExpireDate(childComplexity), true

	case "DriverIdentityMaxFields.occupational_issuing_authority":
		if e.complexity.DriverIdentityMaxFields.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.OccupationalIssuingAuthority(childComplexity), true

	case "DriverIdentityMaxFields.occupational_number":
		if e.complexity.DriverIdentityMaxFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.OccupationalNumber(childComplexity), true

	case "DriverIdentityMaxFields.quasi_driving_models":
		if e.complexity.DriverIdentityMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityMaxFields.renewal_date":
		if e.complexity.DriverIdentityMaxFields.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.RenewalDate(childComplexity), true

	case "DriverIdentityMaxFields.sorting_date":
		if e.complexity.DriverIdentityMaxFields.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.SortingDate(childComplexity), true

	case "DriverIdentityMaxFields.updated_at":
		if e.complexity.DriverIdentityMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.UpdatedAt(childComplexity), true

	case "DriverIdentityMaxFields.updated_by":
		if e.complexity.DriverIdentityMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.UpdatedBy(childComplexity), true

	case "DriverIdentityMaxFields.working_time":
		if e.complexity.DriverIdentityMaxFields.WorkingTime == nil {
			break
		}

		return e.complexity.DriverIdentityMaxFields.WorkingTime(childComplexity), true

	case "DriverIdentityMinFields.accumulatived_points":
		if e.complexity.DriverIdentityMinFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityMinFields.annual_review_date":
		if e.complexity.DriverIdentityMinFields.AnnualReviewDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.AnnualReviewDate(childComplexity), true

	case "DriverIdentityMinFields.created_at":
		if e.complexity.DriverIdentityMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.CreatedAt(childComplexity), true

	case "DriverIdentityMinFields.created_by":
		if e.complexity.DriverIdentityMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.CreatedBy(childComplexity), true

	case "DriverIdentityMinFields.deleted_at":
		if e.complexity.DriverIdentityMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DeletedAt(childComplexity), true

	case "DriverIdentityMinFields.deleted_by":
		if e.complexity.DriverIdentityMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DeletedBy(childComplexity), true

	case "DriverIdentityMinFields.driver_holding_id_photo":
		if e.complexity.DriverIdentityMinFields.DriverHoldingIDPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverHoldingIDPhoto(childComplexity), true

	case "DriverIdentityMinFields.driver_license_city_id":
		if e.complexity.DriverIdentityMinFields.DriverLicenseCityID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseCityID(childComplexity), true

	case "DriverIdentityMinFields.driver_license_district_id":
		if e.complexity.DriverIdentityMinFields.DriverLicenseDistrictID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseDistrictID(childComplexity), true

	case "DriverIdentityMinFields.driver_license_issue_date":
		if e.complexity.DriverIdentityMinFields.DriverLicenseIssueDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseIssueDate(childComplexity), true

	case "DriverIdentityMinFields.driver_license_issuing_authority":
		if e.complexity.DriverIdentityMinFields.DriverLicenseIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseIssuingAuthority(childComplexity), true

	case "DriverIdentityMinFields.driver_license_pic":
		if e.complexity.DriverIdentityMinFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicensePic(childComplexity), true

	case "DriverIdentityMinFields.driver_license_province_id":
		if e.complexity.DriverIdentityMinFields.DriverLicenseProvinceID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseProvinceID(childComplexity), true

	case "DriverIdentityMinFields.driver_license_status":
		if e.complexity.DriverIdentityMinFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityMinFields.driver_photo":
		if e.complexity.DriverIdentityMinFields.DriverPhoto == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverPhoto(childComplexity), true

	case "DriverIdentityMinFields.driver_signature":
		if e.complexity.DriverIdentityMinFields.DriverSignature == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.DriverSignature(childComplexity), true

	case "DriverIdentityMinFields.id":
		if e.complexity.DriverIdentityMinFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.ID(childComplexity), true

	case "DriverIdentityMinFields.id_card_address":
		if e.complexity.DriverIdentityMinFields.IDCardAddress == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardAddress(childComplexity), true

	case "DriverIdentityMinFields.id_card_back_pic":
		if e.complexity.DriverIdentityMinFields.IDCardBackPic == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardBackPic(childComplexity), true

	case "DriverIdentityMinFields.id_card_birthday":
		if e.complexity.DriverIdentityMinFields.IDCardBirthday == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardBirthday(childComplexity), true

	case "DriverIdentityMinFields.id_card_end_date":
		if e.complexity.DriverIdentityMinFields.IDCardEndDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardEndDate(childComplexity), true

	case "DriverIdentityMinFields.id_card_front_pic":
		if e.complexity.DriverIdentityMinFields.IDCardFrontPic == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardFrontPic(childComplexity), true

	case "DriverIdentityMinFields.id_card_nation":
		if e.complexity.DriverIdentityMinFields.IDCardNation == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardNation(childComplexity), true

	case "DriverIdentityMinFields.id_card_num":
		if e.complexity.DriverIdentityMinFields.IDCardNum == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardNum(childComplexity), true

	case "DriverIdentityMinFields.id_card_sign_government":
		if e.complexity.DriverIdentityMinFields.IDCardSignGovernment == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardSignGovernment(childComplexity), true

	case "DriverIdentityMinFields.id_card_start_date":
		if e.complexity.DriverIdentityMinFields.IDCardStartDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IDCardStartDate(childComplexity), true

	case "DriverIdentityMinFields.identity_id":
		if e.complexity.DriverIdentityMinFields.IdentityID == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IdentityID(childComplexity), true

	case "DriverIdentityMinFields.is_deleted":
		if e.complexity.DriverIdentityMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IsDeleted(childComplexity), true

	case "DriverIdentityMinFields.is_review":
		if e.complexity.DriverIdentityMinFields.IsReview == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.IsReview(childComplexity), true

	case "DriverIdentityMinFields.labor_contract":
		if e.complexity.DriverIdentityMinFields.LaborContract == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.LaborContract(childComplexity), true

	case "DriverIdentityMinFields.occupational_expire_date":
		if e.complexity.DriverIdentityMinFields.OccupationalExpireDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.OccupationalExpireDate(childComplexity), true

	case "DriverIdentityMinFields.occupational_issuing_authority":
		if e.complexity.DriverIdentityMinFields.OccupationalIssuingAuthority == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.OccupationalIssuingAuthority(childComplexity), true

	case "DriverIdentityMinFields.occupational_number":
		if e.complexity.DriverIdentityMinFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.OccupationalNumber(childComplexity), true

	case "DriverIdentityMinFields.quasi_driving_models":
		if e.complexity.DriverIdentityMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityMinFields.renewal_date":
		if e.complexity.DriverIdentityMinFields.RenewalDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.RenewalDate(childComplexity), true

	case "DriverIdentityMinFields.sorting_date":
		if e.complexity.DriverIdentityMinFields.SortingDate == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.SortingDate(childComplexity), true

	case "DriverIdentityMinFields.updated_at":
		if e.complexity.DriverIdentityMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.UpdatedAt(childComplexity), true

	case "DriverIdentityMinFields.updated_by":
		if e.complexity.DriverIdentityMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.UpdatedBy(childComplexity), true

	case "DriverIdentityMinFields.working_time":
		if e.complexity.DriverIdentityMinFields.WorkingTime == nil {
			break
		}

		return e.complexity.DriverIdentityMinFields.WorkingTime(childComplexity), true

	case "DriverIdentityMutationResponse.affected_rows":
		if e.complexity.DriverIdentityMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverIdentityMutationResponse.AffectedRows(childComplexity), true

	case "DriverIdentityMutationResponse.returning":
		if e.complexity.DriverIdentityMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverIdentityMutationResponse.Returning(childComplexity), true

	case "DriverIdentityStddevFields.accumulatived_points":
		if e.complexity.DriverIdentityStddevFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityStddevFields.driver_license_status":
		if e.complexity.DriverIdentityStddevFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityStddevFields.id":
		if e.complexity.DriverIdentityStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.ID(childComplexity), true

	case "DriverIdentityStddevFields.quasi_driving_models":
		if e.complexity.DriverIdentityStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityStddevFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityStddevPopFields.accumulatived_points":
		if e.complexity.DriverIdentityStddevPopFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityStddevPopFields.driver_license_status":
		if e.complexity.DriverIdentityStddevPopFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityStddevPopFields.id":
		if e.complexity.DriverIdentityStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.ID(childComplexity), true

	case "DriverIdentityStddevPopFields.quasi_driving_models":
		if e.complexity.DriverIdentityStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityStddevSampFields.accumulatived_points":
		if e.complexity.DriverIdentityStddevSampFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityStddevSampFields.driver_license_status":
		if e.complexity.DriverIdentityStddevSampFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityStddevSampFields.id":
		if e.complexity.DriverIdentityStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.ID(childComplexity), true

	case "DriverIdentityStddevSampFields.quasi_driving_models":
		if e.complexity.DriverIdentityStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentitySumFields.accumulatived_points":
		if e.complexity.DriverIdentitySumFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentitySumFields.driver_license_status":
		if e.complexity.DriverIdentitySumFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentitySumFields.id":
		if e.complexity.DriverIdentitySumFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.ID(childComplexity), true

	case "DriverIdentitySumFields.quasi_driving_models":
		if e.complexity.DriverIdentitySumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentitySumFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityVarPopFields.accumulatived_points":
		if e.complexity.DriverIdentityVarPopFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityVarPopFields.driver_license_status":
		if e.complexity.DriverIdentityVarPopFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityVarPopFields.id":
		if e.complexity.DriverIdentityVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.ID(childComplexity), true

	case "DriverIdentityVarPopFields.quasi_driving_models":
		if e.complexity.DriverIdentityVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityVarPopFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityVarSampFields.accumulatived_points":
		if e.complexity.DriverIdentityVarSampFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityVarSampFields.driver_license_status":
		if e.complexity.DriverIdentityVarSampFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityVarSampFields.id":
		if e.complexity.DriverIdentityVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.ID(childComplexity), true

	case "DriverIdentityVarSampFields.quasi_driving_models":
		if e.complexity.DriverIdentityVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityVarSampFields.QuasiDrivingModels(childComplexity), true

	case "DriverIdentityVarianceFields.accumulatived_points":
		if e.complexity.DriverIdentityVarianceFields.AccumulativedPoints == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.AccumulativedPoints(childComplexity), true

	case "DriverIdentityVarianceFields.driver_license_status":
		if e.complexity.DriverIdentityVarianceFields.DriverLicenseStatus == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.DriverLicenseStatus(childComplexity), true

	case "DriverIdentityVarianceFields.id":
		if e.complexity.DriverIdentityVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.ID(childComplexity), true

	case "DriverIdentityVarianceFields.quasi_driving_models":
		if e.complexity.DriverIdentityVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.DriverIdentityVarianceFields.QuasiDrivingModels(childComplexity), true

	case "DriverInfo.agent":
		if e.complexity.DriverInfo.Agent == nil {
			break
		}

		return e.complexity.DriverInfo.Agent(childComplexity), true

	case "DriverInfo.blacklist_deadline":
		if e.complexity.DriverInfo.BlacklistDeadline == nil {
			break
		}

		return e.complexity.DriverInfo.BlacklistDeadline(childComplexity), true

	case "DriverInfo.check_at":
		if e.complexity.DriverInfo.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfo.CheckAt(childComplexity), true

	case "DriverInfo.check_by":
		if e.complexity.DriverInfo.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfo.CheckBy(childComplexity), true

	case "DriverInfo.contact_address":
		if e.complexity.DriverInfo.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfo.ContactAddress(childComplexity), true

	case "DriverInfo.created_at":
		if e.complexity.DriverInfo.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfo.CreatedAt(childComplexity), true

	case "DriverInfo.created_by":
		if e.complexity.DriverInfo.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfo.CreatedBy(childComplexity), true

	case "DriverInfo.deleted_at":
		if e.complexity.DriverInfo.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfo.DeletedAt(childComplexity), true

	case "DriverInfo.deleted_by":
		if e.complexity.DriverInfo.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfo.DeletedBy(childComplexity), true

	case "DriverInfo.department_id":
		if e.complexity.DriverInfo.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfo.DepartmentID(childComplexity), true

	case "DriverInfo.driver_id":
		if e.complexity.DriverInfo.DriverID == nil {
			break
		}

		return e.complexity.DriverInfo.DriverID(childComplexity), true

	case "DriverInfo.driver_identity_id":
		if e.complexity.DriverInfo.DriverIdentityID == nil {
			break
		}

		return e.complexity.DriverInfo.DriverIdentityID(childComplexity), true

	case "DriverInfo.driver_name":
		if e.complexity.DriverInfo.DriverName == nil {
			break
		}

		return e.complexity.DriverInfo.DriverName(childComplexity), true

	case "DriverInfo.enterprise_id":
		if e.complexity.DriverInfo.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfo.EnterpriseID(childComplexity), true

	case "DriverInfo.files_number":
		if e.complexity.DriverInfo.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfo.FilesNumber(childComplexity), true

	case "DriverInfo.id":
		if e.complexity.DriverInfo.ID == nil {
			break
		}

		return e.complexity.DriverInfo.ID(childComplexity), true

	case "DriverInfo.input_at":
		if e.complexity.DriverInfo.InputAt == nil {
			break
		}

		return e.complexity.DriverInfo.InputAt(childComplexity), true

	case "DriverInfo.input_by":
		if e.complexity.DriverInfo.InputBy == nil {
			break
		}

		return e.complexity.DriverInfo.InputBy(childComplexity), true

	case "DriverInfo.is_blacklist":
		if e.complexity.DriverInfo.IsBlacklist == nil {
			break
		}

		return e.complexity.DriverInfo.IsBlacklist(childComplexity), true

	case "DriverInfo.is_check_data":
		if e.complexity.DriverInfo.IsCheckData == nil {
			break
		}

		return e.complexity.DriverInfo.IsCheckData(childComplexity), true

	case "DriverInfo.is_check_sms":
		if e.complexity.DriverInfo.IsCheckSms == nil {
			break
		}

		return e.complexity.DriverInfo.IsCheckSms(childComplexity), true

	case "DriverInfo.is_deleted":
		if e.complexity.DriverInfo.IsDeleted == nil {
			break
		}

		return e.complexity.DriverInfo.IsDeleted(childComplexity), true

	case "DriverInfo.is_input":
		if e.complexity.DriverInfo.IsInput == nil {
			break
		}

		return e.complexity.DriverInfo.IsInput(childComplexity), true

	case "DriverInfo.is_manual_input":
		if e.complexity.DriverInfo.IsManualInput == nil {
			break
		}

		return e.complexity.DriverInfo.IsManualInput(childComplexity), true

	case "DriverInfo.is_submit":
		if e.complexity.DriverInfo.IsSubmit == nil {
			break
		}

		return e.complexity.DriverInfo.IsSubmit(childComplexity), true

	case "DriverInfo.mailing_address":
		if e.complexity.DriverInfo.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfo.MailingAddress(childComplexity), true

	case "DriverInfo.operator":
		if e.complexity.DriverInfo.Operator == nil {
			break
		}

		return e.complexity.DriverInfo.Operator(childComplexity), true

	case "DriverInfo.remark_in":
		if e.complexity.DriverInfo.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfo.RemarkIn(childComplexity), true

	case "DriverInfo.remarks":
		if e.complexity.DriverInfo.Remarks == nil {
			break
		}

		return e.complexity.DriverInfo.Remarks(childComplexity), true

	case "DriverInfo.sex":
		if e.complexity.DriverInfo.Sex == nil {
			break
		}

		return e.complexity.DriverInfo.Sex(childComplexity), true

	case "DriverInfo.submit_at":
		if e.complexity.DriverInfo.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitAt(childComplexity), true

	case "DriverInfo.submit_by":
		if e.complexity.DriverInfo.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitBy(childComplexity), true

	case "DriverInfo.submit_content":
		if e.complexity.DriverInfo.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfo.SubmitContent(childComplexity), true

	case "DriverInfo.telephone":
		if e.complexity.DriverInfo.Telephone == nil {
			break
		}

		return e.complexity.DriverInfo.Telephone(childComplexity), true

	case "DriverInfo.update_time_in":
		if e.complexity.DriverInfo.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfo.UpdateTimeIn(childComplexity), true

	case "DriverInfo.updated_at":
		if e.complexity.DriverInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfo.UpdatedAt(childComplexity), true

	case "DriverInfo.updated_by":
		if e.complexity.DriverInfo.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfo.UpdatedBy(childComplexity), true

	case "DriverInfoAggregate.aggregate":
		if e.complexity.DriverInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverInfoAggregate.Aggregate(childComplexity), true

	case "DriverInfoAggregateFields.avg":
		if e.complexity.DriverInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Avg(childComplexity), true

	case "DriverInfoAggregateFields.count":
		if e.complexity.DriverInfoAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Count(childComplexity), true

	case "DriverInfoAggregateFields.max":
		if e.complexity.DriverInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Max(childComplexity), true

	case "DriverInfoAggregateFields.min":
		if e.complexity.DriverInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Min(childComplexity), true

	case "DriverInfoAggregateFields.stddev":
		if e.complexity.DriverInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Stddev(childComplexity), true

	case "DriverInfoAggregateFields.stddev_pop":
		if e.complexity.DriverInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.StddevPop(childComplexity), true

	case "DriverInfoAggregateFields.stddev_samp":
		if e.complexity.DriverInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.StddevSamp(childComplexity), true

	case "DriverInfoAggregateFields.sum":
		if e.complexity.DriverInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Sum(childComplexity), true

	case "DriverInfoAggregateFields.var_pop":
		if e.complexity.DriverInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.VarPop(childComplexity), true

	case "DriverInfoAggregateFields.var_samp":
		if e.complexity.DriverInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.VarSamp(childComplexity), true

	case "DriverInfoAggregateFields.variance":
		if e.complexity.DriverInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverInfoAggregateFields.Variance(childComplexity), true

	case "DriverInfoAvgFields.id":
		if e.complexity.DriverInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoAvgFields.ID(childComplexity), true

	case "DriverInfoAvgFields.sex":
		if e.complexity.DriverInfoAvgFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoAvgFields.Sex(childComplexity), true

	case "DriverInfoMaxFields.agent":
		if e.complexity.DriverInfoMaxFields.Agent == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Agent(childComplexity), true

	case "DriverInfoMaxFields.blacklist_deadline":
		if e.complexity.DriverInfoMaxFields.BlacklistDeadline == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.BlacklistDeadline(childComplexity), true

	case "DriverInfoMaxFields.check_at":
		if e.complexity.DriverInfoMaxFields.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CheckAt(childComplexity), true

	case "DriverInfoMaxFields.check_by":
		if e.complexity.DriverInfoMaxFields.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CheckBy(childComplexity), true

	case "DriverInfoMaxFields.contact_address":
		if e.complexity.DriverInfoMaxFields.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.ContactAddress(childComplexity), true

	case "DriverInfoMaxFields.created_at":
		if e.complexity.DriverInfoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CreatedAt(childComplexity), true

	case "DriverInfoMaxFields.created_by":
		if e.complexity.DriverInfoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.CreatedBy(childComplexity), true

	case "DriverInfoMaxFields.deleted_at":
		if e.complexity.DriverInfoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DeletedAt(childComplexity), true

	case "DriverInfoMaxFields.deleted_by":
		if e.complexity.DriverInfoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DeletedBy(childComplexity), true

	case "DriverInfoMaxFields.department_id":
		if e.complexity.DriverInfoMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DepartmentID(childComplexity), true

	case "DriverInfoMaxFields.driver_id":
		if e.complexity.DriverInfoMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DriverID(childComplexity), true

	case "DriverInfoMaxFields.driver_identity_id":
		if e.complexity.DriverInfoMaxFields.DriverIdentityID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DriverIdentityID(childComplexity), true

	case "DriverInfoMaxFields.driver_name":
		if e.complexity.DriverInfoMaxFields.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.DriverName(childComplexity), true

	case "DriverInfoMaxFields.enterprise_id":
		if e.complexity.DriverInfoMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.EnterpriseID(childComplexity), true

	case "DriverInfoMaxFields.files_number":
		if e.complexity.DriverInfoMaxFields.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.FilesNumber(childComplexity), true

	case "DriverInfoMaxFields.id":
		if e.complexity.DriverInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.ID(childComplexity), true

	case "DriverInfoMaxFields.input_at":
		if e.complexity.DriverInfoMaxFields.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.InputAt(childComplexity), true

	case "DriverInfoMaxFields.input_by":
		if e.complexity.DriverInfoMaxFields.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.InputBy(childComplexity), true

	case "DriverInfoMaxFields.is_blacklist":
		if e.complexity.DriverInfoMaxFields.IsBlacklist == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsBlacklist(childComplexity), true

	case "DriverInfoMaxFields.is_check_data":
		if e.complexity.DriverInfoMaxFields.IsCheckData == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsCheckData(childComplexity), true

	case "DriverInfoMaxFields.is_check_sms":
		if e.complexity.DriverInfoMaxFields.IsCheckSms == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsCheckSms(childComplexity), true

	case "DriverInfoMaxFields.is_deleted":
		if e.complexity.DriverInfoMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsDeleted(childComplexity), true

	case "DriverInfoMaxFields.is_input":
		if e.complexity.DriverInfoMaxFields.IsInput == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsInput(childComplexity), true

	case "DriverInfoMaxFields.is_manual_input":
		if e.complexity.DriverInfoMaxFields.IsManualInput == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsManualInput(childComplexity), true

	case "DriverInfoMaxFields.is_submit":
		if e.complexity.DriverInfoMaxFields.IsSubmit == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.IsSubmit(childComplexity), true

	case "DriverInfoMaxFields.mailing_address":
		if e.complexity.DriverInfoMaxFields.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.MailingAddress(childComplexity), true

	case "DriverInfoMaxFields.operator":
		if e.complexity.DriverInfoMaxFields.Operator == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Operator(childComplexity), true

	case "DriverInfoMaxFields.remark_in":
		if e.complexity.DriverInfoMaxFields.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.RemarkIn(childComplexity), true

	case "DriverInfoMaxFields.remarks":
		if e.complexity.DriverInfoMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Remarks(childComplexity), true

	case "DriverInfoMaxFields.sex":
		if e.complexity.DriverInfoMaxFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Sex(childComplexity), true

	case "DriverInfoMaxFields.submit_at":
		if e.complexity.DriverInfoMaxFields.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.SubmitAt(childComplexity), true

	case "DriverInfoMaxFields.submit_by":
		if e.complexity.DriverInfoMaxFields.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.SubmitBy(childComplexity), true

	case "DriverInfoMaxFields.submit_content":
		if e.complexity.DriverInfoMaxFields.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.SubmitContent(childComplexity), true

	case "DriverInfoMaxFields.telephone":
		if e.complexity.DriverInfoMaxFields.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.Telephone(childComplexity), true

	case "DriverInfoMaxFields.update_time_in":
		if e.complexity.DriverInfoMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.UpdateTimeIn(childComplexity), true

	case "DriverInfoMaxFields.updated_at":
		if e.complexity.DriverInfoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.UpdatedAt(childComplexity), true

	case "DriverInfoMaxFields.updated_by":
		if e.complexity.DriverInfoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMaxFields.UpdatedBy(childComplexity), true

	case "DriverInfoMinFields.agent":
		if e.complexity.DriverInfoMinFields.Agent == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Agent(childComplexity), true

	case "DriverInfoMinFields.blacklist_deadline":
		if e.complexity.DriverInfoMinFields.BlacklistDeadline == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.BlacklistDeadline(childComplexity), true

	case "DriverInfoMinFields.check_at":
		if e.complexity.DriverInfoMinFields.CheckAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CheckAt(childComplexity), true

	case "DriverInfoMinFields.check_by":
		if e.complexity.DriverInfoMinFields.CheckBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CheckBy(childComplexity), true

	case "DriverInfoMinFields.contact_address":
		if e.complexity.DriverInfoMinFields.ContactAddress == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.ContactAddress(childComplexity), true

	case "DriverInfoMinFields.created_at":
		if e.complexity.DriverInfoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CreatedAt(childComplexity), true

	case "DriverInfoMinFields.created_by":
		if e.complexity.DriverInfoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.CreatedBy(childComplexity), true

	case "DriverInfoMinFields.deleted_at":
		if e.complexity.DriverInfoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DeletedAt(childComplexity), true

	case "DriverInfoMinFields.deleted_by":
		if e.complexity.DriverInfoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DeletedBy(childComplexity), true

	case "DriverInfoMinFields.department_id":
		if e.complexity.DriverInfoMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DepartmentID(childComplexity), true

	case "DriverInfoMinFields.driver_id":
		if e.complexity.DriverInfoMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DriverID(childComplexity), true

	case "DriverInfoMinFields.driver_identity_id":
		if e.complexity.DriverInfoMinFields.DriverIdentityID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DriverIdentityID(childComplexity), true

	case "DriverInfoMinFields.driver_name":
		if e.complexity.DriverInfoMinFields.DriverName == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.DriverName(childComplexity), true

	case "DriverInfoMinFields.enterprise_id":
		if e.complexity.DriverInfoMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.EnterpriseID(childComplexity), true

	case "DriverInfoMinFields.files_number":
		if e.complexity.DriverInfoMinFields.FilesNumber == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.FilesNumber(childComplexity), true

	case "DriverInfoMinFields.id":
		if e.complexity.DriverInfoMinFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.ID(childComplexity), true

	case "DriverInfoMinFields.input_at":
		if e.complexity.DriverInfoMinFields.InputAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.InputAt(childComplexity), true

	case "DriverInfoMinFields.input_by":
		if e.complexity.DriverInfoMinFields.InputBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.InputBy(childComplexity), true

	case "DriverInfoMinFields.is_blacklist":
		if e.complexity.DriverInfoMinFields.IsBlacklist == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsBlacklist(childComplexity), true

	case "DriverInfoMinFields.is_check_data":
		if e.complexity.DriverInfoMinFields.IsCheckData == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsCheckData(childComplexity), true

	case "DriverInfoMinFields.is_check_sms":
		if e.complexity.DriverInfoMinFields.IsCheckSms == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsCheckSms(childComplexity), true

	case "DriverInfoMinFields.is_deleted":
		if e.complexity.DriverInfoMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsDeleted(childComplexity), true

	case "DriverInfoMinFields.is_input":
		if e.complexity.DriverInfoMinFields.IsInput == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsInput(childComplexity), true

	case "DriverInfoMinFields.is_manual_input":
		if e.complexity.DriverInfoMinFields.IsManualInput == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsManualInput(childComplexity), true

	case "DriverInfoMinFields.is_submit":
		if e.complexity.DriverInfoMinFields.IsSubmit == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.IsSubmit(childComplexity), true

	case "DriverInfoMinFields.mailing_address":
		if e.complexity.DriverInfoMinFields.MailingAddress == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.MailingAddress(childComplexity), true

	case "DriverInfoMinFields.operator":
		if e.complexity.DriverInfoMinFields.Operator == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Operator(childComplexity), true

	case "DriverInfoMinFields.remark_in":
		if e.complexity.DriverInfoMinFields.RemarkIn == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.RemarkIn(childComplexity), true

	case "DriverInfoMinFields.remarks":
		if e.complexity.DriverInfoMinFields.Remarks == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Remarks(childComplexity), true

	case "DriverInfoMinFields.sex":
		if e.complexity.DriverInfoMinFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Sex(childComplexity), true

	case "DriverInfoMinFields.submit_at":
		if e.complexity.DriverInfoMinFields.SubmitAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.SubmitAt(childComplexity), true

	case "DriverInfoMinFields.submit_by":
		if e.complexity.DriverInfoMinFields.SubmitBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.SubmitBy(childComplexity), true

	case "DriverInfoMinFields.submit_content":
		if e.complexity.DriverInfoMinFields.SubmitContent == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.SubmitContent(childComplexity), true

	case "DriverInfoMinFields.telephone":
		if e.complexity.DriverInfoMinFields.Telephone == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.Telephone(childComplexity), true

	case "DriverInfoMinFields.update_time_in":
		if e.complexity.DriverInfoMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.UpdateTimeIn(childComplexity), true

	case "DriverInfoMinFields.updated_at":
		if e.complexity.DriverInfoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.UpdatedAt(childComplexity), true

	case "DriverInfoMinFields.updated_by":
		if e.complexity.DriverInfoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverInfoMinFields.UpdatedBy(childComplexity), true

	case "DriverInfoMutationResponse.affected_rows":
		if e.complexity.DriverInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverInfoMutationResponse.AffectedRows(childComplexity), true

	case "DriverInfoMutationResponse.returning":
		if e.complexity.DriverInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverInfoMutationResponse.Returning(childComplexity), true

	case "DriverInfoStddevFields.id":
		if e.complexity.DriverInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoStddevFields.ID(childComplexity), true

	case "DriverInfoStddevFields.sex":
		if e.complexity.DriverInfoStddevFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoStddevFields.Sex(childComplexity), true

	case "DriverInfoStddevPopFields.id":
		if e.complexity.DriverInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoStddevPopFields.ID(childComplexity), true

	case "DriverInfoStddevPopFields.sex":
		if e.complexity.DriverInfoStddevPopFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoStddevPopFields.Sex(childComplexity), true

	case "DriverInfoStddevSampFields.id":
		if e.complexity.DriverInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoStddevSampFields.ID(childComplexity), true

	case "DriverInfoStddevSampFields.sex":
		if e.complexity.DriverInfoStddevSampFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoStddevSampFields.Sex(childComplexity), true

	case "DriverInfoSumFields.id":
		if e.complexity.DriverInfoSumFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoSumFields.ID(childComplexity), true

	case "DriverInfoSumFields.sex":
		if e.complexity.DriverInfoSumFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoSumFields.Sex(childComplexity), true

	case "DriverInfoVarPopFields.id":
		if e.complexity.DriverInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoVarPopFields.ID(childComplexity), true

	case "DriverInfoVarPopFields.sex":
		if e.complexity.DriverInfoVarPopFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoVarPopFields.Sex(childComplexity), true

	case "DriverInfoVarSampFields.id":
		if e.complexity.DriverInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoVarSampFields.ID(childComplexity), true

	case "DriverInfoVarSampFields.sex":
		if e.complexity.DriverInfoVarSampFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoVarSampFields.Sex(childComplexity), true

	case "DriverInfoVarianceFields.id":
		if e.complexity.DriverInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverInfoVarianceFields.ID(childComplexity), true

	case "DriverInfoVarianceFields.sex":
		if e.complexity.DriverInfoVarianceFields.Sex == nil {
			break
		}

		return e.complexity.DriverInfoVarianceFields.Sex(childComplexity), true

	case "DrivingLicenseRegistrationInspection.created_at":
		if e.complexity.DrivingLicenseRegistrationInspection.CreatedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.CreatedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspection.created_by":
		if e.complexity.DrivingLicenseRegistrationInspection.CreatedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.CreatedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspection.deleted_at":
		if e.complexity.DrivingLicenseRegistrationInspection.DeletedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.DeletedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspection.deleted_by":
		if e.complexity.DrivingLicenseRegistrationInspection.DeletedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.DeletedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspection.driver_id_info_report_id":
		if e.complexity.DrivingLicenseRegistrationInspection.DriverIDInfoReportID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.DriverIDInfoReportID(childComplexity), true

	case "DrivingLicenseRegistrationInspection.driver_license_name":
		if e.complexity.DrivingLicenseRegistrationInspection.DriverLicenseName == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.DriverLicenseName(childComplexity), true

	case "DrivingLicenseRegistrationInspection.driver_name":
		if e.complexity.DrivingLicenseRegistrationInspection.DriverName == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.DriverName(childComplexity), true

	case "DrivingLicenseRegistrationInspection.id":
		if e.complexity.DrivingLicenseRegistrationInspection.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspection.ic_card_reading_result":
		if e.complexity.DrivingLicenseRegistrationInspection.IcCardReadingResult == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.IcCardReadingResult(childComplexity), true

	case "DrivingLicenseRegistrationInspection.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspection.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspection.imel":
		if e.complexity.DrivingLicenseRegistrationInspection.Imel == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.Imel(childComplexity), true

	case "DrivingLicenseRegistrationInspection.license_expire_date":
		if e.complexity.DrivingLicenseRegistrationInspection.LicenseExpireDate == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.LicenseExpireDate(childComplexity), true

	case "DrivingLicenseRegistrationInspection.license_number":
		if e.complexity.DrivingLicenseRegistrationInspection.LicenseNumber == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.LicenseNumber(childComplexity), true

	case "DrivingLicenseRegistrationInspection.occupational_number":
		if e.complexity.DrivingLicenseRegistrationInspection.OccupationalNumber == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.OccupationalNumber(childComplexity), true

	case "DrivingLicenseRegistrationInspection.operation_time":
		if e.complexity.DrivingLicenseRegistrationInspection.OperationTime == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.OperationTime(childComplexity), true

	case "DrivingLicenseRegistrationInspection.registration_time":
		if e.complexity.DrivingLicenseRegistrationInspection.RegistrationTime == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.RegistrationTime(childComplexity), true

	case "DrivingLicenseRegistrationInspection.updated_at":
		if e.complexity.DrivingLicenseRegistrationInspection.UpdatedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.UpdatedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspection.updated_by":
		if e.complexity.DrivingLicenseRegistrationInspection.UpdatedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.UpdatedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspection.vehicle_id":
		if e.complexity.DrivingLicenseRegistrationInspection.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspection.VehicleID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregate.aggregate":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregate.Aggregate(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.avg":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Avg(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.count":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Count == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Count(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.max":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Max == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Max(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.min":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Min == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Min(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.stddev":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Stddev(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.stddev_pop":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.StddevPop(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.stddev_samp":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.StddevSamp(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.sum":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Sum(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.var_pop":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.VarPop(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.var_samp":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.VarSamp(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAggregateFields.variance":
		if e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAggregateFields.Variance(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAvgFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionAvgFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAvgFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionAvgFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionAvgFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionAvgFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.created_at":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.CreatedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.created_by":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.CreatedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.deleted_at":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DeletedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.deleted_by":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DeletedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.driver_id_info_report_id":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DriverIDInfoReportID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DriverIDInfoReportID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.driver_license_name":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DriverLicenseName == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DriverLicenseName(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.driver_name":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DriverName == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.DriverName(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.ic_card_reading_result":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.IcCardReadingResult == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.IcCardReadingResult(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.imel":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.Imel == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.Imel(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.license_expire_date":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.LicenseExpireDate == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.LicenseExpireDate(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.license_number":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.LicenseNumber == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.LicenseNumber(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.occupational_number":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.OccupationalNumber(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.operation_time":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.OperationTime == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.OperationTime(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.registration_time":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.RegistrationTime(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.updated_at":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.UpdatedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.updated_by":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.UpdatedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMaxFields.vehicle_id":
		if e.complexity.DrivingLicenseRegistrationInspectionMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMaxFields.VehicleID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.created_at":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.CreatedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.created_by":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.CreatedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.deleted_at":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.DeletedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.deleted_by":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.DeletedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.driver_id_info_report_id":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.DriverIDInfoReportID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.DriverIDInfoReportID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.driver_license_name":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.DriverLicenseName == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.DriverLicenseName(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.driver_name":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.DriverName == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.DriverName(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.ic_card_reading_result":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.IcCardReadingResult == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.IcCardReadingResult(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.imel":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.Imel == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.Imel(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.license_expire_date":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.LicenseExpireDate == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.LicenseExpireDate(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.license_number":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.LicenseNumber == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.LicenseNumber(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.occupational_number":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.OccupationalNumber == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.OccupationalNumber(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.operation_time":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.OperationTime == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.OperationTime(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.registration_time":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.RegistrationTime(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.updated_at":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.UpdatedAt(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.updated_by":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.UpdatedBy(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMinFields.vehicle_id":
		if e.complexity.DrivingLicenseRegistrationInspectionMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMinFields.VehicleID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMutationResponse.affected_rows":
		if e.complexity.DrivingLicenseRegistrationInspectionMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMutationResponse.AffectedRows(childComplexity), true

	case "DrivingLicenseRegistrationInspectionMutationResponse.returning":
		if e.complexity.DrivingLicenseRegistrationInspectionMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionMutationResponse.Returning(childComplexity), true

	case "DrivingLicenseRegistrationInspectionStddevFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionStddevFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionStddevFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionStddevFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionStddevFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionStddevFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionStddevPopFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionStddevPopFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionStddevPopFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionStddevPopFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionStddevPopFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionStddevSampFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionStddevSampFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionStddevSampFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionStddevSampFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionStddevSampFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionSumFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionSumFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionSumFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionSumFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionSumFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionSumFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionVarPopFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionVarPopFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionVarPopFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionVarPopFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionVarPopFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionVarPopFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionVarSampFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionVarSampFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionVarSampFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionVarSampFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionVarSampFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionVarSampFields.IcCardStatus(childComplexity), true

	case "DrivingLicenseRegistrationInspectionVarianceFields.id":
		if e.complexity.DrivingLicenseRegistrationInspectionVarianceFields.ID == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionVarianceFields.ID(childComplexity), true

	case "DrivingLicenseRegistrationInspectionVarianceFields.ic_card_status":
		if e.complexity.DrivingLicenseRegistrationInspectionVarianceFields.IcCardStatus == nil {
			break
		}

		return e.complexity.DrivingLicenseRegistrationInspectionVarianceFields.IcCardStatus(childComplexity), true

	case "Mutation.delete_driver_fingerprint":
		if e.complexity.Mutation.DeleteDriverFingerprint == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_fingerprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverFingerprint(childComplexity, args["where"].(model.DriverFingerprintBoolExp)), true

	case "Mutation.delete_driver_fingerprint_association":
		if e.complexity.Mutation.DeleteDriverFingerprintAssociation == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_fingerprint_association_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverFingerprintAssociation(childComplexity, args["where"].(model.DriverFingerprintAssociationBoolExp)), true

	case "Mutation.delete_driver_fingerprint_association_by_pk":
		if e.complexity.Mutation.DeleteDriverFingerprintAssociationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_fingerprint_association_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverFingerprintAssociationByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_fingerprint_association_by_union_pk":
		if e.complexity.Mutation.DeleteDriverFingerprintAssociationByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_fingerprint_association_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverFingerprintAssociationByUnionPk(childComplexity, args["driver_fingerprint_association_id"].(string)), true

	case "Mutation.delete_driver_fingerprint_by_pk":
		if e.complexity.Mutation.DeleteDriverFingerprintByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_fingerprint_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverFingerprintByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_fingerprint_by_union_pk":
		if e.complexity.Mutation.DeleteDriverFingerprintByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_fingerprint_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverFingerprintByUnionPk(childComplexity, args["driver_fingerprint_id"].(string)), true

	case "Mutation.delete_driver_identity":
		if e.complexity.Mutation.DeleteDriverIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentity(childComplexity, args["where"].(model.DriverIdentityBoolExp)), true

	case "Mutation.delete_driver_identity_by_pk":
		if e.complexity.Mutation.DeleteDriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentityByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_identity_by_union_pk":
		if e.complexity.Mutation.DeleteDriverIdentityByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentityByUnionPk(childComplexity, args["identity_id"].(string)), true

	case "Mutation.delete_driver_identity_info_report":
		if e.complexity.Mutation.DeleteDriverIdentityInfoReport == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_info_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentityInfoReport(childComplexity, args["where"].(model.DriverIdentityInfoReportBoolExp)), true

	case "Mutation.delete_driver_identity_info_report_by_pk":
		if e.complexity.Mutation.DeleteDriverIdentityInfoReportByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_info_report_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentityInfoReportByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_identity_info_report_by_union_pk":
		if e.complexity.Mutation.DeleteDriverIdentityInfoReportByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_identity_info_report_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverIdentityInfoReportByUnionPk(childComplexity, args["driver_identity_info_report_id"].(string)), true

	case "Mutation.delete_driver_info":
		if e.complexity.Mutation.DeleteDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfo(childComplexity, args["where"].(model.DriverInfoBoolExp)), true

	case "Mutation.delete_driver_info_by_pk":
		if e.complexity.Mutation.DeleteDriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverInfoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driving_license_registration_inspection":
		if e.complexity.Mutation.DeleteDrivingLicenseRegistrationInspection == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driving_license_registration_inspection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDrivingLicenseRegistrationInspection(childComplexity, args["where"].(model.DrivingLicenseRegistrationInspectionBoolExp)), true

	case "Mutation.delete_driving_license_registration_inspection_by_pk":
		if e.complexity.Mutation.DeleteDrivingLicenseRegistrationInspectionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driving_license_registration_inspection_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDrivingLicenseRegistrationInspectionByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_driver_fingerprint":
		if e.complexity.Mutation.InsertDriverFingerprint == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_fingerprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverFingerprint(childComplexity, args["objects"].([]*model.DriverFingerprintInsertInput)), true

	case "Mutation.insert_driver_fingerprint_association":
		if e.complexity.Mutation.InsertDriverFingerprintAssociation == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_fingerprint_association_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverFingerprintAssociation(childComplexity, args["objects"].([]*model.DriverFingerprintAssociationInsertInput)), true

	case "Mutation.insert_driver_fingerprint_association_one":
		if e.complexity.Mutation.InsertDriverFingerprintAssociationOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_fingerprint_association_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverFingerprintAssociationOne(childComplexity, args["objects"].(model.DriverFingerprintAssociationInsertInput)), true

	case "Mutation.insert_driver_fingerprint_one":
		if e.complexity.Mutation.InsertDriverFingerprintOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_fingerprint_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverFingerprintOne(childComplexity, args["objects"].(model.DriverFingerprintInsertInput)), true

	case "Mutation.insert_driver_identity":
		if e.complexity.Mutation.InsertDriverIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverIdentity(childComplexity, args["objects"].([]*model.DriverIdentityInsertInput)), true

	case "Mutation.insert_driver_identity_info_report":
		if e.complexity.Mutation.InsertDriverIdentityInfoReport == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_identity_info_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverIdentityInfoReport(childComplexity, args["objects"].([]*model.DriverIdentityInfoReportInsertInput)), true

	case "Mutation.insert_driver_identity_info_report_one":
		if e.complexity.Mutation.InsertDriverIdentityInfoReportOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_identity_info_report_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverIdentityInfoReportOne(childComplexity, args["objects"].(model.DriverIdentityInfoReportInsertInput)), true

	case "Mutation.insert_driver_identity_one":
		if e.complexity.Mutation.InsertDriverIdentityOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_identity_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverIdentityOne(childComplexity, args["objects"].(model.DriverIdentityInsertInput)), true

	case "Mutation.insert_driver_info":
		if e.complexity.Mutation.InsertDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverInfo(childComplexity, args["objects"].([]*model.DriverInfoInsertInput)), true

	case "Mutation.insert_driver_info_one":
		if e.complexity.Mutation.InsertDriverInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverInfoOne(childComplexity, args["objects"].(model.DriverInfoInsertInput)), true

	case "Mutation.insert_driving_license_registration_inspection":
		if e.complexity.Mutation.InsertDrivingLicenseRegistrationInspection == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driving_license_registration_inspection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDrivingLicenseRegistrationInspection(childComplexity, args["objects"].([]*model.DrivingLicenseRegistrationInspectionInsertInput)), true

	case "Mutation.insert_driving_license_registration_inspection_one":
		if e.complexity.Mutation.InsertDrivingLicenseRegistrationInspectionOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driving_license_registration_inspection_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDrivingLicenseRegistrationInspectionOne(childComplexity, args["objects"].(model.DrivingLicenseRegistrationInspectionInsertInput)), true

	case "Mutation.update_driver_fingerprint":
		if e.complexity.Mutation.UpdateDriverFingerprint == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_fingerprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverFingerprint(childComplexity, args["_inc"].(*model.DriverFingerprintIncInput), args["_set"].(*model.DriverFingerprintSetInput), args["where"].(model.DriverFingerprintBoolExp)), true

	case "Mutation.update_driver_fingerprint_association":
		if e.complexity.Mutation.UpdateDriverFingerprintAssociation == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_fingerprint_association_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverFingerprintAssociation(childComplexity, args["_inc"].(*model.DriverFingerprintAssociationIncInput), args["_set"].(*model.DriverFingerprintAssociationSetInput), args["where"].(model.DriverFingerprintAssociationBoolExp)), true

	case "Mutation.update_driver_fingerprint_association_by_pk":
		if e.complexity.Mutation.UpdateDriverFingerprintAssociationByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_fingerprint_association_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverFingerprintAssociationByPk(childComplexity, args["_inc"].(*model.DriverFingerprintAssociationIncInput), args["_set"].(*model.DriverFingerprintAssociationSetInput), args["id"].(int64)), true

	case "Mutation.update_driver_fingerprint_association_by_union_pk":
		if e.complexity.Mutation.UpdateDriverFingerprintAssociationByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_fingerprint_association_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverFingerprintAssociationByUnionPk(childComplexity, args["_inc"].(*model.DriverFingerprintAssociationIncInput), args["_set"].(*model.DriverFingerprintAssociationSetInput), args["driver_fingerprint_association_id"].(string)), true

	case "Mutation.update_driver_fingerprint_by_pk":
		if e.complexity.Mutation.UpdateDriverFingerprintByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_fingerprint_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverFingerprintByPk(childComplexity, args["_inc"].(*model.DriverFingerprintIncInput), args["_set"].(*model.DriverFingerprintSetInput), args["id"].(int64)), true

	case "Mutation.update_driver_fingerprint_by_union_pk":
		if e.complexity.Mutation.UpdateDriverFingerprintByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_fingerprint_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverFingerprintByUnionPk(childComplexity, args["_inc"].(*model.DriverFingerprintIncInput), args["_set"].(*model.DriverFingerprintSetInput), args["driver_fingerprint_id"].(string)), true

	case "Mutation.update_driver_identity":
		if e.complexity.Mutation.UpdateDriverIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentity(childComplexity, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["where"].(model.DriverIdentityBoolExp)), true

	case "Mutation.update_driver_identity_by_pk":
		if e.complexity.Mutation.UpdateDriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentityByPk(childComplexity, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["id"].(int64)), true

	case "Mutation.update_driver_identity_by_union_pk":
		if e.complexity.Mutation.UpdateDriverIdentityByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentityByUnionPk(childComplexity, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["identity_id"].(string)), true

	case "Mutation.update_driver_identity_info_report":
		if e.complexity.Mutation.UpdateDriverIdentityInfoReport == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_info_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentityInfoReport(childComplexity, args["_inc"].(*model.DriverIdentityInfoReportIncInput), args["_set"].(*model.DriverIdentityInfoReportSetInput), args["where"].(model.DriverIdentityInfoReportBoolExp)), true

	case "Mutation.update_driver_identity_info_report_by_pk":
		if e.complexity.Mutation.UpdateDriverIdentityInfoReportByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_info_report_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentityInfoReportByPk(childComplexity, args["_inc"].(*model.DriverIdentityInfoReportIncInput), args["_set"].(*model.DriverIdentityInfoReportSetInput), args["id"].(int64)), true

	case "Mutation.update_driver_identity_info_report_by_union_pk":
		if e.complexity.Mutation.UpdateDriverIdentityInfoReportByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_identity_info_report_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverIdentityInfoReportByUnionPk(childComplexity, args["_inc"].(*model.DriverIdentityInfoReportIncInput), args["_set"].(*model.DriverIdentityInfoReportSetInput), args["driver_identity_info_report_id"].(string)), true

	case "Mutation.update_driver_info":
		if e.complexity.Mutation.UpdateDriverInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfo(childComplexity, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["where"].(model.DriverInfoBoolExp)), true

	case "Mutation.update_driver_info_by_pk":
		if e.complexity.Mutation.UpdateDriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverInfoByPk(childComplexity, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["id"].(int64)), true

	case "Mutation.update_driving_license_registration_inspection":
		if e.complexity.Mutation.UpdateDrivingLicenseRegistrationInspection == nil {
			break
		}

		args, err := ec.field_Mutation_update_driving_license_registration_inspection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDrivingLicenseRegistrationInspection(childComplexity, args["_inc"].(*model.DrivingLicenseRegistrationInspectionIncInput), args["_set"].(*model.DrivingLicenseRegistrationInspectionSetInput), args["where"].(model.DrivingLicenseRegistrationInspectionBoolExp)), true

	case "Mutation.update_driving_license_registration_inspection_by_pk":
		if e.complexity.Mutation.UpdateDrivingLicenseRegistrationInspectionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driving_license_registration_inspection_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDrivingLicenseRegistrationInspectionByPk(childComplexity, args["_inc"].(*model.DrivingLicenseRegistrationInspectionIncInput), args["_set"].(*model.DrivingLicenseRegistrationInspectionSetInput), args["id"].(int64)), true

	case "Query.driver_fingerprint":
		if e.complexity.Query.DriverFingerprint == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprint(childComplexity, args["distinct_on"].([]model.DriverFingerprintSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintOrderBy), args["where"].(*model.DriverFingerprintBoolExp)), true

	case "Query.driver_fingerprint_aggregate":
		if e.complexity.Query.DriverFingerprintAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintAggregate(childComplexity, args["distinct_on"].([]model.DriverFingerprintSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintOrderBy), args["where"].(*model.DriverFingerprintBoolExp)), true

	case "Query.driver_fingerprint_association":
		if e.complexity.Query.DriverFingerprintAssociation == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_association_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintAssociation(childComplexity, args["distinct_on"].([]model.DriverFingerprintAssociationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintAssociationOrderBy), args["where"].(*model.DriverFingerprintAssociationBoolExp)), true

	case "Query.driver_fingerprint_association_aggregate":
		if e.complexity.Query.DriverFingerprintAssociationAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_association_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintAssociationAggregate(childComplexity, args["distinct_on"].([]model.DriverFingerprintAssociationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintAssociationOrderBy), args["where"].(*model.DriverFingerprintAssociationBoolExp)), true

	case "Query.driver_fingerprint_association_by_pk":
		if e.complexity.Query.DriverFingerprintAssociationByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_association_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintAssociationByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_fingerprint_association_by_union_pk":
		if e.complexity.Query.DriverFingerprintAssociationByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_association_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintAssociationByUnionPk(childComplexity, args["driver_fingerprint_association_id"].(string)), true

	case "Query.driver_fingerprint_by_pk":
		if e.complexity.Query.DriverFingerprintByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_fingerprint_by_union_pk":
		if e.complexity.Query.DriverFingerprintByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_driver_fingerprint_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverFingerprintByUnionPk(childComplexity, args["driver_fingerprint_id"].(string)), true

	case "Query.driver_identity":
		if e.complexity.Query.DriverIdentity == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentity(childComplexity, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp)), true

	case "Query.driver_identity_aggregate":
		if e.complexity.Query.DriverIdentityAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityAggregate(childComplexity, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp)), true

	case "Query.driver_identity_by_pk":
		if e.complexity.Query.DriverIdentityByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_identity_by_union_pk":
		if e.complexity.Query.DriverIdentityByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityByUnionPk(childComplexity, args["identity_id"].(string)), true

	case "Query.driver_identity_info_report":
		if e.complexity.Query.DriverIdentityInfoReport == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_info_report_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityInfoReport(childComplexity, args["distinct_on"].([]model.DriverIdentityInfoReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityInfoReportOrderBy), args["where"].(*model.DriverIdentityInfoReportBoolExp)), true

	case "Query.driver_identity_info_report_aggregate":
		if e.complexity.Query.DriverIdentityInfoReportAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_info_report_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityInfoReportAggregate(childComplexity, args["distinct_on"].([]model.DriverIdentityInfoReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityInfoReportOrderBy), args["where"].(*model.DriverIdentityInfoReportBoolExp)), true

	case "Query.driver_identity_info_report_by_pk":
		if e.complexity.Query.DriverIdentityInfoReportByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_info_report_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityInfoReportByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_identity_info_report_by_union_pk":
		if e.complexity.Query.DriverIdentityInfoReportByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_driver_identity_info_report_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverIdentityInfoReportByUnionPk(childComplexity, args["driver_identity_info_report_id"].(string)), true

	case "Query.driver_info":
		if e.complexity.Query.DriverInfo == nil {
			break
		}

		args, err := ec.field_Query_driver_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfo(childComplexity, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp)), true

	case "Query.driver_info_aggregate":
		if e.complexity.Query.DriverInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoAggregate(childComplexity, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp)), true

	case "Query.driver_info_by_pk":
		if e.complexity.Query.DriverInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverInfoByPk(childComplexity, args["id"].(int64)), true

	case "Query.driving_license_registration_inspection":
		if e.complexity.Query.DrivingLicenseRegistrationInspection == nil {
			break
		}

		args, err := ec.field_Query_driving_license_registration_inspection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DrivingLicenseRegistrationInspection(childComplexity, args["distinct_on"].([]model.DrivingLicenseRegistrationInspectionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLicenseRegistrationInspectionOrderBy), args["where"].(*model.DrivingLicenseRegistrationInspectionBoolExp)), true

	case "Query.driving_license_registration_inspection_aggregate":
		if e.complexity.Query.DrivingLicenseRegistrationInspectionAggregate == nil {
			break
		}

		args, err := ec.field_Query_driving_license_registration_inspection_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DrivingLicenseRegistrationInspectionAggregate(childComplexity, args["distinct_on"].([]model.DrivingLicenseRegistrationInspectionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLicenseRegistrationInspectionOrderBy), args["where"].(*model.DrivingLicenseRegistrationInspectionBoolExp)), true

	case "Query.driving_license_registration_inspection_by_pk":
		if e.complexity.Query.DrivingLicenseRegistrationInspectionByPk == nil {
			break
		}

		args, err := ec.field_Query_driving_license_registration_inspection_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DrivingLicenseRegistrationInspectionByPk(childComplexity, args["id"].(int64)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/driver_fingerprint.graphqls", Input: `"""
驾驶员指纹表
"""
type DriverFingerprint {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	driver_fingerprint_id: String!
	"""
	 driver_info驾驶员信息表的driver_id          
	"""
	driver_id: String!
	"""
	 驾驶员姓名                                      
	"""
	driver_name: String
	"""
	 用户ID                                          ( system_user表的user_id )
	"""
	user_id: String
	"""
	 特征码                                          
	"""
	signature: String
	"""
	 指纹名称                                        
	"""
	fingerprint_name: String
	"""
	 SIM卡号                                         
	"""
	sim_number: String
	"""
	 指令ID                                          
	"""
	instruction_id: String
	"""
	 操作类型                                        
	"""
	operation_type: Int
	"""
	 内容                                            
	"""
	content: String
	"""
	 操作时间                                        
	"""
	operation_time: Timestamptz
	"""
	 上传时间                                        
	"""
	upload_time: Timestamptz
	"""
	 时间戳                                          
	"""
	timestamp: String
	"""
	 终端ID                                          
	"""
	ternimal_id: String
	"""
	 是否成功                                        
	"""
	is_success: Boolean
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "driver_fingerprint"
"""
type DriverFingerprintAggregate {
	aggregate: DriverFingerprintAggregateFields
}
"""
aggregate fields of "driver_fingerprint"
"""
type DriverFingerprintAggregateFields {
	avg: DriverFingerprintAvgFields
	count: Int
	max: DriverFingerprintMaxFields
	min: DriverFingerprintMinFields
	stddev: DriverFingerprintStddevFields
	stddev_pop: DriverFingerprintStddevPopFields
	stddev_samp: DriverFingerprintStddevSampFields
	sum: DriverFingerprintSumFields
	var_pop: DriverFingerprintVarPopFields
	var_samp: DriverFingerprintVarSampFields
	variance: DriverFingerprintVarianceFields
}
"""
aggregate avg on columns of table "driver_fingerprint"
"""
type DriverFingerprintAvgFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate max on columns of table "driver_fingerprint"
"""
type DriverFingerprintMaxFields {
	id: Bigint
	driver_fingerprint_id: String
	driver_id: String
	driver_name: String
	user_id: String
	signature: String
	fingerprint_name: String
	sim_number: String
	instruction_id: String
	operation_type: Int
	content: String
	operation_time: Timestamptz
	upload_time: Timestamptz
	timestamp: String
	ternimal_id: String
	is_success: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driver_fingerprint"
"""
type DriverFingerprintMinFields {
	id: Bigint
	driver_fingerprint_id: String
	driver_id: String
	driver_name: String
	user_id: String
	signature: String
	fingerprint_name: String
	sim_number: String
	instruction_id: String
	operation_type: Int
	content: String
	operation_time: Timestamptz
	upload_time: Timestamptz
	timestamp: String
	ternimal_id: String
	is_success: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driver_fingerprint"
"""
type DriverFingerprintStddevFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate stddev_pop on columns of table "driver_fingerprint"
"""
type DriverFingerprintStddevPopFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate stddev_samp on columns of table "driver_fingerprint"
"""
type DriverFingerprintStddevSampFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate sum on columns of table "driver_fingerprint"
"""
type DriverFingerprintSumFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate var_pop on columns of table "driver_fingerprint"
"""
type DriverFingerprintVarPopFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate var_samp on columns of table "driver_fingerprint"
"""
type DriverFingerprintVarSampFields {
	id: Bigint
	operation_type: Int
}
"""
aggregate variance on columns of table "driver_fingerprint"
"""
type DriverFingerprintVarianceFields {
	id: Bigint
	operation_type: Int
}
"""
response of any mutation on the table "driver_fingerprint"
"""
type DriverFingerprintMutationResponse {
	affected_rows: Int!
	returning: [DriverFingerprint!]!
}
"""
ordering options when selecting data from "driver_fingerprint"
"""
input DriverFingerprintOrderBy {
	id: OrderBy
	driver_fingerprint_id: OrderBy
	driver_id: OrderBy
	driver_name: OrderBy
	user_id: OrderBy
	signature: OrderBy
	fingerprint_name: OrderBy
	sim_number: OrderBy
	instruction_id: OrderBy
	operation_type: OrderBy
	content: OrderBy
	operation_time: OrderBy
	upload_time: OrderBy
	timestamp: OrderBy
	ternimal_id: OrderBy
	is_success: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_fingerprint'.
"""
input DriverFingerprintBoolExp {
	_and: [DriverFingerprintBoolExp]
	_not: DriverFingerprintBoolExp
	_or: [DriverFingerprintBoolExp]
	id: BigintComparisonExp
	driver_fingerprint_id: StringComparisonExp
	driver_id: StringComparisonExp
	driver_name: StringComparisonExp
	user_id: StringComparisonExp
	signature: StringComparisonExp
	fingerprint_name: StringComparisonExp
	sim_number: StringComparisonExp
	instruction_id: StringComparisonExp
	operation_type: IntComparisonExp
	content: StringComparisonExp
	operation_time: TimestamptzComparisonExp
	upload_time: TimestamptzComparisonExp
	timestamp: StringComparisonExp
	ternimal_id: StringComparisonExp
	is_success: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driver_fingerprint"
"""
input DriverFingerprintInsertInput {
	driver_fingerprint_id: String!
	driver_id: String!
	driver_name: String
	user_id: String
	signature: String
	fingerprint_name: String
	sim_number: String
	instruction_id: String
	operation_type: Int
	content: String
	operation_time: Timestamptz
	upload_time: Timestamptz
	timestamp: String
	ternimal_id: String
	is_success: Boolean
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driver_fingerprint"
"""
input DriverFingerprintIncInput {
	id: Bigint
	operation_type: Int
}
"""
input type for updating data in table "driver_fingerprint"
"""
input DriverFingerprintSetInput {
	id: Bigint
	driver_fingerprint_id: String
	driver_id: String
	driver_name: String
	user_id: String
	signature: String
	fingerprint_name: String
	sim_number: String
	instruction_id: String
	operation_type: Int
	content: String
	operation_time: Timestamptz
	upload_time: Timestamptz
	timestamp: String
	ternimal_id: String
	is_success: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DriverFingerprintSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	driver_fingerprint_id
	"""
	 driver_info驾驶员信息表的driver_id          
	"""
	driver_id
	"""
	 驾驶员姓名                                      
	"""
	driver_name
	"""
	 用户ID                                          ( system_user表的user_id )
	"""
	user_id
	"""
	 特征码                                          
	"""
	signature
	"""
	 指纹名称                                        
	"""
	fingerprint_name
	"""
	 SIM卡号                                         
	"""
	sim_number
	"""
	 指令ID                                          
	"""
	instruction_id
	"""
	 操作类型                                        
	"""
	operation_type
	"""
	 内容                                            
	"""
	content
	"""
	 操作时间                                        
	"""
	operation_time
	"""
	 上传时间                                        
	"""
	upload_time
	"""
	 时间戳                                          
	"""
	timestamp
	"""
	 终端ID                                          
	"""
	ternimal_id
	"""
	 是否成功                                        
	"""
	is_success
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driver_fingerprint(distinct_on: [DriverFingerprintSelectColumn!], limit: Int, offset: Int, order_by: [DriverFingerprintOrderBy!], where: DriverFingerprintBoolExp): [DriverFingerprint!]!
	"""
	聚合查询
	"""
	driver_fingerprint_aggregate(distinct_on: [DriverFingerprintSelectColumn!], limit: Int, offset: Int, order_by: [DriverFingerprintOrderBy!], where: DriverFingerprintBoolExp): DriverFingerprintAggregate!
	"""
	主键查询
	"""
	driver_fingerprint_by_pk(id: Bigint!): DriverFingerprint!
	"""
	联合主键查询
	"""
	driver_fingerprint_by_union_pk(driver_fingerprint_id: String!): DriverFingerprint!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_fingerprint(where: DriverFingerprintBoolExp!): DriverFingerprintMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_fingerprint_by_pk(id: Bigint!): DriverFingerprint
	"""
	插入
	"""
	insert_driver_fingerprint(objects: [DriverFingerprintInsertInput!]!): DriverFingerprintMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_fingerprint_one(objects: DriverFingerprintInsertInput!): DriverFingerprint
	"""
	更新
	"""
	update_driver_fingerprint(_inc: DriverFingerprintIncInput, _set: DriverFingerprintSetInput, where: DriverFingerprintBoolExp!): DriverFingerprintMutationResponse
	"""
	根据主键更新
	"""
	update_driver_fingerprint_by_pk(_inc: DriverFingerprintIncInput, _set: DriverFingerprintSetInput, id: Bigint!): DriverFingerprint
	"""
	根据联合主键更新
	"""
	update_driver_fingerprint_by_union_pk(_inc: DriverFingerprintIncInput, _set: DriverFingerprintSetInput, driver_fingerprint_id: String!): DriverFingerprint
	"""
	根据联合主键删除记录
	"""
	delete_driver_fingerprint_by_union_pk(driver_fingerprint_id: String!): DriverFingerprint
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_fingerprint_association.graphqls", Input: `"""
驾驶员指纹关联
"""
type DriverFingerprintAssociation {
	"""
	 按指定方法生成                                             ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用            ( 联合主键                   )
	"""
	driver_fingerprint_association_id: String!
	"""
	 driver_info驾驶员信息表的driver_id                     
	"""
	driver_id: String!
	"""
	 指纹名称                                                   
	"""
	fingerprint_name: String
	"""
	 driver_fingerprint 驾驶员指纹表的driver_fingerprint_id 
	"""
	driver_fingerprint_id: String
	"""
	 图片地址                                                   
	"""
	picture_address: String
	"""
	 是否删除                                                   
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                   
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                     ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                                   
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                     ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                                   
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                     ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "driver_fingerprint_association"
"""
type DriverFingerprintAssociationAggregate {
	aggregate: DriverFingerprintAssociationAggregateFields
}
"""
aggregate fields of "driver_fingerprint_association"
"""
type DriverFingerprintAssociationAggregateFields {
	avg: DriverFingerprintAssociationAvgFields
	count: Int
	max: DriverFingerprintAssociationMaxFields
	min: DriverFingerprintAssociationMinFields
	stddev: DriverFingerprintAssociationStddevFields
	stddev_pop: DriverFingerprintAssociationStddevPopFields
	stddev_samp: DriverFingerprintAssociationStddevSampFields
	sum: DriverFingerprintAssociationSumFields
	var_pop: DriverFingerprintAssociationVarPopFields
	var_samp: DriverFingerprintAssociationVarSampFields
	variance: DriverFingerprintAssociationVarianceFields
}
"""
aggregate avg on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationMaxFields {
	id: Bigint
	driver_fingerprint_association_id: String
	driver_id: String
	fingerprint_name: String
	driver_fingerprint_id: String
	picture_address: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationMinFields {
	id: Bigint
	driver_fingerprint_association_id: String
	driver_id: String
	fingerprint_name: String
	driver_fingerprint_id: String
	picture_address: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "driver_fingerprint_association"
"""
type DriverFingerprintAssociationMutationResponse {
	affected_rows: Int!
	returning: [DriverFingerprintAssociation!]!
}
"""
ordering options when selecting data from "driver_fingerprint_association"
"""
input DriverFingerprintAssociationOrderBy {
	id: OrderBy
	driver_fingerprint_association_id: OrderBy
	driver_id: OrderBy
	fingerprint_name: OrderBy
	driver_fingerprint_id: OrderBy
	picture_address: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_fingerprint_association'.
"""
input DriverFingerprintAssociationBoolExp {
	_and: [DriverFingerprintAssociationBoolExp]
	_not: DriverFingerprintAssociationBoolExp
	_or: [DriverFingerprintAssociationBoolExp]
	id: BigintComparisonExp
	driver_fingerprint_association_id: StringComparisonExp
	driver_id: StringComparisonExp
	fingerprint_name: StringComparisonExp
	driver_fingerprint_id: StringComparisonExp
	picture_address: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driver_fingerprint_association"
"""
input DriverFingerprintAssociationInsertInput {
	driver_fingerprint_association_id: String!
	driver_id: String!
	fingerprint_name: String
	driver_fingerprint_id: String
	picture_address: String
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driver_fingerprint_association"
"""
input DriverFingerprintAssociationIncInput {
	id: Bigint
}
"""
input type for updating data in table "driver_fingerprint_association"
"""
input DriverFingerprintAssociationSetInput {
	id: Bigint
	driver_fingerprint_association_id: String
	driver_id: String
	fingerprint_name: String
	driver_fingerprint_id: String
	picture_address: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DriverFingerprintAssociationSelectColumn {
	"""
	 按指定方法生成                                             ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用            ( 联合主键                   )
	"""
	driver_fingerprint_association_id
	"""
	 driver_info驾驶员信息表的driver_id                     
	"""
	driver_id
	"""
	 指纹名称                                                   
	"""
	fingerprint_name
	"""
	 driver_fingerprint 驾驶员指纹表的driver_fingerprint_id 
	"""
	driver_fingerprint_id
	"""
	 图片地址                                                   
	"""
	picture_address
	"""
	 是否删除                                                   
	"""
	is_deleted
	"""
	 创建时间                                                   
	"""
	created_at
	"""
	 创建人                                                     ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                                   
	"""
	updated_at
	"""
	 修改人                                                     ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                                   
	"""
	deleted_at
	"""
	 删除人                                                     ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driver_fingerprint_association(distinct_on: [DriverFingerprintAssociationSelectColumn!], limit: Int, offset: Int, order_by: [DriverFingerprintAssociationOrderBy!], where: DriverFingerprintAssociationBoolExp): [DriverFingerprintAssociation!]!
	"""
	聚合查询
	"""
	driver_fingerprint_association_aggregate(distinct_on: [DriverFingerprintAssociationSelectColumn!], limit: Int, offset: Int, order_by: [DriverFingerprintAssociationOrderBy!], where: DriverFingerprintAssociationBoolExp): DriverFingerprintAssociationAggregate!
	"""
	主键查询
	"""
	driver_fingerprint_association_by_pk(id: Bigint!): DriverFingerprintAssociation!
	"""
	联合主键查询
	"""
	driver_fingerprint_association_by_union_pk(driver_fingerprint_association_id: String!): DriverFingerprintAssociation!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_fingerprint_association(where: DriverFingerprintAssociationBoolExp!): DriverFingerprintAssociationMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_fingerprint_association_by_pk(id: Bigint!): DriverFingerprintAssociation
	"""
	插入
	"""
	insert_driver_fingerprint_association(objects: [DriverFingerprintAssociationInsertInput!]!): DriverFingerprintAssociationMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_fingerprint_association_one(objects: DriverFingerprintAssociationInsertInput!): DriverFingerprintAssociation
	"""
	更新
	"""
	update_driver_fingerprint_association(_inc: DriverFingerprintAssociationIncInput, _set: DriverFingerprintAssociationSetInput, where: DriverFingerprintAssociationBoolExp!): DriverFingerprintAssociationMutationResponse
	"""
	根据主键更新
	"""
	update_driver_fingerprint_association_by_pk(_inc: DriverFingerprintAssociationIncInput, _set: DriverFingerprintAssociationSetInput, id: Bigint!): DriverFingerprintAssociation
	"""
	根据联合主键更新
	"""
	update_driver_fingerprint_association_by_union_pk(_inc: DriverFingerprintAssociationIncInput, _set: DriverFingerprintAssociationSetInput, driver_fingerprint_association_id: String!): DriverFingerprintAssociation
	"""
	根据联合主键删除记录
	"""
	delete_driver_fingerprint_association_by_union_pk(driver_fingerprint_association_id: String!): DriverFingerprintAssociation
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_identity.graphqls", Input: `"""
驾驶员身份验证信息(各种证件信息，验证状态)
"""
type DriverIdentity {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	identity_id: String!
	"""
	 身份证号码                                      
	"""
	id_card_num: String
	"""
	 身份证出生日期                                  
	"""
	id_card_birthday: Timestamptz
	"""
	 身份证签发机关                                  
	"""
	id_card_sign_government: String
	"""
	 身份证民族                                      
	"""
	id_card_nation: String
	"""
	 身份证有效起始日期                              
	"""
	id_card_start_date: Timestamptz
	"""
	 身份证有效截止日期                              
	"""
	id_card_end_date: Timestamptz
	"""
	 身份证正面照，云存储地址                        
	"""
	id_card_front_pic: String
	"""
	 身份证背面照，云存储地址                        
	"""
	id_card_back_pic: String
	"""
	 身份证住址                                      
	"""
	id_card_address: String
	"""
	 驾驶员手持身份证照片,云储存系统返回的路径       
	"""
	driver_holding_id_photo: String
	"""
	 驾驶员的正面照,云储存系统返回的路径             
	"""
	driver_photo: String
	"""
	 驾驶员签名,云储存系统返回的路径                 
	"""
	driver_signature: String
	"""
	 从业资格证号码                                  
	"""
	occupational_number: String
	"""
	 从业资格证有效期至                              
	"""
	occupational_expire_date: Timestamptz
	"""
	 从业资格证发证机构                              
	"""
	occupational_issuing_authority: String
	"""
	 劳动合同,云储存系统返回的完整劳动合同的图片路径 
	"""
	labor_contract: String
	"""
	 驾驶员驾驶证,云储存系统返回的路径               
	"""
	driver_license_pic: String
	"""
	 驾驶证发证机关                                  
	"""
	driver_license_issuing_authority: String
	"""
	 年审日期（六合一）                              
	"""
	annual_review_date: Timestamptz
	"""
	 换证日期（六合一）                              
	"""
	renewal_date: Timestamptz
	"""
	 累计积分（六合一）                              
	"""
	accumulatived_points: Numeric
	"""
	 清分日期（六合一）                              
	"""
	sorting_date: Timestamptz
	"""
	 准驾车型（六合一）                              ( 准驾车型字典           )
	"""
	quasi_driving_models: Int
	"""
	 驾驶证发证所在地的省份ID                        ( 省份表                     )
	"""
	driver_license_province_id: String
	"""
	 驾驶证发证所在地的城市ID                        ( 城市表                     )
	"""
	driver_license_city_id: String
	"""
	 驾驶证发证所在地的区域ID                        ( 区域表                     )
	"""
	driver_license_district_id: String
	"""
	 驾驶证状态                                      ( 驾驶证状态字典         )
	"""
	driver_license_status: Int
	"""
	 驾驶证初次领证日期                              
	"""
	driver_license_issue_date: Timestamptz
	"""
	 从业时间                                        
	"""
	working_time: Timestamptz
	"""
	 是否审核                                        
	"""
	is_review: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
}
"""
aggregated selection of "driver_identity"
"""
type DriverIdentityAggregate {
	aggregate: DriverIdentityAggregateFields
}
"""
aggregate fields of "driver_identity"
"""
type DriverIdentityAggregateFields {
	avg: DriverIdentityAvgFields
	count: Int
	max: DriverIdentityMaxFields
	min: DriverIdentityMinFields
	stddev: DriverIdentityStddevFields
	stddev_pop: DriverIdentityStddevPopFields
	stddev_samp: DriverIdentityStddevSampFields
	sum: DriverIdentitySumFields
	var_pop: DriverIdentityVarPopFields
	var_samp: DriverIdentityVarSampFields
	variance: DriverIdentityVarianceFields
}
"""
aggregate avg on columns of table "driver_identity"
"""
type DriverIdentityAvgFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate max on columns of table "driver_identity"
"""
type DriverIdentityMaxFields {
	id: Bigint
	identity_id: String
	id_card_num: String
	id_card_birthday: Timestamptz
	id_card_sign_government: String
	id_card_nation: String
	id_card_start_date: Timestamptz
	id_card_end_date: Timestamptz
	id_card_front_pic: String
	id_card_back_pic: String
	id_card_address: String
	driver_holding_id_photo: String
	driver_photo: String
	driver_signature: String
	occupational_number: String
	occupational_expire_date: Timestamptz
	occupational_issuing_authority: String
	labor_contract: String
	driver_license_pic: String
	driver_license_issuing_authority: String
	annual_review_date: Timestamptz
	renewal_date: Timestamptz
	accumulatived_points: Numeric
	sorting_date: Timestamptz
	quasi_driving_models: Int
	driver_license_province_id: String
	driver_license_city_id: String
	driver_license_district_id: String
	driver_license_status: Int
	driver_license_issue_date: Timestamptz
	working_time: Timestamptz
	is_review: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "driver_identity"
"""
type DriverIdentityMinFields {
	id: Bigint
	identity_id: String
	id_card_num: String
	id_card_birthday: Timestamptz
	id_card_sign_government: String
	id_card_nation: String
	id_card_start_date: Timestamptz
	id_card_end_date: Timestamptz
	id_card_front_pic: String
	id_card_back_pic: String
	id_card_address: String
	driver_holding_id_photo: String
	driver_photo: String
	driver_signature: String
	occupational_number: String
	occupational_expire_date: Timestamptz
	occupational_issuing_authority: String
	labor_contract: String
	driver_license_pic: String
	driver_license_issuing_authority: String
	annual_review_date: Timestamptz
	renewal_date: Timestamptz
	accumulatived_points: Numeric
	sorting_date: Timestamptz
	quasi_driving_models: Int
	driver_license_province_id: String
	driver_license_city_id: String
	driver_license_district_id: String
	driver_license_status: Int
	driver_license_issue_date: Timestamptz
	working_time: Timestamptz
	is_review: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "driver_identity"
"""
type DriverIdentityStddevFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate stddev_pop on columns of table "driver_identity"
"""
type DriverIdentityStddevPopFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate stddev_samp on columns of table "driver_identity"
"""
type DriverIdentityStddevSampFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate sum on columns of table "driver_identity"
"""
type DriverIdentitySumFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate var_pop on columns of table "driver_identity"
"""
type DriverIdentityVarPopFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate var_samp on columns of table "driver_identity"
"""
type DriverIdentityVarSampFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
aggregate variance on columns of table "driver_identity"
"""
type DriverIdentityVarianceFields {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
response of any mutation on the table "driver_identity"
"""
type DriverIdentityMutationResponse {
	affected_rows: Int!
	returning: [DriverIdentity!]!
}
"""
ordering options when selecting data from "driver_identity"
"""
input DriverIdentityOrderBy {
	id: OrderBy
	identity_id: OrderBy
	id_card_num: OrderBy
	id_card_birthday: OrderBy
	id_card_sign_government: OrderBy
	id_card_nation: OrderBy
	id_card_start_date: OrderBy
	id_card_end_date: OrderBy
	id_card_front_pic: OrderBy
	id_card_back_pic: OrderBy
	id_card_address: OrderBy
	driver_holding_id_photo: OrderBy
	driver_photo: OrderBy
	driver_signature: OrderBy
	occupational_number: OrderBy
	occupational_expire_date: OrderBy
	occupational_issuing_authority: OrderBy
	labor_contract: OrderBy
	driver_license_pic: OrderBy
	driver_license_issuing_authority: OrderBy
	annual_review_date: OrderBy
	renewal_date: OrderBy
	accumulatived_points: OrderBy
	sorting_date: OrderBy
	quasi_driving_models: OrderBy
	driver_license_province_id: OrderBy
	driver_license_city_id: OrderBy
	driver_license_district_id: OrderBy
	driver_license_status: OrderBy
	driver_license_issue_date: OrderBy
	working_time: OrderBy
	is_review: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_identity'.
"""
input DriverIdentityBoolExp {
	_and: [DriverIdentityBoolExp]
	_not: DriverIdentityBoolExp
	_or: [DriverIdentityBoolExp]
	id: BigintComparisonExp
	identity_id: StringComparisonExp
	id_card_num: StringComparisonExp
	id_card_birthday: TimestamptzComparisonExp
	id_card_sign_government: StringComparisonExp
	id_card_nation: StringComparisonExp
	id_card_start_date: TimestamptzComparisonExp
	id_card_end_date: TimestamptzComparisonExp
	id_card_front_pic: StringComparisonExp
	id_card_back_pic: StringComparisonExp
	id_card_address: StringComparisonExp
	driver_holding_id_photo: StringComparisonExp
	driver_photo: StringComparisonExp
	driver_signature: StringComparisonExp
	occupational_number: StringComparisonExp
	occupational_expire_date: TimestamptzComparisonExp
	occupational_issuing_authority: StringComparisonExp
	labor_contract: StringComparisonExp
	driver_license_pic: StringComparisonExp
	driver_license_issuing_authority: StringComparisonExp
	annual_review_date: TimestamptzComparisonExp
	renewal_date: TimestamptzComparisonExp
	accumulatived_points: NumericComparisonExp
	sorting_date: TimestamptzComparisonExp
	quasi_driving_models: IntComparisonExp
	driver_license_province_id: StringComparisonExp
	driver_license_city_id: StringComparisonExp
	driver_license_district_id: StringComparisonExp
	driver_license_status: IntComparisonExp
	driver_license_issue_date: TimestamptzComparisonExp
	working_time: TimestamptzComparisonExp
	is_review: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "driver_identity"
"""
input DriverIdentityInsertInput {
	identity_id: String!
	id_card_num: String
	id_card_birthday: Timestamptz
	id_card_sign_government: String
	id_card_nation: String
	id_card_start_date: Timestamptz
	id_card_end_date: Timestamptz
	id_card_front_pic: String
	id_card_back_pic: String
	id_card_address: String
	driver_holding_id_photo: String
	driver_photo: String
	driver_signature: String
	occupational_number: String
	occupational_expire_date: Timestamptz
	occupational_issuing_authority: String
	labor_contract: String
	driver_license_pic: String
	driver_license_issuing_authority: String
	annual_review_date: Timestamptz
	renewal_date: Timestamptz
	accumulatived_points: Numeric
	sorting_date: Timestamptz
	quasi_driving_models: Int
	driver_license_province_id: String
	driver_license_city_id: String
	driver_license_district_id: String
	driver_license_status: Int
	driver_license_issue_date: Timestamptz
	working_time: Timestamptz
	is_review: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
input type for incrementing integer column in table "driver_identity"
"""
input DriverIdentityIncInput {
	id: Bigint
	accumulatived_points: Numeric
	quasi_driving_models: Int
	driver_license_status: Int
}
"""
input type for updating data in table "driver_identity"
"""
input DriverIdentitySetInput {
	id: Bigint
	identity_id: String
	id_card_num: String
	id_card_birthday: Timestamptz
	id_card_sign_government: String
	id_card_nation: String
	id_card_start_date: Timestamptz
	id_card_end_date: Timestamptz
	id_card_front_pic: String
	id_card_back_pic: String
	id_card_address: String
	driver_holding_id_photo: String
	driver_photo: String
	driver_signature: String
	occupational_number: String
	occupational_expire_date: Timestamptz
	occupational_issuing_authority: String
	labor_contract: String
	driver_license_pic: String
	driver_license_issuing_authority: String
	annual_review_date: Timestamptz
	renewal_date: Timestamptz
	accumulatived_points: Numeric
	sorting_date: Timestamptz
	quasi_driving_models: Int
	driver_license_province_id: String
	driver_license_city_id: String
	driver_license_district_id: String
	driver_license_status: Int
	driver_license_issue_date: Timestamptz
	working_time: Timestamptz
	is_review: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum DriverIdentitySelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	identity_id
	"""
	 身份证号码                                      
	"""
	id_card_num
	"""
	 身份证出生日期                                  
	"""
	id_card_birthday
	"""
	 身份证签发机关                                  
	"""
	id_card_sign_government
	"""
	 身份证民族                                      
	"""
	id_card_nation
	"""
	 身份证有效起始日期                              
	"""
	id_card_start_date
	"""
	 身份证有效截止日期                              
	"""
	id_card_end_date
	"""
	 身份证正面照，云存储地址                        
	"""
	id_card_front_pic
	"""
	 身份证背面照，云存储地址                        
	"""
	id_card_back_pic
	"""
	 身份证住址                                      
	"""
	id_card_address
	"""
	 驾驶员手持身份证照片,云储存系统返回的路径       
	"""
	driver_holding_id_photo
	"""
	 驾驶员的正面照,云储存系统返回的路径             
	"""
	driver_photo
	"""
	 驾驶员签名,云储存系统返回的路径                 
	"""
	driver_signature
	"""
	 从业资格证号码                                  
	"""
	occupational_number
	"""
	 从业资格证有效期至                              
	"""
	occupational_expire_date
	"""
	 从业资格证发证机构                              
	"""
	occupational_issuing_authority
	"""
	 劳动合同,云储存系统返回的完整劳动合同的图片路径 
	"""
	labor_contract
	"""
	 驾驶员驾驶证,云储存系统返回的路径               
	"""
	driver_license_pic
	"""
	 驾驶证发证机关                                  
	"""
	driver_license_issuing_authority
	"""
	 年审日期（六合一）                              
	"""
	annual_review_date
	"""
	 换证日期（六合一）                              
	"""
	renewal_date
	"""
	 累计积分（六合一）                              
	"""
	accumulatived_points
	"""
	 清分日期（六合一）                              
	"""
	sorting_date
	"""
	 准驾车型（六合一）                              ( 准驾车型字典           )
	"""
	quasi_driving_models
	"""
	 驾驶证发证所在地的省份ID                        ( 省份表                     )
	"""
	driver_license_province_id
	"""
	 驾驶证发证所在地的城市ID                        ( 城市表                     )
	"""
	driver_license_city_id
	"""
	 驾驶证发证所在地的区域ID                        ( 区域表                     )
	"""
	driver_license_district_id
	"""
	 驾驶证状态                                      ( 驾驶证状态字典         )
	"""
	driver_license_status
	"""
	 驾驶证初次领证日期                              
	"""
	driver_license_issue_date
	"""
	 从业时间                                        
	"""
	working_time
	"""
	 是否审核                                        
	"""
	is_review
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
	"""
	 是否删除                                        
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	driver_identity(distinct_on: [DriverIdentitySelectColumn!], limit: Int, offset: Int, order_by: [DriverIdentityOrderBy!], where: DriverIdentityBoolExp): [DriverIdentity!]!
	"""
	聚合查询
	"""
	driver_identity_aggregate(distinct_on: [DriverIdentitySelectColumn!], limit: Int, offset: Int, order_by: [DriverIdentityOrderBy!], where: DriverIdentityBoolExp): DriverIdentityAggregate!
	"""
	主键查询
	"""
	driver_identity_by_pk(id: Bigint!): DriverIdentity!
	"""
	联合主键查询
	"""
	driver_identity_by_union_pk(identity_id: String!): DriverIdentity!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_identity(where: DriverIdentityBoolExp!): DriverIdentityMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_identity_by_pk(id: Bigint!): DriverIdentity
	"""
	插入
	"""
	insert_driver_identity(objects: [DriverIdentityInsertInput!]!): DriverIdentityMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_identity_one(objects: DriverIdentityInsertInput!): DriverIdentity
	"""
	更新
	"""
	update_driver_identity(_inc: DriverIdentityIncInput, _set: DriverIdentitySetInput, where: DriverIdentityBoolExp!): DriverIdentityMutationResponse
	"""
	根据主键更新
	"""
	update_driver_identity_by_pk(_inc: DriverIdentityIncInput, _set: DriverIdentitySetInput, id: Bigint!): DriverIdentity
	"""
	根据联合主键更新
	"""
	update_driver_identity_by_union_pk(_inc: DriverIdentityIncInput, _set: DriverIdentitySetInput, identity_id: String!): DriverIdentity
	"""
	根据联合主键删除记录
	"""
	delete_driver_identity_by_union_pk(identity_id: String!): DriverIdentity
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_identity_info_report.graphqls", Input: `"""
驾驶员身份信息采集上报
"""
type DriverIdentityInfoReport {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	driver_identity_info_report_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	"""
	ic_card_status: Int
	"""
	 操作时间                                        
	"""
	operation_time: Timestamptz
	"""
	 驾驶员姓名                                      
	"""
	driver_name: String
	"""
	 证件号码                                        
	"""
	license_number: String
	"""
	 终端IMEI                                        ( 国际移动设备标识别码       )
	"""
	imel: String
	"""
	 IC卡读取结果                                    ( IC卡读卡字典           )
	"""
	ic_card_reading_result: String
	"""
	 从业资格证编码                                  
	"""
	occupational_number: String
	"""
	 发证机构名称                                    
	"""
	driver_license_name: String
	"""
	 证件有效期                                      
	"""
	license_expire_date: Timestamptz
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "driver_identity_info_report"
"""
type DriverIdentityInfoReportAggregate {
	aggregate: DriverIdentityInfoReportAggregateFields
}
"""
aggregate fields of "driver_identity_info_report"
"""
type DriverIdentityInfoReportAggregateFields {
	avg: DriverIdentityInfoReportAvgFields
	count: Int
	max: DriverIdentityInfoReportMaxFields
	min: DriverIdentityInfoReportMinFields
	stddev: DriverIdentityInfoReportStddevFields
	stddev_pop: DriverIdentityInfoReportStddevPopFields
	stddev_samp: DriverIdentityInfoReportStddevSampFields
	sum: DriverIdentityInfoReportSumFields
	var_pop: DriverIdentityInfoReportVarPopFields
	var_samp: DriverIdentityInfoReportVarSampFields
	variance: DriverIdentityInfoReportVarianceFields
}
"""
aggregate avg on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportAvgFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate max on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportMaxFields {
	id: Bigint
	driver_identity_info_report_id: String
	vehicle_id: String
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportMinFields {
	id: Bigint
	driver_identity_info_report_id: String
	vehicle_id: String
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportStddevFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate stddev_pop on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportStddevPopFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate stddev_samp on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportStddevSampFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate sum on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportSumFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate var_pop on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportVarPopFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate var_samp on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportVarSampFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate variance on columns of table "driver_identity_info_report"
"""
type DriverIdentityInfoReportVarianceFields {
	id: Bigint
	ic_card_status: Int
}
"""
response of any mutation on the table "driver_identity_info_report"
"""
type DriverIdentityInfoReportMutationResponse {
	affected_rows: Int!
	returning: [DriverIdentityInfoReport!]!
}
"""
ordering options when selecting data from "driver_identity_info_report"
"""
input DriverIdentityInfoReportOrderBy {
	id: OrderBy
	driver_identity_info_report_id: OrderBy
	vehicle_id: OrderBy
	ic_card_status: OrderBy
	operation_time: OrderBy
	driver_name: OrderBy
	license_number: OrderBy
	imel: OrderBy
	ic_card_reading_result: OrderBy
	occupational_number: OrderBy
	driver_license_name: OrderBy
	license_expire_date: OrderBy
	registration_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_identity_info_report'.
"""
input DriverIdentityInfoReportBoolExp {
	_and: [DriverIdentityInfoReportBoolExp]
	_not: DriverIdentityInfoReportBoolExp
	_or: [DriverIdentityInfoReportBoolExp]
	id: BigintComparisonExp
	driver_identity_info_report_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	ic_card_status: IntComparisonExp
	operation_time: TimestamptzComparisonExp
	driver_name: StringComparisonExp
	license_number: StringComparisonExp
	imel: StringComparisonExp
	ic_card_reading_result: StringComparisonExp
	occupational_number: StringComparisonExp
	driver_license_name: StringComparisonExp
	license_expire_date: TimestamptzComparisonExp
	registration_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driver_identity_info_report"
"""
input DriverIdentityInfoReportInsertInput {
	driver_identity_info_report_id: String!
	vehicle_id: String!
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driver_identity_info_report"
"""
input DriverIdentityInfoReportIncInput {
	id: Bigint
	ic_card_status: Int
}
"""
input type for updating data in table "driver_identity_info_report"
"""
input DriverIdentityInfoReportSetInput {
	id: Bigint
	driver_identity_info_report_id: String
	vehicle_id: String
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DriverIdentityInfoReportSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	driver_identity_info_report_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	"""
	ic_card_status
	"""
	 操作时间                                        
	"""
	operation_time
	"""
	 驾驶员姓名                                      
	"""
	driver_name
	"""
	 证件号码                                        
	"""
	license_number
	"""
	 终端IMEI                                        ( 国际移动设备标识别码       )
	"""
	imel
	"""
	 IC卡读取结果                                    ( IC卡读卡字典           )
	"""
	ic_card_reading_result
	"""
	 从业资格证编码                                  
	"""
	occupational_number
	"""
	 发证机构名称                                    
	"""
	driver_license_name
	"""
	 证件有效期                                      
	"""
	license_expire_date
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driver_identity_info_report(distinct_on: [DriverIdentityInfoReportSelectColumn!], limit: Int, offset: Int, order_by: [DriverIdentityInfoReportOrderBy!], where: DriverIdentityInfoReportBoolExp): [DriverIdentityInfoReport!]!
	"""
	聚合查询
	"""
	driver_identity_info_report_aggregate(distinct_on: [DriverIdentityInfoReportSelectColumn!], limit: Int, offset: Int, order_by: [DriverIdentityInfoReportOrderBy!], where: DriverIdentityInfoReportBoolExp): DriverIdentityInfoReportAggregate!
	"""
	主键查询
	"""
	driver_identity_info_report_by_pk(id: Bigint!): DriverIdentityInfoReport!
	"""
	联合主键查询
	"""
	driver_identity_info_report_by_union_pk(driver_identity_info_report_id: String!): DriverIdentityInfoReport!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_identity_info_report(where: DriverIdentityInfoReportBoolExp!): DriverIdentityInfoReportMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_identity_info_report_by_pk(id: Bigint!): DriverIdentityInfoReport
	"""
	插入
	"""
	insert_driver_identity_info_report(objects: [DriverIdentityInfoReportInsertInput!]!): DriverIdentityInfoReportMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_identity_info_report_one(objects: DriverIdentityInfoReportInsertInput!): DriverIdentityInfoReport
	"""
	更新
	"""
	update_driver_identity_info_report(_inc: DriverIdentityInfoReportIncInput, _set: DriverIdentityInfoReportSetInput, where: DriverIdentityInfoReportBoolExp!): DriverIdentityInfoReportMutationResponse
	"""
	根据主键更新
	"""
	update_driver_identity_info_report_by_pk(_inc: DriverIdentityInfoReportIncInput, _set: DriverIdentityInfoReportSetInput, id: Bigint!): DriverIdentityInfoReport
	"""
	根据联合主键更新
	"""
	update_driver_identity_info_report_by_union_pk(_inc: DriverIdentityInfoReportIncInput, _set: DriverIdentityInfoReportSetInput, driver_identity_info_report_id: String!): DriverIdentityInfoReport
	"""
	根据联合主键删除记录
	"""
	delete_driver_identity_info_report_by_union_pk(driver_identity_info_report_id: String!): DriverIdentityInfoReport
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_info.graphqls", Input: `"""
驾驶员信息表
"""
type DriverInfo {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	driver_id: String!
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id: String
	"""
	 所在部门id                                      ( department 部门信息表                                    )
	"""
	department_id: String
	"""
	 驾驶员身份验证信息ID                            ( driver_identity表的driver_identity_id                    )
	"""
	driver_identity_id: String
	"""
	 驾驶员姓名                                      
	"""
	driver_name: String
	"""
	 手机号码                                        
	"""
	telephone: String
	"""
	 性别                                            ( 性别字典                                                 )
	"""
	sex: Int
	"""
	 档案编号(后6位)                                 
	"""
	files_number: String
	"""
	 联系地址                                        
	"""
	contact_address: String
	"""
	 邮寄地址                                        
	"""
	mailing_address: String
	"""
	 是否提交                                        ( 用于标志驾驶员资料是否处于确定状态。未确定状态的驾驶员信息在系统上除驾驶员管理外的功能中都查不到。 )
	"""
	is_submit: Boolean
	"""
	 提交内容                                        
	"""
	submit_content: String
	"""
	 提交时间                                        
	"""
	submit_at: Timestamptz
	"""
	 提交人                                          ( system_user表的user_id                                       )
	"""
	submit_by: String
	"""
	 是否手动录入                                    ( 驾驶员资料分为使用身份证读卡器读取身份证自动录入资料和手动填写资料 )
	"""
	is_manual_input: Boolean
	"""
	 是否录入                                        
	"""
	is_input: Boolean
	"""
	 录入时间                                        
	"""
	input_at: Timestamptz
	"""
	 录入人                                          ( system_user表的user_id                                   )
	"""
	input_by: String
	"""
	 是否校验数据                                    ( 该字段代表是否用于校验驾驶员信息，未正式录入系统，但会同步到公安内容，用于查询驾驶员的违章数据。 )
	"""
	is_check_data: Boolean
	"""
	 检验时间                                        
	"""
	check_at: Timestamptz
	"""
	 校验人                                          ( system_user表的user_id                                   )
	"""
	check_by: String
	"""
	 驾驶员信息同步内网反馈信息                      ( 驾驶员信息同步内网反馈信息。驾驶员信息同步到公安内网后内网的反馈内容，如档案编号填写错误会反馈档案编号后六位不正确 )
	"""
	remark_in: String
	"""
	 内网更新时间                                    
	"""
	update_time_in: Timestamptz
	"""
	 是否通过短信验证                                
	"""
	is_check_sms: Boolean
	"""
	 备注                                            
	"""
	remarks: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 代理商                                          ( enterprise_info表的enterprise_id                         )
	"""
	agent: String
	"""
	 运营商                                          ( enterprise_info表的enterprise_id                         )
	"""
	operator: String
	"""
	 是否黑名单                                      ( false                                                        )
	"""
	is_blacklist: Boolean
	"""
	 黑名单截止日期                                  
	"""
	blacklist_deadline: Timestamptz
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "driver_info"
"""
type DriverInfoAggregate {
	aggregate: DriverInfoAggregateFields
}
"""
aggregate fields of "driver_info"
"""
type DriverInfoAggregateFields {
	avg: DriverInfoAvgFields
	count: Int
	max: DriverInfoMaxFields
	min: DriverInfoMinFields
	stddev: DriverInfoStddevFields
	stddev_pop: DriverInfoStddevPopFields
	stddev_samp: DriverInfoStddevSampFields
	sum: DriverInfoSumFields
	var_pop: DriverInfoVarPopFields
	var_samp: DriverInfoVarSampFields
	variance: DriverInfoVarianceFields
}
"""
aggregate avg on columns of table "driver_info"
"""
type DriverInfoAvgFields {
	id: Bigint
	sex: Int
}
"""
aggregate max on columns of table "driver_info"
"""
type DriverInfoMaxFields {
	id: Bigint
	driver_id: String
	enterprise_id: String
	department_id: String
	driver_identity_id: String
	driver_name: String
	telephone: String
	sex: Int
	files_number: String
	contact_address: String
	mailing_address: String
	is_submit: Boolean
	submit_content: String
	submit_at: Timestamptz
	submit_by: String
	is_manual_input: Boolean
	is_input: Boolean
	input_at: Timestamptz
	input_by: String
	is_check_data: Boolean
	check_at: Timestamptz
	check_by: String
	remark_in: String
	update_time_in: Timestamptz
	is_check_sms: Boolean
	remarks: String
	is_deleted: Boolean
	agent: String
	operator: String
	is_blacklist: Boolean
	blacklist_deadline: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driver_info"
"""
type DriverInfoMinFields {
	id: Bigint
	driver_id: String
	enterprise_id: String
	department_id: String
	driver_identity_id: String
	driver_name: String
	telephone: String
	sex: Int
	files_number: String
	contact_address: String
	mailing_address: String
	is_submit: Boolean
	submit_content: String
	submit_at: Timestamptz
	submit_by: String
	is_manual_input: Boolean
	is_input: Boolean
	input_at: Timestamptz
	input_by: String
	is_check_data: Boolean
	check_at: Timestamptz
	check_by: String
	remark_in: String
	update_time_in: Timestamptz
	is_check_sms: Boolean
	remarks: String
	is_deleted: Boolean
	agent: String
	operator: String
	is_blacklist: Boolean
	blacklist_deadline: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driver_info"
"""
type DriverInfoStddevFields {
	id: Bigint
	sex: Int
}
"""
aggregate stddev_pop on columns of table "driver_info"
"""
type DriverInfoStddevPopFields {
	id: Bigint
	sex: Int
}
"""
aggregate stddev_samp on columns of table "driver_info"
"""
type DriverInfoStddevSampFields {
	id: Bigint
	sex: Int
}
"""
aggregate sum on columns of table "driver_info"
"""
type DriverInfoSumFields {
	id: Bigint
	sex: Int
}
"""
aggregate var_pop on columns of table "driver_info"
"""
type DriverInfoVarPopFields {
	id: Bigint
	sex: Int
}
"""
aggregate var_samp on columns of table "driver_info"
"""
type DriverInfoVarSampFields {
	id: Bigint
	sex: Int
}
"""
aggregate variance on columns of table "driver_info"
"""
type DriverInfoVarianceFields {
	id: Bigint
	sex: Int
}
"""
response of any mutation on the table "driver_info"
"""
type DriverInfoMutationResponse {
	affected_rows: Int!
	returning: [DriverInfo!]!
}
"""
ordering options when selecting data from "driver_info"
"""
input DriverInfoOrderBy {
	id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	department_id: OrderBy
	driver_identity_id: OrderBy
	driver_name: OrderBy
	telephone: OrderBy
	sex: OrderBy
	files_number: OrderBy
	contact_address: OrderBy
	mailing_address: OrderBy
	is_submit: OrderBy
	submit_content: OrderBy
	submit_at: OrderBy
	submit_by: OrderBy
	is_manual_input: OrderBy
	is_input: OrderBy
	input_at: OrderBy
	input_by: OrderBy
	is_check_data: OrderBy
	check_at: OrderBy
	check_by: OrderBy
	remark_in: OrderBy
	update_time_in: OrderBy
	is_check_sms: OrderBy
	remarks: OrderBy
	is_deleted: OrderBy
	agent: OrderBy
	operator: OrderBy
	is_blacklist: OrderBy
	blacklist_deadline: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_info'.
"""
input DriverInfoBoolExp {
	_and: [DriverInfoBoolExp]
	_not: DriverInfoBoolExp
	_or: [DriverInfoBoolExp]
	id: BigintComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	department_id: StringComparisonExp
	driver_identity_id: StringComparisonExp
	driver_name: StringComparisonExp
	telephone: StringComparisonExp
	sex: IntComparisonExp
	files_number: StringComparisonExp
	contact_address: StringComparisonExp
	mailing_address: StringComparisonExp
	is_submit: BooleanComparisonExp
	submit_content: StringComparisonExp
	submit_at: TimestamptzComparisonExp
	submit_by: StringComparisonExp
	is_manual_input: BooleanComparisonExp
	is_input: BooleanComparisonExp
	input_at: TimestamptzComparisonExp
	input_by: StringComparisonExp
	is_check_data: BooleanComparisonExp
	check_at: TimestamptzComparisonExp
	check_by: StringComparisonExp
	remark_in: StringComparisonExp
	update_time_in: TimestamptzComparisonExp
	is_check_sms: BooleanComparisonExp
	remarks: StringComparisonExp
	is_deleted: BooleanComparisonExp
	agent: StringComparisonExp
	operator: StringComparisonExp
	is_blacklist: BooleanComparisonExp
	blacklist_deadline: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driver_info"
"""
input DriverInfoInsertInput {
	driver_id: String!
	enterprise_id: String
	department_id: String
	driver_identity_id: String
	driver_name: String
	telephone: String
	sex: Int
	files_number: String
	contact_address: String
	mailing_address: String
	is_submit: Boolean
	submit_content: String
	submit_at: Timestamptz
	submit_by: String
	is_manual_input: Boolean
	is_input: Boolean
	input_at: Timestamptz
	input_by: String
	is_check_data: Boolean
	check_at: Timestamptz
	check_by: String
	remark_in: String
	update_time_in: Timestamptz
	is_check_sms: Boolean
	remarks: String
	is_deleted: Boolean
	agent: String
	operator: String
	is_blacklist: Boolean
	blacklist_deadline: Timestamptz
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driver_info"
"""
input DriverInfoIncInput {
	id: Bigint
	sex: Int
}
"""
input type for updating data in table "driver_info"
"""
input DriverInfoSetInput {
	id: Bigint
	driver_id: String
	enterprise_id: String
	department_id: String
	driver_identity_id: String
	driver_name: String
	telephone: String
	sex: Int
	files_number: String
	contact_address: String
	mailing_address: String
	is_submit: Boolean
	submit_content: String
	submit_at: Timestamptz
	submit_by: String
	is_manual_input: Boolean
	is_input: Boolean
	input_at: Timestamptz
	input_by: String
	is_check_data: Boolean
	check_at: Timestamptz
	check_by: String
	remark_in: String
	update_time_in: Timestamptz
	is_check_sms: Boolean
	remarks: String
	is_deleted: Boolean
	agent: String
	operator: String
	is_blacklist: Boolean
	blacklist_deadline: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DriverInfoSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	driver_id
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id
	"""
	 所在部门id                                      ( department 部门信息表                                    )
	"""
	department_id
	"""
	 驾驶员身份验证信息ID                            ( driver_identity表的driver_identity_id                    )
	"""
	driver_identity_id
	"""
	 驾驶员姓名                                      
	"""
	driver_name
	"""
	 手机号码                                        
	"""
	telephone
	"""
	 性别                                            ( 性别字典                                                 )
	"""
	sex
	"""
	 档案编号(后6位)                                 
	"""
	files_number
	"""
	 联系地址                                        
	"""
	contact_address
	"""
	 邮寄地址                                        
	"""
	mailing_address
	"""
	 是否提交                                        ( 用于标志驾驶员资料是否处于确定状态。未确定状态的驾驶员信息在系统上除驾驶员管理外的功能中都查不到。 )
	"""
	is_submit
	"""
	 提交内容                                        
	"""
	submit_content
	"""
	 提交时间                                        
	"""
	submit_at
	"""
	 提交人                                          ( system_user表的user_id                                       )
	"""
	submit_by
	"""
	 是否手动录入                                    ( 驾驶员资料分为使用身份证读卡器读取身份证自动录入资料和手动填写资料 )
	"""
	is_manual_input
	"""
	 是否录入                                        
	"""
	is_input
	"""
	 录入时间                                        
	"""
	input_at
	"""
	 录入人                                          ( system_user表的user_id                                   )
	"""
	input_by
	"""
	 是否校验数据                                    ( 该字段代表是否用于校验驾驶员信息，未正式录入系统，但会同步到公安内容，用于查询驾驶员的违章数据。 )
	"""
	is_check_data
	"""
	 检验时间                                        
	"""
	check_at
	"""
	 校验人                                          ( system_user表的user_id                                   )
	"""
	check_by
	"""
	 驾驶员信息同步内网反馈信息                      ( 驾驶员信息同步内网反馈信息。驾驶员信息同步到公安内网后内网的反馈内容，如档案编号填写错误会反馈档案编号后六位不正确 )
	"""
	remark_in
	"""
	 内网更新时间                                    
	"""
	update_time_in
	"""
	 是否通过短信验证                                
	"""
	is_check_sms
	"""
	 备注                                            
	"""
	remarks
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 代理商                                          ( enterprise_info表的enterprise_id                         )
	"""
	agent
	"""
	 运营商                                          ( enterprise_info表的enterprise_id                         )
	"""
	operator
	"""
	 是否黑名单                                      ( false                                                        )
	"""
	is_blacklist
	"""
	 黑名单截止日期                                  
	"""
	blacklist_deadline
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driver_info(distinct_on: [DriverInfoSelectColumn!], limit: Int, offset: Int, order_by: [DriverInfoOrderBy!], where: DriverInfoBoolExp): [DriverInfo!]!
	"""
	聚合查询
	"""
	driver_info_aggregate(distinct_on: [DriverInfoSelectColumn!], limit: Int, offset: Int, order_by: [DriverInfoOrderBy!], where: DriverInfoBoolExp): DriverInfoAggregate!
	"""
	主键查询
	"""
	driver_info_by_pk(id: Bigint!): DriverInfo!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_info(where: DriverInfoBoolExp!): DriverInfoMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_info_by_pk(id: Bigint!): DriverInfo
	"""
	插入
	"""
	insert_driver_info(objects: [DriverInfoInsertInput!]!): DriverInfoMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_info_one(objects: DriverInfoInsertInput!): DriverInfo
	"""
	更新
	"""
	update_driver_info(_inc: DriverInfoIncInput, _set: DriverInfoSetInput, where: DriverInfoBoolExp!): DriverInfoMutationResponse
	"""
	根据主键更新
	"""
	update_driver_info_by_pk(_inc: DriverInfoIncInput, _set: DriverInfoSetInput, id: Bigint!): DriverInfo
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driving_license_registration_inspection.graphqls", Input: `"""
驾驶证年检登记
"""
type DrivingLicenseRegistrationInspection {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	driver_id_info_report_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	"""
	ic_card_status: Int
	"""
	 操作时间                                        
	"""
	operation_time: Timestamptz
	"""
	 驾驶员姓名                                      
	"""
	driver_name: String
	"""
	 证件号码                                        
	"""
	license_number: String
	"""
	 终端IMEI                                        ( 国际移动设备标识别码       )
	"""
	imel: String
	"""
	 IC卡读取结果                                    ( IC卡读卡字典           )
	"""
	ic_card_reading_result: String
	"""
	 从业资格证编码                                  
	"""
	occupational_number: String
	"""
	 发证机构名称                                    
	"""
	driver_license_name: String
	"""
	 证件有效期                                      
	"""
	license_expire_date: Timestamptz
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionAggregate {
	aggregate: DrivingLicenseRegistrationInspectionAggregateFields
}
"""
aggregate fields of "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionAggregateFields {
	avg: DrivingLicenseRegistrationInspectionAvgFields
	count: Int
	max: DrivingLicenseRegistrationInspectionMaxFields
	min: DrivingLicenseRegistrationInspectionMinFields
	stddev: DrivingLicenseRegistrationInspectionStddevFields
	stddev_pop: DrivingLicenseRegistrationInspectionStddevPopFields
	stddev_samp: DrivingLicenseRegistrationInspectionStddevSampFields
	sum: DrivingLicenseRegistrationInspectionSumFields
	var_pop: DrivingLicenseRegistrationInspectionVarPopFields
	var_samp: DrivingLicenseRegistrationInspectionVarSampFields
	variance: DrivingLicenseRegistrationInspectionVarianceFields
}
"""
aggregate avg on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionAvgFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate max on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionMaxFields {
	id: Bigint
	driver_id_info_report_id: String
	vehicle_id: String
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionMinFields {
	id: Bigint
	driver_id_info_report_id: String
	vehicle_id: String
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionStddevFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate stddev_pop on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionStddevPopFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate stddev_samp on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionStddevSampFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate sum on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionSumFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate var_pop on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionVarPopFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate var_samp on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionVarSampFields {
	id: Bigint
	ic_card_status: Int
}
"""
aggregate variance on columns of table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionVarianceFields {
	id: Bigint
	ic_card_status: Int
}
"""
response of any mutation on the table "driving_license_registration_inspection"
"""
type DrivingLicenseRegistrationInspectionMutationResponse {
	affected_rows: Int!
	returning: [DrivingLicenseRegistrationInspection!]!
}
"""
ordering options when selecting data from "driving_license_registration_inspection"
"""
input DrivingLicenseRegistrationInspectionOrderBy {
	id: OrderBy
	driver_id_info_report_id: OrderBy
	vehicle_id: OrderBy
	ic_card_status: OrderBy
	operation_time: OrderBy
	driver_name: OrderBy
	license_number: OrderBy
	imel: OrderBy
	ic_card_reading_result: OrderBy
	occupational_number: OrderBy
	driver_license_name: OrderBy
	license_expire_date: OrderBy
	registration_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driving_license_registration_inspection'.
"""
input DrivingLicenseRegistrationInspectionBoolExp {
	_and: [DrivingLicenseRegistrationInspectionBoolExp]
	_not: DrivingLicenseRegistrationInspectionBoolExp
	_or: [DrivingLicenseRegistrationInspectionBoolExp]
	id: BigintComparisonExp
	driver_id_info_report_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	ic_card_status: IntComparisonExp
	operation_time: TimestamptzComparisonExp
	driver_name: StringComparisonExp
	license_number: StringComparisonExp
	imel: StringComparisonExp
	ic_card_reading_result: StringComparisonExp
	occupational_number: StringComparisonExp
	driver_license_name: StringComparisonExp
	license_expire_date: TimestamptzComparisonExp
	registration_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "driving_license_registration_inspection"
"""
input DrivingLicenseRegistrationInspectionInsertInput {
	driver_id_info_report_id: String!
	vehicle_id: String!
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "driving_license_registration_inspection"
"""
input DrivingLicenseRegistrationInspectionIncInput {
	id: Bigint
	ic_card_status: Int
}
"""
input type for updating data in table "driving_license_registration_inspection"
"""
input DrivingLicenseRegistrationInspectionSetInput {
	id: Bigint
	driver_id_info_report_id: String
	vehicle_id: String
	ic_card_status: Int
	operation_time: Timestamptz
	driver_name: String
	license_number: String
	imel: String
	ic_card_reading_result: String
	occupational_number: String
	driver_license_name: String
	license_expire_date: Timestamptz
	registration_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DrivingLicenseRegistrationInspectionSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	driver_id_info_report_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	"""
	ic_card_status
	"""
	 操作时间                                        
	"""
	operation_time
	"""
	 驾驶员姓名                                      
	"""
	driver_name
	"""
	 证件号码                                        
	"""
	license_number
	"""
	 终端IMEI                                        ( 国际移动设备标识别码       )
	"""
	imel
	"""
	 IC卡读取结果                                    ( IC卡读卡字典           )
	"""
	ic_card_reading_result
	"""
	 从业资格证编码                                  
	"""
	occupational_number
	"""
	 发证机构名称                                    
	"""
	driver_license_name
	"""
	 证件有效期                                      
	"""
	license_expire_date
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	driving_license_registration_inspection(distinct_on: [DrivingLicenseRegistrationInspectionSelectColumn!], limit: Int, offset: Int, order_by: [DrivingLicenseRegistrationInspectionOrderBy!], where: DrivingLicenseRegistrationInspectionBoolExp): [DrivingLicenseRegistrationInspection!]!
	"""
	聚合查询
	"""
	driving_license_registration_inspection_aggregate(distinct_on: [DrivingLicenseRegistrationInspectionSelectColumn!], limit: Int, offset: Int, order_by: [DrivingLicenseRegistrationInspectionOrderBy!], where: DrivingLicenseRegistrationInspectionBoolExp): DrivingLicenseRegistrationInspectionAggregate!
	"""
	主键查询
	"""
	driving_license_registration_inspection_by_pk(id: Bigint!): DrivingLicenseRegistrationInspection!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driving_license_registration_inspection(where: DrivingLicenseRegistrationInspectionBoolExp!): DrivingLicenseRegistrationInspectionMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driving_license_registration_inspection_by_pk(id: Bigint!): DrivingLicenseRegistrationInspection
	"""
	插入
	"""
	insert_driving_license_registration_inspection(objects: [DrivingLicenseRegistrationInspectionInsertInput!]!): DrivingLicenseRegistrationInspectionMutationResponse
	"""
	插入一条记录
	"""
	insert_driving_license_registration_inspection_one(objects: DrivingLicenseRegistrationInspectionInsertInput!): DrivingLicenseRegistrationInspection
	"""
	更新
	"""
	update_driving_license_registration_inspection(_inc: DrivingLicenseRegistrationInspectionIncInput, _set: DrivingLicenseRegistrationInspectionSetInput, where: DrivingLicenseRegistrationInspectionBoolExp!): DrivingLicenseRegistrationInspectionMutationResponse
	"""
	根据主键更新
	"""
	update_driving_license_registration_inspection_by_pk(_inc: DrivingLicenseRegistrationInspectionIncInput, _set: DrivingLicenseRegistrationInspectionSetInput, id: Bigint!): DrivingLicenseRegistrationInspection
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_driver_fingerprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverFingerprintBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverFingerprintBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_fingerprint_association_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverFingerprintAssociationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverFingerprintAssociationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_fingerprint_association_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_fingerprint_association_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_fingerprint_association_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_fingerprint_association_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_fingerprint_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_fingerprint_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_fingerprint_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_fingerprint_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverIdentityBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["identity_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identity_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_info_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverIdentityInfoReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverIdentityInfoReportBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_info_report_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_identity_info_report_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_identity_info_report_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_identity_info_report_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driving_license_registration_inspection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DrivingLicenseRegistrationInspectionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDrivingLicenseRegistrationInspectionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driving_license_registration_inspection_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_fingerprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverFingerprintInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverFingerprintInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_fingerprint_association_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverFingerprintAssociationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverFingerprintAssociationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_fingerprint_association_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverFingerprintAssociationInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverFingerprintAssociationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_fingerprint_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverFingerprintInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverFingerprintInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverIdentityInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverIdentityInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_identity_info_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverIdentityInfoReportInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverIdentityInfoReportInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_identity_info_report_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverIdentityInfoReportInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverIdentityInfoReportInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_identity_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverIdentityInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverIdentityInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driving_license_registration_inspection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DrivingLicenseRegistrationInspectionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDrivingLicenseRegistrationInspectionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driving_license_registration_inspection_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DrivingLicenseRegistrationInspectionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDrivingLicenseRegistrationInspectionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_fingerprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverFingerprintIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverFingerprintIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverFingerprintSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverFingerprintSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverFingerprintBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverFingerprintBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_fingerprint_association_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverFingerprintAssociationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverFingerprintAssociationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverFingerprintAssociationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverFingerprintAssociationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverFingerprintAssociationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverFingerprintAssociationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_fingerprint_association_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverFingerprintAssociationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverFingerprintAssociationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverFingerprintAssociationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverFingerprintAssociationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_fingerprint_association_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverFingerprintAssociationIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverFingerprintAssociationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverFingerprintAssociationSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverFingerprintAssociationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["driver_fingerprint_association_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_fingerprint_association_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_fingerprint_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverFingerprintIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverFingerprintIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverFingerprintSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverFingerprintSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_fingerprint_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverFingerprintIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverFingerprintIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverFingerprintSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverFingerprintSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["driver_fingerprint_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_fingerprint_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverIdentityIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentitySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverIdentitySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverIdentityBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverIdentityIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentitySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverIdentitySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverIdentityIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentitySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverIdentitySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["identity_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identity_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_info_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityInfoReportIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverIdentityInfoReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentityInfoReportSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverIdentityInfoReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverIdentityInfoReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverIdentityInfoReportBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_info_report_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityInfoReportIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverIdentityInfoReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentityInfoReportSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverIdentityInfoReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_identity_info_report_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverIdentityInfoReportIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverIdentityInfoReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverIdentityInfoReportSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverIdentityInfoReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["driver_identity_info_report_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_identity_info_report_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driving_license_registration_inspection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DrivingLicenseRegistrationInspectionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODrivingLicenseRegistrationInspectionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DrivingLicenseRegistrationInspectionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODrivingLicenseRegistrationInspectionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DrivingLicenseRegistrationInspectionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDrivingLicenseRegistrationInspectionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driving_license_registration_inspection_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DrivingLicenseRegistrationInspectionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODrivingLicenseRegistrationInspectionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DrivingLicenseRegistrationInspectionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODrivingLicenseRegistrationInspectionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverFingerprintSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverFingerprintSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverFingerprintOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverFingerprintOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverFingerprintBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverFingerprintBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverFingerprintSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverFingerprintSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverFingerprintOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverFingerprintOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverFingerprintBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverFingerprintBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_association_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverFingerprintAssociationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverFingerprintAssociationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverFingerprintAssociationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverFingerprintAssociationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverFingerprintAssociationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverFingerprintAssociationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_association_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverFingerprintAssociationSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverFingerprintAssociationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverFingerprintAssociationOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverFingerprintAssociationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverFingerprintAssociationBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverFingerprintAssociationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_association_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_association_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_fingerprint_association_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_fingerprint_association_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_fingerprint_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_fingerprint_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_fingerprint_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverIdentitySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverIdentityOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverIdentityBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentitySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverIdentitySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverIdentityOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverIdentityBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["identity_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identity_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_info_report_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentityInfoReportSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverIdentityInfoReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityInfoReportOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverIdentityInfoReportOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityInfoReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverIdentityInfoReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_info_report_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverIdentityInfoReportSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverIdentityInfoReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverIdentityInfoReportOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverIdentityInfoReportOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverIdentityInfoReportBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverIdentityInfoReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_info_report_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_identity_info_report_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["driver_identity_info_report_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["driver_identity_info_report_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driving_license_registration_inspection_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLicenseRegistrationInspectionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODrivingLicenseRegistrationInspectionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DrivingLicenseRegistrationInspectionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODrivingLicenseRegistrationInspectionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DrivingLicenseRegistrationInspectionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driving_license_registration_inspection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLicenseRegistrationInspectionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODrivingLicenseRegistrationInspectionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DrivingLicenseRegistrationInspectionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODrivingLicenseRegistrationInspectionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DrivingLicenseRegistrationInspectionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driving_license_registration_inspection_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DriverFingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_driver_fingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_driver_name(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_signature(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_fingerprint_name(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FingerprintName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_sim_number(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_instruction_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstructionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_operation_type(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_content(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_operation_time(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_upload_time(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_timestamp(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_ternimal_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TernimalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_is_success(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprint_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAggregateFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAvgFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintMaxFields)
	fc.Result = res
	return ec.marshalODriverFingerprintMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintMinFields)
	fc.Result = res
	return ec.marshalODriverFingerprintMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintStddevFields)
	fc.Result = res
	return ec.marshalODriverFingerprintStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintStddevPopFields)
	fc.Result = res
	return ec.marshalODriverFingerprintStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintStddevSampFields)
	fc.Result = res
	return ec.marshalODriverFingerprintStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintSumFields)
	fc.Result = res
	return ec.marshalODriverFingerprintSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintVarPopFields)
	fc.Result = res
	return ec.marshalODriverFingerprintVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintVarSampFields)
	fc.Result = res
	return ec.marshalODriverFingerprintVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintVarianceFields)
	fc.Result = res
	return ec.marshalODriverFingerprintVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_driver_fingerprint_association_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintAssociationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_fingerprint_name(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FingerprintName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_driver_fingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_picture_address(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociation_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverFingerprintAssociation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationAggregateFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationAvgFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationMaxFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationMinFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationStddevFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationStddevPopFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationStddevSampFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationSumFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationVarPopFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationVarSampFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationVarianceFields)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_driver_fingerprint_association_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintAssociationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_fingerprint_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FingerprintName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_driver_fingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_driver_fingerprint_association_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintAssociationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_fingerprint_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FingerprintName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_driver_fingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_picture_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PictureAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalNDriverFingerprintAssociation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAssociationVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAssociationVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAssociationVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintAvgFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_driver_fingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_fingerprint_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FingerprintName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_instruction_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstructionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_ternimal_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TernimalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_is_success(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_driver_fingerprint_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverFingerprintID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Signature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_fingerprint_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FingerprintName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_instruction_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstructionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_ternimal_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TernimalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_is_success(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalNDriverFingerprint2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintStddevFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintStddevPopFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintStddevSampFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintSumFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintVarPopFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintVarSampFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverFingerprintVarianceFields_operation_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverFingerprintVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverFingerprintVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_identity_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_working_time(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_is_review(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentity_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityAggregateFields)
	fc.Result = res
	return ec.marshalODriverIdentityAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityAvgFields)
	fc.Result = res
	return ec.marshalODriverIdentityAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMaxFields)
	fc.Result = res
	return ec.marshalODriverIdentityMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMinFields)
	fc.Result = res
	return ec.marshalODriverIdentityMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityStddevFields)
	fc.Result = res
	return ec.marshalODriverIdentityStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityStddevPopFields)
	fc.Result = res
	return ec.marshalODriverIdentityStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityStddevSampFields)
	fc.Result = res
	return ec.marshalODriverIdentityStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentitySumFields)
	fc.Result = res
	return ec.marshalODriverIdentitySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityVarPopFields)
	fc.Result = res
	return ec.marshalODriverIdentityVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityVarSampFields)
	fc.Result = res
	return ec.marshalODriverIdentityVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityVarianceFields)
	fc.Result = res
	return ec.marshalODriverIdentityVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAvgFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAvgFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityAvgFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_driver_identity_info_report_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityInfoReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_operation_time(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_driver_name(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_license_number(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_imel(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_ic_card_reading_result(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardReadingResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_driver_license_name(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_license_expire_date(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReport_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverIdentityInfoReport) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReport",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportAggregateFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportAvgFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportMaxFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportMinFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportStddevFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportStddevPopFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportStddevSampFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportSumFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportVarPopFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportVarSampFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportVarianceFields)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportAvgFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_driver_identity_info_report_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityInfoReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_license_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_ic_card_reading_result(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardReadingResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_driver_license_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_license_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_driver_identity_info_report_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityInfoReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_license_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_ic_card_reading_result(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardReadingResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_driver_license_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_license_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalNDriverIdentityInfoReport2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReportᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportStddevFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportStddevPopFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportStddevSampFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportSumFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportVarPopFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportVarSampFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityInfoReportVarianceFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityInfoReportVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityInfoReportVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_is_review(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_birthday(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBirthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_sign_government(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardSignGovernment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_nation(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_start_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_end_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_front_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardFrontPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_back_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardBackPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_id_card_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_holding_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverHoldingIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_photo(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_signature(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSignature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_occupational_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_occupational_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_labor_contract(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaborContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_issuing_authority(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssuingAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_annual_review_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_renewal_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_sorting_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortingDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseCityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_driver_license_issue_date(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseIssueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_working_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_is_review(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalNDriverIdentity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevPopFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevPopFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevPopFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevSampFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevSampFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityStddevSampFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentitySumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentitySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentitySumFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentitySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentitySumFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentitySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentitySumFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentitySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentitySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarPopFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarPopFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarPopFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarSampFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarSampFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarSampFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarianceFields_accumulatived_points(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccumulativedPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarianceFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverIdentityVarianceFields_driver_license_status(ctx context.Context, field graphql.CollectedField, obj *model.DriverIdentityVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverIdentityVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_driver_name(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_telephone(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_sex(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_files_number(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_contact_address(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_submit(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_submit_content(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_submit_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_submit_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_manual_input(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManualInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_input(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_input_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_input_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_check_data(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_check_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_check_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_remark_in(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_check_sms(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_agent(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_operator(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_is_blacklist(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlacklist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_blacklist_deadline(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistDeadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfo_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoAggregateFields)
	fc.Result = res
	return ec.marshalODriverInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoAvgFields)
	fc.Result = res
	return ec.marshalODriverInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMaxFields)
	fc.Result = res
	return ec.marshalODriverInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMinFields)
	fc.Result = res
	return ec.marshalODriverInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoStddevFields)
	fc.Result = res
	return ec.marshalODriverInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoStddevPopFields)
	fc.Result = res
	return ec.marshalODriverInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoStddevSampFields)
	fc.Result = res
	return ec.marshalODriverInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoSumFields)
	fc.Result = res
	return ec.marshalODriverInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoVarPopFields)
	fc.Result = res
	return ec.marshalODriverInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoVarSampFields)
	fc.Result = res
	return ec.marshalODriverInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoVarianceFields)
	fc.Result = res
	return ec.marshalODriverInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoAvgFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_submit(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_manual_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManualInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_check_data(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_check_sms(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_is_blacklist(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlacklist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_blacklist_deadline(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistDeadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_driver_identity_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_files_number(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilesNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_contact_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_mailing_address(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MailingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_submit(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_submit_content(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_submit_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_submit_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_manual_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsManualInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_input(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_input_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_input_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_check_data(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_check_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_check_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_remark_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemarkIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_check_sms(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheckSms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_agent(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_is_blacklist(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlacklist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_blacklist_deadline(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistDeadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoStddevFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoStddevPopFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoStddevSampFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoSumFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoVarPopFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoVarSampFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverInfoVarianceFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_driver_id_info_report_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIDInfoReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_operation_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_driver_name(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_license_number(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_imel(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_ic_card_reading_result(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardReadingResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_driver_license_name(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_license_expire_date(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspection_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLicenseRegistrationInspection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionAggregateFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionAvgFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionMaxFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionMinFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionStddevFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionStddevPopFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionStddevSampFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionSumFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionVarPopFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionVarSampFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionVarianceFields)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAvgFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_driver_id_info_report_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIDInfoReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_license_number(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_ic_card_reading_result(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardReadingResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_driver_license_name(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_license_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_driver_id_info_report_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverIDInfoReportID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_license_number(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_ic_card_reading_result(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardReadingResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_occupational_number(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_driver_license_name(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicenseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_license_expire_date(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpireDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLicenseRegistrationInspection)
	fc.Result = res
	return ec.marshalNDrivingLicenseRegistrationInspection2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevPopFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevSampFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionSumFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarPopFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarSampFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarianceFields_ic_card_status(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLicenseRegistrationInspectionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DrivingLicenseRegistrationInspectionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcCardStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_fingerprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_fingerprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverFingerprint(rctx, args["where"].(model.DriverFingerprintBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintMutationResponse)
	fc.Result = res
	return ec.marshalODriverFingerprintMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_fingerprint_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_fingerprint_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverFingerprintByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalODriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_fingerprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_fingerprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverFingerprint(rctx, args["objects"].([]*model.DriverFingerprintInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintMutationResponse)
	fc.Result = res
	return ec.marshalODriverFingerprintMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_fingerprint_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_fingerprint_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverFingerprintOne(rctx, args["objects"].(model.DriverFingerprintInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalODriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_fingerprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_fingerprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverFingerprint(rctx, args["_inc"].(*model.DriverFingerprintIncInput), args["_set"].(*model.DriverFingerprintSetInput), args["where"].(model.DriverFingerprintBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintMutationResponse)
	fc.Result = res
	return ec.marshalODriverFingerprintMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_fingerprint_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_fingerprint_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverFingerprintByPk(rctx, args["_inc"].(*model.DriverFingerprintIncInput), args["_set"].(*model.DriverFingerprintSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalODriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_fingerprint_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_fingerprint_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverFingerprintByUnionPk(rctx, args["_inc"].(*model.DriverFingerprintIncInput), args["_set"].(*model.DriverFingerprintSetInput), args["driver_fingerprint_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalODriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_fingerprint_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_fingerprint_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverFingerprintByUnionPk(rctx, args["driver_fingerprint_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalODriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_fingerprint_association(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_fingerprint_association_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverFingerprintAssociation(rctx, args["where"].(model.DriverFingerprintAssociationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationMutationResponse)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_fingerprint_association_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_fingerprint_association_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverFingerprintAssociationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_fingerprint_association(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_fingerprint_association_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverFingerprintAssociation(rctx, args["objects"].([]*model.DriverFingerprintAssociationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationMutationResponse)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_fingerprint_association_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_fingerprint_association_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverFingerprintAssociationOne(rctx, args["objects"].(model.DriverFingerprintAssociationInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_fingerprint_association(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_fingerprint_association_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverFingerprintAssociation(rctx, args["_inc"].(*model.DriverFingerprintAssociationIncInput), args["_set"].(*model.DriverFingerprintAssociationSetInput), args["where"].(model.DriverFingerprintAssociationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationMutationResponse)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_fingerprint_association_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_fingerprint_association_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverFingerprintAssociationByPk(rctx, args["_inc"].(*model.DriverFingerprintAssociationIncInput), args["_set"].(*model.DriverFingerprintAssociationSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_fingerprint_association_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_fingerprint_association_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverFingerprintAssociationByUnionPk(rctx, args["_inc"].(*model.DriverFingerprintAssociationIncInput), args["_set"].(*model.DriverFingerprintAssociationSetInput), args["driver_fingerprint_association_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_fingerprint_association_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_fingerprint_association_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverFingerprintAssociationByUnionPk(rctx, args["driver_fingerprint_association_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalODriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentity(rctx, args["where"].(model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMutationResponse)
	fc.Result = res
	return ec.marshalODriverIdentityMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentityByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalODriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverIdentity(rctx, args["objects"].([]*model.DriverIdentityInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMutationResponse)
	fc.Result = res
	return ec.marshalODriverIdentityMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_identity_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_identity_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverIdentityOne(rctx, args["objects"].(model.DriverIdentityInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalODriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentity(rctx, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["where"].(model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityMutationResponse)
	fc.Result = res
	return ec.marshalODriverIdentityMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentityByPk(rctx, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalODriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentityByUnionPk(rctx, args["_inc"].(*model.DriverIdentityIncInput), args["_set"].(*model.DriverIdentitySetInput), args["identity_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalODriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentityByUnionPk(rctx, args["identity_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalODriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity_info_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_info_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentityInfoReport(rctx, args["where"].(model.DriverIdentityInfoReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportMutationResponse)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity_info_report_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_info_report_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentityInfoReportByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_identity_info_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_identity_info_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverIdentityInfoReport(rctx, args["objects"].([]*model.DriverIdentityInfoReportInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportMutationResponse)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_identity_info_report_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_identity_info_report_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverIdentityInfoReportOne(rctx, args["objects"].(model.DriverIdentityInfoReportInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity_info_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_info_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentityInfoReport(rctx, args["_inc"].(*model.DriverIdentityInfoReportIncInput), args["_set"].(*model.DriverIdentityInfoReportSetInput), args["where"].(model.DriverIdentityInfoReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportMutationResponse)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity_info_report_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_info_report_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentityInfoReportByPk(rctx, args["_inc"].(*model.DriverIdentityInfoReportIncInput), args["_set"].(*model.DriverIdentityInfoReportSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_identity_info_report_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_identity_info_report_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverIdentityInfoReportByUnionPk(rctx, args["_inc"].(*model.DriverIdentityInfoReportIncInput), args["_set"].(*model.DriverIdentityInfoReportSetInput), args["driver_identity_info_report_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_identity_info_report_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_identity_info_report_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverIdentityInfoReportByUnionPk(rctx, args["driver_identity_info_report_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalODriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfo(rctx, args["where"].(model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMutationResponse)
	fc.Result = res
	return ec.marshalODriverInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverInfo)
	fc.Result = res
	return ec.marshalODriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverInfo(rctx, args["objects"].([]*model.DriverInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMutationResponse)
	fc.Result = res
	return ec.marshalODriverInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverInfoOne(rctx, args["objects"].(model.DriverInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverInfo)
	fc.Result = res
	return ec.marshalODriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfo(rctx, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["where"].(model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoMutationResponse)
	fc.Result = res
	return ec.marshalODriverInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverInfoByPk(rctx, args["_inc"].(*model.DriverInfoIncInput), args["_set"].(*model.DriverInfoSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverInfo)
	fc.Result = res
	return ec.marshalODriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driving_license_registration_inspection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driving_license_registration_inspection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDrivingLicenseRegistrationInspection(rctx, args["where"].(model.DrivingLicenseRegistrationInspectionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionMutationResponse)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driving_license_registration_inspection_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driving_license_registration_inspection_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDrivingLicenseRegistrationInspectionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLicenseRegistrationInspection)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driving_license_registration_inspection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driving_license_registration_inspection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDrivingLicenseRegistrationInspection(rctx, args["objects"].([]*model.DrivingLicenseRegistrationInspectionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionMutationResponse)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driving_license_registration_inspection_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driving_license_registration_inspection_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDrivingLicenseRegistrationInspectionOne(rctx, args["objects"].(model.DrivingLicenseRegistrationInspectionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLicenseRegistrationInspection)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driving_license_registration_inspection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driving_license_registration_inspection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDrivingLicenseRegistrationInspection(rctx, args["_inc"].(*model.DrivingLicenseRegistrationInspectionIncInput), args["_set"].(*model.DrivingLicenseRegistrationInspectionSetInput), args["where"].(model.DrivingLicenseRegistrationInspectionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionMutationResponse)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspectionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driving_license_registration_inspection_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driving_license_registration_inspection_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDrivingLicenseRegistrationInspectionByPk(rctx, args["_inc"].(*model.DrivingLicenseRegistrationInspectionIncInput), args["_set"].(*model.DrivingLicenseRegistrationInspectionSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLicenseRegistrationInspection)
	fc.Result = res
	return ec.marshalODrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprint(rctx, args["distinct_on"].([]model.DriverFingerprintSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintOrderBy), args["where"].(*model.DriverFingerprintBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalNDriverFingerprint2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintAggregate(rctx, args["distinct_on"].([]model.DriverFingerprintSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintOrderBy), args["where"].(*model.DriverFingerprintBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAggregate)
	fc.Result = res
	return ec.marshalNDriverFingerprintAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalNDriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintByUnionPk(rctx, args["driver_fingerprint_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprint)
	fc.Result = res
	return ec.marshalNDriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_association(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_association_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintAssociation(rctx, args["distinct_on"].([]model.DriverFingerprintAssociationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintAssociationOrderBy), args["where"].(*model.DriverFingerprintAssociationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalNDriverFingerprintAssociation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_association_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_association_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintAssociationAggregate(rctx, args["distinct_on"].([]model.DriverFingerprintAssociationSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverFingerprintAssociationOrderBy), args["where"].(*model.DriverFingerprintAssociationBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverFingerprintAssociationAggregate)
	fc.Result = res
	return ec.marshalNDriverFingerprintAssociationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_association_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_association_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintAssociationByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalNDriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_fingerprint_association_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_fingerprint_association_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverFingerprintAssociationByUnionPk(rctx, args["driver_fingerprint_association_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverFingerprintAssociation)
	fc.Result = res
	return ec.marshalNDriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentity(rctx, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalNDriverIdentity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityAggregate(rctx, args["distinct_on"].([]model.DriverIdentitySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityOrderBy), args["where"].(*model.DriverIdentityBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityAggregate)
	fc.Result = res
	return ec.marshalNDriverIdentityAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalNDriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityByUnionPk(rctx, args["identity_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentity)
	fc.Result = res
	return ec.marshalNDriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_info_report(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_info_report_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityInfoReport(rctx, args["distinct_on"].([]model.DriverIdentityInfoReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityInfoReportOrderBy), args["where"].(*model.DriverIdentityInfoReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalNDriverIdentityInfoReport2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReportᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_info_report_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_info_report_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityInfoReportAggregate(rctx, args["distinct_on"].([]model.DriverIdentityInfoReportSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverIdentityInfoReportOrderBy), args["where"].(*model.DriverIdentityInfoReportBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverIdentityInfoReportAggregate)
	fc.Result = res
	return ec.marshalNDriverIdentityInfoReportAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_info_report_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_info_report_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityInfoReportByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalNDriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_identity_info_report_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_identity_info_report_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverIdentityInfoReportByUnionPk(rctx, args["driver_identity_info_report_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverIdentityInfoReport)
	fc.Result = res
	return ec.marshalNDriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfo(rctx, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoAggregate(rctx, args["distinct_on"].([]model.DriverInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverInfoOrderBy), args["where"].(*model.DriverInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverInfoAggregate)
	fc.Result = res
	return ec.marshalNDriverInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driving_license_registration_inspection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driving_license_registration_inspection_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DrivingLicenseRegistrationInspection(rctx, args["distinct_on"].([]model.DrivingLicenseRegistrationInspectionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLicenseRegistrationInspectionOrderBy), args["where"].(*model.DrivingLicenseRegistrationInspectionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLicenseRegistrationInspection)
	fc.Result = res
	return ec.marshalNDrivingLicenseRegistrationInspection2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driving_license_registration_inspection_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driving_license_registration_inspection_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DrivingLicenseRegistrationInspectionAggregate(rctx, args["distinct_on"].([]model.DrivingLicenseRegistrationInspectionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLicenseRegistrationInspectionOrderBy), args["where"].(*model.DrivingLicenseRegistrationInspectionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLicenseRegistrationInspectionAggregate)
	fc.Result = res
	return ec.marshalNDrivingLicenseRegistrationInspectionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driving_license_registration_inspection_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driving_license_registration_inspection_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DrivingLicenseRegistrationInspectionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLicenseRegistrationInspection)
	fc.Result = res
	return ec.marshalNDrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintAssociationBoolExp(ctx context.Context, obj interface{}) (model.DriverFingerprintAssociationBoolExp, error) {
	var it model.DriverFingerprintAssociationBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverFingerprintAssociationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverFingerprintAssociationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverFingerprintAssociationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_association_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
			it.DriverFingerprintAssociationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintAssociationIncInput(ctx context.Context, obj interface{}) (model.DriverFingerprintAssociationIncInput, error) {
	var it model.DriverFingerprintAssociationIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintAssociationInsertInput(ctx context.Context, obj interface{}) (model.DriverFingerprintAssociationInsertInput, error) {
	var it model.DriverFingerprintAssociationInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_fingerprint_association_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
			it.DriverFingerprintAssociationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintAssociationOrderBy(ctx context.Context, obj interface{}) (model.DriverFingerprintAssociationOrderBy, error) {
	var it model.DriverFingerprintAssociationOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_association_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
			it.DriverFingerprintAssociationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintAssociationSetInput(ctx context.Context, obj interface{}) (model.DriverFingerprintAssociationSetInput, error) {
	var it model.DriverFingerprintAssociationSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_association_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_association_id"))
			it.DriverFingerprintAssociationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "picture_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("picture_address"))
			it.PictureAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintBoolExp(ctx context.Context, obj interface{}) (model.DriverFingerprintBoolExp, error) {
	var it model.DriverFingerprintBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverFingerprintBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverFingerprintBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverFingerprintBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signature"))
			it.Signature, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "instruction_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instruction_id"))
			it.InstructionID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_type"))
			it.OperationType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_time"))
			it.UploadTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ternimal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ternimal_id"))
			it.TernimalID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintIncInput(ctx context.Context, obj interface{}) (model.DriverFingerprintIncInput, error) {
	var it model.DriverFingerprintIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_type"))
			it.OperationType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintInsertInput(ctx context.Context, obj interface{}) (model.DriverFingerprintInsertInput, error) {
	var it model.DriverFingerprintInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signature"))
			it.Signature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instruction_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instruction_id"))
			it.InstructionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_type"))
			it.OperationType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_time"))
			it.UploadTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ternimal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ternimal_id"))
			it.TernimalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintOrderBy(ctx context.Context, obj interface{}) (model.DriverFingerprintOrderBy, error) {
	var it model.DriverFingerprintOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signature"))
			it.Signature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "instruction_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instruction_id"))
			it.InstructionID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_type"))
			it.OperationType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_time"))
			it.UploadTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ternimal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ternimal_id"))
			it.TernimalID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverFingerprintSetInput(ctx context.Context, obj interface{}) (model.DriverFingerprintSetInput, error) {
	var it model.DriverFingerprintSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_fingerprint_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_fingerprint_id"))
			it.DriverFingerprintID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signature"))
			it.Signature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fingerprint_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fingerprint_name"))
			it.FingerprintName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instruction_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instruction_id"))
			it.InstructionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_type"))
			it.OperationType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_time"))
			it.UploadTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ternimal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ternimal_id"))
			it.TernimalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_success":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_success"))
			it.IsSuccess, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityBoolExp(ctx context.Context, obj interface{}) (model.DriverIdentityBoolExp, error) {
	var it model.DriverIdentityBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverIdentityBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverIdentityBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverIdentityBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityIncInput(ctx context.Context, obj interface{}) (model.DriverIdentityIncInput, error) {
	var it model.DriverIdentityIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityInfoReportBoolExp(ctx context.Context, obj interface{}) (model.DriverIdentityInfoReportBoolExp, error) {
	var it model.DriverIdentityInfoReportBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverIdentityInfoReportBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverIdentityInfoReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverIdentityInfoReportBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
			it.DriverIdentityInfoReportID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityInfoReportIncInput(ctx context.Context, obj interface{}) (model.DriverIdentityInfoReportIncInput, error) {
	var it model.DriverIdentityInfoReportIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityInfoReportInsertInput(ctx context.Context, obj interface{}) (model.DriverIdentityInfoReportInsertInput, error) {
	var it model.DriverIdentityInfoReportInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_identity_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
			it.DriverIdentityInfoReportID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityInfoReportOrderBy(ctx context.Context, obj interface{}) (model.DriverIdentityInfoReportOrderBy, error) {
	var it model.DriverIdentityInfoReportOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
			it.DriverIdentityInfoReportID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityInfoReportSetInput(ctx context.Context, obj interface{}) (model.DriverIdentityInfoReportSetInput, error) {
	var it model.DriverIdentityInfoReportSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_info_report_id"))
			it.DriverIdentityInfoReportID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityInsertInput(ctx context.Context, obj interface{}) (model.DriverIdentityInsertInput, error) {
	var it model.DriverIdentityInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentityOrderBy(ctx context.Context, obj interface{}) (model.DriverIdentityOrderBy, error) {
	var it model.DriverIdentityOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverIdentitySetInput(ctx context.Context, obj interface{}) (model.DriverIdentitySetInput, error) {
	var it model.DriverIdentitySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identity_id"))
			it.IdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_birthday"))
			it.IDCardBirthday, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_sign_government":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_sign_government"))
			it.IDCardSignGovernment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_nation"))
			it.IDCardNation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_start_date"))
			it.IDCardStartDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_end_date"))
			it.IDCardEndDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_front_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_front_pic"))
			it.IDCardFrontPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_back_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_back_pic"))
			it.IDCardBackPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_address"))
			it.IDCardAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_holding_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_holding_id_photo"))
			it.DriverHoldingIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_photo"))
			it.DriverPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_signature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_signature"))
			it.DriverSignature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_expire_date"))
			it.OccupationalExpireDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_issuing_authority"))
			it.OccupationalIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "labor_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labor_contract"))
			it.LaborContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issuing_authority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issuing_authority"))
			it.DriverLicenseIssuingAuthority, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annual_review_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annual_review_date"))
			it.AnnualReviewDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "renewal_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewal_date"))
			it.RenewalDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "accumulatived_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accumulatived_points"))
			it.AccumulativedPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sorting_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sorting_date"))
			it.SortingDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_province_id"))
			it.DriverLicenseProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_city_id"))
			it.DriverLicenseCityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_district_id"))
			it.DriverLicenseDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_status"))
			it.DriverLicenseStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_issue_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_issue_date"))
			it.DriverLicenseIssueDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "working_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("working_time"))
			it.WorkingTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverInfoBoolExp(ctx context.Context, obj interface{}) (model.DriverInfoBoolExp, error) {
	var it model.DriverInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverInfoIncInput(ctx context.Context, obj interface{}) (model.DriverInfoIncInput, error) {
	var it model.DriverInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverInfoInsertInput(ctx context.Context, obj interface{}) (model.DriverInfoInsertInput, error) {
	var it model.DriverInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverInfoOrderBy(ctx context.Context, obj interface{}) (model.DriverInfoOrderBy, error) {
	var it model.DriverInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverInfoSetInput(ctx context.Context, obj interface{}) (model.DriverInfoSetInput, error) {
	var it model.DriverInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_identity_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_identity_id"))
			it.DriverIdentityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "files_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files_number"))
			it.FilesNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_address"))
			it.ContactAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mailing_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mailing_address"))
			it.MailingAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_submit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_submit"))
			it.IsSubmit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_content"))
			it.SubmitContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_at"))
			it.SubmitAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "submit_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submit_by"))
			it.SubmitBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_manual_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_manual_input"))
			it.IsManualInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_at"))
			it.InputAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "input_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input_by"))
			it.InputBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_data"))
			it.IsCheckData, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_at"))
			it.CheckAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_by"))
			it.CheckBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark_in"))
			it.RemarkIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check_sms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check_sms"))
			it.IsCheckSms, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent"))
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_blacklist":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_blacklist"))
			it.IsBlacklist, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_deadline"))
			it.BlacklistDeadline, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLicenseRegistrationInspectionBoolExp(ctx context.Context, obj interface{}) (model.DrivingLicenseRegistrationInspectionBoolExp, error) {
	var it model.DrivingLicenseRegistrationInspectionBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id_info_report_id"))
			it.DriverIDInfoReportID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLicenseRegistrationInspectionIncInput(ctx context.Context, obj interface{}) (model.DrivingLicenseRegistrationInspectionIncInput, error) {
	var it model.DrivingLicenseRegistrationInspectionIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLicenseRegistrationInspectionInsertInput(ctx context.Context, obj interface{}) (model.DrivingLicenseRegistrationInspectionInsertInput, error) {
	var it model.DrivingLicenseRegistrationInspectionInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "driver_id_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id_info_report_id"))
			it.DriverIDInfoReportID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLicenseRegistrationInspectionOrderBy(ctx context.Context, obj interface{}) (model.DrivingLicenseRegistrationInspectionOrderBy, error) {
	var it model.DrivingLicenseRegistrationInspectionOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id_info_report_id"))
			it.DriverIDInfoReportID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDrivingLicenseRegistrationInspectionSetInput(ctx context.Context, obj interface{}) (model.DrivingLicenseRegistrationInspectionSetInput, error) {
	var it model.DrivingLicenseRegistrationInspectionSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id_info_report_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id_info_report_id"))
			it.DriverIDInfoReportID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_status"))
			it.IcCardStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_number"))
			it.LicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ic_card_reading_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ic_card_reading_result"))
			it.IcCardReadingResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occupational_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occupational_number"))
			it.OccupationalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_name"))
			it.DriverLicenseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_expire_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_expire_date"))
			it.LicenseExpireDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var driverFingerprintImplementors = []string{"DriverFingerprint"}

func (ec *executionContext) _DriverFingerprint(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverFingerprint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprint")
		case "id":
			out.Values[i] = ec._DriverFingerprint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_fingerprint_id":
			out.Values[i] = ec._DriverFingerprint_driver_fingerprint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._DriverFingerprint_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_name":
			out.Values[i] = ec._DriverFingerprint_driver_name(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._DriverFingerprint_user_id(ctx, field, obj)
		case "signature":
			out.Values[i] = ec._DriverFingerprint_signature(ctx, field, obj)
		case "fingerprint_name":
			out.Values[i] = ec._DriverFingerprint_fingerprint_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._DriverFingerprint_sim_number(ctx, field, obj)
		case "instruction_id":
			out.Values[i] = ec._DriverFingerprint_instruction_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprint_operation_type(ctx, field, obj)
		case "content":
			out.Values[i] = ec._DriverFingerprint_content(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DriverFingerprint_operation_time(ctx, field, obj)
		case "upload_time":
			out.Values[i] = ec._DriverFingerprint_upload_time(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._DriverFingerprint_timestamp(ctx, field, obj)
		case "ternimal_id":
			out.Values[i] = ec._DriverFingerprint_ternimal_id(ctx, field, obj)
		case "is_success":
			out.Values[i] = ec._DriverFingerprint_is_success(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverFingerprint_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverFingerprint_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverFingerprint_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DriverFingerprint_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverFingerprint_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverFingerprint_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverFingerprint_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAggregateImplementors = []string{"DriverFingerprintAggregate"}

func (ec *executionContext) _DriverFingerprintAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverFingerprintAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAggregateFieldsImplementors = []string{"DriverFingerprintAggregateFields"}

func (ec *executionContext) _DriverFingerprintAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverFingerprintAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverFingerprintAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverFingerprintAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverFingerprintAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverFingerprintAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverFingerprintAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverFingerprintAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverFingerprintAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverFingerprintAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverFingerprintAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverFingerprintAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationImplementors = []string{"DriverFingerprintAssociation"}

func (ec *executionContext) _DriverFingerprintAssociation(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverFingerprintAssociation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociation")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_fingerprint_association_id":
			out.Values[i] = ec._DriverFingerprintAssociation_driver_fingerprint_association_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._DriverFingerprintAssociation_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fingerprint_name":
			out.Values[i] = ec._DriverFingerprintAssociation_fingerprint_name(ctx, field, obj)
		case "driver_fingerprint_id":
			out.Values[i] = ec._DriverFingerprintAssociation_driver_fingerprint_id(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._DriverFingerprintAssociation_picture_address(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverFingerprintAssociation_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverFingerprintAssociation_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverFingerprintAssociation_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DriverFingerprintAssociation_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverFingerprintAssociation_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverFingerprintAssociation_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverFingerprintAssociation_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationAggregateImplementors = []string{"DriverFingerprintAssociationAggregate"}

func (ec *executionContext) _DriverFingerprintAssociationAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverFingerprintAssociationAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationAggregateFieldsImplementors = []string{"DriverFingerprintAssociationAggregateFields"}

func (ec *executionContext) _DriverFingerprintAssociationAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverFingerprintAssociationAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationAvgFieldsImplementors = []string{"DriverFingerprintAssociationAvgFields"}

func (ec *executionContext) _DriverFingerprintAssociationAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationAvgFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationMaxFieldsImplementors = []string{"DriverFingerprintAssociationMaxFields"}

func (ec *executionContext) _DriverFingerprintAssociationMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationMaxFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_id(ctx, field, obj)
		case "driver_fingerprint_association_id":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_driver_fingerprint_association_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_driver_id(ctx, field, obj)
		case "fingerprint_name":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_fingerprint_name(ctx, field, obj)
		case "driver_fingerprint_id":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_driver_fingerprint_id(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_picture_address(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverFingerprintAssociationMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationMinFieldsImplementors = []string{"DriverFingerprintAssociationMinFields"}

func (ec *executionContext) _DriverFingerprintAssociationMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationMinFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_id(ctx, field, obj)
		case "driver_fingerprint_association_id":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_driver_fingerprint_association_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_driver_id(ctx, field, obj)
		case "fingerprint_name":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_fingerprint_name(ctx, field, obj)
		case "driver_fingerprint_id":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_driver_fingerprint_id(ctx, field, obj)
		case "picture_address":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_picture_address(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverFingerprintAssociationMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationMutationResponseImplementors = []string{"DriverFingerprintAssociationMutationResponse"}

func (ec *executionContext) _DriverFingerprintAssociationMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverFingerprintAssociationMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverFingerprintAssociationMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationStddevFieldsImplementors = []string{"DriverFingerprintAssociationStddevFields"}

func (ec *executionContext) _DriverFingerprintAssociationStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationStddevFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationStddevPopFieldsImplementors = []string{"DriverFingerprintAssociationStddevPopFields"}

func (ec *executionContext) _DriverFingerprintAssociationStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationStddevSampFieldsImplementors = []string{"DriverFingerprintAssociationStddevSampFields"}

func (ec *executionContext) _DriverFingerprintAssociationStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationSumFieldsImplementors = []string{"DriverFingerprintAssociationSumFields"}

func (ec *executionContext) _DriverFingerprintAssociationSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationSumFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationVarPopFieldsImplementors = []string{"DriverFingerprintAssociationVarPopFields"}

func (ec *executionContext) _DriverFingerprintAssociationVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationVarPopFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationVarSampFieldsImplementors = []string{"DriverFingerprintAssociationVarSampFields"}

func (ec *executionContext) _DriverFingerprintAssociationVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationVarSampFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAssociationVarianceFieldsImplementors = []string{"DriverFingerprintAssociationVarianceFields"}

func (ec *executionContext) _DriverFingerprintAssociationVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAssociationVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAssociationVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAssociationVarianceFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAssociationVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintAvgFieldsImplementors = []string{"DriverFingerprintAvgFields"}

func (ec *executionContext) _DriverFingerprintAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintAvgFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintAvgFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintAvgFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintMaxFieldsImplementors = []string{"DriverFingerprintMaxFields"}

func (ec *executionContext) _DriverFingerprintMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintMaxFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintMaxFields_id(ctx, field, obj)
		case "driver_fingerprint_id":
			out.Values[i] = ec._DriverFingerprintMaxFields_driver_fingerprint_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverFingerprintMaxFields_driver_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverFingerprintMaxFields_driver_name(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._DriverFingerprintMaxFields_user_id(ctx, field, obj)
		case "signature":
			out.Values[i] = ec._DriverFingerprintMaxFields_signature(ctx, field, obj)
		case "fingerprint_name":
			out.Values[i] = ec._DriverFingerprintMaxFields_fingerprint_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._DriverFingerprintMaxFields_sim_number(ctx, field, obj)
		case "instruction_id":
			out.Values[i] = ec._DriverFingerprintMaxFields_instruction_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintMaxFields_operation_type(ctx, field, obj)
		case "content":
			out.Values[i] = ec._DriverFingerprintMaxFields_content(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DriverFingerprintMaxFields_operation_time(ctx, field, obj)
		case "upload_time":
			out.Values[i] = ec._DriverFingerprintMaxFields_upload_time(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._DriverFingerprintMaxFields_timestamp(ctx, field, obj)
		case "ternimal_id":
			out.Values[i] = ec._DriverFingerprintMaxFields_ternimal_id(ctx, field, obj)
		case "is_success":
			out.Values[i] = ec._DriverFingerprintMaxFields_is_success(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverFingerprintMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverFingerprintMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverFingerprintMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverFingerprintMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverFingerprintMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverFingerprintMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverFingerprintMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintMinFieldsImplementors = []string{"DriverFingerprintMinFields"}

func (ec *executionContext) _DriverFingerprintMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintMinFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintMinFields_id(ctx, field, obj)
		case "driver_fingerprint_id":
			out.Values[i] = ec._DriverFingerprintMinFields_driver_fingerprint_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverFingerprintMinFields_driver_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverFingerprintMinFields_driver_name(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._DriverFingerprintMinFields_user_id(ctx, field, obj)
		case "signature":
			out.Values[i] = ec._DriverFingerprintMinFields_signature(ctx, field, obj)
		case "fingerprint_name":
			out.Values[i] = ec._DriverFingerprintMinFields_fingerprint_name(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._DriverFingerprintMinFields_sim_number(ctx, field, obj)
		case "instruction_id":
			out.Values[i] = ec._DriverFingerprintMinFields_instruction_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintMinFields_operation_type(ctx, field, obj)
		case "content":
			out.Values[i] = ec._DriverFingerprintMinFields_content(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DriverFingerprintMinFields_operation_time(ctx, field, obj)
		case "upload_time":
			out.Values[i] = ec._DriverFingerprintMinFields_upload_time(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._DriverFingerprintMinFields_timestamp(ctx, field, obj)
		case "ternimal_id":
			out.Values[i] = ec._DriverFingerprintMinFields_ternimal_id(ctx, field, obj)
		case "is_success":
			out.Values[i] = ec._DriverFingerprintMinFields_is_success(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverFingerprintMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverFingerprintMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverFingerprintMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverFingerprintMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverFingerprintMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverFingerprintMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverFingerprintMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintMutationResponseImplementors = []string{"DriverFingerprintMutationResponse"}

func (ec *executionContext) _DriverFingerprintMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverFingerprintMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverFingerprintMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintStddevFieldsImplementors = []string{"DriverFingerprintStddevFields"}

func (ec *executionContext) _DriverFingerprintStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintStddevFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintStddevFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintStddevFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintStddevPopFieldsImplementors = []string{"DriverFingerprintStddevPopFields"}

func (ec *executionContext) _DriverFingerprintStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintStddevPopFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintStddevPopFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintStddevSampFieldsImplementors = []string{"DriverFingerprintStddevSampFields"}

func (ec *executionContext) _DriverFingerprintStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintStddevSampFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintStddevSampFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintSumFieldsImplementors = []string{"DriverFingerprintSumFields"}

func (ec *executionContext) _DriverFingerprintSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintSumFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintSumFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintSumFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintVarPopFieldsImplementors = []string{"DriverFingerprintVarPopFields"}

func (ec *executionContext) _DriverFingerprintVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintVarPopFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintVarPopFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintVarPopFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintVarSampFieldsImplementors = []string{"DriverFingerprintVarSampFields"}

func (ec *executionContext) _DriverFingerprintVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintVarSampFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintVarSampFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintVarSampFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverFingerprintVarianceFieldsImplementors = []string{"DriverFingerprintVarianceFields"}

func (ec *executionContext) _DriverFingerprintVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverFingerprintVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverFingerprintVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverFingerprintVarianceFields")
		case "id":
			out.Values[i] = ec._DriverFingerprintVarianceFields_id(ctx, field, obj)
		case "operation_type":
			out.Values[i] = ec._DriverFingerprintVarianceFields_operation_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityImplementors = []string{"DriverIdentity"}

func (ec *executionContext) _DriverIdentity(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentity")
		case "id":
			out.Values[i] = ec._DriverIdentity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identity_id":
			out.Values[i] = ec._DriverIdentity_identity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_card_num":
			out.Values[i] = ec._DriverIdentity_id_card_num(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._DriverIdentity_id_card_birthday(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._DriverIdentity_id_card_sign_government(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._DriverIdentity_id_card_nation(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._DriverIdentity_id_card_start_date(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._DriverIdentity_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._DriverIdentity_id_card_front_pic(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._DriverIdentity_id_card_back_pic(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._DriverIdentity_id_card_address(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._DriverIdentity_driver_holding_id_photo(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._DriverIdentity_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._DriverIdentity_driver_signature(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentity_occupational_number(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._DriverIdentity_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._DriverIdentity_occupational_issuing_authority(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DriverIdentity_labor_contract(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._DriverIdentity_driver_license_pic(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._DriverIdentity_driver_license_issuing_authority(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._DriverIdentity_annual_review_date(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._DriverIdentity_renewal_date(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentity_accumulatived_points(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._DriverIdentity_sorting_date(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentity_quasi_driving_models(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._DriverIdentity_driver_license_province_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._DriverIdentity_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._DriverIdentity_driver_license_district_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentity_driver_license_status(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._DriverIdentity_driver_license_issue_date(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._DriverIdentity_working_time(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._DriverIdentity_is_review(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverIdentity_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverIdentity_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DriverIdentity_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverIdentity_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverIdentity_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverIdentity_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverIdentity_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityAggregateImplementors = []string{"DriverIdentityAggregate"}

func (ec *executionContext) _DriverIdentityAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverIdentityAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityAggregateFieldsImplementors = []string{"DriverIdentityAggregateFields"}

func (ec *executionContext) _DriverIdentityAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverIdentityAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverIdentityAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverIdentityAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverIdentityAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverIdentityAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverIdentityAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverIdentityAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverIdentityAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverIdentityAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverIdentityAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverIdentityAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityAvgFieldsImplementors = []string{"DriverIdentityAvgFields"}

func (ec *executionContext) _DriverIdentityAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityAvgFields")
		case "id":
			out.Values[i] = ec._DriverIdentityAvgFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityAvgFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityAvgFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityAvgFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportImplementors = []string{"DriverIdentityInfoReport"}

func (ec *executionContext) _DriverIdentityInfoReport(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverIdentityInfoReport) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReport")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReport_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_identity_info_report_id":
			out.Values[i] = ec._DriverIdentityInfoReport_driver_identity_info_report_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._DriverIdentityInfoReport_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReport_ic_card_status(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DriverIdentityInfoReport_operation_time(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverIdentityInfoReport_driver_name(ctx, field, obj)
		case "license_number":
			out.Values[i] = ec._DriverIdentityInfoReport_license_number(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._DriverIdentityInfoReport_imel(ctx, field, obj)
		case "ic_card_reading_result":
			out.Values[i] = ec._DriverIdentityInfoReport_ic_card_reading_result(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentityInfoReport_occupational_number(ctx, field, obj)
		case "driver_license_name":
			out.Values[i] = ec._DriverIdentityInfoReport_driver_license_name(ctx, field, obj)
		case "license_expire_date":
			out.Values[i] = ec._DriverIdentityInfoReport_license_expire_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._DriverIdentityInfoReport_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverIdentityInfoReport_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverIdentityInfoReport_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DriverIdentityInfoReport_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverIdentityInfoReport_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverIdentityInfoReport_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverIdentityInfoReport_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportAggregateImplementors = []string{"DriverIdentityInfoReportAggregate"}

func (ec *executionContext) _DriverIdentityInfoReportAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverIdentityInfoReportAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportAggregateFieldsImplementors = []string{"DriverIdentityInfoReportAggregateFields"}

func (ec *executionContext) _DriverIdentityInfoReportAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverIdentityInfoReportAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportAvgFieldsImplementors = []string{"DriverIdentityInfoReportAvgFields"}

func (ec *executionContext) _DriverIdentityInfoReportAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportAvgFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportAvgFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportAvgFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportMaxFieldsImplementors = []string{"DriverIdentityInfoReportMaxFields"}

func (ec *executionContext) _DriverIdentityInfoReportMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportMaxFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_id(ctx, field, obj)
		case "driver_identity_info_report_id":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_driver_identity_info_report_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_vehicle_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_ic_card_status(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_operation_time(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_driver_name(ctx, field, obj)
		case "license_number":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_license_number(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_imel(ctx, field, obj)
		case "ic_card_reading_result":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_ic_card_reading_result(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_occupational_number(ctx, field, obj)
		case "driver_license_name":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_driver_license_name(ctx, field, obj)
		case "license_expire_date":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_license_expire_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverIdentityInfoReportMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportMinFieldsImplementors = []string{"DriverIdentityInfoReportMinFields"}

func (ec *executionContext) _DriverIdentityInfoReportMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportMinFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_id(ctx, field, obj)
		case "driver_identity_info_report_id":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_driver_identity_info_report_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_vehicle_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_ic_card_status(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_operation_time(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_driver_name(ctx, field, obj)
		case "license_number":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_license_number(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_imel(ctx, field, obj)
		case "ic_card_reading_result":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_ic_card_reading_result(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_occupational_number(ctx, field, obj)
		case "driver_license_name":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_driver_license_name(ctx, field, obj)
		case "license_expire_date":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_license_expire_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverIdentityInfoReportMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportMutationResponseImplementors = []string{"DriverIdentityInfoReportMutationResponse"}

func (ec *executionContext) _DriverIdentityInfoReportMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverIdentityInfoReportMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverIdentityInfoReportMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportStddevFieldsImplementors = []string{"DriverIdentityInfoReportStddevFields"}

func (ec *executionContext) _DriverIdentityInfoReportStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportStddevFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportStddevFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportStddevFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportStddevPopFieldsImplementors = []string{"DriverIdentityInfoReportStddevPopFields"}

func (ec *executionContext) _DriverIdentityInfoReportStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportStddevPopFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportStddevPopFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportStddevSampFieldsImplementors = []string{"DriverIdentityInfoReportStddevSampFields"}

func (ec *executionContext) _DriverIdentityInfoReportStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportStddevSampFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportStddevSampFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportSumFieldsImplementors = []string{"DriverIdentityInfoReportSumFields"}

func (ec *executionContext) _DriverIdentityInfoReportSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportSumFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportSumFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportSumFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportVarPopFieldsImplementors = []string{"DriverIdentityInfoReportVarPopFields"}

func (ec *executionContext) _DriverIdentityInfoReportVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportVarPopFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportVarPopFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportVarPopFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportVarSampFieldsImplementors = []string{"DriverIdentityInfoReportVarSampFields"}

func (ec *executionContext) _DriverIdentityInfoReportVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportVarSampFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportVarSampFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportVarSampFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityInfoReportVarianceFieldsImplementors = []string{"DriverIdentityInfoReportVarianceFields"}

func (ec *executionContext) _DriverIdentityInfoReportVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityInfoReportVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityInfoReportVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityInfoReportVarianceFields")
		case "id":
			out.Values[i] = ec._DriverIdentityInfoReportVarianceFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DriverIdentityInfoReportVarianceFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityMaxFieldsImplementors = []string{"DriverIdentityMaxFields"}

func (ec *executionContext) _DriverIdentityMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityMaxFields")
		case "id":
			out.Values[i] = ec._DriverIdentityMaxFields_id(ctx, field, obj)
		case "identity_id":
			out.Values[i] = ec._DriverIdentityMaxFields_identity_id(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_num(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_birthday(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_sign_government(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_nation(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_start_date(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_front_pic(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_back_pic(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._DriverIdentityMaxFields_id_card_address(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_holding_id_photo(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_signature(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentityMaxFields_occupational_number(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._DriverIdentityMaxFields_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._DriverIdentityMaxFields_occupational_issuing_authority(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DriverIdentityMaxFields_labor_contract(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_pic(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_issuing_authority(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._DriverIdentityMaxFields_annual_review_date(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._DriverIdentityMaxFields_renewal_date(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityMaxFields_accumulatived_points(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._DriverIdentityMaxFields_sorting_date(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityMaxFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_province_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_district_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_status(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._DriverIdentityMaxFields_driver_license_issue_date(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._DriverIdentityMaxFields_working_time(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._DriverIdentityMaxFields_is_review(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverIdentityMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverIdentityMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverIdentityMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverIdentityMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverIdentityMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverIdentityMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverIdentityMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityMinFieldsImplementors = []string{"DriverIdentityMinFields"}

func (ec *executionContext) _DriverIdentityMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityMinFields")
		case "id":
			out.Values[i] = ec._DriverIdentityMinFields_id(ctx, field, obj)
		case "identity_id":
			out.Values[i] = ec._DriverIdentityMinFields_identity_id(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_num(ctx, field, obj)
		case "id_card_birthday":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_birthday(ctx, field, obj)
		case "id_card_sign_government":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_sign_government(ctx, field, obj)
		case "id_card_nation":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_nation(ctx, field, obj)
		case "id_card_start_date":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_start_date(ctx, field, obj)
		case "id_card_end_date":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_end_date(ctx, field, obj)
		case "id_card_front_pic":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_front_pic(ctx, field, obj)
		case "id_card_back_pic":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_back_pic(ctx, field, obj)
		case "id_card_address":
			out.Values[i] = ec._DriverIdentityMinFields_id_card_address(ctx, field, obj)
		case "driver_holding_id_photo":
			out.Values[i] = ec._DriverIdentityMinFields_driver_holding_id_photo(ctx, field, obj)
		case "driver_photo":
			out.Values[i] = ec._DriverIdentityMinFields_driver_photo(ctx, field, obj)
		case "driver_signature":
			out.Values[i] = ec._DriverIdentityMinFields_driver_signature(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DriverIdentityMinFields_occupational_number(ctx, field, obj)
		case "occupational_expire_date":
			out.Values[i] = ec._DriverIdentityMinFields_occupational_expire_date(ctx, field, obj)
		case "occupational_issuing_authority":
			out.Values[i] = ec._DriverIdentityMinFields_occupational_issuing_authority(ctx, field, obj)
		case "labor_contract":
			out.Values[i] = ec._DriverIdentityMinFields_labor_contract(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_pic(ctx, field, obj)
		case "driver_license_issuing_authority":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_issuing_authority(ctx, field, obj)
		case "annual_review_date":
			out.Values[i] = ec._DriverIdentityMinFields_annual_review_date(ctx, field, obj)
		case "renewal_date":
			out.Values[i] = ec._DriverIdentityMinFields_renewal_date(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityMinFields_accumulatived_points(ctx, field, obj)
		case "sorting_date":
			out.Values[i] = ec._DriverIdentityMinFields_sorting_date(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityMinFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_province_id":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_province_id(ctx, field, obj)
		case "driver_license_city_id":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_city_id(ctx, field, obj)
		case "driver_license_district_id":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_district_id(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_status(ctx, field, obj)
		case "driver_license_issue_date":
			out.Values[i] = ec._DriverIdentityMinFields_driver_license_issue_date(ctx, field, obj)
		case "working_time":
			out.Values[i] = ec._DriverIdentityMinFields_working_time(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._DriverIdentityMinFields_is_review(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverIdentityMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverIdentityMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverIdentityMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverIdentityMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverIdentityMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverIdentityMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverIdentityMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityMutationResponseImplementors = []string{"DriverIdentityMutationResponse"}

func (ec *executionContext) _DriverIdentityMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverIdentityMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverIdentityMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityStddevFieldsImplementors = []string{"DriverIdentityStddevFields"}

func (ec *executionContext) _DriverIdentityStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityStddevFields")
		case "id":
			out.Values[i] = ec._DriverIdentityStddevFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityStddevFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityStddevFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityStddevFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityStddevPopFieldsImplementors = []string{"DriverIdentityStddevPopFields"}

func (ec *executionContext) _DriverIdentityStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverIdentityStddevPopFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityStddevPopFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityStddevPopFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityStddevPopFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityStddevSampFieldsImplementors = []string{"DriverIdentityStddevSampFields"}

func (ec *executionContext) _DriverIdentityStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverIdentityStddevSampFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityStddevSampFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityStddevSampFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityStddevSampFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentitySumFieldsImplementors = []string{"DriverIdentitySumFields"}

func (ec *executionContext) _DriverIdentitySumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentitySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentitySumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentitySumFields")
		case "id":
			out.Values[i] = ec._DriverIdentitySumFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentitySumFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentitySumFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentitySumFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityVarPopFieldsImplementors = []string{"DriverIdentityVarPopFields"}

func (ec *executionContext) _DriverIdentityVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityVarPopFields")
		case "id":
			out.Values[i] = ec._DriverIdentityVarPopFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityVarPopFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityVarPopFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityVarPopFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityVarSampFieldsImplementors = []string{"DriverIdentityVarSampFields"}

func (ec *executionContext) _DriverIdentityVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityVarSampFields")
		case "id":
			out.Values[i] = ec._DriverIdentityVarSampFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityVarSampFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityVarSampFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityVarSampFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverIdentityVarianceFieldsImplementors = []string{"DriverIdentityVarianceFields"}

func (ec *executionContext) _DriverIdentityVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverIdentityVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverIdentityVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverIdentityVarianceFields")
		case "id":
			out.Values[i] = ec._DriverIdentityVarianceFields_id(ctx, field, obj)
		case "accumulatived_points":
			out.Values[i] = ec._DriverIdentityVarianceFields_accumulatived_points(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._DriverIdentityVarianceFields_quasi_driving_models(ctx, field, obj)
		case "driver_license_status":
			out.Values[i] = ec._DriverIdentityVarianceFields_driver_license_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoImplementors = []string{"DriverInfo"}

func (ec *executionContext) _DriverInfo(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfo")
		case "id":
			out.Values[i] = ec._DriverInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._DriverInfo_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._DriverInfo_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DriverInfo_department_id(ctx, field, obj)
		case "driver_identity_id":
			out.Values[i] = ec._DriverInfo_driver_identity_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverInfo_driver_name(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DriverInfo_telephone(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfo_sex(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._DriverInfo_files_number(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DriverInfo_contact_address(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._DriverInfo_mailing_address(ctx, field, obj)
		case "is_submit":
			out.Values[i] = ec._DriverInfo_is_submit(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._DriverInfo_submit_content(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._DriverInfo_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._DriverInfo_submit_by(ctx, field, obj)
		case "is_manual_input":
			out.Values[i] = ec._DriverInfo_is_manual_input(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._DriverInfo_is_input(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._DriverInfo_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._DriverInfo_input_by(ctx, field, obj)
		case "is_check_data":
			out.Values[i] = ec._DriverInfo_is_check_data(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._DriverInfo_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._DriverInfo_check_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._DriverInfo_remark_in(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DriverInfo_update_time_in(ctx, field, obj)
		case "is_check_sms":
			out.Values[i] = ec._DriverInfo_is_check_sms(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DriverInfo_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverInfo_is_deleted(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._DriverInfo_agent(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._DriverInfo_operator(ctx, field, obj)
		case "is_blacklist":
			out.Values[i] = ec._DriverInfo_is_blacklist(ctx, field, obj)
		case "blacklist_deadline":
			out.Values[i] = ec._DriverInfo_blacklist_deadline(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverInfo_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverInfo_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DriverInfo_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverInfo_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverInfo_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverInfo_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoAggregateImplementors = []string{"DriverInfoAggregate"}

func (ec *executionContext) _DriverInfoAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverInfoAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoAggregateFieldsImplementors = []string{"DriverInfoAggregateFields"}

func (ec *executionContext) _DriverInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverInfoAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverInfoAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverInfoAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverInfoAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverInfoAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverInfoAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverInfoAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverInfoAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverInfoAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverInfoAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverInfoAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoAvgFieldsImplementors = []string{"DriverInfoAvgFields"}

func (ec *executionContext) _DriverInfoAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoAvgFields")
		case "id":
			out.Values[i] = ec._DriverInfoAvgFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoAvgFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoMaxFieldsImplementors = []string{"DriverInfoMaxFields"}

func (ec *executionContext) _DriverInfoMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoMaxFields")
		case "id":
			out.Values[i] = ec._DriverInfoMaxFields_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverInfoMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DriverInfoMaxFields_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DriverInfoMaxFields_department_id(ctx, field, obj)
		case "driver_identity_id":
			out.Values[i] = ec._DriverInfoMaxFields_driver_identity_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverInfoMaxFields_driver_name(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DriverInfoMaxFields_telephone(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoMaxFields_sex(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._DriverInfoMaxFields_files_number(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DriverInfoMaxFields_contact_address(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._DriverInfoMaxFields_mailing_address(ctx, field, obj)
		case "is_submit":
			out.Values[i] = ec._DriverInfoMaxFields_is_submit(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._DriverInfoMaxFields_submit_content(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._DriverInfoMaxFields_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._DriverInfoMaxFields_submit_by(ctx, field, obj)
		case "is_manual_input":
			out.Values[i] = ec._DriverInfoMaxFields_is_manual_input(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._DriverInfoMaxFields_is_input(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._DriverInfoMaxFields_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._DriverInfoMaxFields_input_by(ctx, field, obj)
		case "is_check_data":
			out.Values[i] = ec._DriverInfoMaxFields_is_check_data(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._DriverInfoMaxFields_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._DriverInfoMaxFields_check_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._DriverInfoMaxFields_remark_in(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DriverInfoMaxFields_update_time_in(ctx, field, obj)
		case "is_check_sms":
			out.Values[i] = ec._DriverInfoMaxFields_is_check_sms(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DriverInfoMaxFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverInfoMaxFields_is_deleted(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._DriverInfoMaxFields_agent(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._DriverInfoMaxFields_operator(ctx, field, obj)
		case "is_blacklist":
			out.Values[i] = ec._DriverInfoMaxFields_is_blacklist(ctx, field, obj)
		case "blacklist_deadline":
			out.Values[i] = ec._DriverInfoMaxFields_blacklist_deadline(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverInfoMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverInfoMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverInfoMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverInfoMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverInfoMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverInfoMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoMinFieldsImplementors = []string{"DriverInfoMinFields"}

func (ec *executionContext) _DriverInfoMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoMinFields")
		case "id":
			out.Values[i] = ec._DriverInfoMinFields_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverInfoMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DriverInfoMinFields_enterprise_id(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DriverInfoMinFields_department_id(ctx, field, obj)
		case "driver_identity_id":
			out.Values[i] = ec._DriverInfoMinFields_driver_identity_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DriverInfoMinFields_driver_name(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DriverInfoMinFields_telephone(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoMinFields_sex(ctx, field, obj)
		case "files_number":
			out.Values[i] = ec._DriverInfoMinFields_files_number(ctx, field, obj)
		case "contact_address":
			out.Values[i] = ec._DriverInfoMinFields_contact_address(ctx, field, obj)
		case "mailing_address":
			out.Values[i] = ec._DriverInfoMinFields_mailing_address(ctx, field, obj)
		case "is_submit":
			out.Values[i] = ec._DriverInfoMinFields_is_submit(ctx, field, obj)
		case "submit_content":
			out.Values[i] = ec._DriverInfoMinFields_submit_content(ctx, field, obj)
		case "submit_at":
			out.Values[i] = ec._DriverInfoMinFields_submit_at(ctx, field, obj)
		case "submit_by":
			out.Values[i] = ec._DriverInfoMinFields_submit_by(ctx, field, obj)
		case "is_manual_input":
			out.Values[i] = ec._DriverInfoMinFields_is_manual_input(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._DriverInfoMinFields_is_input(ctx, field, obj)
		case "input_at":
			out.Values[i] = ec._DriverInfoMinFields_input_at(ctx, field, obj)
		case "input_by":
			out.Values[i] = ec._DriverInfoMinFields_input_by(ctx, field, obj)
		case "is_check_data":
			out.Values[i] = ec._DriverInfoMinFields_is_check_data(ctx, field, obj)
		case "check_at":
			out.Values[i] = ec._DriverInfoMinFields_check_at(ctx, field, obj)
		case "check_by":
			out.Values[i] = ec._DriverInfoMinFields_check_by(ctx, field, obj)
		case "remark_in":
			out.Values[i] = ec._DriverInfoMinFields_remark_in(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._DriverInfoMinFields_update_time_in(ctx, field, obj)
		case "is_check_sms":
			out.Values[i] = ec._DriverInfoMinFields_is_check_sms(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DriverInfoMinFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverInfoMinFields_is_deleted(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._DriverInfoMinFields_agent(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._DriverInfoMinFields_operator(ctx, field, obj)
		case "is_blacklist":
			out.Values[i] = ec._DriverInfoMinFields_is_blacklist(ctx, field, obj)
		case "blacklist_deadline":
			out.Values[i] = ec._DriverInfoMinFields_blacklist_deadline(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverInfoMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverInfoMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverInfoMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverInfoMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverInfoMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverInfoMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoMutationResponseImplementors = []string{"DriverInfoMutationResponse"}

func (ec *executionContext) _DriverInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverInfoMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverInfoMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoStddevFieldsImplementors = []string{"DriverInfoStddevFields"}

func (ec *executionContext) _DriverInfoStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoStddevFields")
		case "id":
			out.Values[i] = ec._DriverInfoStddevFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoStddevFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoStddevPopFieldsImplementors = []string{"DriverInfoStddevPopFields"}

func (ec *executionContext) _DriverInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverInfoStddevPopFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoStddevPopFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoStddevSampFieldsImplementors = []string{"DriverInfoStddevSampFields"}

func (ec *executionContext) _DriverInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverInfoStddevSampFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoStddevSampFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoSumFieldsImplementors = []string{"DriverInfoSumFields"}

func (ec *executionContext) _DriverInfoSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoSumFields")
		case "id":
			out.Values[i] = ec._DriverInfoSumFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoSumFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoVarPopFieldsImplementors = []string{"DriverInfoVarPopFields"}

func (ec *executionContext) _DriverInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoVarPopFields")
		case "id":
			out.Values[i] = ec._DriverInfoVarPopFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoVarPopFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoVarSampFieldsImplementors = []string{"DriverInfoVarSampFields"}

func (ec *executionContext) _DriverInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoVarSampFields")
		case "id":
			out.Values[i] = ec._DriverInfoVarSampFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoVarSampFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoVarianceFieldsImplementors = []string{"DriverInfoVarianceFields"}

func (ec *executionContext) _DriverInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfoVarianceFields")
		case "id":
			out.Values[i] = ec._DriverInfoVarianceFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._DriverInfoVarianceFields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionImplementors = []string{"DrivingLicenseRegistrationInspection"}

func (ec *executionContext) _DrivingLicenseRegistrationInspection(ctx context.Context, sel ast.SelectionSet, obj *model1.DrivingLicenseRegistrationInspection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspection")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id_info_report_id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_driver_id_info_report_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_ic_card_status(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_operation_time(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_driver_name(ctx, field, obj)
		case "license_number":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_license_number(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_imel(ctx, field, obj)
		case "ic_card_reading_result":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_ic_card_reading_result(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_occupational_number(ctx, field, obj)
		case "driver_license_name":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_driver_license_name(ctx, field, obj)
		case "license_expire_date":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_license_expire_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspection_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionAggregateImplementors = []string{"DrivingLicenseRegistrationInspectionAggregate"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionAggregate")
		case "aggregate":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionAggregateFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionAggregateFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionAggregateFields")
		case "avg":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionAvgFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionAvgFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionAvgFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAvgFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionAvgFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionMaxFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionMaxFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionMaxFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_id(ctx, field, obj)
		case "driver_id_info_report_id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_driver_id_info_report_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_vehicle_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_ic_card_status(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_operation_time(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_driver_name(ctx, field, obj)
		case "license_number":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_license_number(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_imel(ctx, field, obj)
		case "ic_card_reading_result":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_ic_card_reading_result(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_occupational_number(ctx, field, obj)
		case "driver_license_name":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_driver_license_name(ctx, field, obj)
		case "license_expire_date":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_license_expire_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionMinFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionMinFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionMinFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_id(ctx, field, obj)
		case "driver_id_info_report_id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_driver_id_info_report_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_vehicle_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_ic_card_status(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_operation_time(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_driver_name(ctx, field, obj)
		case "license_number":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_license_number(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_imel(ctx, field, obj)
		case "ic_card_reading_result":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_ic_card_reading_result(ctx, field, obj)
		case "occupational_number":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_occupational_number(ctx, field, obj)
		case "driver_license_name":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_driver_license_name(ctx, field, obj)
		case "license_expire_date":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_license_expire_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_registration_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionMutationResponseImplementors = []string{"DrivingLicenseRegistrationInspectionMutationResponse"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionStddevFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionStddevFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionStddevFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionStddevFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionStddevFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionStddevPopFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionStddevPopFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionStddevPopFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionStddevPopFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionStddevPopFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionStddevSampFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionStddevSampFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionStddevSampFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionStddevSampFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionStddevSampFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionSumFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionSumFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionSumFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionSumFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionSumFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionVarPopFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionVarPopFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionVarPopFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionVarPopFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionVarPopFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionVarSampFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionVarSampFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionVarSampFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionVarSampFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionVarSampFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var drivingLicenseRegistrationInspectionVarianceFieldsImplementors = []string{"DrivingLicenseRegistrationInspectionVarianceFields"}

func (ec *executionContext) _DrivingLicenseRegistrationInspectionVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLicenseRegistrationInspectionVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, drivingLicenseRegistrationInspectionVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DrivingLicenseRegistrationInspectionVarianceFields")
		case "id":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionVarianceFields_id(ctx, field, obj)
		case "ic_card_status":
			out.Values[i] = ec._DrivingLicenseRegistrationInspectionVarianceFields_ic_card_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_driver_fingerprint":
			out.Values[i] = ec._Mutation_delete_driver_fingerprint(ctx, field)
		case "delete_driver_fingerprint_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_fingerprint_by_pk(ctx, field)
		case "insert_driver_fingerprint":
			out.Values[i] = ec._Mutation_insert_driver_fingerprint(ctx, field)
		case "insert_driver_fingerprint_one":
			out.Values[i] = ec._Mutation_insert_driver_fingerprint_one(ctx, field)
		case "update_driver_fingerprint":
			out.Values[i] = ec._Mutation_update_driver_fingerprint(ctx, field)
		case "update_driver_fingerprint_by_pk":
			out.Values[i] = ec._Mutation_update_driver_fingerprint_by_pk(ctx, field)
		case "update_driver_fingerprint_by_union_pk":
			out.Values[i] = ec._Mutation_update_driver_fingerprint_by_union_pk(ctx, field)
		case "delete_driver_fingerprint_by_union_pk":
			out.Values[i] = ec._Mutation_delete_driver_fingerprint_by_union_pk(ctx, field)
		case "delete_driver_fingerprint_association":
			out.Values[i] = ec._Mutation_delete_driver_fingerprint_association(ctx, field)
		case "delete_driver_fingerprint_association_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_fingerprint_association_by_pk(ctx, field)
		case "insert_driver_fingerprint_association":
			out.Values[i] = ec._Mutation_insert_driver_fingerprint_association(ctx, field)
		case "insert_driver_fingerprint_association_one":
			out.Values[i] = ec._Mutation_insert_driver_fingerprint_association_one(ctx, field)
		case "update_driver_fingerprint_association":
			out.Values[i] = ec._Mutation_update_driver_fingerprint_association(ctx, field)
		case "update_driver_fingerprint_association_by_pk":
			out.Values[i] = ec._Mutation_update_driver_fingerprint_association_by_pk(ctx, field)
		case "update_driver_fingerprint_association_by_union_pk":
			out.Values[i] = ec._Mutation_update_driver_fingerprint_association_by_union_pk(ctx, field)
		case "delete_driver_fingerprint_association_by_union_pk":
			out.Values[i] = ec._Mutation_delete_driver_fingerprint_association_by_union_pk(ctx, field)
		case "delete_driver_identity":
			out.Values[i] = ec._Mutation_delete_driver_identity(ctx, field)
		case "delete_driver_identity_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_identity_by_pk(ctx, field)
		case "insert_driver_identity":
			out.Values[i] = ec._Mutation_insert_driver_identity(ctx, field)
		case "insert_driver_identity_one":
			out.Values[i] = ec._Mutation_insert_driver_identity_one(ctx, field)
		case "update_driver_identity":
			out.Values[i] = ec._Mutation_update_driver_identity(ctx, field)
		case "update_driver_identity_by_pk":
			out.Values[i] = ec._Mutation_update_driver_identity_by_pk(ctx, field)
		case "update_driver_identity_by_union_pk":
			out.Values[i] = ec._Mutation_update_driver_identity_by_union_pk(ctx, field)
		case "delete_driver_identity_by_union_pk":
			out.Values[i] = ec._Mutation_delete_driver_identity_by_union_pk(ctx, field)
		case "delete_driver_identity_info_report":
			out.Values[i] = ec._Mutation_delete_driver_identity_info_report(ctx, field)
		case "delete_driver_identity_info_report_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_identity_info_report_by_pk(ctx, field)
		case "insert_driver_identity_info_report":
			out.Values[i] = ec._Mutation_insert_driver_identity_info_report(ctx, field)
		case "insert_driver_identity_info_report_one":
			out.Values[i] = ec._Mutation_insert_driver_identity_info_report_one(ctx, field)
		case "update_driver_identity_info_report":
			out.Values[i] = ec._Mutation_update_driver_identity_info_report(ctx, field)
		case "update_driver_identity_info_report_by_pk":
			out.Values[i] = ec._Mutation_update_driver_identity_info_report_by_pk(ctx, field)
		case "update_driver_identity_info_report_by_union_pk":
			out.Values[i] = ec._Mutation_update_driver_identity_info_report_by_union_pk(ctx, field)
		case "delete_driver_identity_info_report_by_union_pk":
			out.Values[i] = ec._Mutation_delete_driver_identity_info_report_by_union_pk(ctx, field)
		case "delete_driver_info":
			out.Values[i] = ec._Mutation_delete_driver_info(ctx, field)
		case "delete_driver_info_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_info_by_pk(ctx, field)
		case "insert_driver_info":
			out.Values[i] = ec._Mutation_insert_driver_info(ctx, field)
		case "insert_driver_info_one":
			out.Values[i] = ec._Mutation_insert_driver_info_one(ctx, field)
		case "update_driver_info":
			out.Values[i] = ec._Mutation_update_driver_info(ctx, field)
		case "update_driver_info_by_pk":
			out.Values[i] = ec._Mutation_update_driver_info_by_pk(ctx, field)
		case "delete_driving_license_registration_inspection":
			out.Values[i] = ec._Mutation_delete_driving_license_registration_inspection(ctx, field)
		case "delete_driving_license_registration_inspection_by_pk":
			out.Values[i] = ec._Mutation_delete_driving_license_registration_inspection_by_pk(ctx, field)
		case "insert_driving_license_registration_inspection":
			out.Values[i] = ec._Mutation_insert_driving_license_registration_inspection(ctx, field)
		case "insert_driving_license_registration_inspection_one":
			out.Values[i] = ec._Mutation_insert_driving_license_registration_inspection_one(ctx, field)
		case "update_driving_license_registration_inspection":
			out.Values[i] = ec._Mutation_update_driving_license_registration_inspection(ctx, field)
		case "update_driving_license_registration_inspection_by_pk":
			out.Values[i] = ec._Mutation_update_driving_license_registration_inspection_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "driver_fingerprint":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_association":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_association(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_association_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_association_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_association_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_association_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_fingerprint_association_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_fingerprint_association_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_info_report":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_info_report(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_info_report_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_info_report_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_info_report_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_info_report_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_identity_info_report_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_identity_info_report_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_info_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driving_license_registration_inspection":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driving_license_registration_inspection(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driving_license_registration_inspection_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driving_license_registration_inspection_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driving_license_registration_inspection_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driving_license_registration_inspection_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDriverFingerprint2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx context.Context, sel ast.SelectionSet, v model1.DriverFingerprint) graphql.Marshaler {
	return ec._DriverFingerprint(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverFingerprint2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverFingerprint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx context.Context, sel ast.SelectionSet, v *model1.DriverFingerprint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverFingerprint(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverFingerprintAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverFingerprintAggregate) graphql.Marshaler {
	return ec._DriverFingerprintAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverFingerprintAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverFingerprintAggregate(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverFingerprintAssociation2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx context.Context, sel ast.SelectionSet, v model1.DriverFingerprintAssociation) graphql.Marshaler {
	return ec._DriverFingerprintAssociation(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverFingerprintAssociation2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverFingerprintAssociation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx context.Context, sel ast.SelectionSet, v *model1.DriverFingerprintAssociation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverFingerprintAssociation(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverFingerprintAssociationAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverFingerprintAssociationAggregate) graphql.Marshaler {
	return ec._DriverFingerprintAssociationAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverFingerprintAssociationAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverFingerprintAssociationBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx context.Context, v interface{}) (model.DriverFingerprintAssociationBoolExp, error) {
	res, err := ec.unmarshalInputDriverFingerprintAssociationBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintAssociationInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationInsertInput(ctx context.Context, v interface{}) (model.DriverFingerprintAssociationInsertInput, error) {
	res, err := ec.unmarshalInputDriverFingerprintAssociationInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintAssociationInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverFingerprintAssociationInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverFingerprintAssociationInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverFingerprintAssociationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverFingerprintAssociationInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationInsertInput(ctx context.Context, v interface{}) (*model.DriverFingerprintAssociationInsertInput, error) {
	res, err := ec.unmarshalInputDriverFingerprintAssociationInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintAssociationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationOrderBy(ctx context.Context, v interface{}) (*model.DriverFingerprintAssociationOrderBy, error) {
	res, err := ec.unmarshalInputDriverFingerprintAssociationOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintAssociationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumn(ctx context.Context, v interface{}) (model.DriverFingerprintAssociationSelectColumn, error) {
	var res model.DriverFingerprintAssociationSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverFingerprintAssociationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverFingerprintAssociationSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDriverFingerprintBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx context.Context, v interface{}) (model.DriverFingerprintBoolExp, error) {
	res, err := ec.unmarshalInputDriverFingerprintBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintInsertInput(ctx context.Context, v interface{}) (model.DriverFingerprintInsertInput, error) {
	res, err := ec.unmarshalInputDriverFingerprintInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverFingerprintInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverFingerprintInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverFingerprintInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverFingerprintInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintInsertInput(ctx context.Context, v interface{}) (*model.DriverFingerprintInsertInput, error) {
	res, err := ec.unmarshalInputDriverFingerprintInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintOrderBy(ctx context.Context, v interface{}) (*model.DriverFingerprintOrderBy, error) {
	res, err := ec.unmarshalInputDriverFingerprintOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverFingerprintSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumn(ctx context.Context, v interface{}) (model.DriverFingerprintSelectColumn, error) {
	var res model.DriverFingerprintSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverFingerprintSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverFingerprintSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDriverIdentity2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx context.Context, sel ast.SelectionSet, v model1.DriverIdentity) graphql.Marshaler {
	return ec._DriverIdentity(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverIdentity2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverIdentity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx context.Context, sel ast.SelectionSet, v *model1.DriverIdentity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverIdentity(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverIdentityAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentityAggregate) graphql.Marshaler {
	return ec._DriverIdentityAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverIdentityAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverIdentityAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverIdentityBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx context.Context, v interface{}) (model.DriverIdentityBoolExp, error) {
	res, err := ec.unmarshalInputDriverIdentityBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverIdentityInfoReport2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx context.Context, sel ast.SelectionSet, v model1.DriverIdentityInfoReport) graphql.Marshaler {
	return ec._DriverIdentityInfoReport(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverIdentityInfoReport2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReportᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverIdentityInfoReport) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx context.Context, sel ast.SelectionSet, v *model1.DriverIdentityInfoReport) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverIdentityInfoReport(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverIdentityInfoReportAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentityInfoReportAggregate) graphql.Marshaler {
	return ec._DriverIdentityInfoReportAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverIdentityInfoReportAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverIdentityInfoReportBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx context.Context, v interface{}) (model.DriverIdentityInfoReportBoolExp, error) {
	res, err := ec.unmarshalInputDriverIdentityInfoReportBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentityInfoReportInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportInsertInput(ctx context.Context, v interface{}) (model.DriverIdentityInfoReportInsertInput, error) {
	res, err := ec.unmarshalInputDriverIdentityInfoReportInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentityInfoReportInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverIdentityInfoReportInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityInfoReportInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverIdentityInfoReportInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverIdentityInfoReportInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportInsertInput(ctx context.Context, v interface{}) (*model.DriverIdentityInfoReportInsertInput, error) {
	res, err := ec.unmarshalInputDriverIdentityInfoReportInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentityInfoReportOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityInfoReportOrderBy, error) {
	res, err := ec.unmarshalInputDriverIdentityInfoReportOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentityInfoReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumn(ctx context.Context, v interface{}) (model.DriverIdentityInfoReportSelectColumn, error) {
	var res model.DriverIdentityInfoReportSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverIdentityInfoReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentityInfoReportSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDriverIdentityInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx context.Context, v interface{}) (model.DriverIdentityInsertInput, error) {
	res, err := ec.unmarshalInputDriverIdentityInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentityInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverIdentityInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverIdentityInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverIdentityInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInsertInput(ctx context.Context, v interface{}) (*model.DriverIdentityInsertInput, error) {
	res, err := ec.unmarshalInputDriverIdentityInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentityOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderBy(ctx context.Context, v interface{}) (*model.DriverIdentityOrderBy, error) {
	res, err := ec.unmarshalInputDriverIdentityOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverIdentitySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx context.Context, v interface{}) (model.DriverIdentitySelectColumn, error) {
	var res model.DriverIdentitySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverIdentitySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverIdentitySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDriverInfo2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v model1.DriverInfo) graphql.Marshaler {
	return ec._DriverInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model1.DriverInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverInfoAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoAggregate) graphql.Marshaler {
	return ec._DriverInfoAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverInfoAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx context.Context, v interface{}) (model.DriverInfoBoolExp, error) {
	res, err := ec.unmarshalInputDriverInfoBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx context.Context, v interface{}) (model.DriverInfoInsertInput, error) {
	res, err := ec.unmarshalInputDriverInfoInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoInsertInput(ctx context.Context, v interface{}) (*model.DriverInfoInsertInput, error) {
	res, err := ec.unmarshalInputDriverInfoInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderBy(ctx context.Context, v interface{}) (*model.DriverInfoOrderBy, error) {
	res, err := ec.unmarshalInputDriverInfoOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx context.Context, v interface{}) (model.DriverInfoSelectColumn, error) {
	var res model.DriverInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDrivingLicenseRegistrationInspection2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx context.Context, sel ast.SelectionSet, v model1.DrivingLicenseRegistrationInspection) graphql.Marshaler {
	return ec._DrivingLicenseRegistrationInspection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDrivingLicenseRegistrationInspection2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspectionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DrivingLicenseRegistrationInspection) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx context.Context, sel ast.SelectionSet, v *model1.DrivingLicenseRegistrationInspection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspection(ctx, sel, v)
}

func (ec *executionContext) marshalNDrivingLicenseRegistrationInspectionAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAggregate(ctx context.Context, sel ast.SelectionSet, v model.DrivingLicenseRegistrationInspectionAggregate) graphql.Marshaler {
	return ec._DrivingLicenseRegistrationInspectionAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDrivingLicenseRegistrationInspectionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDrivingLicenseRegistrationInspectionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx context.Context, v interface{}) (model.DrivingLicenseRegistrationInspectionBoolExp, error) {
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLicenseRegistrationInspectionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionInsertInput(ctx context.Context, v interface{}) (model.DrivingLicenseRegistrationInspectionInsertInput, error) {
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLicenseRegistrationInspectionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DrivingLicenseRegistrationInspectionInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLicenseRegistrationInspectionInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDrivingLicenseRegistrationInspectionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDrivingLicenseRegistrationInspectionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionInsertInput(ctx context.Context, v interface{}) (*model.DrivingLicenseRegistrationInspectionInsertInput, error) {
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLicenseRegistrationInspectionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionOrderBy(ctx context.Context, v interface{}) (*model.DrivingLicenseRegistrationInspectionOrderBy, error) {
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDrivingLicenseRegistrationInspectionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumn(ctx context.Context, v interface{}) (model.DrivingLicenseRegistrationInspectionSelectColumn, error) {
	var res model.DrivingLicenseRegistrationInspectionSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDrivingLicenseRegistrationInspectionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DrivingLicenseRegistrationInspectionSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverFingerprint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprint(ctx context.Context, sel ast.SelectionSet, v *model1.DriverFingerprint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprint(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociation2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverFingerprintAssociation(ctx context.Context, sel ast.SelectionSet, v *model1.DriverFingerprintAssociation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociation(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverFingerprintAssociationBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx context.Context, v interface{}) ([]*model.DriverFingerprintAssociationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverFingerprintAssociationBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverFingerprintAssociationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverFingerprintAssociationBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationBoolExp(ctx context.Context, v interface{}) (*model.DriverFingerprintAssociationBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverFingerprintAssociationBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverFingerprintAssociationIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationIncInput(ctx context.Context, v interface{}) (*model.DriverFingerprintAssociationIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverFingerprintAssociationIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverFingerprintAssociationMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverFingerprintAssociationOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverFingerprintAssociationOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverFingerprintAssociationOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverFingerprintAssociationOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverFingerprintAssociationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverFingerprintAssociationSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverFingerprintAssociationSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverFingerprintAssociationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverFingerprintAssociationSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverFingerprintAssociationSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverFingerprintAssociationSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverFingerprintAssociationSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSetInput(ctx context.Context, v interface{}) (*model.DriverFingerprintAssociationSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverFingerprintAssociationSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverFingerprintAssociationStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAssociationVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAssociationVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAssociationVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAssociationVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverFingerprintBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx context.Context, v interface{}) ([]*model.DriverFingerprintBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverFingerprintBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverFingerprintBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverFingerprintBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintBoolExp(ctx context.Context, v interface{}) (*model.DriverFingerprintBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverFingerprintBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverFingerprintIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintIncInput(ctx context.Context, v interface{}) (*model.DriverFingerprintIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverFingerprintIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverFingerprintMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverFingerprintOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverFingerprintOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverFingerprintOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverFingerprintOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverFingerprintSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverFingerprintSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverFingerprintSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverFingerprintSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverFingerprintSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverFingerprintSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverFingerprintSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverFingerprintSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSetInput(ctx context.Context, v interface{}) (*model.DriverFingerprintSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverFingerprintSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverFingerprintStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverFingerprintVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverFingerprintVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverFingerprintVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverFingerprintVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentity2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentity(ctx context.Context, sel ast.SelectionSet, v *model1.DriverIdentity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentity(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverIdentityBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx context.Context, v interface{}) ([]*model.DriverIdentityBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverIdentityBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverIdentityBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityBoolExp(ctx context.Context, v interface{}) (*model.DriverIdentityBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverIdentityBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverIdentityIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityIncInput(ctx context.Context, v interface{}) (*model.DriverIdentityIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverIdentityIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverIdentityInfoReport2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverIdentityInfoReport(ctx context.Context, sel ast.SelectionSet, v *model1.DriverIdentityInfoReport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReport(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverIdentityInfoReportBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx context.Context, v interface{}) ([]*model.DriverIdentityInfoReportBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityInfoReportBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverIdentityInfoReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverIdentityInfoReportBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportBoolExp(ctx context.Context, v interface{}) (*model.DriverIdentityInfoReportBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverIdentityInfoReportBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverIdentityInfoReportIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportIncInput(ctx context.Context, v interface{}) (*model.DriverIdentityInfoReportIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverIdentityInfoReportIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverIdentityInfoReportMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverIdentityInfoReportOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverIdentityInfoReportOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityInfoReportOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverIdentityInfoReportOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverIdentityInfoReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverIdentityInfoReportSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverIdentityInfoReportSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverIdentityInfoReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverIdentityInfoReportSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverIdentityInfoReportSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverIdentityInfoReportSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverIdentityInfoReportSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSetInput(ctx context.Context, v interface{}) (*model.DriverIdentityInfoReportSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverIdentityInfoReportSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverIdentityInfoReportStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityInfoReportVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityInfoReportVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityInfoReportVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityInfoReportVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverIdentityOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverIdentityOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverIdentityOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverIdentityOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverIdentitySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverIdentitySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverIdentitySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverIdentitySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverIdentitySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverIdentitySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverIdentitySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverIdentitySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySetInput(ctx context.Context, v interface{}) (*model.DriverIdentitySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverIdentitySetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverIdentityStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentitySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentitySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentitySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentitySumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverIdentityVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverIdentityVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverIdentityVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverIdentityVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model1.DriverInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx context.Context, v interface{}) ([]*model.DriverInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoBoolExp(ctx context.Context, v interface{}) (*model.DriverInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverInfoBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoIncInput(ctx context.Context, v interface{}) (*model.DriverInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverInfoIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSetInput(ctx context.Context, v interface{}) (*model.DriverInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverInfoSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDriverInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfoVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspection2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋmodelᚐDrivingLicenseRegistrationInspection(ctx context.Context, sel ast.SelectionSet, v *model1.DrivingLicenseRegistrationInspection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspection(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx context.Context, v interface{}) ([]*model.DrivingLicenseRegistrationInspectionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLicenseRegistrationInspectionBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODrivingLicenseRegistrationInspectionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionBoolExp(ctx context.Context, v interface{}) (*model.DrivingLicenseRegistrationInspectionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODrivingLicenseRegistrationInspectionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionIncInput(ctx context.Context, v interface{}) (*model.DrivingLicenseRegistrationInspectionIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODrivingLicenseRegistrationInspectionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DrivingLicenseRegistrationInspectionOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLicenseRegistrationInspectionOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDrivingLicenseRegistrationInspectionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODrivingLicenseRegistrationInspectionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DrivingLicenseRegistrationInspectionSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DrivingLicenseRegistrationInspectionSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDrivingLicenseRegistrationInspectionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DrivingLicenseRegistrationInspectionSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDrivingLicenseRegistrationInspectionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODrivingLicenseRegistrationInspectionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSetInput(ctx context.Context, v interface{}) (*model.DrivingLicenseRegistrationInspectionSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDrivingLicenseRegistrationInspectionSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODrivingLicenseRegistrationInspectionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdriverᚋgraphᚋmodelᚐDrivingLicenseRegistrationInspectionVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLicenseRegistrationInspectionVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DrivingLicenseRegistrationInspectionVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
