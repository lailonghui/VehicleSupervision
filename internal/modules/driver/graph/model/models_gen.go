// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/driver/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "driver_fingerprint"
type DriverFingerprintAggregate struct {
	Aggregate *DriverFingerprintAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_fingerprint"
type DriverFingerprintAggregateFields struct {
	Avg        *DriverFingerprintAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *DriverFingerprintMaxFields        `json:"max"`
	Min        *DriverFingerprintMinFields        `json:"min"`
	Stddev     *DriverFingerprintStddevFields     `json:"stddev"`
	StddevPop  *DriverFingerprintStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverFingerprintStddevSampFields `json:"stddev_samp"`
	Sum        *DriverFingerprintSumFields        `json:"sum"`
	VarPop     *DriverFingerprintVarPopFields     `json:"var_pop"`
	VarSamp    *DriverFingerprintVarSampFields    `json:"var_samp"`
	Variance   *DriverFingerprintVarianceFields   `json:"variance"`
}

// aggregated selection of "driver_fingerprint_association"
type DriverFingerprintAssociationAggregate struct {
	Aggregate *DriverFingerprintAssociationAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_fingerprint_association"
type DriverFingerprintAssociationAggregateFields struct {
	Avg        *DriverFingerprintAssociationAvgFields        `json:"avg"`
	Count      *int                                          `json:"count"`
	Max        *DriverFingerprintAssociationMaxFields        `json:"max"`
	Min        *DriverFingerprintAssociationMinFields        `json:"min"`
	Stddev     *DriverFingerprintAssociationStddevFields     `json:"stddev"`
	StddevPop  *DriverFingerprintAssociationStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverFingerprintAssociationStddevSampFields `json:"stddev_samp"`
	Sum        *DriverFingerprintAssociationSumFields        `json:"sum"`
	VarPop     *DriverFingerprintAssociationVarPopFields     `json:"var_pop"`
	VarSamp    *DriverFingerprintAssociationVarSampFields    `json:"var_samp"`
	Variance   *DriverFingerprintAssociationVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_fingerprint_association'.
type DriverFingerprintAssociationBoolExp struct {
	And                            []*DriverFingerprintAssociationBoolExp `json:"_and"`
	Not                            *DriverFingerprintAssociationBoolExp   `json:"_not"`
	Or                             []*DriverFingerprintAssociationBoolExp `json:"_or"`
	ID                             *model.BigintComparisonExp             `json:"id"`
	DriverFingerprintAssociationID *model.StringComparisonExp             `json:"driver_fingerprint_association_id"`
	DriverID                       *model.StringComparisonExp             `json:"driver_id"`
	FingerprintName                *model.StringComparisonExp             `json:"fingerprint_name"`
	DriverFingerprintID            *model.StringComparisonExp             `json:"driver_fingerprint_id"`
	PictureAddress                 *model.StringComparisonExp             `json:"picture_address"`
	IsDeleted                      *model.BooleanComparisonExp            `json:"is_deleted"`
	CreatedAt                      *model.TimestamptzComparisonExp        `json:"created_at"`
	CreatedBy                      *model.StringComparisonExp             `json:"created_by"`
	UpdatedAt                      *model.TimestamptzComparisonExp        `json:"updated_at"`
	UpdatedBy                      *model.StringComparisonExp             `json:"updated_by"`
	DeletedAt                      *model.TimestamptzComparisonExp        `json:"deleted_at"`
	DeletedBy                      *model.StringComparisonExp             `json:"deleted_by"`
}

// input type for incrementing integer column in table "driver_fingerprint_association"
type DriverFingerprintAssociationIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "driver_fingerprint_association"
type DriverFingerprintAssociationInsertInput struct {
	ID                             *int64     `json:"id"`
	DriverFingerprintAssociationID *string    `json:"driver_fingerprint_association_id"`
	DriverID                       *string    `json:"driver_id"`
	FingerprintName                *string    `json:"fingerprint_name"`
	DriverFingerprintID            *string    `json:"driver_fingerprint_id"`
	PictureAddress                 *string    `json:"picture_address"`
	IsDeleted                      *bool      `json:"is_deleted"`
	CreatedAt                      *time.Time `json:"created_at"`
	CreatedBy                      *string    `json:"created_by"`
	UpdatedAt                      *time.Time `json:"updated_at"`
	UpdatedBy                      *string    `json:"updated_by"`
	DeletedAt                      *time.Time `json:"deleted_at"`
	DeletedBy                      *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationMaxFields struct {
	ID                             *int64     `json:"id"`
	DriverFingerprintAssociationID *string    `json:"driver_fingerprint_association_id"`
	DriverID                       *string    `json:"driver_id"`
	FingerprintName                *string    `json:"fingerprint_name"`
	DriverFingerprintID            *string    `json:"driver_fingerprint_id"`
	PictureAddress                 *string    `json:"picture_address"`
	IsDeleted                      *bool      `json:"is_deleted"`
	CreatedAt                      *time.Time `json:"created_at"`
	CreatedBy                      *string    `json:"created_by"`
	UpdatedAt                      *time.Time `json:"updated_at"`
	UpdatedBy                      *string    `json:"updated_by"`
	DeletedAt                      *time.Time `json:"deleted_at"`
	DeletedBy                      *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationMinFields struct {
	ID                             *int64     `json:"id"`
	DriverFingerprintAssociationID *string    `json:"driver_fingerprint_association_id"`
	DriverID                       *string    `json:"driver_id"`
	FingerprintName                *string    `json:"fingerprint_name"`
	DriverFingerprintID            *string    `json:"driver_fingerprint_id"`
	PictureAddress                 *string    `json:"picture_address"`
	IsDeleted                      *bool      `json:"is_deleted"`
	CreatedAt                      *time.Time `json:"created_at"`
	CreatedBy                      *string    `json:"created_by"`
	UpdatedAt                      *time.Time `json:"updated_at"`
	UpdatedBy                      *string    `json:"updated_by"`
	DeletedAt                      *time.Time `json:"deleted_at"`
	DeletedBy                      *string    `json:"deleted_by"`
}

// response of any mutation on the table "driver_fingerprint_association"
type DriverFingerprintAssociationMutationResponse struct {
	AffectedRows int                                    `json:"affected_rows"`
	Returning    []*model1.DriverFingerprintAssociation `json:"returning"`
}

// ordering options when selecting data from "driver_fingerprint_association"
type DriverFingerprintAssociationOrderBy struct {
	ID                             *model.OrderBy `json:"id"`
	DriverFingerprintAssociationID *model.OrderBy `json:"driver_fingerprint_association_id"`
	DriverID                       *model.OrderBy `json:"driver_id"`
	FingerprintName                *model.OrderBy `json:"fingerprint_name"`
	DriverFingerprintID            *model.OrderBy `json:"driver_fingerprint_id"`
	PictureAddress                 *model.OrderBy `json:"picture_address"`
	IsDeleted                      *model.OrderBy `json:"is_deleted"`
	CreatedAt                      *model.OrderBy `json:"created_at"`
	CreatedBy                      *model.OrderBy `json:"created_by"`
	UpdatedAt                      *model.OrderBy `json:"updated_at"`
	UpdatedBy                      *model.OrderBy `json:"updated_by"`
	DeletedAt                      *model.OrderBy `json:"deleted_at"`
	DeletedBy                      *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driver_fingerprint_association"
type DriverFingerprintAssociationSetInput struct {
	ID                             *int64     `json:"id"`
	DriverFingerprintAssociationID *string    `json:"driver_fingerprint_association_id"`
	DriverID                       *string    `json:"driver_id"`
	FingerprintName                *string    `json:"fingerprint_name"`
	DriverFingerprintID            *string    `json:"driver_fingerprint_id"`
	PictureAddress                 *string    `json:"picture_address"`
	IsDeleted                      *bool      `json:"is_deleted"`
	CreatedAt                      *time.Time `json:"created_at"`
	CreatedBy                      *string    `json:"created_by"`
	UpdatedAt                      *time.Time `json:"updated_at"`
	UpdatedBy                      *string    `json:"updated_by"`
	DeletedAt                      *time.Time `json:"deleted_at"`
	DeletedBy                      *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "driver_fingerprint_association"
type DriverFingerprintAssociationVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate avg on columns of table "driver_fingerprint"
type DriverFingerprintAvgFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_fingerprint'.
type DriverFingerprintBoolExp struct {
	And                 []*DriverFingerprintBoolExp     `json:"_and"`
	Not                 *DriverFingerprintBoolExp       `json:"_not"`
	Or                  []*DriverFingerprintBoolExp     `json:"_or"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	DriverFingerprintID *model.StringComparisonExp      `json:"driver_fingerprint_id"`
	DriverID            *model.StringComparisonExp      `json:"driver_id"`
	DriverName          *model.StringComparisonExp      `json:"driver_name"`
	UserID              *model.StringComparisonExp      `json:"user_id"`
	Signature           *model.StringComparisonExp      `json:"signature"`
	FingerprintName     *model.StringComparisonExp      `json:"fingerprint_name"`
	SimNumber           *model.StringComparisonExp      `json:"sim_number"`
	InstructionID       *model.StringComparisonExp      `json:"instruction_id"`
	OperationType       *model.IntComparisonExp         `json:"operation_type"`
	Content             *model.StringComparisonExp      `json:"content"`
	OperationTime       *model.TimestamptzComparisonExp `json:"operation_time"`
	UploadTime          *model.TimestamptzComparisonExp `json:"upload_time"`
	Timestamp           *model.StringComparisonExp      `json:"timestamp"`
	TernimalID          *model.StringComparisonExp      `json:"ternimal_id"`
	IsSuccess           *model.BooleanComparisonExp     `json:"is_success"`
	IsDeleted           *model.BooleanComparisonExp     `json:"is_deleted"`
	CreatedAt           *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy           *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt           *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy           *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt           *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy           *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "driver_fingerprint"
type DriverFingerprintIncInput struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// input type for inserting data into table "driver_fingerprint"
type DriverFingerprintInsertInput struct {
	ID                  *int64     `json:"id"`
	DriverFingerprintID *string    `json:"driver_fingerprint_id"`
	DriverID            *string    `json:"driver_id"`
	DriverName          *string    `json:"driver_name"`
	UserID              *string    `json:"user_id"`
	Signature           *string    `json:"signature"`
	FingerprintName     *string    `json:"fingerprint_name"`
	SimNumber           *string    `json:"sim_number"`
	InstructionID       *string    `json:"instruction_id"`
	OperationType       *int       `json:"operation_type"`
	Content             *string    `json:"content"`
	OperationTime       *time.Time `json:"operation_time"`
	UploadTime          *time.Time `json:"upload_time"`
	Timestamp           *string    `json:"timestamp"`
	TernimalID          *string    `json:"ternimal_id"`
	IsSuccess           *bool      `json:"is_success"`
	IsDeleted           *bool      `json:"is_deleted"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driver_fingerprint"
type DriverFingerprintMaxFields struct {
	ID                  *int64     `json:"id"`
	DriverFingerprintID *string    `json:"driver_fingerprint_id"`
	DriverID            *string    `json:"driver_id"`
	DriverName          *string    `json:"driver_name"`
	UserID              *string    `json:"user_id"`
	Signature           *string    `json:"signature"`
	FingerprintName     *string    `json:"fingerprint_name"`
	SimNumber           *string    `json:"sim_number"`
	InstructionID       *string    `json:"instruction_id"`
	OperationType       *int       `json:"operation_type"`
	Content             *string    `json:"content"`
	OperationTime       *time.Time `json:"operation_time"`
	UploadTime          *time.Time `json:"upload_time"`
	Timestamp           *string    `json:"timestamp"`
	TernimalID          *string    `json:"ternimal_id"`
	IsSuccess           *bool      `json:"is_success"`
	IsDeleted           *bool      `json:"is_deleted"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driver_fingerprint"
type DriverFingerprintMinFields struct {
	ID                  *int64     `json:"id"`
	DriverFingerprintID *string    `json:"driver_fingerprint_id"`
	DriverID            *string    `json:"driver_id"`
	DriverName          *string    `json:"driver_name"`
	UserID              *string    `json:"user_id"`
	Signature           *string    `json:"signature"`
	FingerprintName     *string    `json:"fingerprint_name"`
	SimNumber           *string    `json:"sim_number"`
	InstructionID       *string    `json:"instruction_id"`
	OperationType       *int       `json:"operation_type"`
	Content             *string    `json:"content"`
	OperationTime       *time.Time `json:"operation_time"`
	UploadTime          *time.Time `json:"upload_time"`
	Timestamp           *string    `json:"timestamp"`
	TernimalID          *string    `json:"ternimal_id"`
	IsSuccess           *bool      `json:"is_success"`
	IsDeleted           *bool      `json:"is_deleted"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// response of any mutation on the table "driver_fingerprint"
type DriverFingerprintMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.DriverFingerprint `json:"returning"`
}

// ordering options when selecting data from "driver_fingerprint"
type DriverFingerprintOrderBy struct {
	ID                  *model.OrderBy `json:"id"`
	DriverFingerprintID *model.OrderBy `json:"driver_fingerprint_id"`
	DriverID            *model.OrderBy `json:"driver_id"`
	DriverName          *model.OrderBy `json:"driver_name"`
	UserID              *model.OrderBy `json:"user_id"`
	Signature           *model.OrderBy `json:"signature"`
	FingerprintName     *model.OrderBy `json:"fingerprint_name"`
	SimNumber           *model.OrderBy `json:"sim_number"`
	InstructionID       *model.OrderBy `json:"instruction_id"`
	OperationType       *model.OrderBy `json:"operation_type"`
	Content             *model.OrderBy `json:"content"`
	OperationTime       *model.OrderBy `json:"operation_time"`
	UploadTime          *model.OrderBy `json:"upload_time"`
	Timestamp           *model.OrderBy `json:"timestamp"`
	TernimalID          *model.OrderBy `json:"ternimal_id"`
	IsSuccess           *model.OrderBy `json:"is_success"`
	IsDeleted           *model.OrderBy `json:"is_deleted"`
	CreatedAt           *model.OrderBy `json:"created_at"`
	CreatedBy           *model.OrderBy `json:"created_by"`
	UpdatedAt           *model.OrderBy `json:"updated_at"`
	UpdatedBy           *model.OrderBy `json:"updated_by"`
	DeletedAt           *model.OrderBy `json:"deleted_at"`
	DeletedBy           *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driver_fingerprint"
type DriverFingerprintSetInput struct {
	ID                  *int64     `json:"id"`
	DriverFingerprintID *string    `json:"driver_fingerprint_id"`
	DriverID            *string    `json:"driver_id"`
	DriverName          *string    `json:"driver_name"`
	UserID              *string    `json:"user_id"`
	Signature           *string    `json:"signature"`
	FingerprintName     *string    `json:"fingerprint_name"`
	SimNumber           *string    `json:"sim_number"`
	InstructionID       *string    `json:"instruction_id"`
	OperationType       *int       `json:"operation_type"`
	Content             *string    `json:"content"`
	OperationTime       *time.Time `json:"operation_time"`
	UploadTime          *time.Time `json:"upload_time"`
	Timestamp           *string    `json:"timestamp"`
	TernimalID          *string    `json:"ternimal_id"`
	IsSuccess           *bool      `json:"is_success"`
	IsDeleted           *bool      `json:"is_deleted"`
	CreatedAt           *time.Time `json:"created_at"`
	CreatedBy           *string    `json:"created_by"`
	UpdatedAt           *time.Time `json:"updated_at"`
	UpdatedBy           *string    `json:"updated_by"`
	DeletedAt           *time.Time `json:"deleted_at"`
	DeletedBy           *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driver_fingerprint"
type DriverFingerprintStddevFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate stddev_pop on columns of table "driver_fingerprint"
type DriverFingerprintStddevPopFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate stddev_samp on columns of table "driver_fingerprint"
type DriverFingerprintStddevSampFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate sum on columns of table "driver_fingerprint"
type DriverFingerprintSumFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate var_pop on columns of table "driver_fingerprint"
type DriverFingerprintVarPopFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate var_samp on columns of table "driver_fingerprint"
type DriverFingerprintVarSampFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate variance on columns of table "driver_fingerprint"
type DriverFingerprintVarianceFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// 驾驶员身份信息采集上报
type DriverIDInfoReport struct {
	// 按指定方法生成                                  ( 主键                       )
	ID int64 `json:"id"`
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	DriverIDInfoReportID string `json:"driver_id_info_report_id"`
	// vehicle_info 车辆信息表 的vehicle_id        (                            )
	VehicleID string `json:"vehicle_id"`
	// IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	IcCardStatus *int `json:"ic_card_status"`
	// 操作时间                                        (                            )
	OperationTime *time.Time `json:"operation_time"`
	// 驾驶员姓名                                      (                            )
	DriverName *string `json:"driver_name"`
	// 证件号码                                        (                            )
	LicenseNumber *string `json:"license_number"`
	// 终端IMEI                                        ( 国际移动设备标识别码       )
	Imel *string `json:"imel"`
	// IC卡读取结果                                    ( IC卡读卡字典           )
	IcCardReadingResult *string `json:"ic_card_reading_result"`
	// 从业资格证编码                                  (                            )
	OccupationalNumber *string `json:"occupational_number"`
	// 发证机构名称                                    (                            )
	DriverLicenseName *string `json:"driver_license_name"`
	// 证件有效期                                      (                            )
	LicenseExpireDate *time.Time `json:"license_expire_date"`
	// 登记时间                                        (                            )
	RegistrationTime *time.Time `json:"registration_time"`
	// 创建时间                                        (                            )
	CreatedAt time.Time `json:"created_at"`
	// 创建人                                          ( system_user表的user_id )
	CreatedBy string `json:"created_by"`
	// 修改时间                                        (                            )
	UpdatedAt *time.Time `json:"updated_at"`
	// 修改人                                          ( system_user表的user_id )
	UpdatedBy *string `json:"updated_by"`
	// 删除时间                                        (                            )
	DeletedAt *time.Time `json:"deleted_at"`
	// 删除人                                          ( system_user表的user_id )
	DeletedBy *string `json:"deleted_by"`
}

// aggregated selection of "driver_id_info_report"
type DriverIDInfoReportAggregate struct {
	Aggregate *DriverIDInfoReportAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_id_info_report"
type DriverIDInfoReportAggregateFields struct {
	Avg        *DriverIDInfoReportAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *DriverIDInfoReportMaxFields        `json:"max"`
	Min        *DriverIDInfoReportMinFields        `json:"min"`
	Stddev     *DriverIDInfoReportStddevFields     `json:"stddev"`
	StddevPop  *DriverIDInfoReportStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverIDInfoReportStddevSampFields `json:"stddev_samp"`
	Sum        *DriverIDInfoReportSumFields        `json:"sum"`
	VarPop     *DriverIDInfoReportVarPopFields     `json:"var_pop"`
	VarSamp    *DriverIDInfoReportVarSampFields    `json:"var_samp"`
	Variance   *DriverIDInfoReportVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_id_info_report"
type DriverIDInfoReportAvgFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_id_info_report'.
type DriverIDInfoReportBoolExp struct {
	And                  []*DriverIDInfoReportBoolExp    `json:"_and"`
	Not                  *DriverIDInfoReportBoolExp      `json:"_not"`
	Or                   []*DriverIDInfoReportBoolExp    `json:"_or"`
	ID                   *model.BigintComparisonExp      `json:"id"`
	DriverIDInfoReportID *model.StringComparisonExp      `json:"driver_id_info_report_id"`
	VehicleID            *model.StringComparisonExp      `json:"vehicle_id"`
	IcCardStatus         *model.IntComparisonExp         `json:"ic_card_status"`
	OperationTime        *model.TimestamptzComparisonExp `json:"operation_time"`
	DriverName           *model.StringComparisonExp      `json:"driver_name"`
	LicenseNumber        *model.StringComparisonExp      `json:"license_number"`
	Imel                 *model.StringComparisonExp      `json:"imel"`
	IcCardReadingResult  *model.StringComparisonExp      `json:"ic_card_reading_result"`
	OccupationalNumber   *model.StringComparisonExp      `json:"occupational_number"`
	DriverLicenseName    *model.StringComparisonExp      `json:"driver_license_name"`
	LicenseExpireDate    *model.TimestamptzComparisonExp `json:"license_expire_date"`
	RegistrationTime     *model.TimestamptzComparisonExp `json:"registration_time"`
	CreatedAt            *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy            *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt            *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy            *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt            *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy            *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "driver_id_info_report"
type DriverIDInfoReportIncInput struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// input type for inserting data into table "driver_id_info_report"
type DriverIDInfoReportInsertInput struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driver_id_info_report"
type DriverIDInfoReportMaxFields struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driver_id_info_report"
type DriverIDInfoReportMinFields struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// response of any mutation on the table "driver_id_info_report"
type DriverIDInfoReportMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*DriverIDInfoReport `json:"returning"`
}

// ordering options when selecting data from "driver_id_info_report"
type DriverIDInfoReportOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	DriverIDInfoReportID *model.OrderBy `json:"driver_id_info_report_id"`
	VehicleID            *model.OrderBy `json:"vehicle_id"`
	IcCardStatus         *model.OrderBy `json:"ic_card_status"`
	OperationTime        *model.OrderBy `json:"operation_time"`
	DriverName           *model.OrderBy `json:"driver_name"`
	LicenseNumber        *model.OrderBy `json:"license_number"`
	Imel                 *model.OrderBy `json:"imel"`
	IcCardReadingResult  *model.OrderBy `json:"ic_card_reading_result"`
	OccupationalNumber   *model.OrderBy `json:"occupational_number"`
	DriverLicenseName    *model.OrderBy `json:"driver_license_name"`
	LicenseExpireDate    *model.OrderBy `json:"license_expire_date"`
	RegistrationTime     *model.OrderBy `json:"registration_time"`
	CreatedAt            *model.OrderBy `json:"created_at"`
	CreatedBy            *model.OrderBy `json:"created_by"`
	UpdatedAt            *model.OrderBy `json:"updated_at"`
	UpdatedBy            *model.OrderBy `json:"updated_by"`
	DeletedAt            *model.OrderBy `json:"deleted_at"`
	DeletedBy            *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driver_id_info_report"
type DriverIDInfoReportSetInput struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driver_id_info_report"
type DriverIDInfoReportStddevFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate stddev_pop on columns of table "driver_id_info_report"
type DriverIDInfoReportStddevPopFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate stddev_samp on columns of table "driver_id_info_report"
type DriverIDInfoReportStddevSampFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate sum on columns of table "driver_id_info_report"
type DriverIDInfoReportSumFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate var_pop on columns of table "driver_id_info_report"
type DriverIDInfoReportVarPopFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate var_samp on columns of table "driver_id_info_report"
type DriverIDInfoReportVarSampFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate variance on columns of table "driver_id_info_report"
type DriverIDInfoReportVarianceFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregated selection of "driver_identity"
type DriverIdentityAggregate struct {
	Aggregate *DriverIdentityAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_identity"
type DriverIdentityAggregateFields struct {
	Avg        *DriverIdentityAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *DriverIdentityMaxFields        `json:"max"`
	Min        *DriverIdentityMinFields        `json:"min"`
	Stddev     *DriverIdentityStddevFields     `json:"stddev"`
	StddevPop  *DriverIdentityStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverIdentityStddevSampFields `json:"stddev_samp"`
	Sum        *DriverIdentitySumFields        `json:"sum"`
	VarPop     *DriverIdentityVarPopFields     `json:"var_pop"`
	VarSamp    *DriverIdentityVarSampFields    `json:"var_samp"`
	Variance   *DriverIdentityVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_identity"
type DriverIdentityAvgFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_identity'.
type DriverIdentityBoolExp struct {
	And                           []*DriverIdentityBoolExp        `json:"_and"`
	Not                           *DriverIdentityBoolExp          `json:"_not"`
	Or                            []*DriverIdentityBoolExp        `json:"_or"`
	ID                            *model.BigintComparisonExp      `json:"id"`
	IdentityID                    *model.StringComparisonExp      `json:"identity_id"`
	IDCardNum                     *model.StringComparisonExp      `json:"id_card_num"`
	IDCardBirthday                *model.TimestamptzComparisonExp `json:"id_card_birthday"`
	IDCardSignGovernment          *model.StringComparisonExp      `json:"id_card_sign_government"`
	IDCardNation                  *model.StringComparisonExp      `json:"id_card_nation"`
	IDCardStartDate               *model.TimestamptzComparisonExp `json:"id_card_start_date"`
	IDCardEndDate                 *model.TimestamptzComparisonExp `json:"id_card_end_date"`
	IDCardFrontPic                *model.StringComparisonExp      `json:"id_card_front_pic"`
	IDCardBackPic                 *model.StringComparisonExp      `json:"id_card_back_pic"`
	IDCardAddress                 *model.StringComparisonExp      `json:"id_card_address"`
	DriverHoldingIDPhoto          *model.StringComparisonExp      `json:"driver_holding_id_photo"`
	DriverPhoto                   *model.StringComparisonExp      `json:"driver_photo"`
	DriverSignature               *model.StringComparisonExp      `json:"driver_signature"`
	OccupationalNumber            *model.StringComparisonExp      `json:"occupational_number"`
	OccupationalExpireDate        *model.TimestamptzComparisonExp `json:"occupational_expire_date"`
	OccupationalIssuingAuthority  *model.StringComparisonExp      `json:"occupational_issuing_authority"`
	LaborContract                 *model.StringComparisonExp      `json:"labor_contract"`
	DriverLicensePic              *model.StringComparisonExp      `json:"driver_license_pic"`
	DriverLicenseIssuingAuthority *model.StringComparisonExp      `json:"driver_license_issuing_authority"`
	AnnualReviewDate              *model.TimestamptzComparisonExp `json:"annual_review_date"`
	RenewalDate                   *model.TimestamptzComparisonExp `json:"renewal_date"`
	AccumulativedPoints           *model.NumericComparisonExp     `json:"accumulatived_points"`
	SortingDate                   *model.TimestamptzComparisonExp `json:"sorting_date"`
	QuasiDrivingModels            *model.IntComparisonExp         `json:"quasi_driving_models"`
	DriverLicenseProvinceID       *model.StringComparisonExp      `json:"driver_license_province_id"`
	DriverLicenseCityID           *model.StringComparisonExp      `json:"driver_license_city_id"`
	DriverLicenseDistrictID       *model.StringComparisonExp      `json:"driver_license_district_id"`
	DriverLicenseStatus           *model.IntComparisonExp         `json:"driver_license_status"`
	DriverLicenseIssueDate        *model.TimestamptzComparisonExp `json:"driver_license_issue_date"`
	WorkingTime                   *model.TimestamptzComparisonExp `json:"working_time"`
	IsReview                      *model.BooleanComparisonExp     `json:"is_review"`
	CreatedAt                     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy                     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt                     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy                     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt                     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy                     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted                     *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "driver_identity"
type DriverIdentityIncInput struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// input type for inserting data into table "driver_identity"
type DriverIdentityInsertInput struct {
	ID                            *int64     `json:"id"`
	IdentityID                    *string    `json:"identity_id"`
	IDCardNum                     *string    `json:"id_card_num"`
	IDCardBirthday                *time.Time `json:"id_card_birthday"`
	IDCardSignGovernment          *string    `json:"id_card_sign_government"`
	IDCardNation                  *string    `json:"id_card_nation"`
	IDCardStartDate               *time.Time `json:"id_card_start_date"`
	IDCardEndDate                 *time.Time `json:"id_card_end_date"`
	IDCardFrontPic                *string    `json:"id_card_front_pic"`
	IDCardBackPic                 *string    `json:"id_card_back_pic"`
	IDCardAddress                 *string    `json:"id_card_address"`
	DriverHoldingIDPhoto          *string    `json:"driver_holding_id_photo"`
	DriverPhoto                   *string    `json:"driver_photo"`
	DriverSignature               *string    `json:"driver_signature"`
	OccupationalNumber            *string    `json:"occupational_number"`
	OccupationalExpireDate        *time.Time `json:"occupational_expire_date"`
	OccupationalIssuingAuthority  *string    `json:"occupational_issuing_authority"`
	LaborContract                 *string    `json:"labor_contract"`
	DriverLicensePic              *string    `json:"driver_license_pic"`
	DriverLicenseIssuingAuthority *string    `json:"driver_license_issuing_authority"`
	AnnualReviewDate              *time.Time `json:"annual_review_date"`
	RenewalDate                   *time.Time `json:"renewal_date"`
	AccumulativedPoints           *float64   `json:"accumulatived_points"`
	SortingDate                   *time.Time `json:"sorting_date"`
	QuasiDrivingModels            *int       `json:"quasi_driving_models"`
	DriverLicenseProvinceID       *string    `json:"driver_license_province_id"`
	DriverLicenseCityID           *string    `json:"driver_license_city_id"`
	DriverLicenseDistrictID       *string    `json:"driver_license_district_id"`
	DriverLicenseStatus           *int       `json:"driver_license_status"`
	DriverLicenseIssueDate        *time.Time `json:"driver_license_issue_date"`
	WorkingTime                   *time.Time `json:"working_time"`
	IsReview                      *bool      `json:"is_review"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
	IsDeleted                     *bool      `json:"is_deleted"`
}

// aggregate max on columns of table "driver_identity"
type DriverIdentityMaxFields struct {
	ID                            *int64     `json:"id"`
	IdentityID                    *string    `json:"identity_id"`
	IDCardNum                     *string    `json:"id_card_num"`
	IDCardBirthday                *time.Time `json:"id_card_birthday"`
	IDCardSignGovernment          *string    `json:"id_card_sign_government"`
	IDCardNation                  *string    `json:"id_card_nation"`
	IDCardStartDate               *time.Time `json:"id_card_start_date"`
	IDCardEndDate                 *time.Time `json:"id_card_end_date"`
	IDCardFrontPic                *string    `json:"id_card_front_pic"`
	IDCardBackPic                 *string    `json:"id_card_back_pic"`
	IDCardAddress                 *string    `json:"id_card_address"`
	DriverHoldingIDPhoto          *string    `json:"driver_holding_id_photo"`
	DriverPhoto                   *string    `json:"driver_photo"`
	DriverSignature               *string    `json:"driver_signature"`
	OccupationalNumber            *string    `json:"occupational_number"`
	OccupationalExpireDate        *time.Time `json:"occupational_expire_date"`
	OccupationalIssuingAuthority  *string    `json:"occupational_issuing_authority"`
	LaborContract                 *string    `json:"labor_contract"`
	DriverLicensePic              *string    `json:"driver_license_pic"`
	DriverLicenseIssuingAuthority *string    `json:"driver_license_issuing_authority"`
	AnnualReviewDate              *time.Time `json:"annual_review_date"`
	RenewalDate                   *time.Time `json:"renewal_date"`
	AccumulativedPoints           *float64   `json:"accumulatived_points"`
	SortingDate                   *time.Time `json:"sorting_date"`
	QuasiDrivingModels            *int       `json:"quasi_driving_models"`
	DriverLicenseProvinceID       *string    `json:"driver_license_province_id"`
	DriverLicenseCityID           *string    `json:"driver_license_city_id"`
	DriverLicenseDistrictID       *string    `json:"driver_license_district_id"`
	DriverLicenseStatus           *int       `json:"driver_license_status"`
	DriverLicenseIssueDate        *time.Time `json:"driver_license_issue_date"`
	WorkingTime                   *time.Time `json:"working_time"`
	IsReview                      *bool      `json:"is_review"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
	IsDeleted                     *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "driver_identity"
type DriverIdentityMinFields struct {
	ID                            *int64     `json:"id"`
	IdentityID                    *string    `json:"identity_id"`
	IDCardNum                     *string    `json:"id_card_num"`
	IDCardBirthday                *time.Time `json:"id_card_birthday"`
	IDCardSignGovernment          *string    `json:"id_card_sign_government"`
	IDCardNation                  *string    `json:"id_card_nation"`
	IDCardStartDate               *time.Time `json:"id_card_start_date"`
	IDCardEndDate                 *time.Time `json:"id_card_end_date"`
	IDCardFrontPic                *string    `json:"id_card_front_pic"`
	IDCardBackPic                 *string    `json:"id_card_back_pic"`
	IDCardAddress                 *string    `json:"id_card_address"`
	DriverHoldingIDPhoto          *string    `json:"driver_holding_id_photo"`
	DriverPhoto                   *string    `json:"driver_photo"`
	DriverSignature               *string    `json:"driver_signature"`
	OccupationalNumber            *string    `json:"occupational_number"`
	OccupationalExpireDate        *time.Time `json:"occupational_expire_date"`
	OccupationalIssuingAuthority  *string    `json:"occupational_issuing_authority"`
	LaborContract                 *string    `json:"labor_contract"`
	DriverLicensePic              *string    `json:"driver_license_pic"`
	DriverLicenseIssuingAuthority *string    `json:"driver_license_issuing_authority"`
	AnnualReviewDate              *time.Time `json:"annual_review_date"`
	RenewalDate                   *time.Time `json:"renewal_date"`
	AccumulativedPoints           *float64   `json:"accumulatived_points"`
	SortingDate                   *time.Time `json:"sorting_date"`
	QuasiDrivingModels            *int       `json:"quasi_driving_models"`
	DriverLicenseProvinceID       *string    `json:"driver_license_province_id"`
	DriverLicenseCityID           *string    `json:"driver_license_city_id"`
	DriverLicenseDistrictID       *string    `json:"driver_license_district_id"`
	DriverLicenseStatus           *int       `json:"driver_license_status"`
	DriverLicenseIssueDate        *time.Time `json:"driver_license_issue_date"`
	WorkingTime                   *time.Time `json:"working_time"`
	IsReview                      *bool      `json:"is_review"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
	IsDeleted                     *bool      `json:"is_deleted"`
}

// response of any mutation on the table "driver_identity"
type DriverIdentityMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.DriverIdentity `json:"returning"`
}

// ordering options when selecting data from "driver_identity"
type DriverIdentityOrderBy struct {
	ID                            *model.OrderBy `json:"id"`
	IdentityID                    *model.OrderBy `json:"identity_id"`
	IDCardNum                     *model.OrderBy `json:"id_card_num"`
	IDCardBirthday                *model.OrderBy `json:"id_card_birthday"`
	IDCardSignGovernment          *model.OrderBy `json:"id_card_sign_government"`
	IDCardNation                  *model.OrderBy `json:"id_card_nation"`
	IDCardStartDate               *model.OrderBy `json:"id_card_start_date"`
	IDCardEndDate                 *model.OrderBy `json:"id_card_end_date"`
	IDCardFrontPic                *model.OrderBy `json:"id_card_front_pic"`
	IDCardBackPic                 *model.OrderBy `json:"id_card_back_pic"`
	IDCardAddress                 *model.OrderBy `json:"id_card_address"`
	DriverHoldingIDPhoto          *model.OrderBy `json:"driver_holding_id_photo"`
	DriverPhoto                   *model.OrderBy `json:"driver_photo"`
	DriverSignature               *model.OrderBy `json:"driver_signature"`
	OccupationalNumber            *model.OrderBy `json:"occupational_number"`
	OccupationalExpireDate        *model.OrderBy `json:"occupational_expire_date"`
	OccupationalIssuingAuthority  *model.OrderBy `json:"occupational_issuing_authority"`
	LaborContract                 *model.OrderBy `json:"labor_contract"`
	DriverLicensePic              *model.OrderBy `json:"driver_license_pic"`
	DriverLicenseIssuingAuthority *model.OrderBy `json:"driver_license_issuing_authority"`
	AnnualReviewDate              *model.OrderBy `json:"annual_review_date"`
	RenewalDate                   *model.OrderBy `json:"renewal_date"`
	AccumulativedPoints           *model.OrderBy `json:"accumulatived_points"`
	SortingDate                   *model.OrderBy `json:"sorting_date"`
	QuasiDrivingModels            *model.OrderBy `json:"quasi_driving_models"`
	DriverLicenseProvinceID       *model.OrderBy `json:"driver_license_province_id"`
	DriverLicenseCityID           *model.OrderBy `json:"driver_license_city_id"`
	DriverLicenseDistrictID       *model.OrderBy `json:"driver_license_district_id"`
	DriverLicenseStatus           *model.OrderBy `json:"driver_license_status"`
	DriverLicenseIssueDate        *model.OrderBy `json:"driver_license_issue_date"`
	WorkingTime                   *model.OrderBy `json:"working_time"`
	IsReview                      *model.OrderBy `json:"is_review"`
	CreatedAt                     *model.OrderBy `json:"created_at"`
	CreatedBy                     *model.OrderBy `json:"created_by"`
	UpdatedAt                     *model.OrderBy `json:"updated_at"`
	UpdatedBy                     *model.OrderBy `json:"updated_by"`
	DeletedAt                     *model.OrderBy `json:"deleted_at"`
	DeletedBy                     *model.OrderBy `json:"deleted_by"`
	IsDeleted                     *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "driver_identity"
type DriverIdentitySetInput struct {
	ID                            *int64     `json:"id"`
	IdentityID                    *string    `json:"identity_id"`
	IDCardNum                     *string    `json:"id_card_num"`
	IDCardBirthday                *time.Time `json:"id_card_birthday"`
	IDCardSignGovernment          *string    `json:"id_card_sign_government"`
	IDCardNation                  *string    `json:"id_card_nation"`
	IDCardStartDate               *time.Time `json:"id_card_start_date"`
	IDCardEndDate                 *time.Time `json:"id_card_end_date"`
	IDCardFrontPic                *string    `json:"id_card_front_pic"`
	IDCardBackPic                 *string    `json:"id_card_back_pic"`
	IDCardAddress                 *string    `json:"id_card_address"`
	DriverHoldingIDPhoto          *string    `json:"driver_holding_id_photo"`
	DriverPhoto                   *string    `json:"driver_photo"`
	DriverSignature               *string    `json:"driver_signature"`
	OccupationalNumber            *string    `json:"occupational_number"`
	OccupationalExpireDate        *time.Time `json:"occupational_expire_date"`
	OccupationalIssuingAuthority  *string    `json:"occupational_issuing_authority"`
	LaborContract                 *string    `json:"labor_contract"`
	DriverLicensePic              *string    `json:"driver_license_pic"`
	DriverLicenseIssuingAuthority *string    `json:"driver_license_issuing_authority"`
	AnnualReviewDate              *time.Time `json:"annual_review_date"`
	RenewalDate                   *time.Time `json:"renewal_date"`
	AccumulativedPoints           *float64   `json:"accumulatived_points"`
	SortingDate                   *time.Time `json:"sorting_date"`
	QuasiDrivingModels            *int       `json:"quasi_driving_models"`
	DriverLicenseProvinceID       *string    `json:"driver_license_province_id"`
	DriverLicenseCityID           *string    `json:"driver_license_city_id"`
	DriverLicenseDistrictID       *string    `json:"driver_license_district_id"`
	DriverLicenseStatus           *int       `json:"driver_license_status"`
	DriverLicenseIssueDate        *time.Time `json:"driver_license_issue_date"`
	WorkingTime                   *time.Time `json:"working_time"`
	IsReview                      *bool      `json:"is_review"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
	IsDeleted                     *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "driver_identity"
type DriverIdentityStddevFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregate stddev_pop on columns of table "driver_identity"
type DriverIdentityStddevPopFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregate stddev_samp on columns of table "driver_identity"
type DriverIdentityStddevSampFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregate sum on columns of table "driver_identity"
type DriverIdentitySumFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregate var_pop on columns of table "driver_identity"
type DriverIdentityVarPopFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregate var_samp on columns of table "driver_identity"
type DriverIdentityVarSampFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregate variance on columns of table "driver_identity"
type DriverIdentityVarianceFields struct {
	ID                  *int64   `json:"id"`
	AccumulativedPoints *float64 `json:"accumulatived_points"`
	QuasiDrivingModels  *int     `json:"quasi_driving_models"`
	DriverLicenseStatus *int     `json:"driver_license_status"`
}

// aggregated selection of "driver_info"
type DriverInfoAggregate struct {
	Aggregate *DriverInfoAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_info"
type DriverInfoAggregateFields struct {
	Avg        *DriverInfoAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *DriverInfoMaxFields        `json:"max"`
	Min        *DriverInfoMinFields        `json:"min"`
	Stddev     *DriverInfoStddevFields     `json:"stddev"`
	StddevPop  *DriverInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverInfoStddevSampFields `json:"stddev_samp"`
	Sum        *DriverInfoSumFields        `json:"sum"`
	VarPop     *DriverInfoVarPopFields     `json:"var_pop"`
	VarSamp    *DriverInfoVarSampFields    `json:"var_samp"`
	Variance   *DriverInfoVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_info"
type DriverInfoAvgFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_info'.
type DriverInfoBoolExp struct {
	And               []*DriverInfoBoolExp            `json:"_and"`
	Not               *DriverInfoBoolExp              `json:"_not"`
	Or                []*DriverInfoBoolExp            `json:"_or"`
	ID                *model.BigintComparisonExp      `json:"id"`
	DriverID          *model.StringComparisonExp      `json:"driver_id"`
	EnterpriseID      *model.StringComparisonExp      `json:"enterprise_id"`
	DepartmentID      *model.StringComparisonExp      `json:"department_id"`
	DriverIdentityID  *model.StringComparisonExp      `json:"driver_identity_id"`
	DriverName        *model.StringComparisonExp      `json:"driver_name"`
	Telephone         *model.StringComparisonExp      `json:"telephone"`
	Sex               *model.IntComparisonExp         `json:"sex"`
	FilesNumber       *model.StringComparisonExp      `json:"files_number"`
	ContactAddress    *model.StringComparisonExp      `json:"contact_address"`
	MailingAddress    *model.StringComparisonExp      `json:"mailing_address"`
	IsSubmit          *model.BooleanComparisonExp     `json:"is_submit"`
	SubmitContent     *model.StringComparisonExp      `json:"submit_content"`
	SubmitAt          *model.TimestamptzComparisonExp `json:"submit_at"`
	SubmitBy          *model.StringComparisonExp      `json:"submit_by"`
	IsManualInput     *model.BooleanComparisonExp     `json:"is_manual_input"`
	IsInput           *model.BooleanComparisonExp     `json:"is_input"`
	InputAt           *model.TimestamptzComparisonExp `json:"input_at"`
	InputBy           *model.StringComparisonExp      `json:"input_by"`
	IsCheckData       *model.BooleanComparisonExp     `json:"is_check_data"`
	CheckAt           *model.TimestamptzComparisonExp `json:"check_at"`
	CheckBy           *model.StringComparisonExp      `json:"check_by"`
	RemarkIn          *model.StringComparisonExp      `json:"remark_in"`
	UpdateTimeIn      *model.TimestamptzComparisonExp `json:"update_time_in"`
	IsCheckSms        *model.BooleanComparisonExp     `json:"is_check_sms"`
	Remarks           *model.StringComparisonExp      `json:"remarks"`
	IsDeleted         *model.BooleanComparisonExp     `json:"is_deleted"`
	Agent             *model.StringComparisonExp      `json:"agent"`
	Operator          *model.StringComparisonExp      `json:"operator"`
	IsBlacklist       *model.BooleanComparisonExp     `json:"is_blacklist"`
	BlacklistDeadline *model.TimestamptzComparisonExp `json:"blacklist_deadline"`
	CreatedAt         *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy         *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt         *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy         *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt         *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy         *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "driver_info"
type DriverInfoIncInput struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// input type for inserting data into table "driver_info"
type DriverInfoInsertInput struct {
	ID                *int64     `json:"id"`
	DriverID          *string    `json:"driver_id"`
	EnterpriseID      *string    `json:"enterprise_id"`
	DepartmentID      *string    `json:"department_id"`
	DriverIdentityID  *string    `json:"driver_identity_id"`
	DriverName        *string    `json:"driver_name"`
	Telephone         *string    `json:"telephone"`
	Sex               *int       `json:"sex"`
	FilesNumber       *string    `json:"files_number"`
	ContactAddress    *string    `json:"contact_address"`
	MailingAddress    *string    `json:"mailing_address"`
	IsSubmit          *bool      `json:"is_submit"`
	SubmitContent     *string    `json:"submit_content"`
	SubmitAt          *time.Time `json:"submit_at"`
	SubmitBy          *string    `json:"submit_by"`
	IsManualInput     *bool      `json:"is_manual_input"`
	IsInput           *bool      `json:"is_input"`
	InputAt           *time.Time `json:"input_at"`
	InputBy           *string    `json:"input_by"`
	IsCheckData       *bool      `json:"is_check_data"`
	CheckAt           *time.Time `json:"check_at"`
	CheckBy           *string    `json:"check_by"`
	RemarkIn          *string    `json:"remark_in"`
	UpdateTimeIn      *time.Time `json:"update_time_in"`
	IsCheckSms        *bool      `json:"is_check_sms"`
	Remarks           *string    `json:"remarks"`
	IsDeleted         *bool      `json:"is_deleted"`
	Agent             *string    `json:"agent"`
	Operator          *string    `json:"operator"`
	IsBlacklist       *bool      `json:"is_blacklist"`
	BlacklistDeadline *time.Time `json:"blacklist_deadline"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driver_info"
type DriverInfoMaxFields struct {
	ID                *int64     `json:"id"`
	DriverID          *string    `json:"driver_id"`
	EnterpriseID      *string    `json:"enterprise_id"`
	DepartmentID      *string    `json:"department_id"`
	DriverIdentityID  *string    `json:"driver_identity_id"`
	DriverName        *string    `json:"driver_name"`
	Telephone         *string    `json:"telephone"`
	Sex               *int       `json:"sex"`
	FilesNumber       *string    `json:"files_number"`
	ContactAddress    *string    `json:"contact_address"`
	MailingAddress    *string    `json:"mailing_address"`
	IsSubmit          *bool      `json:"is_submit"`
	SubmitContent     *string    `json:"submit_content"`
	SubmitAt          *time.Time `json:"submit_at"`
	SubmitBy          *string    `json:"submit_by"`
	IsManualInput     *bool      `json:"is_manual_input"`
	IsInput           *bool      `json:"is_input"`
	InputAt           *time.Time `json:"input_at"`
	InputBy           *string    `json:"input_by"`
	IsCheckData       *bool      `json:"is_check_data"`
	CheckAt           *time.Time `json:"check_at"`
	CheckBy           *string    `json:"check_by"`
	RemarkIn          *string    `json:"remark_in"`
	UpdateTimeIn      *time.Time `json:"update_time_in"`
	IsCheckSms        *bool      `json:"is_check_sms"`
	Remarks           *string    `json:"remarks"`
	IsDeleted         *bool      `json:"is_deleted"`
	Agent             *string    `json:"agent"`
	Operator          *string    `json:"operator"`
	IsBlacklist       *bool      `json:"is_blacklist"`
	BlacklistDeadline *time.Time `json:"blacklist_deadline"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driver_info"
type DriverInfoMinFields struct {
	ID                *int64     `json:"id"`
	DriverID          *string    `json:"driver_id"`
	EnterpriseID      *string    `json:"enterprise_id"`
	DepartmentID      *string    `json:"department_id"`
	DriverIdentityID  *string    `json:"driver_identity_id"`
	DriverName        *string    `json:"driver_name"`
	Telephone         *string    `json:"telephone"`
	Sex               *int       `json:"sex"`
	FilesNumber       *string    `json:"files_number"`
	ContactAddress    *string    `json:"contact_address"`
	MailingAddress    *string    `json:"mailing_address"`
	IsSubmit          *bool      `json:"is_submit"`
	SubmitContent     *string    `json:"submit_content"`
	SubmitAt          *time.Time `json:"submit_at"`
	SubmitBy          *string    `json:"submit_by"`
	IsManualInput     *bool      `json:"is_manual_input"`
	IsInput           *bool      `json:"is_input"`
	InputAt           *time.Time `json:"input_at"`
	InputBy           *string    `json:"input_by"`
	IsCheckData       *bool      `json:"is_check_data"`
	CheckAt           *time.Time `json:"check_at"`
	CheckBy           *string    `json:"check_by"`
	RemarkIn          *string    `json:"remark_in"`
	UpdateTimeIn      *time.Time `json:"update_time_in"`
	IsCheckSms        *bool      `json:"is_check_sms"`
	Remarks           *string    `json:"remarks"`
	IsDeleted         *bool      `json:"is_deleted"`
	Agent             *string    `json:"agent"`
	Operator          *string    `json:"operator"`
	IsBlacklist       *bool      `json:"is_blacklist"`
	BlacklistDeadline *time.Time `json:"blacklist_deadline"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// response of any mutation on the table "driver_info"
type DriverInfoMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*model1.DriverInfo `json:"returning"`
}

// ordering options when selecting data from "driver_info"
type DriverInfoOrderBy struct {
	ID                *model.OrderBy `json:"id"`
	DriverID          *model.OrderBy `json:"driver_id"`
	EnterpriseID      *model.OrderBy `json:"enterprise_id"`
	DepartmentID      *model.OrderBy `json:"department_id"`
	DriverIdentityID  *model.OrderBy `json:"driver_identity_id"`
	DriverName        *model.OrderBy `json:"driver_name"`
	Telephone         *model.OrderBy `json:"telephone"`
	Sex               *model.OrderBy `json:"sex"`
	FilesNumber       *model.OrderBy `json:"files_number"`
	ContactAddress    *model.OrderBy `json:"contact_address"`
	MailingAddress    *model.OrderBy `json:"mailing_address"`
	IsSubmit          *model.OrderBy `json:"is_submit"`
	SubmitContent     *model.OrderBy `json:"submit_content"`
	SubmitAt          *model.OrderBy `json:"submit_at"`
	SubmitBy          *model.OrderBy `json:"submit_by"`
	IsManualInput     *model.OrderBy `json:"is_manual_input"`
	IsInput           *model.OrderBy `json:"is_input"`
	InputAt           *model.OrderBy `json:"input_at"`
	InputBy           *model.OrderBy `json:"input_by"`
	IsCheckData       *model.OrderBy `json:"is_check_data"`
	CheckAt           *model.OrderBy `json:"check_at"`
	CheckBy           *model.OrderBy `json:"check_by"`
	RemarkIn          *model.OrderBy `json:"remark_in"`
	UpdateTimeIn      *model.OrderBy `json:"update_time_in"`
	IsCheckSms        *model.OrderBy `json:"is_check_sms"`
	Remarks           *model.OrderBy `json:"remarks"`
	IsDeleted         *model.OrderBy `json:"is_deleted"`
	Agent             *model.OrderBy `json:"agent"`
	Operator          *model.OrderBy `json:"operator"`
	IsBlacklist       *model.OrderBy `json:"is_blacklist"`
	BlacklistDeadline *model.OrderBy `json:"blacklist_deadline"`
	CreatedAt         *model.OrderBy `json:"created_at"`
	CreatedBy         *model.OrderBy `json:"created_by"`
	UpdatedAt         *model.OrderBy `json:"updated_at"`
	UpdatedBy         *model.OrderBy `json:"updated_by"`
	DeletedAt         *model.OrderBy `json:"deleted_at"`
	DeletedBy         *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driver_info"
type DriverInfoSetInput struct {
	ID                *int64     `json:"id"`
	DriverID          *string    `json:"driver_id"`
	EnterpriseID      *string    `json:"enterprise_id"`
	DepartmentID      *string    `json:"department_id"`
	DriverIdentityID  *string    `json:"driver_identity_id"`
	DriverName        *string    `json:"driver_name"`
	Telephone         *string    `json:"telephone"`
	Sex               *int       `json:"sex"`
	FilesNumber       *string    `json:"files_number"`
	ContactAddress    *string    `json:"contact_address"`
	MailingAddress    *string    `json:"mailing_address"`
	IsSubmit          *bool      `json:"is_submit"`
	SubmitContent     *string    `json:"submit_content"`
	SubmitAt          *time.Time `json:"submit_at"`
	SubmitBy          *string    `json:"submit_by"`
	IsManualInput     *bool      `json:"is_manual_input"`
	IsInput           *bool      `json:"is_input"`
	InputAt           *time.Time `json:"input_at"`
	InputBy           *string    `json:"input_by"`
	IsCheckData       *bool      `json:"is_check_data"`
	CheckAt           *time.Time `json:"check_at"`
	CheckBy           *string    `json:"check_by"`
	RemarkIn          *string    `json:"remark_in"`
	UpdateTimeIn      *time.Time `json:"update_time_in"`
	IsCheckSms        *bool      `json:"is_check_sms"`
	Remarks           *string    `json:"remarks"`
	IsDeleted         *bool      `json:"is_deleted"`
	Agent             *string    `json:"agent"`
	Operator          *string    `json:"operator"`
	IsBlacklist       *bool      `json:"is_blacklist"`
	BlacklistDeadline *time.Time `json:"blacklist_deadline"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driver_info"
type DriverInfoStddevFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregate stddev_pop on columns of table "driver_info"
type DriverInfoStddevPopFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregate stddev_samp on columns of table "driver_info"
type DriverInfoStddevSampFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregate sum on columns of table "driver_info"
type DriverInfoSumFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregate var_pop on columns of table "driver_info"
type DriverInfoVarPopFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregate var_samp on columns of table "driver_info"
type DriverInfoVarSampFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregate variance on columns of table "driver_info"
type DriverInfoVarianceFields struct {
	ID  *int64 `json:"id"`
	Sex *int   `json:"sex"`
}

// aggregated selection of "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionAggregate struct {
	Aggregate *DrivingLicenseRegistrationInspectionAggregateFields `json:"aggregate"`
}

// aggregate fields of "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionAggregateFields struct {
	Avg        *DrivingLicenseRegistrationInspectionAvgFields        `json:"avg"`
	Count      *int                                                  `json:"count"`
	Max        *DrivingLicenseRegistrationInspectionMaxFields        `json:"max"`
	Min        *DrivingLicenseRegistrationInspectionMinFields        `json:"min"`
	Stddev     *DrivingLicenseRegistrationInspectionStddevFields     `json:"stddev"`
	StddevPop  *DrivingLicenseRegistrationInspectionStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DrivingLicenseRegistrationInspectionStddevSampFields `json:"stddev_samp"`
	Sum        *DrivingLicenseRegistrationInspectionSumFields        `json:"sum"`
	VarPop     *DrivingLicenseRegistrationInspectionVarPopFields     `json:"var_pop"`
	VarSamp    *DrivingLicenseRegistrationInspectionVarSampFields    `json:"var_samp"`
	Variance   *DrivingLicenseRegistrationInspectionVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionAvgFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driving_license_registration_inspection'.
type DrivingLicenseRegistrationInspectionBoolExp struct {
	And                  []*DrivingLicenseRegistrationInspectionBoolExp `json:"_and"`
	Not                  *DrivingLicenseRegistrationInspectionBoolExp   `json:"_not"`
	Or                   []*DrivingLicenseRegistrationInspectionBoolExp `json:"_or"`
	ID                   *model.BigintComparisonExp                     `json:"id"`
	DriverIDInfoReportID *model.StringComparisonExp                     `json:"driver_id_info_report_id"`
	VehicleID            *model.StringComparisonExp                     `json:"vehicle_id"`
	IcCardStatus         *model.IntComparisonExp                        `json:"ic_card_status"`
	OperationTime        *model.TimestamptzComparisonExp                `json:"operation_time"`
	DriverName           *model.StringComparisonExp                     `json:"driver_name"`
	LicenseNumber        *model.StringComparisonExp                     `json:"license_number"`
	Imel                 *model.StringComparisonExp                     `json:"imel"`
	IcCardReadingResult  *model.StringComparisonExp                     `json:"ic_card_reading_result"`
	OccupationalNumber   *model.StringComparisonExp                     `json:"occupational_number"`
	DriverLicenseName    *model.StringComparisonExp                     `json:"driver_license_name"`
	LicenseExpireDate    *model.TimestamptzComparisonExp                `json:"license_expire_date"`
	RegistrationTime     *model.TimestamptzComparisonExp                `json:"registration_time"`
	CreatedAt            *model.TimestamptzComparisonExp                `json:"created_at"`
	CreatedBy            *model.StringComparisonExp                     `json:"created_by"`
	UpdatedAt            *model.TimestamptzComparisonExp                `json:"updated_at"`
	UpdatedBy            *model.StringComparisonExp                     `json:"updated_by"`
	DeletedAt            *model.TimestamptzComparisonExp                `json:"deleted_at"`
	DeletedBy            *model.StringComparisonExp                     `json:"deleted_by"`
}

// input type for incrementing integer column in table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionIncInput struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// input type for inserting data into table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionInsertInput struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionMaxFields struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionMinFields struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// response of any mutation on the table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionMutationResponse struct {
	AffectedRows int                                            `json:"affected_rows"`
	Returning    []*model1.DrivingLicenseRegistrationInspection `json:"returning"`
}

// ordering options when selecting data from "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	DriverIDInfoReportID *model.OrderBy `json:"driver_id_info_report_id"`
	VehicleID            *model.OrderBy `json:"vehicle_id"`
	IcCardStatus         *model.OrderBy `json:"ic_card_status"`
	OperationTime        *model.OrderBy `json:"operation_time"`
	DriverName           *model.OrderBy `json:"driver_name"`
	LicenseNumber        *model.OrderBy `json:"license_number"`
	Imel                 *model.OrderBy `json:"imel"`
	IcCardReadingResult  *model.OrderBy `json:"ic_card_reading_result"`
	OccupationalNumber   *model.OrderBy `json:"occupational_number"`
	DriverLicenseName    *model.OrderBy `json:"driver_license_name"`
	LicenseExpireDate    *model.OrderBy `json:"license_expire_date"`
	RegistrationTime     *model.OrderBy `json:"registration_time"`
	CreatedAt            *model.OrderBy `json:"created_at"`
	CreatedBy            *model.OrderBy `json:"created_by"`
	UpdatedAt            *model.OrderBy `json:"updated_at"`
	UpdatedBy            *model.OrderBy `json:"updated_by"`
	DeletedAt            *model.OrderBy `json:"deleted_at"`
	DeletedBy            *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionSetInput struct {
	ID                   *int64     `json:"id"`
	DriverIDInfoReportID *string    `json:"driver_id_info_report_id"`
	VehicleID            *string    `json:"vehicle_id"`
	IcCardStatus         *int       `json:"ic_card_status"`
	OperationTime        *time.Time `json:"operation_time"`
	DriverName           *string    `json:"driver_name"`
	LicenseNumber        *string    `json:"license_number"`
	Imel                 *string    `json:"imel"`
	IcCardReadingResult  *string    `json:"ic_card_reading_result"`
	OccupationalNumber   *string    `json:"occupational_number"`
	DriverLicenseName    *string    `json:"driver_license_name"`
	LicenseExpireDate    *time.Time `json:"license_expire_date"`
	RegistrationTime     *time.Time `json:"registration_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionStddevFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate stddev_pop on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionStddevPopFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate stddev_samp on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionStddevSampFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate sum on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionSumFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate var_pop on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionVarPopFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate var_samp on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionVarSampFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// aggregate variance on columns of table "driving_license_registration_inspection"
type DrivingLicenseRegistrationInspectionVarianceFields struct {
	ID           *int64 `json:"id"`
	IcCardStatus *int   `json:"ic_card_status"`
}

// 可选select
type DriverFingerprintAssociationSelectColumn string

const (
	// 按指定方法生成                                             ( 主键                       )
	DriverFingerprintAssociationSelectColumnID DriverFingerprintAssociationSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用            ( 联合主键                   )
	DriverFingerprintAssociationSelectColumnDriverFingerprintAssociationID DriverFingerprintAssociationSelectColumn = "driver_fingerprint_association_id"
	// driver_info驾驶员信息表的driver_id                     (                            )
	DriverFingerprintAssociationSelectColumnDriverID DriverFingerprintAssociationSelectColumn = "driver_id"
	// 指纹名称                                                   (                            )
	DriverFingerprintAssociationSelectColumnFingerprintName DriverFingerprintAssociationSelectColumn = "fingerprint_name"
	// driver_fingerprint 驾驶员指纹表的driver_fingerprint_id (                            )
	DriverFingerprintAssociationSelectColumnDriverFingerprintID DriverFingerprintAssociationSelectColumn = "driver_fingerprint_id"
	// 图片地址                                                   (                            )
	DriverFingerprintAssociationSelectColumnPictureAddress DriverFingerprintAssociationSelectColumn = "picture_address"
	// 是否删除                                                   (                            )
	DriverFingerprintAssociationSelectColumnIsDeleted DriverFingerprintAssociationSelectColumn = "is_deleted"
	// 创建时间                                                   (                            )
	DriverFingerprintAssociationSelectColumnCreatedAt DriverFingerprintAssociationSelectColumn = "created_at"
	// 创建人                                                     ( system_user表的user_id )
	DriverFingerprintAssociationSelectColumnCreatedBy DriverFingerprintAssociationSelectColumn = "created_by"
	// 修改时间                                                   (                            )
	DriverFingerprintAssociationSelectColumnUpdatedAt DriverFingerprintAssociationSelectColumn = "updated_at"
	// 修改人                                                     ( system_user表的user_id )
	DriverFingerprintAssociationSelectColumnUpdatedBy DriverFingerprintAssociationSelectColumn = "updated_by"
	// 删除时间                                                   (                            )
	DriverFingerprintAssociationSelectColumnDeletedAt DriverFingerprintAssociationSelectColumn = "deleted_at"
	// 删除人                                                     ( system_user表的user_id )
	DriverFingerprintAssociationSelectColumnDeletedBy DriverFingerprintAssociationSelectColumn = "deleted_by"
)

var AllDriverFingerprintAssociationSelectColumn = []DriverFingerprintAssociationSelectColumn{
	DriverFingerprintAssociationSelectColumnID,
	DriverFingerprintAssociationSelectColumnDriverFingerprintAssociationID,
	DriverFingerprintAssociationSelectColumnDriverID,
	DriverFingerprintAssociationSelectColumnFingerprintName,
	DriverFingerprintAssociationSelectColumnDriverFingerprintID,
	DriverFingerprintAssociationSelectColumnPictureAddress,
	DriverFingerprintAssociationSelectColumnIsDeleted,
	DriverFingerprintAssociationSelectColumnCreatedAt,
	DriverFingerprintAssociationSelectColumnCreatedBy,
	DriverFingerprintAssociationSelectColumnUpdatedAt,
	DriverFingerprintAssociationSelectColumnUpdatedBy,
	DriverFingerprintAssociationSelectColumnDeletedAt,
	DriverFingerprintAssociationSelectColumnDeletedBy,
}

func (e DriverFingerprintAssociationSelectColumn) IsValid() bool {
	switch e {
	case DriverFingerprintAssociationSelectColumnID, DriverFingerprintAssociationSelectColumnDriverFingerprintAssociationID, DriverFingerprintAssociationSelectColumnDriverID, DriverFingerprintAssociationSelectColumnFingerprintName, DriverFingerprintAssociationSelectColumnDriverFingerprintID, DriverFingerprintAssociationSelectColumnPictureAddress, DriverFingerprintAssociationSelectColumnIsDeleted, DriverFingerprintAssociationSelectColumnCreatedAt, DriverFingerprintAssociationSelectColumnCreatedBy, DriverFingerprintAssociationSelectColumnUpdatedAt, DriverFingerprintAssociationSelectColumnUpdatedBy, DriverFingerprintAssociationSelectColumnDeletedAt, DriverFingerprintAssociationSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DriverFingerprintAssociationSelectColumn) String() string {
	return string(e)
}

func (e *DriverFingerprintAssociationSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverFingerprintAssociationSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverFingerprintAssociationSelectColumn", str)
	}
	return nil
}

func (e DriverFingerprintAssociationSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DriverFingerprintSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	DriverFingerprintSelectColumnID DriverFingerprintSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	DriverFingerprintSelectColumnDriverFingerprintID DriverFingerprintSelectColumn = "driver_fingerprint_id"
	// driver_info驾驶员信息表的driver_id          (                            )
	DriverFingerprintSelectColumnDriverID DriverFingerprintSelectColumn = "driver_id"
	// 驾驶员姓名                                      (                            )
	DriverFingerprintSelectColumnDriverName DriverFingerprintSelectColumn = "driver_name"
	// 用户ID                                          ( system_user表的user_id )
	DriverFingerprintSelectColumnUserID DriverFingerprintSelectColumn = "user_id"
	// 特征码                                          (                            )
	DriverFingerprintSelectColumnSignature DriverFingerprintSelectColumn = "signature"
	// 指纹名称                                        (                            )
	DriverFingerprintSelectColumnFingerprintName DriverFingerprintSelectColumn = "fingerprint_name"
	// SIM卡号                                         (                            )
	DriverFingerprintSelectColumnSimNumber DriverFingerprintSelectColumn = "sim_number"
	// 指令ID                                          (                            )
	DriverFingerprintSelectColumnInstructionID DriverFingerprintSelectColumn = "instruction_id"
	// 操作类型                                        (                            )
	DriverFingerprintSelectColumnOperationType DriverFingerprintSelectColumn = "operation_type"
	// 内容                                            (                            )
	DriverFingerprintSelectColumnContent DriverFingerprintSelectColumn = "content"
	// 操作时间                                        (                            )
	DriverFingerprintSelectColumnOperationTime DriverFingerprintSelectColumn = "operation_time"
	// 上传时间                                        (                            )
	DriverFingerprintSelectColumnUploadTime DriverFingerprintSelectColumn = "upload_time"
	// 时间戳                                          (                            )
	DriverFingerprintSelectColumnTimestamp DriverFingerprintSelectColumn = "timestamp"
	// 终端ID                                          (                            )
	DriverFingerprintSelectColumnTernimalID DriverFingerprintSelectColumn = "ternimal_id"
	// 是否成功                                        (                            )
	DriverFingerprintSelectColumnIsSuccess DriverFingerprintSelectColumn = "is_success"
	// 是否删除                                        (                            )
	DriverFingerprintSelectColumnIsDeleted DriverFingerprintSelectColumn = "is_deleted"
	// 创建时间                                        (                            )
	DriverFingerprintSelectColumnCreatedAt DriverFingerprintSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	DriverFingerprintSelectColumnCreatedBy DriverFingerprintSelectColumn = "created_by"
	// 修改时间                                        (                            )
	DriverFingerprintSelectColumnUpdatedAt DriverFingerprintSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	DriverFingerprintSelectColumnUpdatedBy DriverFingerprintSelectColumn = "updated_by"
	// 删除时间                                        (                            )
	DriverFingerprintSelectColumnDeletedAt DriverFingerprintSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	DriverFingerprintSelectColumnDeletedBy DriverFingerprintSelectColumn = "deleted_by"
)

var AllDriverFingerprintSelectColumn = []DriverFingerprintSelectColumn{
	DriverFingerprintSelectColumnID,
	DriverFingerprintSelectColumnDriverFingerprintID,
	DriverFingerprintSelectColumnDriverID,
	DriverFingerprintSelectColumnDriverName,
	DriverFingerprintSelectColumnUserID,
	DriverFingerprintSelectColumnSignature,
	DriverFingerprintSelectColumnFingerprintName,
	DriverFingerprintSelectColumnSimNumber,
	DriverFingerprintSelectColumnInstructionID,
	DriverFingerprintSelectColumnOperationType,
	DriverFingerprintSelectColumnContent,
	DriverFingerprintSelectColumnOperationTime,
	DriverFingerprintSelectColumnUploadTime,
	DriverFingerprintSelectColumnTimestamp,
	DriverFingerprintSelectColumnTernimalID,
	DriverFingerprintSelectColumnIsSuccess,
	DriverFingerprintSelectColumnIsDeleted,
	DriverFingerprintSelectColumnCreatedAt,
	DriverFingerprintSelectColumnCreatedBy,
	DriverFingerprintSelectColumnUpdatedAt,
	DriverFingerprintSelectColumnUpdatedBy,
	DriverFingerprintSelectColumnDeletedAt,
	DriverFingerprintSelectColumnDeletedBy,
}

func (e DriverFingerprintSelectColumn) IsValid() bool {
	switch e {
	case DriverFingerprintSelectColumnID, DriverFingerprintSelectColumnDriverFingerprintID, DriverFingerprintSelectColumnDriverID, DriverFingerprintSelectColumnDriverName, DriverFingerprintSelectColumnUserID, DriverFingerprintSelectColumnSignature, DriverFingerprintSelectColumnFingerprintName, DriverFingerprintSelectColumnSimNumber, DriverFingerprintSelectColumnInstructionID, DriverFingerprintSelectColumnOperationType, DriverFingerprintSelectColumnContent, DriverFingerprintSelectColumnOperationTime, DriverFingerprintSelectColumnUploadTime, DriverFingerprintSelectColumnTimestamp, DriverFingerprintSelectColumnTernimalID, DriverFingerprintSelectColumnIsSuccess, DriverFingerprintSelectColumnIsDeleted, DriverFingerprintSelectColumnCreatedAt, DriverFingerprintSelectColumnCreatedBy, DriverFingerprintSelectColumnUpdatedAt, DriverFingerprintSelectColumnUpdatedBy, DriverFingerprintSelectColumnDeletedAt, DriverFingerprintSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DriverFingerprintSelectColumn) String() string {
	return string(e)
}

func (e *DriverFingerprintSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverFingerprintSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverFingerprintSelectColumn", str)
	}
	return nil
}

func (e DriverFingerprintSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DriverIDInfoReportSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	DriverIDInfoReportSelectColumnID DriverIDInfoReportSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	DriverIDInfoReportSelectColumnDriverIDInfoReportID DriverIDInfoReportSelectColumn = "driver_id_info_report_id"
	// vehicle_info 车辆信息表 的vehicle_id        (                            )
	DriverIDInfoReportSelectColumnVehicleID DriverIDInfoReportSelectColumn = "vehicle_id"
	// IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	DriverIDInfoReportSelectColumnIcCardStatus DriverIDInfoReportSelectColumn = "ic_card_status"
	// 操作时间                                        (                            )
	DriverIDInfoReportSelectColumnOperationTime DriverIDInfoReportSelectColumn = "operation_time"
	// 驾驶员姓名                                      (                            )
	DriverIDInfoReportSelectColumnDriverName DriverIDInfoReportSelectColumn = "driver_name"
	// 证件号码                                        (                            )
	DriverIDInfoReportSelectColumnLicenseNumber DriverIDInfoReportSelectColumn = "license_number"
	// 终端IMEI                                        ( 国际移动设备标识别码       )
	DriverIDInfoReportSelectColumnImel DriverIDInfoReportSelectColumn = "imel"
	// IC卡读取结果                                    ( IC卡读卡字典           )
	DriverIDInfoReportSelectColumnIcCardReadingResult DriverIDInfoReportSelectColumn = "ic_card_reading_result"
	// 从业资格证编码                                  (                            )
	DriverIDInfoReportSelectColumnOccupationalNumber DriverIDInfoReportSelectColumn = "occupational_number"
	// 发证机构名称                                    (                            )
	DriverIDInfoReportSelectColumnDriverLicenseName DriverIDInfoReportSelectColumn = "driver_license_name"
	// 证件有效期                                      (                            )
	DriverIDInfoReportSelectColumnLicenseExpireDate DriverIDInfoReportSelectColumn = "license_expire_date"
	// 登记时间                                        (                            )
	DriverIDInfoReportSelectColumnRegistrationTime DriverIDInfoReportSelectColumn = "registration_time"
	// 创建时间                                        (                            )
	DriverIDInfoReportSelectColumnCreatedAt DriverIDInfoReportSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	DriverIDInfoReportSelectColumnCreatedBy DriverIDInfoReportSelectColumn = "created_by"
	// 修改时间                                        (                            )
	DriverIDInfoReportSelectColumnUpdatedAt DriverIDInfoReportSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	DriverIDInfoReportSelectColumnUpdatedBy DriverIDInfoReportSelectColumn = "updated_by"
	// 删除时间                                        (                            )
	DriverIDInfoReportSelectColumnDeletedAt DriverIDInfoReportSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	DriverIDInfoReportSelectColumnDeletedBy DriverIDInfoReportSelectColumn = "deleted_by"
)

var AllDriverIDInfoReportSelectColumn = []DriverIDInfoReportSelectColumn{
	DriverIDInfoReportSelectColumnID,
	DriverIDInfoReportSelectColumnDriverIDInfoReportID,
	DriverIDInfoReportSelectColumnVehicleID,
	DriverIDInfoReportSelectColumnIcCardStatus,
	DriverIDInfoReportSelectColumnOperationTime,
	DriverIDInfoReportSelectColumnDriverName,
	DriverIDInfoReportSelectColumnLicenseNumber,
	DriverIDInfoReportSelectColumnImel,
	DriverIDInfoReportSelectColumnIcCardReadingResult,
	DriverIDInfoReportSelectColumnOccupationalNumber,
	DriverIDInfoReportSelectColumnDriverLicenseName,
	DriverIDInfoReportSelectColumnLicenseExpireDate,
	DriverIDInfoReportSelectColumnRegistrationTime,
	DriverIDInfoReportSelectColumnCreatedAt,
	DriverIDInfoReportSelectColumnCreatedBy,
	DriverIDInfoReportSelectColumnUpdatedAt,
	DriverIDInfoReportSelectColumnUpdatedBy,
	DriverIDInfoReportSelectColumnDeletedAt,
	DriverIDInfoReportSelectColumnDeletedBy,
}

func (e DriverIDInfoReportSelectColumn) IsValid() bool {
	switch e {
	case DriverIDInfoReportSelectColumnID, DriverIDInfoReportSelectColumnDriverIDInfoReportID, DriverIDInfoReportSelectColumnVehicleID, DriverIDInfoReportSelectColumnIcCardStatus, DriverIDInfoReportSelectColumnOperationTime, DriverIDInfoReportSelectColumnDriverName, DriverIDInfoReportSelectColumnLicenseNumber, DriverIDInfoReportSelectColumnImel, DriverIDInfoReportSelectColumnIcCardReadingResult, DriverIDInfoReportSelectColumnOccupationalNumber, DriverIDInfoReportSelectColumnDriverLicenseName, DriverIDInfoReportSelectColumnLicenseExpireDate, DriverIDInfoReportSelectColumnRegistrationTime, DriverIDInfoReportSelectColumnCreatedAt, DriverIDInfoReportSelectColumnCreatedBy, DriverIDInfoReportSelectColumnUpdatedAt, DriverIDInfoReportSelectColumnUpdatedBy, DriverIDInfoReportSelectColumnDeletedAt, DriverIDInfoReportSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DriverIDInfoReportSelectColumn) String() string {
	return string(e)
}

func (e *DriverIDInfoReportSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverIDInfoReportSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverIdInfoReportSelectColumn", str)
	}
	return nil
}

func (e DriverIDInfoReportSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DriverIdentitySelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	DriverIdentitySelectColumnID DriverIdentitySelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	DriverIdentitySelectColumnIdentityID DriverIdentitySelectColumn = "identity_id"
	// 身份证号码                                      (                            )
	DriverIdentitySelectColumnIDCardNum DriverIdentitySelectColumn = "id_card_num"
	// 身份证出生日期                                  (                            )
	DriverIdentitySelectColumnIDCardBirthday DriverIdentitySelectColumn = "id_card_birthday"
	// 身份证签发机关                                  (                            )
	DriverIdentitySelectColumnIDCardSignGovernment DriverIdentitySelectColumn = "id_card_sign_government"
	// 身份证民族                                      (                            )
	DriverIdentitySelectColumnIDCardNation DriverIdentitySelectColumn = "id_card_nation"
	// 身份证有效起始日期                              (                            )
	DriverIdentitySelectColumnIDCardStartDate DriverIdentitySelectColumn = "id_card_start_date"
	// 身份证有效截止日期                              (                            )
	DriverIdentitySelectColumnIDCardEndDate DriverIdentitySelectColumn = "id_card_end_date"
	// 身份证正面照，云存储地址                        (                            )
	DriverIdentitySelectColumnIDCardFrontPic DriverIdentitySelectColumn = "id_card_front_pic"
	// 身份证背面照，云存储地址                        (                            )
	DriverIdentitySelectColumnIDCardBackPic DriverIdentitySelectColumn = "id_card_back_pic"
	// 身份证住址                                      (                            )
	DriverIdentitySelectColumnIDCardAddress DriverIdentitySelectColumn = "id_card_address"
	// 驾驶员手持身份证照片,云储存系统返回的路径       (                            )
	DriverIdentitySelectColumnDriverHoldingIDPhoto DriverIdentitySelectColumn = "driver_holding_id_photo"
	// 驾驶员的正面照,云储存系统返回的路径             (                            )
	DriverIdentitySelectColumnDriverPhoto DriverIdentitySelectColumn = "driver_photo"
	// 驾驶员签名,云储存系统返回的路径                 (                            )
	DriverIdentitySelectColumnDriverSignature DriverIdentitySelectColumn = "driver_signature"
	// 从业资格证号码                                  (                            )
	DriverIdentitySelectColumnOccupationalNumber DriverIdentitySelectColumn = "occupational_number"
	// 从业资格证有效期至                              (                            )
	DriverIdentitySelectColumnOccupationalExpireDate DriverIdentitySelectColumn = "occupational_expire_date"
	// 从业资格证发证机构                              (                            )
	DriverIdentitySelectColumnOccupationalIssuingAuthority DriverIdentitySelectColumn = "occupational_issuing_authority"
	// 劳动合同,云储存系统返回的完整劳动合同的图片路径 (                            )
	DriverIdentitySelectColumnLaborContract DriverIdentitySelectColumn = "labor_contract"
	// 驾驶员驾驶证,云储存系统返回的路径               (                            )
	DriverIdentitySelectColumnDriverLicensePic DriverIdentitySelectColumn = "driver_license_pic"
	// 驾驶证发证机关                                  (                            )
	DriverIdentitySelectColumnDriverLicenseIssuingAuthority DriverIdentitySelectColumn = "driver_license_issuing_authority"
	// 年审日期（六合一）                              (                            )
	DriverIdentitySelectColumnAnnualReviewDate DriverIdentitySelectColumn = "annual_review_date"
	// 换证日期（六合一）                              (                            )
	DriverIdentitySelectColumnRenewalDate DriverIdentitySelectColumn = "renewal_date"
	// 累计积分（六合一）                              (                            )
	DriverIdentitySelectColumnAccumulativedPoints DriverIdentitySelectColumn = "accumulatived_points"
	// 清分日期（六合一）                              (                            )
	DriverIdentitySelectColumnSortingDate DriverIdentitySelectColumn = "sorting_date"
	// 准驾车型（六合一）                              ( 准驾车型字典           )
	DriverIdentitySelectColumnQuasiDrivingModels DriverIdentitySelectColumn = "quasi_driving_models"
	// 驾驶证发证所在地的省份ID                        ( 省份表                     )
	DriverIdentitySelectColumnDriverLicenseProvinceID DriverIdentitySelectColumn = "driver_license_province_id"
	// 驾驶证发证所在地的城市ID                        ( 城市表                     )
	DriverIdentitySelectColumnDriverLicenseCityID DriverIdentitySelectColumn = "driver_license_city_id"
	// 驾驶证发证所在地的区域ID                        ( 区域表                     )
	DriverIdentitySelectColumnDriverLicenseDistrictID DriverIdentitySelectColumn = "driver_license_district_id"
	// 驾驶证状态                                      ( 驾驶证状态字典         )
	DriverIdentitySelectColumnDriverLicenseStatus DriverIdentitySelectColumn = "driver_license_status"
	// 驾驶证初次领证日期                              (                            )
	DriverIdentitySelectColumnDriverLicenseIssueDate DriverIdentitySelectColumn = "driver_license_issue_date"
	// 从业时间                                        (                            )
	DriverIdentitySelectColumnWorkingTime DriverIdentitySelectColumn = "working_time"
	// 是否审核                                        (                            )
	DriverIdentitySelectColumnIsReview DriverIdentitySelectColumn = "is_review"
	// 创建时间                                        (                            )
	DriverIdentitySelectColumnCreatedAt DriverIdentitySelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	DriverIdentitySelectColumnCreatedBy DriverIdentitySelectColumn = "created_by"
	// 修改时间                                        (                            )
	DriverIdentitySelectColumnUpdatedAt DriverIdentitySelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	DriverIdentitySelectColumnUpdatedBy DriverIdentitySelectColumn = "updated_by"
	// 删除时间                                        (                            )
	DriverIdentitySelectColumnDeletedAt DriverIdentitySelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	DriverIdentitySelectColumnDeletedBy DriverIdentitySelectColumn = "deleted_by"
	// 是否删除                                        (                            )
	DriverIdentitySelectColumnIsDeleted DriverIdentitySelectColumn = "is_deleted"
)

var AllDriverIdentitySelectColumn = []DriverIdentitySelectColumn{
	DriverIdentitySelectColumnID,
	DriverIdentitySelectColumnIdentityID,
	DriverIdentitySelectColumnIDCardNum,
	DriverIdentitySelectColumnIDCardBirthday,
	DriverIdentitySelectColumnIDCardSignGovernment,
	DriverIdentitySelectColumnIDCardNation,
	DriverIdentitySelectColumnIDCardStartDate,
	DriverIdentitySelectColumnIDCardEndDate,
	DriverIdentitySelectColumnIDCardFrontPic,
	DriverIdentitySelectColumnIDCardBackPic,
	DriverIdentitySelectColumnIDCardAddress,
	DriverIdentitySelectColumnDriverHoldingIDPhoto,
	DriverIdentitySelectColumnDriverPhoto,
	DriverIdentitySelectColumnDriverSignature,
	DriverIdentitySelectColumnOccupationalNumber,
	DriverIdentitySelectColumnOccupationalExpireDate,
	DriverIdentitySelectColumnOccupationalIssuingAuthority,
	DriverIdentitySelectColumnLaborContract,
	DriverIdentitySelectColumnDriverLicensePic,
	DriverIdentitySelectColumnDriverLicenseIssuingAuthority,
	DriverIdentitySelectColumnAnnualReviewDate,
	DriverIdentitySelectColumnRenewalDate,
	DriverIdentitySelectColumnAccumulativedPoints,
	DriverIdentitySelectColumnSortingDate,
	DriverIdentitySelectColumnQuasiDrivingModels,
	DriverIdentitySelectColumnDriverLicenseProvinceID,
	DriverIdentitySelectColumnDriverLicenseCityID,
	DriverIdentitySelectColumnDriverLicenseDistrictID,
	DriverIdentitySelectColumnDriverLicenseStatus,
	DriverIdentitySelectColumnDriverLicenseIssueDate,
	DriverIdentitySelectColumnWorkingTime,
	DriverIdentitySelectColumnIsReview,
	DriverIdentitySelectColumnCreatedAt,
	DriverIdentitySelectColumnCreatedBy,
	DriverIdentitySelectColumnUpdatedAt,
	DriverIdentitySelectColumnUpdatedBy,
	DriverIdentitySelectColumnDeletedAt,
	DriverIdentitySelectColumnDeletedBy,
	DriverIdentitySelectColumnIsDeleted,
}

func (e DriverIdentitySelectColumn) IsValid() bool {
	switch e {
	case DriverIdentitySelectColumnID, DriverIdentitySelectColumnIdentityID, DriverIdentitySelectColumnIDCardNum, DriverIdentitySelectColumnIDCardBirthday, DriverIdentitySelectColumnIDCardSignGovernment, DriverIdentitySelectColumnIDCardNation, DriverIdentitySelectColumnIDCardStartDate, DriverIdentitySelectColumnIDCardEndDate, DriverIdentitySelectColumnIDCardFrontPic, DriverIdentitySelectColumnIDCardBackPic, DriverIdentitySelectColumnIDCardAddress, DriverIdentitySelectColumnDriverHoldingIDPhoto, DriverIdentitySelectColumnDriverPhoto, DriverIdentitySelectColumnDriverSignature, DriverIdentitySelectColumnOccupationalNumber, DriverIdentitySelectColumnOccupationalExpireDate, DriverIdentitySelectColumnOccupationalIssuingAuthority, DriverIdentitySelectColumnLaborContract, DriverIdentitySelectColumnDriverLicensePic, DriverIdentitySelectColumnDriverLicenseIssuingAuthority, DriverIdentitySelectColumnAnnualReviewDate, DriverIdentitySelectColumnRenewalDate, DriverIdentitySelectColumnAccumulativedPoints, DriverIdentitySelectColumnSortingDate, DriverIdentitySelectColumnQuasiDrivingModels, DriverIdentitySelectColumnDriverLicenseProvinceID, DriverIdentitySelectColumnDriverLicenseCityID, DriverIdentitySelectColumnDriverLicenseDistrictID, DriverIdentitySelectColumnDriverLicenseStatus, DriverIdentitySelectColumnDriverLicenseIssueDate, DriverIdentitySelectColumnWorkingTime, DriverIdentitySelectColumnIsReview, DriverIdentitySelectColumnCreatedAt, DriverIdentitySelectColumnCreatedBy, DriverIdentitySelectColumnUpdatedAt, DriverIdentitySelectColumnUpdatedBy, DriverIdentitySelectColumnDeletedAt, DriverIdentitySelectColumnDeletedBy, DriverIdentitySelectColumnIsDeleted:
		return true
	}
	return false
}

func (e DriverIdentitySelectColumn) String() string {
	return string(e)
}

func (e *DriverIdentitySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverIdentitySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverIdentitySelectColumn", str)
	}
	return nil
}

func (e DriverIdentitySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DriverInfoSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                                                         )
	DriverInfoSelectColumnID DriverInfoSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	DriverInfoSelectColumnDriverID DriverInfoSelectColumn = "driver_id"
	// 所在企业id                                      ( enterprise_info表的enterprise_id                         )
	DriverInfoSelectColumnEnterpriseID DriverInfoSelectColumn = "enterprise_id"
	// 所在部门id                                      ( department 部门信息表                                    )
	DriverInfoSelectColumnDepartmentID DriverInfoSelectColumn = "department_id"
	// 驾驶员身份验证信息ID                            ( driver_identity表的driver_identity_id                    )
	DriverInfoSelectColumnDriverIdentityID DriverInfoSelectColumn = "driver_identity_id"
	// 驾驶员姓名                                      (                                                              )
	DriverInfoSelectColumnDriverName DriverInfoSelectColumn = "driver_name"
	// 手机号码                                        (                                                              )
	DriverInfoSelectColumnTelephone DriverInfoSelectColumn = "telephone"
	// 性别                                            ( 性别字典                                                 )
	DriverInfoSelectColumnSex DriverInfoSelectColumn = "sex"
	// 档案编号(后6位)                                 (                                                              )
	DriverInfoSelectColumnFilesNumber DriverInfoSelectColumn = "files_number"
	// 联系地址                                        (                                                              )
	DriverInfoSelectColumnContactAddress DriverInfoSelectColumn = "contact_address"
	// 邮寄地址                                        (                                                              )
	DriverInfoSelectColumnMailingAddress DriverInfoSelectColumn = "mailing_address"
	// 是否提交                                        ( 用于标志驾驶员资料是否处于确定状态。未确定状态的驾驶员信息在系统上除驾驶员管理外的功能中都查不到。 )
	DriverInfoSelectColumnIsSubmit DriverInfoSelectColumn = "is_submit"
	// 提交内容                                        (                                                              )
	DriverInfoSelectColumnSubmitContent DriverInfoSelectColumn = "submit_content"
	// 提交时间                                        (                                                              )
	DriverInfoSelectColumnSubmitAt DriverInfoSelectColumn = "submit_at"
	// 提交人                                          ( system_user表的user_id                                       )
	DriverInfoSelectColumnSubmitBy DriverInfoSelectColumn = "submit_by"
	// 是否手动录入                                    ( 驾驶员资料分为使用身份证读卡器读取身份证自动录入资料和手动填写资料 )
	DriverInfoSelectColumnIsManualInput DriverInfoSelectColumn = "is_manual_input"
	// 是否录入                                        (                                                              )
	DriverInfoSelectColumnIsInput DriverInfoSelectColumn = "is_input"
	// 录入时间                                        (                                                              )
	DriverInfoSelectColumnInputAt DriverInfoSelectColumn = "input_at"
	// 录入人                                          ( system_user表的user_id                                   )
	DriverInfoSelectColumnInputBy DriverInfoSelectColumn = "input_by"
	// 是否校验数据                                    ( 该字段代表是否用于校验驾驶员信息，未正式录入系统，但会同步到公安内容，用于查询驾驶员的违章数据。 )
	DriverInfoSelectColumnIsCheckData DriverInfoSelectColumn = "is_check_data"
	// 检验时间                                        (                                                              )
	DriverInfoSelectColumnCheckAt DriverInfoSelectColumn = "check_at"
	// 校验人                                          ( system_user表的user_id                                   )
	DriverInfoSelectColumnCheckBy DriverInfoSelectColumn = "check_by"
	// 驾驶员信息同步内网反馈信息                      ( 驾驶员信息同步内网反馈信息。驾驶员信息同步到公安内网后内网的反馈内容，如档案编号填写错误会反馈档案编号后六位不正确 )
	DriverInfoSelectColumnRemarkIn DriverInfoSelectColumn = "remark_in"
	// 内网更新时间                                    (                                                              )
	DriverInfoSelectColumnUpdateTimeIn DriverInfoSelectColumn = "update_time_in"
	// 是否通过短信验证                                (                                                              )
	DriverInfoSelectColumnIsCheckSms DriverInfoSelectColumn = "is_check_sms"
	// 备注                                            (                                                              )
	DriverInfoSelectColumnRemarks DriverInfoSelectColumn = "remarks"
	// 是否删除                                        (                                                              )
	DriverInfoSelectColumnIsDeleted DriverInfoSelectColumn = "is_deleted"
	// 代理商                                          ( enterprise_info表的enterprise_id                         )
	DriverInfoSelectColumnAgent DriverInfoSelectColumn = "agent"
	// 运营商                                          ( enterprise_info表的enterprise_id                         )
	DriverInfoSelectColumnOperator DriverInfoSelectColumn = "operator"
	// 是否黑名单                                      ( false                                                        )
	DriverInfoSelectColumnIsBlacklist DriverInfoSelectColumn = "is_blacklist"
	// 黑名单截止日期                                  (                                                              )
	DriverInfoSelectColumnBlacklistDeadline DriverInfoSelectColumn = "blacklist_deadline"
	// 创建时间                                        (                                                              )
	DriverInfoSelectColumnCreatedAt DriverInfoSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id                                   )
	DriverInfoSelectColumnCreatedBy DriverInfoSelectColumn = "created_by"
	// 修改时间                                        (                                                              )
	DriverInfoSelectColumnUpdatedAt DriverInfoSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id                                   )
	DriverInfoSelectColumnUpdatedBy DriverInfoSelectColumn = "updated_by"
	// 删除时间                                        (                                                              )
	DriverInfoSelectColumnDeletedAt DriverInfoSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id                                   )
	DriverInfoSelectColumnDeletedBy DriverInfoSelectColumn = "deleted_by"
)

var AllDriverInfoSelectColumn = []DriverInfoSelectColumn{
	DriverInfoSelectColumnID,
	DriverInfoSelectColumnDriverID,
	DriverInfoSelectColumnEnterpriseID,
	DriverInfoSelectColumnDepartmentID,
	DriverInfoSelectColumnDriverIdentityID,
	DriverInfoSelectColumnDriverName,
	DriverInfoSelectColumnTelephone,
	DriverInfoSelectColumnSex,
	DriverInfoSelectColumnFilesNumber,
	DriverInfoSelectColumnContactAddress,
	DriverInfoSelectColumnMailingAddress,
	DriverInfoSelectColumnIsSubmit,
	DriverInfoSelectColumnSubmitContent,
	DriverInfoSelectColumnSubmitAt,
	DriverInfoSelectColumnSubmitBy,
	DriverInfoSelectColumnIsManualInput,
	DriverInfoSelectColumnIsInput,
	DriverInfoSelectColumnInputAt,
	DriverInfoSelectColumnInputBy,
	DriverInfoSelectColumnIsCheckData,
	DriverInfoSelectColumnCheckAt,
	DriverInfoSelectColumnCheckBy,
	DriverInfoSelectColumnRemarkIn,
	DriverInfoSelectColumnUpdateTimeIn,
	DriverInfoSelectColumnIsCheckSms,
	DriverInfoSelectColumnRemarks,
	DriverInfoSelectColumnIsDeleted,
	DriverInfoSelectColumnAgent,
	DriverInfoSelectColumnOperator,
	DriverInfoSelectColumnIsBlacklist,
	DriverInfoSelectColumnBlacklistDeadline,
	DriverInfoSelectColumnCreatedAt,
	DriverInfoSelectColumnCreatedBy,
	DriverInfoSelectColumnUpdatedAt,
	DriverInfoSelectColumnUpdatedBy,
	DriverInfoSelectColumnDeletedAt,
	DriverInfoSelectColumnDeletedBy,
}

func (e DriverInfoSelectColumn) IsValid() bool {
	switch e {
	case DriverInfoSelectColumnID, DriverInfoSelectColumnDriverID, DriverInfoSelectColumnEnterpriseID, DriverInfoSelectColumnDepartmentID, DriverInfoSelectColumnDriverIdentityID, DriverInfoSelectColumnDriverName, DriverInfoSelectColumnTelephone, DriverInfoSelectColumnSex, DriverInfoSelectColumnFilesNumber, DriverInfoSelectColumnContactAddress, DriverInfoSelectColumnMailingAddress, DriverInfoSelectColumnIsSubmit, DriverInfoSelectColumnSubmitContent, DriverInfoSelectColumnSubmitAt, DriverInfoSelectColumnSubmitBy, DriverInfoSelectColumnIsManualInput, DriverInfoSelectColumnIsInput, DriverInfoSelectColumnInputAt, DriverInfoSelectColumnInputBy, DriverInfoSelectColumnIsCheckData, DriverInfoSelectColumnCheckAt, DriverInfoSelectColumnCheckBy, DriverInfoSelectColumnRemarkIn, DriverInfoSelectColumnUpdateTimeIn, DriverInfoSelectColumnIsCheckSms, DriverInfoSelectColumnRemarks, DriverInfoSelectColumnIsDeleted, DriverInfoSelectColumnAgent, DriverInfoSelectColumnOperator, DriverInfoSelectColumnIsBlacklist, DriverInfoSelectColumnBlacklistDeadline, DriverInfoSelectColumnCreatedAt, DriverInfoSelectColumnCreatedBy, DriverInfoSelectColumnUpdatedAt, DriverInfoSelectColumnUpdatedBy, DriverInfoSelectColumnDeletedAt, DriverInfoSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DriverInfoSelectColumn) String() string {
	return string(e)
}

func (e *DriverInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverInfoSelectColumn", str)
	}
	return nil
}

func (e DriverInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DrivingLicenseRegistrationInspectionSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	DrivingLicenseRegistrationInspectionSelectColumnID DrivingLicenseRegistrationInspectionSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	DrivingLicenseRegistrationInspectionSelectColumnDriverIDInfoReportID DrivingLicenseRegistrationInspectionSelectColumn = "driver_id_info_report_id"
	// vehicle_info 车辆信息表 的vehicle_id        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnVehicleID DrivingLicenseRegistrationInspectionSelectColumn = "vehicle_id"
	// IC状态(从业资格证IC卡插入,从业资格证IC卡拔出)   ( 从业资格证IC卡字典     )
	DrivingLicenseRegistrationInspectionSelectColumnIcCardStatus DrivingLicenseRegistrationInspectionSelectColumn = "ic_card_status"
	// 操作时间                                        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnOperationTime DrivingLicenseRegistrationInspectionSelectColumn = "operation_time"
	// 驾驶员姓名                                      (                            )
	DrivingLicenseRegistrationInspectionSelectColumnDriverName DrivingLicenseRegistrationInspectionSelectColumn = "driver_name"
	// 证件号码                                        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnLicenseNumber DrivingLicenseRegistrationInspectionSelectColumn = "license_number"
	// 终端IMEI                                        ( 国际移动设备标识别码       )
	DrivingLicenseRegistrationInspectionSelectColumnImel DrivingLicenseRegistrationInspectionSelectColumn = "imel"
	// IC卡读取结果                                    ( IC卡读卡字典           )
	DrivingLicenseRegistrationInspectionSelectColumnIcCardReadingResult DrivingLicenseRegistrationInspectionSelectColumn = "ic_card_reading_result"
	// 从业资格证编码                                  (                            )
	DrivingLicenseRegistrationInspectionSelectColumnOccupationalNumber DrivingLicenseRegistrationInspectionSelectColumn = "occupational_number"
	// 发证机构名称                                    (                            )
	DrivingLicenseRegistrationInspectionSelectColumnDriverLicenseName DrivingLicenseRegistrationInspectionSelectColumn = "driver_license_name"
	// 证件有效期                                      (                            )
	DrivingLicenseRegistrationInspectionSelectColumnLicenseExpireDate DrivingLicenseRegistrationInspectionSelectColumn = "license_expire_date"
	// 登记时间                                        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnRegistrationTime DrivingLicenseRegistrationInspectionSelectColumn = "registration_time"
	// 创建时间                                        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnCreatedAt DrivingLicenseRegistrationInspectionSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	DrivingLicenseRegistrationInspectionSelectColumnCreatedBy DrivingLicenseRegistrationInspectionSelectColumn = "created_by"
	// 修改时间                                        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnUpdatedAt DrivingLicenseRegistrationInspectionSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	DrivingLicenseRegistrationInspectionSelectColumnUpdatedBy DrivingLicenseRegistrationInspectionSelectColumn = "updated_by"
	// 删除时间                                        (                            )
	DrivingLicenseRegistrationInspectionSelectColumnDeletedAt DrivingLicenseRegistrationInspectionSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	DrivingLicenseRegistrationInspectionSelectColumnDeletedBy DrivingLicenseRegistrationInspectionSelectColumn = "deleted_by"
)

var AllDrivingLicenseRegistrationInspectionSelectColumn = []DrivingLicenseRegistrationInspectionSelectColumn{
	DrivingLicenseRegistrationInspectionSelectColumnID,
	DrivingLicenseRegistrationInspectionSelectColumnDriverIDInfoReportID,
	DrivingLicenseRegistrationInspectionSelectColumnVehicleID,
	DrivingLicenseRegistrationInspectionSelectColumnIcCardStatus,
	DrivingLicenseRegistrationInspectionSelectColumnOperationTime,
	DrivingLicenseRegistrationInspectionSelectColumnDriverName,
	DrivingLicenseRegistrationInspectionSelectColumnLicenseNumber,
	DrivingLicenseRegistrationInspectionSelectColumnImel,
	DrivingLicenseRegistrationInspectionSelectColumnIcCardReadingResult,
	DrivingLicenseRegistrationInspectionSelectColumnOccupationalNumber,
	DrivingLicenseRegistrationInspectionSelectColumnDriverLicenseName,
	DrivingLicenseRegistrationInspectionSelectColumnLicenseExpireDate,
	DrivingLicenseRegistrationInspectionSelectColumnRegistrationTime,
	DrivingLicenseRegistrationInspectionSelectColumnCreatedAt,
	DrivingLicenseRegistrationInspectionSelectColumnCreatedBy,
	DrivingLicenseRegistrationInspectionSelectColumnUpdatedAt,
	DrivingLicenseRegistrationInspectionSelectColumnUpdatedBy,
	DrivingLicenseRegistrationInspectionSelectColumnDeletedAt,
	DrivingLicenseRegistrationInspectionSelectColumnDeletedBy,
}

func (e DrivingLicenseRegistrationInspectionSelectColumn) IsValid() bool {
	switch e {
	case DrivingLicenseRegistrationInspectionSelectColumnID, DrivingLicenseRegistrationInspectionSelectColumnDriverIDInfoReportID, DrivingLicenseRegistrationInspectionSelectColumnVehicleID, DrivingLicenseRegistrationInspectionSelectColumnIcCardStatus, DrivingLicenseRegistrationInspectionSelectColumnOperationTime, DrivingLicenseRegistrationInspectionSelectColumnDriverName, DrivingLicenseRegistrationInspectionSelectColumnLicenseNumber, DrivingLicenseRegistrationInspectionSelectColumnImel, DrivingLicenseRegistrationInspectionSelectColumnIcCardReadingResult, DrivingLicenseRegistrationInspectionSelectColumnOccupationalNumber, DrivingLicenseRegistrationInspectionSelectColumnDriverLicenseName, DrivingLicenseRegistrationInspectionSelectColumnLicenseExpireDate, DrivingLicenseRegistrationInspectionSelectColumnRegistrationTime, DrivingLicenseRegistrationInspectionSelectColumnCreatedAt, DrivingLicenseRegistrationInspectionSelectColumnCreatedBy, DrivingLicenseRegistrationInspectionSelectColumnUpdatedAt, DrivingLicenseRegistrationInspectionSelectColumnUpdatedBy, DrivingLicenseRegistrationInspectionSelectColumnDeletedAt, DrivingLicenseRegistrationInspectionSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DrivingLicenseRegistrationInspectionSelectColumn) String() string {
	return string(e)
}

func (e *DrivingLicenseRegistrationInspectionSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DrivingLicenseRegistrationInspectionSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DrivingLicenseRegistrationInspectionSelectColumn", str)
	}
	return nil
}

func (e DrivingLicenseRegistrationInspectionSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
