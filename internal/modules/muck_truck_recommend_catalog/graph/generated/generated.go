// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/muck_truck_recommend_catalog/graph/model"
	model1 "VehicleSupervision/internal/modules/muck_truck_recommend_catalog/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	MuckTruckPurchaseIntention struct {
		BrandModel                   func(childComplexity int) int
		CapacigyApplication          func(childComplexity int) int
		CityID                       func(childComplexity int) int
		Code                         func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		CustomerName                 func(childComplexity int) int
		CustomerPhone                func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DistrictID                   func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDeleted                    func(childComplexity int) int
		MuckTruckPurchaseIntentionID func(childComplexity int) int
		OwnerEnterprise              func(childComplexity int) int
		ProvinceID                   func(childComplexity int) int
		RegistrationTime             func(childComplexity int) int
		RegistrationUser             func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		Review                       func(childComplexity int) int
		Supplier                     func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehiclePurchase              func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionAggregate struct {
		Aggregate func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionAvgFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionMaxFields struct {
		BrandModel                   func(childComplexity int) int
		CapacigyApplication          func(childComplexity int) int
		CityID                       func(childComplexity int) int
		Code                         func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		CustomerName                 func(childComplexity int) int
		CustomerPhone                func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DistrictID                   func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDeleted                    func(childComplexity int) int
		MuckTruckPurchaseIntentionID func(childComplexity int) int
		OwnerEnterprise              func(childComplexity int) int
		ProvinceID                   func(childComplexity int) int
		RegistrationTime             func(childComplexity int) int
		RegistrationUser             func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		Review                       func(childComplexity int) int
		Supplier                     func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehiclePurchase              func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionMinFields struct {
		BrandModel                   func(childComplexity int) int
		CapacigyApplication          func(childComplexity int) int
		CityID                       func(childComplexity int) int
		Code                         func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		CustomerName                 func(childComplexity int) int
		CustomerPhone                func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DistrictID                   func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDeleted                    func(childComplexity int) int
		MuckTruckPurchaseIntentionID func(childComplexity int) int
		OwnerEnterprise              func(childComplexity int) int
		ProvinceID                   func(childComplexity int) int
		RegistrationTime             func(childComplexity int) int
		RegistrationUser             func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		Review                       func(childComplexity int) int
		Supplier                     func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehiclePurchase              func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionStddevFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionStddevPopFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionStddevSampFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionSumFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionVarPopFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionVarSampFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckPurchaseIntentionVarianceFields struct {
		ID              func(childComplexity int) int
		VehiclePurchase func(childComplexity int) int
	}

	MuckTruckSaleOrder struct {
		BelongingEnterprise    func(childComplexity int) int
		BookDate               func(childComplexity int) int
		BookVehicleNumber      func(childComplexity int) int
		CarriageSealingDevice  func(childComplexity int) int
		Commitment             func(childComplexity int) int
		ContactPhone           func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		CustomerID             func(childComplexity int) int
		CustomerName           func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IDCardNum              func(childComplexity int) int
		IDCardPicture          func(childComplexity int) int
		IsCompleted            func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		IsOtherVehicleModel    func(childComplexity int) int
		MuckTruckSaleOrderID   func(childComplexity int) int
		Notification           func(childComplexity int) int
		Progress               func(childComplexity int) int
		RegistrationTime       func(childComplexity int) int
		TankTruckActualVolume  func(childComplexity int) int
		TankTruckMarkedVolume  func(childComplexity int) int
		TipperHeight           func(childComplexity int) int
		TipperLength           func(childComplexity int) int
		TipperWidth            func(childComplexity int) int
		UShapedCargoBox        func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDepositContract func(childComplexity int) int
		VehicleHeight          func(childComplexity int) int
		VehicleLength          func(childComplexity int) int
		VehicleSaleContract    func(childComplexity int) int
		VehicleSaleRecordID    func(childComplexity int) int
		VehicleWidth           func(childComplexity int) int
	}

	MuckTruckSaleOrderAggregate struct {
		Aggregate func(childComplexity int) int
	}

	MuckTruckSaleOrderAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckSaleOrderAvgFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderDetail struct {
		ArriveQzDate                func(childComplexity int) int
		Certificate                 func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverLicensePic            func(childComplexity int) int
		FirstRegistrationDate       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckSaleOrderDetailID  func(childComplexity int) int
		OrderID                     func(childComplexity int) int
		RegistrationDate            func(childComplexity int) int
		SellerPreviewNumber         func(childComplexity int) int
		Step                        func(childComplexity int) int
		TerminalProof               func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehiclePhoto                func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailAggregate struct {
		Aggregate func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailAvgFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailMaxFields struct {
		ArriveQzDate                func(childComplexity int) int
		Certificate                 func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverLicensePic            func(childComplexity int) int
		FirstRegistrationDate       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckSaleOrderDetailID  func(childComplexity int) int
		OrderID                     func(childComplexity int) int
		RegistrationDate            func(childComplexity int) int
		SellerPreviewNumber         func(childComplexity int) int
		Step                        func(childComplexity int) int
		TerminalProof               func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehiclePhoto                func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailMinFields struct {
		ArriveQzDate                func(childComplexity int) int
		Certificate                 func(childComplexity int) int
		CreatedAt                   func(childComplexity int) int
		CreatedBy                   func(childComplexity int) int
		DeletedAt                   func(childComplexity int) int
		DeletedBy                   func(childComplexity int) int
		DriverLicensePic            func(childComplexity int) int
		FirstRegistrationDate       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsDeleted                   func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckSaleOrderDetailID  func(childComplexity int) int
		OrderID                     func(childComplexity int) int
		RegistrationDate            func(childComplexity int) int
		SellerPreviewNumber         func(childComplexity int) int
		Step                        func(childComplexity int) int
		TerminalProof               func(childComplexity int) int
		UpdatedAt                   func(childComplexity int) int
		UpdatedBy                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehiclePhoto                func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailStddevFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailStddevPopFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailStddevSampFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailSumFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailVarPopFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailVarSampFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderDetailVarianceFields struct {
		ID                func(childComplexity int) int
		LicensePlateColor func(childComplexity int) int
		LicensePlateType  func(childComplexity int) int
		Step              func(childComplexity int) int
	}

	MuckTruckSaleOrderMaxFields struct {
		BelongingEnterprise    func(childComplexity int) int
		BookDate               func(childComplexity int) int
		BookVehicleNumber      func(childComplexity int) int
		CarriageSealingDevice  func(childComplexity int) int
		Commitment             func(childComplexity int) int
		ContactPhone           func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		CustomerID             func(childComplexity int) int
		CustomerName           func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IDCardNum              func(childComplexity int) int
		IDCardPicture          func(childComplexity int) int
		IsCompleted            func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		IsOtherVehicleModel    func(childComplexity int) int
		MuckTruckSaleOrderID   func(childComplexity int) int
		Notification           func(childComplexity int) int
		Progress               func(childComplexity int) int
		RegistrationTime       func(childComplexity int) int
		TankTruckActualVolume  func(childComplexity int) int
		TankTruckMarkedVolume  func(childComplexity int) int
		TipperHeight           func(childComplexity int) int
		TipperLength           func(childComplexity int) int
		TipperWidth            func(childComplexity int) int
		UShapedCargoBox        func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDepositContract func(childComplexity int) int
		VehicleHeight          func(childComplexity int) int
		VehicleLength          func(childComplexity int) int
		VehicleSaleContract    func(childComplexity int) int
		VehicleSaleRecordID    func(childComplexity int) int
		VehicleWidth           func(childComplexity int) int
	}

	MuckTruckSaleOrderMinFields struct {
		BelongingEnterprise    func(childComplexity int) int
		BookDate               func(childComplexity int) int
		BookVehicleNumber      func(childComplexity int) int
		CarriageSealingDevice  func(childComplexity int) int
		Commitment             func(childComplexity int) int
		ContactPhone           func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		CustomerID             func(childComplexity int) int
		CustomerName           func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DeletedBy              func(childComplexity int) int
		ID                     func(childComplexity int) int
		IDCardNum              func(childComplexity int) int
		IDCardPicture          func(childComplexity int) int
		IsCompleted            func(childComplexity int) int
		IsDeleted              func(childComplexity int) int
		IsOtherVehicleModel    func(childComplexity int) int
		MuckTruckSaleOrderID   func(childComplexity int) int
		Notification           func(childComplexity int) int
		Progress               func(childComplexity int) int
		RegistrationTime       func(childComplexity int) int
		TankTruckActualVolume  func(childComplexity int) int
		TankTruckMarkedVolume  func(childComplexity int) int
		TipperHeight           func(childComplexity int) int
		TipperLength           func(childComplexity int) int
		TipperWidth            func(childComplexity int) int
		UShapedCargoBox        func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		VehicleDepositContract func(childComplexity int) int
		VehicleHeight          func(childComplexity int) int
		VehicleLength          func(childComplexity int) int
		VehicleSaleContract    func(childComplexity int) int
		VehicleSaleRecordID    func(childComplexity int) int
		VehicleWidth           func(childComplexity int) int
	}

	MuckTruckSaleOrderMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckSaleOrderStddevFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderStddevPopFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderStddevSampFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderSumFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderVarPopFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderVarSampFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	MuckTruckSaleOrderVarianceFields struct {
		BookVehicleNumber     func(childComplexity int) int
		ID                    func(childComplexity int) int
		Progress              func(childComplexity int) int
		TankTruckActualVolume func(childComplexity int) int
		TankTruckMarkedVolume func(childComplexity int) int
		TipperHeight          func(childComplexity int) int
		TipperLength          func(childComplexity int) int
		TipperWidth           func(childComplexity int) int
		VehicleHeight         func(childComplexity int) int
		VehicleLength         func(childComplexity int) int
		VehicleWidth          func(childComplexity int) int
	}

	Mutation struct {
		DeleteMuckTruckPurchaseIntention            func(childComplexity int, where model.MuckTruckPurchaseIntentionBoolExp) int
		DeleteMuckTruckPurchaseIntentionByPk        func(childComplexity int, id int64) int
		DeleteMuckTruckPurchaseIntentionByUnionPk   func(childComplexity int, muckTruckPurchaseIntentionID string) int
		DeleteMuckTruckSaleOrder                    func(childComplexity int, where model.MuckTruckSaleOrderBoolExp) int
		DeleteMuckTruckSaleOrderByPk                func(childComplexity int, id int64) int
		DeleteMuckTruckSaleOrderByUnionPk           func(childComplexity int, muckTruckSaleOrderID string) int
		DeleteMuckTruckSaleOrderDetail              func(childComplexity int, where model.MuckTruckSaleOrderDetailBoolExp) int
		DeleteMuckTruckSaleOrderDetailByPk          func(childComplexity int, id int64) int
		DeleteMuckTruckSaleOrderDetailByUnionPk     func(childComplexity int, muckTruckSaleOrderDetailID string) int
		DeleteNewMuckTruckInfo                      func(childComplexity int, where model.NewMuckTruckInfoBoolExp) int
		DeleteNewMuckTruckInfoByPk                  func(childComplexity int, id int64) int
		DeleteNewMuckTruckInfoByUnionPk             func(childComplexity int, newMuckTruckInfoID string) int
		DeleteNewMuckTruckPhoto                     func(childComplexity int, where model.NewMuckTruckPhotoBoolExp) int
		DeleteNewMuckTruckPhotoByPk                 func(childComplexity int, id int64) int
		DeleteNewMuckTruckPhotoByUnionPk            func(childComplexity int, newMuckTruckPhotoID string) int
		DeleteNewMuckTruckRecommendCatalog          func(childComplexity int, where model.NewMuckTruckRecommendCatalogBoolExp) int
		DeleteNewMuckTruckRecommendCatalogByPk      func(childComplexity int, id int64) int
		DeleteNewMuckTruckRecommendCatalogByUnionPk func(childComplexity int, newMuckTruckRecommendCatalogID string) int
		DeleteSellerFiling                          func(childComplexity int, where model.SellerFilingBoolExp) int
		DeleteSellerFilingByPk                      func(childComplexity int, id int64) int
		DeleteSellerFilingByUnionPk                 func(childComplexity int, sellerFilingID string) int
		DeleteSellerRatingRecord                    func(childComplexity int, where model.SellerRatingRecordBoolExp) int
		DeleteSellerRatingRecordByPk                func(childComplexity int, id int64) int
		DeleteSellerRatingRecordByUnionPk           func(childComplexity int, sellerRatingRecordID string) int
		DeleteVehicleSaleRecord                     func(childComplexity int, where model.VehicleSaleRecordBoolExp) int
		DeleteVehicleSaleRecordByPk                 func(childComplexity int, id int64) int
		DeleteVehicleSaleRecordByUnionPk            func(childComplexity int, vehicleSaleRecordID string) int
		InsertMuckTruckPurchaseIntention            func(childComplexity int, objects []*model.MuckTruckPurchaseIntentionInsertInput) int
		InsertMuckTruckPurchaseIntentionOne         func(childComplexity int, objects model.MuckTruckPurchaseIntentionInsertInput) int
		InsertMuckTruckSaleOrder                    func(childComplexity int, objects []*model.MuckTruckSaleOrderInsertInput) int
		InsertMuckTruckSaleOrderDetail              func(childComplexity int, objects []*model.MuckTruckSaleOrderDetailInsertInput) int
		InsertMuckTruckSaleOrderDetailOne           func(childComplexity int, objects model.MuckTruckSaleOrderDetailInsertInput) int
		InsertMuckTruckSaleOrderOne                 func(childComplexity int, objects model.MuckTruckSaleOrderInsertInput) int
		InsertNewMuckTruckInfo                      func(childComplexity int, objects []*model.NewMuckTruckInfoInsertInput) int
		InsertNewMuckTruckInfoOne                   func(childComplexity int, objects model.NewMuckTruckInfoInsertInput) int
		InsertNewMuckTruckPhoto                     func(childComplexity int, objects []*model.NewMuckTruckPhotoInsertInput) int
		InsertNewMuckTruckPhotoOne                  func(childComplexity int, objects model.NewMuckTruckPhotoInsertInput) int
		InsertNewMuckTruckRecommendCatalog          func(childComplexity int, objects []*model.NewMuckTruckRecommendCatalogInsertInput) int
		InsertNewMuckTruckRecommendCatalogOne       func(childComplexity int, objects model.NewMuckTruckRecommendCatalogInsertInput) int
		InsertSellerFiling                          func(childComplexity int, objects []*model.SellerFilingInsertInput) int
		InsertSellerFilingOne                       func(childComplexity int, objects model.SellerFilingInsertInput) int
		InsertSellerRatingRecord                    func(childComplexity int, objects []*model.SellerRatingRecordInsertInput) int
		InsertSellerRatingRecordOne                 func(childComplexity int, objects model.SellerRatingRecordInsertInput) int
		InsertVehicleSaleRecord                     func(childComplexity int, objects []*model.VehicleSaleRecordInsertInput) int
		InsertVehicleSaleRecordOne                  func(childComplexity int, objects model.VehicleSaleRecordInsertInput) int
		UpdateMuckTruckPurchaseIntention            func(childComplexity int, inc *model.MuckTruckPurchaseIntentionIncInput, set *model.MuckTruckPurchaseIntentionSetInput, where model.MuckTruckPurchaseIntentionBoolExp) int
		UpdateMuckTruckPurchaseIntentionByPk        func(childComplexity int, inc *model.MuckTruckPurchaseIntentionIncInput, set *model.MuckTruckPurchaseIntentionSetInput, id int64) int
		UpdateMuckTruckPurchaseIntentionByUnionPk   func(childComplexity int, inc *model.MuckTruckPurchaseIntentionIncInput, set *model.MuckTruckPurchaseIntentionSetInput, muckTruckPurchaseIntentionID string) int
		UpdateMuckTruckSaleOrder                    func(childComplexity int, inc *model.MuckTruckSaleOrderIncInput, set *model.MuckTruckSaleOrderSetInput, where model.MuckTruckSaleOrderBoolExp) int
		UpdateMuckTruckSaleOrderByPk                func(childComplexity int, inc *model.MuckTruckSaleOrderIncInput, set *model.MuckTruckSaleOrderSetInput, id int64) int
		UpdateMuckTruckSaleOrderByUnionPk           func(childComplexity int, inc *model.MuckTruckSaleOrderIncInput, set *model.MuckTruckSaleOrderSetInput, muckTruckSaleOrderID string) int
		UpdateMuckTruckSaleOrderDetail              func(childComplexity int, inc *model.MuckTruckSaleOrderDetailIncInput, set *model.MuckTruckSaleOrderDetailSetInput, where model.MuckTruckSaleOrderDetailBoolExp) int
		UpdateMuckTruckSaleOrderDetailByPk          func(childComplexity int, inc *model.MuckTruckSaleOrderDetailIncInput, set *model.MuckTruckSaleOrderDetailSetInput, id int64) int
		UpdateMuckTruckSaleOrderDetailByUnionPk     func(childComplexity int, inc *model.MuckTruckSaleOrderDetailIncInput, set *model.MuckTruckSaleOrderDetailSetInput, muckTruckSaleOrderDetailID string) int
		UpdateNewMuckTruckInfo                      func(childComplexity int, inc *model.NewMuckTruckInfoIncInput, set *model.NewMuckTruckInfoSetInput, where model.NewMuckTruckInfoBoolExp) int
		UpdateNewMuckTruckInfoByPk                  func(childComplexity int, inc *model.NewMuckTruckInfoIncInput, set *model.NewMuckTruckInfoSetInput, id int64) int
		UpdateNewMuckTruckInfoByUnionPk             func(childComplexity int, inc *model.NewMuckTruckInfoIncInput, set *model.NewMuckTruckInfoSetInput, newMuckTruckInfoID string) int
		UpdateNewMuckTruckPhoto                     func(childComplexity int, inc *model.NewMuckTruckPhotoIncInput, set *model.NewMuckTruckPhotoSetInput, where model.NewMuckTruckPhotoBoolExp) int
		UpdateNewMuckTruckPhotoByPk                 func(childComplexity int, inc *model.NewMuckTruckPhotoIncInput, set *model.NewMuckTruckPhotoSetInput, id int64) int
		UpdateNewMuckTruckPhotoByUnionPk            func(childComplexity int, inc *model.NewMuckTruckPhotoIncInput, set *model.NewMuckTruckPhotoSetInput, newMuckTruckPhotoID string) int
		UpdateNewMuckTruckRecommendCatalog          func(childComplexity int, inc *model.NewMuckTruckRecommendCatalogIncInput, set *model.NewMuckTruckRecommendCatalogSetInput, where model.NewMuckTruckRecommendCatalogBoolExp) int
		UpdateNewMuckTruckRecommendCatalogByPk      func(childComplexity int, inc *model.NewMuckTruckRecommendCatalogIncInput, set *model.NewMuckTruckRecommendCatalogSetInput, id int64) int
		UpdateNewMuckTruckRecommendCatalogByUnionPk func(childComplexity int, inc *model.NewMuckTruckRecommendCatalogIncInput, set *model.NewMuckTruckRecommendCatalogSetInput, newMuckTruckRecommendCatalogID string) int
		UpdateSellerFiling                          func(childComplexity int, inc *model.SellerFilingIncInput, set *model.SellerFilingSetInput, where model.SellerFilingBoolExp) int
		UpdateSellerFilingByPk                      func(childComplexity int, inc *model.SellerFilingIncInput, set *model.SellerFilingSetInput, id int64) int
		UpdateSellerFilingByUnionPk                 func(childComplexity int, inc *model.SellerFilingIncInput, set *model.SellerFilingSetInput, sellerFilingID string) int
		UpdateSellerRatingRecord                    func(childComplexity int, inc *model.SellerRatingRecordIncInput, set *model.SellerRatingRecordSetInput, where model.SellerRatingRecordBoolExp) int
		UpdateSellerRatingRecordByPk                func(childComplexity int, inc *model.SellerRatingRecordIncInput, set *model.SellerRatingRecordSetInput, id int64) int
		UpdateSellerRatingRecordByUnionPk           func(childComplexity int, inc *model.SellerRatingRecordIncInput, set *model.SellerRatingRecordSetInput, sellerRatingRecordID string) int
		UpdateVehicleSaleRecord                     func(childComplexity int, inc *model.VehicleSaleRecordIncInput, set *model.VehicleSaleRecordSetInput, where model.VehicleSaleRecordBoolExp) int
		UpdateVehicleSaleRecordByPk                 func(childComplexity int, inc *model.VehicleSaleRecordIncInput, set *model.VehicleSaleRecordSetInput, id int64) int
		UpdateVehicleSaleRecordByUnionPk            func(childComplexity int, inc *model.VehicleSaleRecordIncInput, set *model.VehicleSaleRecordSetInput, vehicleSaleRecordID string) int
	}

	NewMuckTruckInfo struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		EmissionStandard   func(childComplexity int) int
		Height             func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsUShapedCargoBox  func(childComplexity int) int
		Length             func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		NewMuckTruckInfoID func(childComplexity int) int
		RegistrationTime   func(childComplexity int) int
		SealingDevice      func(childComplexity int) int
		TopCoverHeight     func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		Width              func(childComplexity int) int
	}

	NewMuckTruckInfoAggregate struct {
		Aggregate func(childComplexity int) int
	}

	NewMuckTruckInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	NewMuckTruckInfoAvgFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoMaxFields struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		EmissionStandard   func(childComplexity int) int
		Height             func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsUShapedCargoBox  func(childComplexity int) int
		Length             func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		NewMuckTruckInfoID func(childComplexity int) int
		RegistrationTime   func(childComplexity int) int
		SealingDevice      func(childComplexity int) int
		TopCoverHeight     func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		Width              func(childComplexity int) int
	}

	NewMuckTruckInfoMinFields struct {
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		EmissionStandard   func(childComplexity int) int
		Height             func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsUShapedCargoBox  func(childComplexity int) int
		Length             func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		NewMuckTruckInfoID func(childComplexity int) int
		RegistrationTime   func(childComplexity int) int
		SealingDevice      func(childComplexity int) int
		TopCoverHeight     func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		Width              func(childComplexity int) int
	}

	NewMuckTruckInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	NewMuckTruckInfoStddevFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoStddevPopFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoStddevSampFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoSumFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoVarPopFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoVarSampFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckInfoVarianceFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhoto struct {
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		FilePath            func(childComplexity int) int
		ID                  func(childComplexity int) int
		NewMuckTruckPhotoID func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		UploadUser          func(childComplexity int) int
		VehicleID           func(childComplexity int) int
	}

	NewMuckTruckPhotoAggregate struct {
		Aggregate func(childComplexity int) int
	}

	NewMuckTruckPhotoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	NewMuckTruckPhotoAvgFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoMaxFields struct {
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		FilePath            func(childComplexity int) int
		ID                  func(childComplexity int) int
		NewMuckTruckPhotoID func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		UploadUser          func(childComplexity int) int
		VehicleID           func(childComplexity int) int
	}

	NewMuckTruckPhotoMinFields struct {
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		FilePath            func(childComplexity int) int
		ID                  func(childComplexity int) int
		NewMuckTruckPhotoID func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		UploadUser          func(childComplexity int) int
		VehicleID           func(childComplexity int) int
	}

	NewMuckTruckPhotoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	NewMuckTruckPhotoStddevFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoStddevPopFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoStddevSampFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoSumFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoVarPopFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoVarSampFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckPhotoVarianceFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalog struct {
		BrandName                      func(childComplexity int) int
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		ID                             func(childComplexity int) int
		NewMuckTruckRecommendCatalogID func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogAggregate struct {
		Aggregate func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogAvgFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogMaxFields struct {
		BrandName                      func(childComplexity int) int
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		ID                             func(childComplexity int) int
		NewMuckTruckRecommendCatalogID func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogMinFields struct {
		BrandName                      func(childComplexity int) int
		CreatedAt                      func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		DeletedAt                      func(childComplexity int) int
		DeletedBy                      func(childComplexity int) int
		ID                             func(childComplexity int) int
		NewMuckTruckRecommendCatalogID func(childComplexity int) int
		UpdatedAt                      func(childComplexity int) int
		UpdatedBy                      func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogStddevFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogStddevPopFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogStddevSampFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogSumFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogVarPopFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogVarSampFields struct {
		ID func(childComplexity int) int
	}

	NewMuckTruckRecommendCatalogVarianceFields struct {
		ID func(childComplexity int) int
	}

	Query struct {
		MuckTruckPurchaseIntention            func(childComplexity int, distinctOn []model.MuckTruckPurchaseIntentionSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPurchaseIntentionOrderBy, where *model.MuckTruckPurchaseIntentionBoolExp) int
		MuckTruckPurchaseIntentionAggregate   func(childComplexity int, distinctOn []model.MuckTruckPurchaseIntentionSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPurchaseIntentionOrderBy, where *model.MuckTruckPurchaseIntentionBoolExp) int
		MuckTruckPurchaseIntentionByPk        func(childComplexity int, id int64) int
		MuckTruckPurchaseIntentionByUnionPk   func(childComplexity int, muckTruckPurchaseIntentionID string) int
		MuckTruckSaleOrder                    func(childComplexity int, distinctOn []model.MuckTruckSaleOrderSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderOrderBy, where *model.MuckTruckSaleOrderBoolExp) int
		MuckTruckSaleOrderAggregate           func(childComplexity int, distinctOn []model.MuckTruckSaleOrderSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderOrderBy, where *model.MuckTruckSaleOrderBoolExp) int
		MuckTruckSaleOrderByPk                func(childComplexity int, id int64) int
		MuckTruckSaleOrderByUnionPk           func(childComplexity int, muckTruckSaleOrderID string) int
		MuckTruckSaleOrderDetail              func(childComplexity int, distinctOn []model.MuckTruckSaleOrderDetailSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderDetailOrderBy, where *model.MuckTruckSaleOrderDetailBoolExp) int
		MuckTruckSaleOrderDetailAggregate     func(childComplexity int, distinctOn []model.MuckTruckSaleOrderDetailSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderDetailOrderBy, where *model.MuckTruckSaleOrderDetailBoolExp) int
		MuckTruckSaleOrderDetailByPk          func(childComplexity int, id int64) int
		MuckTruckSaleOrderDetailByUnionPk     func(childComplexity int, muckTruckSaleOrderDetailID string) int
		NewMuckTruckInfo                      func(childComplexity int, distinctOn []model.NewMuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckInfoOrderBy, where *model.NewMuckTruckInfoBoolExp) int
		NewMuckTruckInfoAggregate             func(childComplexity int, distinctOn []model.NewMuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckInfoOrderBy, where *model.NewMuckTruckInfoBoolExp) int
		NewMuckTruckInfoByPk                  func(childComplexity int, id int64) int
		NewMuckTruckInfoByUnionPk             func(childComplexity int, newMuckTruckInfoID string) int
		NewMuckTruckPhoto                     func(childComplexity int, distinctOn []model.NewMuckTruckPhotoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckPhotoOrderBy, where *model.NewMuckTruckPhotoBoolExp) int
		NewMuckTruckPhotoAggregate            func(childComplexity int, distinctOn []model.NewMuckTruckPhotoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckPhotoOrderBy, where *model.NewMuckTruckPhotoBoolExp) int
		NewMuckTruckPhotoByPk                 func(childComplexity int, id int64) int
		NewMuckTruckPhotoByUnionPk            func(childComplexity int, newMuckTruckPhotoID string) int
		NewMuckTruckRecommendCatalog          func(childComplexity int, distinctOn []model.NewMuckTruckRecommendCatalogSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckRecommendCatalogOrderBy, where *model.NewMuckTruckRecommendCatalogBoolExp) int
		NewMuckTruckRecommendCatalogAggregate func(childComplexity int, distinctOn []model.NewMuckTruckRecommendCatalogSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckRecommendCatalogOrderBy, where *model.NewMuckTruckRecommendCatalogBoolExp) int
		NewMuckTruckRecommendCatalogByPk      func(childComplexity int, id int64) int
		NewMuckTruckRecommendCatalogByUnionPk func(childComplexity int, newMuckTruckRecommendCatalogID string) int
		SellerFiling                          func(childComplexity int, distinctOn []model.SellerFilingSelectColumn, limit *int, offset *int, orderBy []*model.SellerFilingOrderBy, where *model.SellerFilingBoolExp) int
		SellerFilingAggregate                 func(childComplexity int, distinctOn []model.SellerFilingSelectColumn, limit *int, offset *int, orderBy []*model.SellerFilingOrderBy, where *model.SellerFilingBoolExp) int
		SellerFilingByPk                      func(childComplexity int, id int64) int
		SellerFilingByUnionPk                 func(childComplexity int, sellerFilingID string) int
		SellerRatingRecord                    func(childComplexity int, distinctOn []model.SellerRatingRecordSelectColumn, limit *int, offset *int, orderBy []*model.SellerRatingRecordOrderBy, where *model.SellerRatingRecordBoolExp) int
		SellerRatingRecordAggregate           func(childComplexity int, distinctOn []model.SellerRatingRecordSelectColumn, limit *int, offset *int, orderBy []*model.SellerRatingRecordOrderBy, where *model.SellerRatingRecordBoolExp) int
		SellerRatingRecordByPk                func(childComplexity int, id int64) int
		SellerRatingRecordByUnionPk           func(childComplexity int, sellerRatingRecordID string) int
		VehicleSaleRecord                     func(childComplexity int, distinctOn []model.VehicleSaleRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSaleRecordOrderBy, where *model.VehicleSaleRecordBoolExp) int
		VehicleSaleRecordAggregate            func(childComplexity int, distinctOn []model.VehicleSaleRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSaleRecordOrderBy, where *model.VehicleSaleRecordBoolExp) int
		VehicleSaleRecordByPk                 func(childComplexity int, id int64) int
		VehicleSaleRecordByUnionPk            func(childComplexity int, vehicleSaleRecordID string) int
	}

	SellerFiling struct {
		BusinessLicense                    func(childComplexity int) int
		CatalogID                          func(childComplexity int) int
		Cause                              func(childComplexity int) int
		CreatedAt                          func(childComplexity int) int
		CreatedBy                          func(childComplexity int) int
		DeletedAt                          func(childComplexity int) int
		DeletedBy                          func(childComplexity int) int
		EntrustedAgentIDCard               func(childComplexity int) int
		ID                                 func(childComplexity int) int
		IndustrySelfDisciplineCommitment   func(childComplexity int) int
		IsDeleted                          func(childComplexity int) int
		IsVerify                           func(childComplexity int) int
		LegalRepresentativeIDCard          func(childComplexity int) int
		ManufacturerProductionSalePermit   func(childComplexity int) int
		MinistryProductionSalePermit       func(childComplexity int) int
		OrganizationCode                   func(childComplexity int) int
		OtherMaterial                      func(childComplexity int) int
		PlatformDockingTechnologyAgreement func(childComplexity int) int
		RegistrationTime                   func(childComplexity int) int
		RegistrationUser                   func(childComplexity int) int
		Remarks                            func(childComplexity int) int
		RepairServiceStationAddress        func(childComplexity int) int
		RepairServiceStationMaterial       func(childComplexity int) int
		RepairServiceStationName           func(childComplexity int) int
		Seller                             func(childComplexity int) int
		SellerFilingID                     func(childComplexity int) int
		ServiceStaffID                     func(childComplexity int) int
		ServiceStaffMaterial               func(childComplexity int) int
		ServiceStaffName                   func(childComplexity int) int
		ServiceStaffPhone                  func(childComplexity int) int
		UpdatedAt                          func(childComplexity int) int
		UpdatedBy                          func(childComplexity int) int
	}

	SellerFilingAggregate struct {
		Aggregate func(childComplexity int) int
	}

	SellerFilingAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SellerFilingAvgFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingMaxFields struct {
		BusinessLicense                    func(childComplexity int) int
		CatalogID                          func(childComplexity int) int
		Cause                              func(childComplexity int) int
		CreatedAt                          func(childComplexity int) int
		CreatedBy                          func(childComplexity int) int
		DeletedAt                          func(childComplexity int) int
		DeletedBy                          func(childComplexity int) int
		EntrustedAgentIDCard               func(childComplexity int) int
		ID                                 func(childComplexity int) int
		IndustrySelfDisciplineCommitment   func(childComplexity int) int
		IsDeleted                          func(childComplexity int) int
		IsVerify                           func(childComplexity int) int
		LegalRepresentativeIDCard          func(childComplexity int) int
		ManufacturerProductionSalePermit   func(childComplexity int) int
		MinistryProductionSalePermit       func(childComplexity int) int
		OrganizationCode                   func(childComplexity int) int
		OtherMaterial                      func(childComplexity int) int
		PlatformDockingTechnologyAgreement func(childComplexity int) int
		RegistrationTime                   func(childComplexity int) int
		RegistrationUser                   func(childComplexity int) int
		Remarks                            func(childComplexity int) int
		RepairServiceStationAddress        func(childComplexity int) int
		RepairServiceStationMaterial       func(childComplexity int) int
		RepairServiceStationName           func(childComplexity int) int
		Seller                             func(childComplexity int) int
		SellerFilingID                     func(childComplexity int) int
		ServiceStaffID                     func(childComplexity int) int
		ServiceStaffMaterial               func(childComplexity int) int
		ServiceStaffName                   func(childComplexity int) int
		ServiceStaffPhone                  func(childComplexity int) int
		UpdatedAt                          func(childComplexity int) int
		UpdatedBy                          func(childComplexity int) int
	}

	SellerFilingMinFields struct {
		BusinessLicense                    func(childComplexity int) int
		CatalogID                          func(childComplexity int) int
		Cause                              func(childComplexity int) int
		CreatedAt                          func(childComplexity int) int
		CreatedBy                          func(childComplexity int) int
		DeletedAt                          func(childComplexity int) int
		DeletedBy                          func(childComplexity int) int
		EntrustedAgentIDCard               func(childComplexity int) int
		ID                                 func(childComplexity int) int
		IndustrySelfDisciplineCommitment   func(childComplexity int) int
		IsDeleted                          func(childComplexity int) int
		IsVerify                           func(childComplexity int) int
		LegalRepresentativeIDCard          func(childComplexity int) int
		ManufacturerProductionSalePermit   func(childComplexity int) int
		MinistryProductionSalePermit       func(childComplexity int) int
		OrganizationCode                   func(childComplexity int) int
		OtherMaterial                      func(childComplexity int) int
		PlatformDockingTechnologyAgreement func(childComplexity int) int
		RegistrationTime                   func(childComplexity int) int
		RegistrationUser                   func(childComplexity int) int
		Remarks                            func(childComplexity int) int
		RepairServiceStationAddress        func(childComplexity int) int
		RepairServiceStationMaterial       func(childComplexity int) int
		RepairServiceStationName           func(childComplexity int) int
		Seller                             func(childComplexity int) int
		SellerFilingID                     func(childComplexity int) int
		ServiceStaffID                     func(childComplexity int) int
		ServiceStaffMaterial               func(childComplexity int) int
		ServiceStaffName                   func(childComplexity int) int
		ServiceStaffPhone                  func(childComplexity int) int
		UpdatedAt                          func(childComplexity int) int
		UpdatedBy                          func(childComplexity int) int
	}

	SellerFilingMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SellerFilingStddevFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingStddevPopFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingStddevSampFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingSumFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingVarPopFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingVarSampFields struct {
		ID func(childComplexity int) int
	}

	SellerFilingVarianceFields struct {
		ID func(childComplexity int) int
	}

	SellerRatingRecord struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DemeritObj           func(childComplexity int) int
		DemeritPoints        func(childComplexity int) int
		DemeritReason        func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		OperationTime        func(childComplexity int) int
		Operator             func(childComplexity int) int
		SellerRatingRecordID func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	SellerRatingRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	SellerRatingRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SellerRatingRecordAvgFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordMaxFields struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DemeritObj           func(childComplexity int) int
		DemeritPoints        func(childComplexity int) int
		DemeritReason        func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		OperationTime        func(childComplexity int) int
		Operator             func(childComplexity int) int
		SellerRatingRecordID func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	SellerRatingRecordMinFields struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DemeritObj           func(childComplexity int) int
		DemeritPoints        func(childComplexity int) int
		DemeritReason        func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		OperationTime        func(childComplexity int) int
		Operator             func(childComplexity int) int
		SellerRatingRecordID func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	SellerRatingRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SellerRatingRecordStddevFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordStddevPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordStddevSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordSumFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordVarPopFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordVarSampFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	SellerRatingRecordVarianceFields struct {
		DemeritPoints func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	VehicleSaleRecord struct {
		AxisType            func(childComplexity int) int
		CatalogID           func(childComplexity int) int
		Cause               func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsReview            func(childComplexity int) int
		OtherMaterial       func(childComplexity int) int
		ReferencePrice      func(childComplexity int) int
		RegistrationTime    func(childComplexity int) int
		RegistrationUser    func(childComplexity int) int
		Remarks             func(childComplexity int) int
		Seller              func(childComplexity int) int
		TransportVolume     func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleModel        func(childComplexity int) int
		VehicleParameter    func(childComplexity int) int
		VehiclePicture      func(childComplexity int) int
		VehicleSaleRecordID func(childComplexity int) int
	}

	VehicleSaleRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleSaleRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleSaleRecordAvgFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordMaxFields struct {
		AxisType            func(childComplexity int) int
		CatalogID           func(childComplexity int) int
		Cause               func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsReview            func(childComplexity int) int
		OtherMaterial       func(childComplexity int) int
		ReferencePrice      func(childComplexity int) int
		RegistrationTime    func(childComplexity int) int
		RegistrationUser    func(childComplexity int) int
		Remarks             func(childComplexity int) int
		Seller              func(childComplexity int) int
		TransportVolume     func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleModel        func(childComplexity int) int
		VehicleParameter    func(childComplexity int) int
		VehiclePicture      func(childComplexity int) int
		VehicleSaleRecordID func(childComplexity int) int
	}

	VehicleSaleRecordMinFields struct {
		AxisType            func(childComplexity int) int
		CatalogID           func(childComplexity int) int
		Cause               func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		DeletedBy           func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsDeleted           func(childComplexity int) int
		IsReview            func(childComplexity int) int
		OtherMaterial       func(childComplexity int) int
		ReferencePrice      func(childComplexity int) int
		RegistrationTime    func(childComplexity int) int
		RegistrationUser    func(childComplexity int) int
		Remarks             func(childComplexity int) int
		Seller              func(childComplexity int) int
		TransportVolume     func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
		UpdatedBy           func(childComplexity int) int
		VehicleModel        func(childComplexity int) int
		VehicleParameter    func(childComplexity int) int
		VehiclePicture      func(childComplexity int) int
		VehicleSaleRecordID func(childComplexity int) int
	}

	VehicleSaleRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleSaleRecordStddevFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordStddevPopFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordStddevSampFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordSumFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordVarPopFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordVarSampFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	VehicleSaleRecordVarianceFields struct {
		AxisType func(childComplexity int) int
		ID       func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteMuckTruckPurchaseIntention(ctx context.Context, where model.MuckTruckPurchaseIntentionBoolExp) (*model.MuckTruckPurchaseIntentionMutationResponse, error)
	DeleteMuckTruckPurchaseIntentionByPk(ctx context.Context, id int64) (*model1.MuckTruckPurchaseIntention, error)
	InsertMuckTruckPurchaseIntention(ctx context.Context, objects []*model.MuckTruckPurchaseIntentionInsertInput) (*model.MuckTruckPurchaseIntentionMutationResponse, error)
	InsertMuckTruckPurchaseIntentionOne(ctx context.Context, objects model.MuckTruckPurchaseIntentionInsertInput) (*model1.MuckTruckPurchaseIntention, error)
	UpdateMuckTruckPurchaseIntention(ctx context.Context, inc *model.MuckTruckPurchaseIntentionIncInput, set *model.MuckTruckPurchaseIntentionSetInput, where model.MuckTruckPurchaseIntentionBoolExp) (*model.MuckTruckPurchaseIntentionMutationResponse, error)
	UpdateMuckTruckPurchaseIntentionByPk(ctx context.Context, inc *model.MuckTruckPurchaseIntentionIncInput, set *model.MuckTruckPurchaseIntentionSetInput, id int64) (*model1.MuckTruckPurchaseIntention, error)
	UpdateMuckTruckPurchaseIntentionByUnionPk(ctx context.Context, inc *model.MuckTruckPurchaseIntentionIncInput, set *model.MuckTruckPurchaseIntentionSetInput, muckTruckPurchaseIntentionID string) (*model1.MuckTruckPurchaseIntention, error)
	DeleteMuckTruckPurchaseIntentionByUnionPk(ctx context.Context, muckTruckPurchaseIntentionID string) (*model1.MuckTruckPurchaseIntention, error)
	DeleteMuckTruckSaleOrder(ctx context.Context, where model.MuckTruckSaleOrderBoolExp) (*model.MuckTruckSaleOrderMutationResponse, error)
	DeleteMuckTruckSaleOrderByPk(ctx context.Context, id int64) (*model1.MuckTruckSaleOrder, error)
	InsertMuckTruckSaleOrder(ctx context.Context, objects []*model.MuckTruckSaleOrderInsertInput) (*model.MuckTruckSaleOrderMutationResponse, error)
	InsertMuckTruckSaleOrderOne(ctx context.Context, objects model.MuckTruckSaleOrderInsertInput) (*model1.MuckTruckSaleOrder, error)
	UpdateMuckTruckSaleOrder(ctx context.Context, inc *model.MuckTruckSaleOrderIncInput, set *model.MuckTruckSaleOrderSetInput, where model.MuckTruckSaleOrderBoolExp) (*model.MuckTruckSaleOrderMutationResponse, error)
	UpdateMuckTruckSaleOrderByPk(ctx context.Context, inc *model.MuckTruckSaleOrderIncInput, set *model.MuckTruckSaleOrderSetInput, id int64) (*model1.MuckTruckSaleOrder, error)
	UpdateMuckTruckSaleOrderByUnionPk(ctx context.Context, inc *model.MuckTruckSaleOrderIncInput, set *model.MuckTruckSaleOrderSetInput, muckTruckSaleOrderID string) (*model1.MuckTruckSaleOrder, error)
	DeleteMuckTruckSaleOrderByUnionPk(ctx context.Context, muckTruckSaleOrderID string) (*model1.MuckTruckSaleOrder, error)
	DeleteMuckTruckSaleOrderDetail(ctx context.Context, where model.MuckTruckSaleOrderDetailBoolExp) (*model.MuckTruckSaleOrderDetailMutationResponse, error)
	DeleteMuckTruckSaleOrderDetailByPk(ctx context.Context, id int64) (*model1.MuckTruckSaleOrderDetail, error)
	InsertMuckTruckSaleOrderDetail(ctx context.Context, objects []*model.MuckTruckSaleOrderDetailInsertInput) (*model.MuckTruckSaleOrderDetailMutationResponse, error)
	InsertMuckTruckSaleOrderDetailOne(ctx context.Context, objects model.MuckTruckSaleOrderDetailInsertInput) (*model1.MuckTruckSaleOrderDetail, error)
	UpdateMuckTruckSaleOrderDetail(ctx context.Context, inc *model.MuckTruckSaleOrderDetailIncInput, set *model.MuckTruckSaleOrderDetailSetInput, where model.MuckTruckSaleOrderDetailBoolExp) (*model.MuckTruckSaleOrderDetailMutationResponse, error)
	UpdateMuckTruckSaleOrderDetailByPk(ctx context.Context, inc *model.MuckTruckSaleOrderDetailIncInput, set *model.MuckTruckSaleOrderDetailSetInput, id int64) (*model1.MuckTruckSaleOrderDetail, error)
	UpdateMuckTruckSaleOrderDetailByUnionPk(ctx context.Context, inc *model.MuckTruckSaleOrderDetailIncInput, set *model.MuckTruckSaleOrderDetailSetInput, muckTruckSaleOrderDetailID string) (*model1.MuckTruckSaleOrderDetail, error)
	DeleteMuckTruckSaleOrderDetailByUnionPk(ctx context.Context, muckTruckSaleOrderDetailID string) (*model1.MuckTruckSaleOrderDetail, error)
	DeleteNewMuckTruckInfo(ctx context.Context, where model.NewMuckTruckInfoBoolExp) (*model.NewMuckTruckInfoMutationResponse, error)
	DeleteNewMuckTruckInfoByPk(ctx context.Context, id int64) (*model1.NewMuckTruckInfo, error)
	InsertNewMuckTruckInfo(ctx context.Context, objects []*model.NewMuckTruckInfoInsertInput) (*model.NewMuckTruckInfoMutationResponse, error)
	InsertNewMuckTruckInfoOne(ctx context.Context, objects model.NewMuckTruckInfoInsertInput) (*model1.NewMuckTruckInfo, error)
	UpdateNewMuckTruckInfo(ctx context.Context, inc *model.NewMuckTruckInfoIncInput, set *model.NewMuckTruckInfoSetInput, where model.NewMuckTruckInfoBoolExp) (*model.NewMuckTruckInfoMutationResponse, error)
	UpdateNewMuckTruckInfoByPk(ctx context.Context, inc *model.NewMuckTruckInfoIncInput, set *model.NewMuckTruckInfoSetInput, id int64) (*model1.NewMuckTruckInfo, error)
	UpdateNewMuckTruckInfoByUnionPk(ctx context.Context, inc *model.NewMuckTruckInfoIncInput, set *model.NewMuckTruckInfoSetInput, newMuckTruckInfoID string) (*model1.NewMuckTruckInfo, error)
	DeleteNewMuckTruckInfoByUnionPk(ctx context.Context, newMuckTruckInfoID string) (*model1.NewMuckTruckInfo, error)
	DeleteNewMuckTruckPhoto(ctx context.Context, where model.NewMuckTruckPhotoBoolExp) (*model.NewMuckTruckPhotoMutationResponse, error)
	DeleteNewMuckTruckPhotoByPk(ctx context.Context, id int64) (*model1.NewMuckTruckPhoto, error)
	InsertNewMuckTruckPhoto(ctx context.Context, objects []*model.NewMuckTruckPhotoInsertInput) (*model.NewMuckTruckPhotoMutationResponse, error)
	InsertNewMuckTruckPhotoOne(ctx context.Context, objects model.NewMuckTruckPhotoInsertInput) (*model1.NewMuckTruckPhoto, error)
	UpdateNewMuckTruckPhoto(ctx context.Context, inc *model.NewMuckTruckPhotoIncInput, set *model.NewMuckTruckPhotoSetInput, where model.NewMuckTruckPhotoBoolExp) (*model.NewMuckTruckPhotoMutationResponse, error)
	UpdateNewMuckTruckPhotoByPk(ctx context.Context, inc *model.NewMuckTruckPhotoIncInput, set *model.NewMuckTruckPhotoSetInput, id int64) (*model1.NewMuckTruckPhoto, error)
	UpdateNewMuckTruckPhotoByUnionPk(ctx context.Context, inc *model.NewMuckTruckPhotoIncInput, set *model.NewMuckTruckPhotoSetInput, newMuckTruckPhotoID string) (*model1.NewMuckTruckPhoto, error)
	DeleteNewMuckTruckPhotoByUnionPk(ctx context.Context, newMuckTruckPhotoID string) (*model1.NewMuckTruckPhoto, error)
	DeleteNewMuckTruckRecommendCatalog(ctx context.Context, where model.NewMuckTruckRecommendCatalogBoolExp) (*model.NewMuckTruckRecommendCatalogMutationResponse, error)
	DeleteNewMuckTruckRecommendCatalogByPk(ctx context.Context, id int64) (*model1.NewMuckTruckRecommendCatalog, error)
	InsertNewMuckTruckRecommendCatalog(ctx context.Context, objects []*model.NewMuckTruckRecommendCatalogInsertInput) (*model.NewMuckTruckRecommendCatalogMutationResponse, error)
	InsertNewMuckTruckRecommendCatalogOne(ctx context.Context, objects model.NewMuckTruckRecommendCatalogInsertInput) (*model1.NewMuckTruckRecommendCatalog, error)
	UpdateNewMuckTruckRecommendCatalog(ctx context.Context, inc *model.NewMuckTruckRecommendCatalogIncInput, set *model.NewMuckTruckRecommendCatalogSetInput, where model.NewMuckTruckRecommendCatalogBoolExp) (*model.NewMuckTruckRecommendCatalogMutationResponse, error)
	UpdateNewMuckTruckRecommendCatalogByPk(ctx context.Context, inc *model.NewMuckTruckRecommendCatalogIncInput, set *model.NewMuckTruckRecommendCatalogSetInput, id int64) (*model1.NewMuckTruckRecommendCatalog, error)
	UpdateNewMuckTruckRecommendCatalogByUnionPk(ctx context.Context, inc *model.NewMuckTruckRecommendCatalogIncInput, set *model.NewMuckTruckRecommendCatalogSetInput, newMuckTruckRecommendCatalogID string) (*model1.NewMuckTruckRecommendCatalog, error)
	DeleteNewMuckTruckRecommendCatalogByUnionPk(ctx context.Context, newMuckTruckRecommendCatalogID string) (*model1.NewMuckTruckRecommendCatalog, error)
	DeleteSellerFiling(ctx context.Context, where model.SellerFilingBoolExp) (*model.SellerFilingMutationResponse, error)
	DeleteSellerFilingByPk(ctx context.Context, id int64) (*model1.SellerFiling, error)
	InsertSellerFiling(ctx context.Context, objects []*model.SellerFilingInsertInput) (*model.SellerFilingMutationResponse, error)
	InsertSellerFilingOne(ctx context.Context, objects model.SellerFilingInsertInput) (*model1.SellerFiling, error)
	UpdateSellerFiling(ctx context.Context, inc *model.SellerFilingIncInput, set *model.SellerFilingSetInput, where model.SellerFilingBoolExp) (*model.SellerFilingMutationResponse, error)
	UpdateSellerFilingByPk(ctx context.Context, inc *model.SellerFilingIncInput, set *model.SellerFilingSetInput, id int64) (*model1.SellerFiling, error)
	UpdateSellerFilingByUnionPk(ctx context.Context, inc *model.SellerFilingIncInput, set *model.SellerFilingSetInput, sellerFilingID string) (*model1.SellerFiling, error)
	DeleteSellerFilingByUnionPk(ctx context.Context, sellerFilingID string) (*model1.SellerFiling, error)
	DeleteSellerRatingRecord(ctx context.Context, where model.SellerRatingRecordBoolExp) (*model.SellerRatingRecordMutationResponse, error)
	DeleteSellerRatingRecordByPk(ctx context.Context, id int64) (*model1.SellerRatingRecord, error)
	InsertSellerRatingRecord(ctx context.Context, objects []*model.SellerRatingRecordInsertInput) (*model.SellerRatingRecordMutationResponse, error)
	InsertSellerRatingRecordOne(ctx context.Context, objects model.SellerRatingRecordInsertInput) (*model1.SellerRatingRecord, error)
	UpdateSellerRatingRecord(ctx context.Context, inc *model.SellerRatingRecordIncInput, set *model.SellerRatingRecordSetInput, where model.SellerRatingRecordBoolExp) (*model.SellerRatingRecordMutationResponse, error)
	UpdateSellerRatingRecordByPk(ctx context.Context, inc *model.SellerRatingRecordIncInput, set *model.SellerRatingRecordSetInput, id int64) (*model1.SellerRatingRecord, error)
	UpdateSellerRatingRecordByUnionPk(ctx context.Context, inc *model.SellerRatingRecordIncInput, set *model.SellerRatingRecordSetInput, sellerRatingRecordID string) (*model1.SellerRatingRecord, error)
	DeleteSellerRatingRecordByUnionPk(ctx context.Context, sellerRatingRecordID string) (*model1.SellerRatingRecord, error)
	DeleteVehicleSaleRecord(ctx context.Context, where model.VehicleSaleRecordBoolExp) (*model.VehicleSaleRecordMutationResponse, error)
	DeleteVehicleSaleRecordByPk(ctx context.Context, id int64) (*model1.VehicleSaleRecord, error)
	InsertVehicleSaleRecord(ctx context.Context, objects []*model.VehicleSaleRecordInsertInput) (*model.VehicleSaleRecordMutationResponse, error)
	InsertVehicleSaleRecordOne(ctx context.Context, objects model.VehicleSaleRecordInsertInput) (*model1.VehicleSaleRecord, error)
	UpdateVehicleSaleRecord(ctx context.Context, inc *model.VehicleSaleRecordIncInput, set *model.VehicleSaleRecordSetInput, where model.VehicleSaleRecordBoolExp) (*model.VehicleSaleRecordMutationResponse, error)
	UpdateVehicleSaleRecordByPk(ctx context.Context, inc *model.VehicleSaleRecordIncInput, set *model.VehicleSaleRecordSetInput, id int64) (*model1.VehicleSaleRecord, error)
	UpdateVehicleSaleRecordByUnionPk(ctx context.Context, inc *model.VehicleSaleRecordIncInput, set *model.VehicleSaleRecordSetInput, vehicleSaleRecordID string) (*model1.VehicleSaleRecord, error)
	DeleteVehicleSaleRecordByUnionPk(ctx context.Context, vehicleSaleRecordID string) (*model1.VehicleSaleRecord, error)
}
type QueryResolver interface {
	MuckTruckPurchaseIntention(ctx context.Context, distinctOn []model.MuckTruckPurchaseIntentionSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPurchaseIntentionOrderBy, where *model.MuckTruckPurchaseIntentionBoolExp) ([]*model1.MuckTruckPurchaseIntention, error)
	MuckTruckPurchaseIntentionAggregate(ctx context.Context, distinctOn []model.MuckTruckPurchaseIntentionSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckPurchaseIntentionOrderBy, where *model.MuckTruckPurchaseIntentionBoolExp) (*model.MuckTruckPurchaseIntentionAggregate, error)
	MuckTruckPurchaseIntentionByPk(ctx context.Context, id int64) (*model1.MuckTruckPurchaseIntention, error)
	MuckTruckPurchaseIntentionByUnionPk(ctx context.Context, muckTruckPurchaseIntentionID string) (*model1.MuckTruckPurchaseIntention, error)
	MuckTruckSaleOrder(ctx context.Context, distinctOn []model.MuckTruckSaleOrderSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderOrderBy, where *model.MuckTruckSaleOrderBoolExp) ([]*model1.MuckTruckSaleOrder, error)
	MuckTruckSaleOrderAggregate(ctx context.Context, distinctOn []model.MuckTruckSaleOrderSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderOrderBy, where *model.MuckTruckSaleOrderBoolExp) (*model.MuckTruckSaleOrderAggregate, error)
	MuckTruckSaleOrderByPk(ctx context.Context, id int64) (*model1.MuckTruckSaleOrder, error)
	MuckTruckSaleOrderByUnionPk(ctx context.Context, muckTruckSaleOrderID string) (*model1.MuckTruckSaleOrder, error)
	MuckTruckSaleOrderDetail(ctx context.Context, distinctOn []model.MuckTruckSaleOrderDetailSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderDetailOrderBy, where *model.MuckTruckSaleOrderDetailBoolExp) ([]*model1.MuckTruckSaleOrderDetail, error)
	MuckTruckSaleOrderDetailAggregate(ctx context.Context, distinctOn []model.MuckTruckSaleOrderDetailSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckSaleOrderDetailOrderBy, where *model.MuckTruckSaleOrderDetailBoolExp) (*model.MuckTruckSaleOrderDetailAggregate, error)
	MuckTruckSaleOrderDetailByPk(ctx context.Context, id int64) (*model1.MuckTruckSaleOrderDetail, error)
	MuckTruckSaleOrderDetailByUnionPk(ctx context.Context, muckTruckSaleOrderDetailID string) (*model1.MuckTruckSaleOrderDetail, error)
	NewMuckTruckInfo(ctx context.Context, distinctOn []model.NewMuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckInfoOrderBy, where *model.NewMuckTruckInfoBoolExp) ([]*model1.NewMuckTruckInfo, error)
	NewMuckTruckInfoAggregate(ctx context.Context, distinctOn []model.NewMuckTruckInfoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckInfoOrderBy, where *model.NewMuckTruckInfoBoolExp) (*model.NewMuckTruckInfoAggregate, error)
	NewMuckTruckInfoByPk(ctx context.Context, id int64) (*model1.NewMuckTruckInfo, error)
	NewMuckTruckInfoByUnionPk(ctx context.Context, newMuckTruckInfoID string) (*model1.NewMuckTruckInfo, error)
	NewMuckTruckPhoto(ctx context.Context, distinctOn []model.NewMuckTruckPhotoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckPhotoOrderBy, where *model.NewMuckTruckPhotoBoolExp) ([]*model1.NewMuckTruckPhoto, error)
	NewMuckTruckPhotoAggregate(ctx context.Context, distinctOn []model.NewMuckTruckPhotoSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckPhotoOrderBy, where *model.NewMuckTruckPhotoBoolExp) (*model.NewMuckTruckPhotoAggregate, error)
	NewMuckTruckPhotoByPk(ctx context.Context, id int64) (*model1.NewMuckTruckPhoto, error)
	NewMuckTruckPhotoByUnionPk(ctx context.Context, newMuckTruckPhotoID string) (*model1.NewMuckTruckPhoto, error)
	NewMuckTruckRecommendCatalog(ctx context.Context, distinctOn []model.NewMuckTruckRecommendCatalogSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckRecommendCatalogOrderBy, where *model.NewMuckTruckRecommendCatalogBoolExp) ([]*model1.NewMuckTruckRecommendCatalog, error)
	NewMuckTruckRecommendCatalogAggregate(ctx context.Context, distinctOn []model.NewMuckTruckRecommendCatalogSelectColumn, limit *int, offset *int, orderBy []*model.NewMuckTruckRecommendCatalogOrderBy, where *model.NewMuckTruckRecommendCatalogBoolExp) (*model.NewMuckTruckRecommendCatalogAggregate, error)
	NewMuckTruckRecommendCatalogByPk(ctx context.Context, id int64) (*model1.NewMuckTruckRecommendCatalog, error)
	NewMuckTruckRecommendCatalogByUnionPk(ctx context.Context, newMuckTruckRecommendCatalogID string) (*model1.NewMuckTruckRecommendCatalog, error)
	SellerFiling(ctx context.Context, distinctOn []model.SellerFilingSelectColumn, limit *int, offset *int, orderBy []*model.SellerFilingOrderBy, where *model.SellerFilingBoolExp) ([]*model1.SellerFiling, error)
	SellerFilingAggregate(ctx context.Context, distinctOn []model.SellerFilingSelectColumn, limit *int, offset *int, orderBy []*model.SellerFilingOrderBy, where *model.SellerFilingBoolExp) (*model.SellerFilingAggregate, error)
	SellerFilingByPk(ctx context.Context, id int64) (*model1.SellerFiling, error)
	SellerFilingByUnionPk(ctx context.Context, sellerFilingID string) (*model1.SellerFiling, error)
	SellerRatingRecord(ctx context.Context, distinctOn []model.SellerRatingRecordSelectColumn, limit *int, offset *int, orderBy []*model.SellerRatingRecordOrderBy, where *model.SellerRatingRecordBoolExp) ([]*model1.SellerRatingRecord, error)
	SellerRatingRecordAggregate(ctx context.Context, distinctOn []model.SellerRatingRecordSelectColumn, limit *int, offset *int, orderBy []*model.SellerRatingRecordOrderBy, where *model.SellerRatingRecordBoolExp) (*model.SellerRatingRecordAggregate, error)
	SellerRatingRecordByPk(ctx context.Context, id int64) (*model1.SellerRatingRecord, error)
	SellerRatingRecordByUnionPk(ctx context.Context, sellerRatingRecordID string) (*model1.SellerRatingRecord, error)
	VehicleSaleRecord(ctx context.Context, distinctOn []model.VehicleSaleRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSaleRecordOrderBy, where *model.VehicleSaleRecordBoolExp) ([]*model1.VehicleSaleRecord, error)
	VehicleSaleRecordAggregate(ctx context.Context, distinctOn []model.VehicleSaleRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleSaleRecordOrderBy, where *model.VehicleSaleRecordBoolExp) (*model.VehicleSaleRecordAggregate, error)
	VehicleSaleRecordByPk(ctx context.Context, id int64) (*model1.VehicleSaleRecord, error)
	VehicleSaleRecordByUnionPk(ctx context.Context, vehicleSaleRecordID string) (*model1.VehicleSaleRecord, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "MuckTruckPurchaseIntention.brand_model":
		if e.complexity.MuckTruckPurchaseIntention.BrandModel == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.BrandModel(childComplexity), true

	case "MuckTruckPurchaseIntention.capacigy_application":
		if e.complexity.MuckTruckPurchaseIntention.CapacigyApplication == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.CapacigyApplication(childComplexity), true

	case "MuckTruckPurchaseIntention.city_id":
		if e.complexity.MuckTruckPurchaseIntention.CityID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.CityID(childComplexity), true

	case "MuckTruckPurchaseIntention.code":
		if e.complexity.MuckTruckPurchaseIntention.Code == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.Code(childComplexity), true

	case "MuckTruckPurchaseIntention.created_at":
		if e.complexity.MuckTruckPurchaseIntention.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.CreatedAt(childComplexity), true

	case "MuckTruckPurchaseIntention.created_by":
		if e.complexity.MuckTruckPurchaseIntention.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.CreatedBy(childComplexity), true

	case "MuckTruckPurchaseIntention.customer_name":
		if e.complexity.MuckTruckPurchaseIntention.CustomerName == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.CustomerName(childComplexity), true

	case "MuckTruckPurchaseIntention.customer_phone":
		if e.complexity.MuckTruckPurchaseIntention.CustomerPhone == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.CustomerPhone(childComplexity), true

	case "MuckTruckPurchaseIntention.deleted_at":
		if e.complexity.MuckTruckPurchaseIntention.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.DeletedAt(childComplexity), true

	case "MuckTruckPurchaseIntention.deleted_by":
		if e.complexity.MuckTruckPurchaseIntention.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.DeletedBy(childComplexity), true

	case "MuckTruckPurchaseIntention.district_id":
		if e.complexity.MuckTruckPurchaseIntention.DistrictID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.DistrictID(childComplexity), true

	case "MuckTruckPurchaseIntention.id":
		if e.complexity.MuckTruckPurchaseIntention.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.ID(childComplexity), true

	case "MuckTruckPurchaseIntention.is_deleted":
		if e.complexity.MuckTruckPurchaseIntention.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.IsDeleted(childComplexity), true

	case "MuckTruckPurchaseIntention.muck_truck_purchase_intention_id":
		if e.complexity.MuckTruckPurchaseIntention.MuckTruckPurchaseIntentionID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.MuckTruckPurchaseIntentionID(childComplexity), true

	case "MuckTruckPurchaseIntention.owner_enterprise":
		if e.complexity.MuckTruckPurchaseIntention.OwnerEnterprise == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.OwnerEnterprise(childComplexity), true

	case "MuckTruckPurchaseIntention.province_id":
		if e.complexity.MuckTruckPurchaseIntention.ProvinceID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.ProvinceID(childComplexity), true

	case "MuckTruckPurchaseIntention.registration_time":
		if e.complexity.MuckTruckPurchaseIntention.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.RegistrationTime(childComplexity), true

	case "MuckTruckPurchaseIntention.registration_user":
		if e.complexity.MuckTruckPurchaseIntention.RegistrationUser == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.RegistrationUser(childComplexity), true

	case "MuckTruckPurchaseIntention.remarks":
		if e.complexity.MuckTruckPurchaseIntention.Remarks == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.Remarks(childComplexity), true

	case "MuckTruckPurchaseIntention.review":
		if e.complexity.MuckTruckPurchaseIntention.Review == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.Review(childComplexity), true

	case "MuckTruckPurchaseIntention.supplier":
		if e.complexity.MuckTruckPurchaseIntention.Supplier == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.Supplier(childComplexity), true

	case "MuckTruckPurchaseIntention.updated_at":
		if e.complexity.MuckTruckPurchaseIntention.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.UpdatedAt(childComplexity), true

	case "MuckTruckPurchaseIntention.updated_by":
		if e.complexity.MuckTruckPurchaseIntention.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.UpdatedBy(childComplexity), true

	case "MuckTruckPurchaseIntention.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntention.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntention.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregate.aggregate":
		if e.complexity.MuckTruckPurchaseIntentionAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregate.Aggregate(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.avg":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Avg(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.count":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Count == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Count(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.max":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Max(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.min":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Min(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.stddev":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Stddev(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.stddev_pop":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.StddevPop(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.stddev_samp":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.StddevSamp(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.sum":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Sum(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.var_pop":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.VarPop(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.var_samp":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.VarSamp(childComplexity), true

	case "MuckTruckPurchaseIntentionAggregateFields.variance":
		if e.complexity.MuckTruckPurchaseIntentionAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAggregateFields.Variance(childComplexity), true

	case "MuckTruckPurchaseIntentionAvgFields.id":
		if e.complexity.MuckTruckPurchaseIntentionAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAvgFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionAvgFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionAvgFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionAvgFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.brand_model":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.BrandModel == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.BrandModel(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.capacigy_application":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.CapacigyApplication == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.CapacigyApplication(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.city_id":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.CityID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.CityID(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.code":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.Code == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.Code(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.created_at":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.CreatedAt(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.created_by":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.CreatedBy(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.customer_name":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.CustomerName == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.CustomerName(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.customer_phone":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.CustomerPhone == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.CustomerPhone(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.deleted_at":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.DeletedAt(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.deleted_by":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.DeletedBy(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.district_id":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.DistrictID(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.id":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.is_deleted":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.IsDeleted(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.muck_truck_purchase_intention_id":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.MuckTruckPurchaseIntentionID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.MuckTruckPurchaseIntentionID(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.owner_enterprise":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.OwnerEnterprise == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.OwnerEnterprise(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.province_id":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.ProvinceID(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.registration_time":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.RegistrationTime(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.registration_user":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.RegistrationUser == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.RegistrationUser(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.remarks":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.Remarks == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.Remarks(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.review":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.Review == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.Review(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.supplier":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.Supplier == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.Supplier(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.updated_at":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.UpdatedAt(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.updated_by":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.UpdatedBy(childComplexity), true

	case "MuckTruckPurchaseIntentionMaxFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionMaxFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMaxFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.brand_model":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.BrandModel == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.BrandModel(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.capacigy_application":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.CapacigyApplication == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.CapacigyApplication(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.city_id":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.CityID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.CityID(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.code":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.Code == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.Code(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.created_at":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.CreatedAt(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.created_by":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.CreatedBy(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.customer_name":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.CustomerName == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.CustomerName(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.customer_phone":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.CustomerPhone == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.CustomerPhone(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.deleted_at":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.DeletedAt(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.deleted_by":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.DeletedBy(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.district_id":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.DistrictID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.DistrictID(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.id":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.is_deleted":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.IsDeleted(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.muck_truck_purchase_intention_id":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.MuckTruckPurchaseIntentionID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.MuckTruckPurchaseIntentionID(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.owner_enterprise":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.OwnerEnterprise == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.OwnerEnterprise(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.province_id":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.ProvinceID(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.registration_time":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.RegistrationTime(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.registration_user":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.RegistrationUser == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.RegistrationUser(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.remarks":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.Remarks == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.Remarks(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.review":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.Review == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.Review(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.supplier":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.Supplier == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.Supplier(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.updated_at":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.UpdatedAt(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.updated_by":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.UpdatedBy(childComplexity), true

	case "MuckTruckPurchaseIntentionMinFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionMinFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMinFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionMutationResponse.affected_rows":
		if e.complexity.MuckTruckPurchaseIntentionMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMutationResponse.AffectedRows(childComplexity), true

	case "MuckTruckPurchaseIntentionMutationResponse.returning":
		if e.complexity.MuckTruckPurchaseIntentionMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionMutationResponse.Returning(childComplexity), true

	case "MuckTruckPurchaseIntentionStddevFields.id":
		if e.complexity.MuckTruckPurchaseIntentionStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionStddevFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionStddevFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionStddevFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionStddevFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionStddevPopFields.id":
		if e.complexity.MuckTruckPurchaseIntentionStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionStddevPopFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionStddevPopFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionStddevPopFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionStddevPopFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionStddevSampFields.id":
		if e.complexity.MuckTruckPurchaseIntentionStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionStddevSampFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionStddevSampFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionStddevSampFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionStddevSampFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionSumFields.id":
		if e.complexity.MuckTruckPurchaseIntentionSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionSumFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionSumFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionSumFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionSumFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionVarPopFields.id":
		if e.complexity.MuckTruckPurchaseIntentionVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionVarPopFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionVarPopFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionVarPopFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionVarPopFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionVarSampFields.id":
		if e.complexity.MuckTruckPurchaseIntentionVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionVarSampFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionVarSampFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionVarSampFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionVarSampFields.VehiclePurchase(childComplexity), true

	case "MuckTruckPurchaseIntentionVarianceFields.id":
		if e.complexity.MuckTruckPurchaseIntentionVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionVarianceFields.ID(childComplexity), true

	case "MuckTruckPurchaseIntentionVarianceFields.vehicle_purchase":
		if e.complexity.MuckTruckPurchaseIntentionVarianceFields.VehiclePurchase == nil {
			break
		}

		return e.complexity.MuckTruckPurchaseIntentionVarianceFields.VehiclePurchase(childComplexity), true

	case "MuckTruckSaleOrder.belonging_enterprise":
		if e.complexity.MuckTruckSaleOrder.BelongingEnterprise == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.BelongingEnterprise(childComplexity), true

	case "MuckTruckSaleOrder.book_date":
		if e.complexity.MuckTruckSaleOrder.BookDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.BookDate(childComplexity), true

	case "MuckTruckSaleOrder.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrder.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrder.carriage_sealing_device":
		if e.complexity.MuckTruckSaleOrder.CarriageSealingDevice == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.CarriageSealingDevice(childComplexity), true

	case "MuckTruckSaleOrder.commitment":
		if e.complexity.MuckTruckSaleOrder.Commitment == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.Commitment(childComplexity), true

	case "MuckTruckSaleOrder.contact_phone":
		if e.complexity.MuckTruckSaleOrder.ContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.ContactPhone(childComplexity), true

	case "MuckTruckSaleOrder.created_at":
		if e.complexity.MuckTruckSaleOrder.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.CreatedAt(childComplexity), true

	case "MuckTruckSaleOrder.created_by":
		if e.complexity.MuckTruckSaleOrder.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.CreatedBy(childComplexity), true

	case "MuckTruckSaleOrder.customer_id":
		if e.complexity.MuckTruckSaleOrder.CustomerID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.CustomerID(childComplexity), true

	case "MuckTruckSaleOrder.customer_name":
		if e.complexity.MuckTruckSaleOrder.CustomerName == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.CustomerName(childComplexity), true

	case "MuckTruckSaleOrder.deleted_at":
		if e.complexity.MuckTruckSaleOrder.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.DeletedAt(childComplexity), true

	case "MuckTruckSaleOrder.deleted_by":
		if e.complexity.MuckTruckSaleOrder.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.DeletedBy(childComplexity), true

	case "MuckTruckSaleOrder.id":
		if e.complexity.MuckTruckSaleOrder.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.ID(childComplexity), true

	case "MuckTruckSaleOrder.id_card_num":
		if e.complexity.MuckTruckSaleOrder.IDCardNum == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.IDCardNum(childComplexity), true

	case "MuckTruckSaleOrder.id_card_picture":
		if e.complexity.MuckTruckSaleOrder.IDCardPicture == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.IDCardPicture(childComplexity), true

	case "MuckTruckSaleOrder.is_completed":
		if e.complexity.MuckTruckSaleOrder.IsCompleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.IsCompleted(childComplexity), true

	case "MuckTruckSaleOrder.is_deleted":
		if e.complexity.MuckTruckSaleOrder.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.IsDeleted(childComplexity), true

	case "MuckTruckSaleOrder.is_other_vehicle_model":
		if e.complexity.MuckTruckSaleOrder.IsOtherVehicleModel == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.IsOtherVehicleModel(childComplexity), true

	case "MuckTruckSaleOrder.muck_truck_sale_order_id":
		if e.complexity.MuckTruckSaleOrder.MuckTruckSaleOrderID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.MuckTruckSaleOrderID(childComplexity), true

	case "MuckTruckSaleOrder.notification":
		if e.complexity.MuckTruckSaleOrder.Notification == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.Notification(childComplexity), true

	case "MuckTruckSaleOrder.progress":
		if e.complexity.MuckTruckSaleOrder.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.Progress(childComplexity), true

	case "MuckTruckSaleOrder.registration_time":
		if e.complexity.MuckTruckSaleOrder.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.RegistrationTime(childComplexity), true

	case "MuckTruckSaleOrder.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrder.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrder.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrder.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrder.tipper_height":
		if e.complexity.MuckTruckSaleOrder.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrder.tipper_length":
		if e.complexity.MuckTruckSaleOrder.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.TipperLength(childComplexity), true

	case "MuckTruckSaleOrder.tipper_width":
		if e.complexity.MuckTruckSaleOrder.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrder.u_shaped_cargo_box":
		if e.complexity.MuckTruckSaleOrder.UShapedCargoBox == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.UShapedCargoBox(childComplexity), true

	case "MuckTruckSaleOrder.updated_at":
		if e.complexity.MuckTruckSaleOrder.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.UpdatedAt(childComplexity), true

	case "MuckTruckSaleOrder.updated_by":
		if e.complexity.MuckTruckSaleOrder.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.UpdatedBy(childComplexity), true

	case "MuckTruckSaleOrder.vehicle_deposit_contract":
		if e.complexity.MuckTruckSaleOrder.VehicleDepositContract == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.VehicleDepositContract(childComplexity), true

	case "MuckTruckSaleOrder.vehicle_height":
		if e.complexity.MuckTruckSaleOrder.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrder.vehicle_length":
		if e.complexity.MuckTruckSaleOrder.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrder.vehicle_sale_contract":
		if e.complexity.MuckTruckSaleOrder.VehicleSaleContract == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.VehicleSaleContract(childComplexity), true

	case "MuckTruckSaleOrder.vehicle_sale_record_id":
		if e.complexity.MuckTruckSaleOrder.VehicleSaleRecordID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.VehicleSaleRecordID(childComplexity), true

	case "MuckTruckSaleOrder.vehicle_width":
		if e.complexity.MuckTruckSaleOrder.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrder.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderAggregate.aggregate":
		if e.complexity.MuckTruckSaleOrderAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregate.Aggregate(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.avg":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Avg(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.count":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Count == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Count(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.max":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Max(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.min":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Min(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.stddev":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Stddev(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.stddev_pop":
		if e.complexity.MuckTruckSaleOrderAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.StddevPop(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.stddev_samp":
		if e.complexity.MuckTruckSaleOrderAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.StddevSamp(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.sum":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Sum(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.var_pop":
		if e.complexity.MuckTruckSaleOrderAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.VarPop(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.var_samp":
		if e.complexity.MuckTruckSaleOrderAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.VarSamp(childComplexity), true

	case "MuckTruckSaleOrderAggregateFields.variance":
		if e.complexity.MuckTruckSaleOrderAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAggregateFields.Variance(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderAvgFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.id":
		if e.complexity.MuckTruckSaleOrderAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.ID(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.progress":
		if e.complexity.MuckTruckSaleOrderAvgFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderAvgFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderAvgFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderAvgFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderAvgFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderAvgFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderAvgFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderAvgFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderAvgFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderAvgFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderAvgFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderDetail.arrive_qz_date":
		if e.complexity.MuckTruckSaleOrderDetail.ArriveQzDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.ArriveQzDate(childComplexity), true

	case "MuckTruckSaleOrderDetail.certificate":
		if e.complexity.MuckTruckSaleOrderDetail.Certificate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.Certificate(childComplexity), true

	case "MuckTruckSaleOrderDetail.created_at":
		if e.complexity.MuckTruckSaleOrderDetail.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.CreatedAt(childComplexity), true

	case "MuckTruckSaleOrderDetail.created_by":
		if e.complexity.MuckTruckSaleOrderDetail.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.CreatedBy(childComplexity), true

	case "MuckTruckSaleOrderDetail.deleted_at":
		if e.complexity.MuckTruckSaleOrderDetail.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.DeletedAt(childComplexity), true

	case "MuckTruckSaleOrderDetail.deleted_by":
		if e.complexity.MuckTruckSaleOrderDetail.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.DeletedBy(childComplexity), true

	case "MuckTruckSaleOrderDetail.driver_license_pic":
		if e.complexity.MuckTruckSaleOrderDetail.DriverLicensePic == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.DriverLicensePic(childComplexity), true

	case "MuckTruckSaleOrderDetail.first_registration_date":
		if e.complexity.MuckTruckSaleOrderDetail.FirstRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.FirstRegistrationDate(childComplexity), true

	case "MuckTruckSaleOrderDetail.id":
		if e.complexity.MuckTruckSaleOrderDetail.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.ID(childComplexity), true

	case "MuckTruckSaleOrderDetail.is_deleted":
		if e.complexity.MuckTruckSaleOrderDetail.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.IsDeleted(childComplexity), true

	case "MuckTruckSaleOrderDetail.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetail.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetail.license_plate_number":
		if e.complexity.MuckTruckSaleOrderDetail.LicensePlateNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.LicensePlateNumber(childComplexity), true

	case "MuckTruckSaleOrderDetail.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetail.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetail.muck_truck_sale_order_detail_id":
		if e.complexity.MuckTruckSaleOrderDetail.MuckTruckSaleOrderDetailID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.MuckTruckSaleOrderDetailID(childComplexity), true

	case "MuckTruckSaleOrderDetail.order_id":
		if e.complexity.MuckTruckSaleOrderDetail.OrderID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.OrderID(childComplexity), true

	case "MuckTruckSaleOrderDetail.registration_date":
		if e.complexity.MuckTruckSaleOrderDetail.RegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.RegistrationDate(childComplexity), true

	case "MuckTruckSaleOrderDetail.seller_preview_number":
		if e.complexity.MuckTruckSaleOrderDetail.SellerPreviewNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.SellerPreviewNumber(childComplexity), true

	case "MuckTruckSaleOrderDetail.step":
		if e.complexity.MuckTruckSaleOrderDetail.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.Step(childComplexity), true

	case "MuckTruckSaleOrderDetail.terminal_proof":
		if e.complexity.MuckTruckSaleOrderDetail.TerminalProof == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.TerminalProof(childComplexity), true

	case "MuckTruckSaleOrderDetail.updated_at":
		if e.complexity.MuckTruckSaleOrderDetail.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.UpdatedAt(childComplexity), true

	case "MuckTruckSaleOrderDetail.updated_by":
		if e.complexity.MuckTruckSaleOrderDetail.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.UpdatedBy(childComplexity), true

	case "MuckTruckSaleOrderDetail.vehicle_identification_number":
		if e.complexity.MuckTruckSaleOrderDetail.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.VehicleIdentificationNumber(childComplexity), true

	case "MuckTruckSaleOrderDetail.vehicle_photo":
		if e.complexity.MuckTruckSaleOrderDetail.VehiclePhoto == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetail.VehiclePhoto(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregate.aggregate":
		if e.complexity.MuckTruckSaleOrderDetailAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregate.Aggregate(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.avg":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Avg(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.count":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Count == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Count(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.max":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Max(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.min":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Min(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.stddev":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Stddev(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.stddev_pop":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.StddevPop(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.stddev_samp":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.StddevSamp(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.sum":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Sum(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.var_pop":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.VarPop(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.var_samp":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.VarSamp(childComplexity), true

	case "MuckTruckSaleOrderDetailAggregateFields.variance":
		if e.complexity.MuckTruckSaleOrderDetailAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAggregateFields.Variance(childComplexity), true

	case "MuckTruckSaleOrderDetailAvgFields.id":
		if e.complexity.MuckTruckSaleOrderDetailAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAvgFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailAvgFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailAvgFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAvgFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailAvgFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailAvgFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAvgFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailAvgFields.step":
		if e.complexity.MuckTruckSaleOrderDetailAvgFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailAvgFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.arrive_qz_date":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.ArriveQzDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.ArriveQzDate(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.certificate":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.Certificate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.Certificate(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.created_at":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.CreatedAt(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.created_by":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.CreatedBy(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.deleted_at":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.DeletedAt(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.deleted_by":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.DeletedBy(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.driver_license_pic":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.DriverLicensePic(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.first_registration_date":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.FirstRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.FirstRegistrationDate(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.id":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.is_deleted":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.IsDeleted(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.license_plate_number":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.LicensePlateNumber(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.muck_truck_sale_order_detail_id":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.MuckTruckSaleOrderDetailID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.MuckTruckSaleOrderDetailID(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.order_id":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.OrderID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.OrderID(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.registration_date":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.RegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.RegistrationDate(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.seller_preview_number":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.SellerPreviewNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.SellerPreviewNumber(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.step":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.terminal_proof":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.TerminalProof == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.TerminalProof(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.updated_at":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.UpdatedAt(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.updated_by":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.UpdatedBy(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.vehicle_identification_number":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.VehicleIdentificationNumber(childComplexity), true

	case "MuckTruckSaleOrderDetailMaxFields.vehicle_photo":
		if e.complexity.MuckTruckSaleOrderDetailMaxFields.VehiclePhoto == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMaxFields.VehiclePhoto(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.arrive_qz_date":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.ArriveQzDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.ArriveQzDate(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.certificate":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.Certificate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.Certificate(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.created_at":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.CreatedAt(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.created_by":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.CreatedBy(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.deleted_at":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.DeletedAt(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.deleted_by":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.DeletedBy(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.driver_license_pic":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.DriverLicensePic == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.DriverLicensePic(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.first_registration_date":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.FirstRegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.FirstRegistrationDate(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.id":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.is_deleted":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.IsDeleted(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.license_plate_number":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.LicensePlateNumber(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.muck_truck_sale_order_detail_id":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.MuckTruckSaleOrderDetailID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.MuckTruckSaleOrderDetailID(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.order_id":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.OrderID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.OrderID(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.registration_date":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.RegistrationDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.RegistrationDate(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.seller_preview_number":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.SellerPreviewNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.SellerPreviewNumber(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.step":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.terminal_proof":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.TerminalProof == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.TerminalProof(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.updated_at":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.UpdatedAt(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.updated_by":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.UpdatedBy(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.vehicle_identification_number":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.VehicleIdentificationNumber(childComplexity), true

	case "MuckTruckSaleOrderDetailMinFields.vehicle_photo":
		if e.complexity.MuckTruckSaleOrderDetailMinFields.VehiclePhoto == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMinFields.VehiclePhoto(childComplexity), true

	case "MuckTruckSaleOrderDetailMutationResponse.affected_rows":
		if e.complexity.MuckTruckSaleOrderDetailMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMutationResponse.AffectedRows(childComplexity), true

	case "MuckTruckSaleOrderDetailMutationResponse.returning":
		if e.complexity.MuckTruckSaleOrderDetailMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailMutationResponse.Returning(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevFields.id":
		if e.complexity.MuckTruckSaleOrderDetailStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailStddevFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailStddevFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevFields.step":
		if e.complexity.MuckTruckSaleOrderDetailStddevFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevPopFields.id":
		if e.complexity.MuckTruckSaleOrderDetailStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevPopFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevPopFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailStddevPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevPopFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevPopFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailStddevPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevPopFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevPopFields.step":
		if e.complexity.MuckTruckSaleOrderDetailStddevPopFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevPopFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevSampFields.id":
		if e.complexity.MuckTruckSaleOrderDetailStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevSampFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevSampFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailStddevSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevSampFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevSampFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailStddevSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevSampFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailStddevSampFields.step":
		if e.complexity.MuckTruckSaleOrderDetailStddevSampFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailStddevSampFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailSumFields.id":
		if e.complexity.MuckTruckSaleOrderDetailSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailSumFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailSumFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailSumFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailSumFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailSumFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailSumFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailSumFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailSumFields.step":
		if e.complexity.MuckTruckSaleOrderDetailSumFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailSumFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailVarPopFields.id":
		if e.complexity.MuckTruckSaleOrderDetailVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarPopFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailVarPopFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailVarPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarPopFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailVarPopFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailVarPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarPopFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailVarPopFields.step":
		if e.complexity.MuckTruckSaleOrderDetailVarPopFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarPopFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailVarSampFields.id":
		if e.complexity.MuckTruckSaleOrderDetailVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarSampFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailVarSampFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailVarSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarSampFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailVarSampFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailVarSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarSampFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailVarSampFields.step":
		if e.complexity.MuckTruckSaleOrderDetailVarSampFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarSampFields.Step(childComplexity), true

	case "MuckTruckSaleOrderDetailVarianceFields.id":
		if e.complexity.MuckTruckSaleOrderDetailVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarianceFields.ID(childComplexity), true

	case "MuckTruckSaleOrderDetailVarianceFields.license_plate_color":
		if e.complexity.MuckTruckSaleOrderDetailVarianceFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarianceFields.LicensePlateColor(childComplexity), true

	case "MuckTruckSaleOrderDetailVarianceFields.license_plate_type":
		if e.complexity.MuckTruckSaleOrderDetailVarianceFields.LicensePlateType == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarianceFields.LicensePlateType(childComplexity), true

	case "MuckTruckSaleOrderDetailVarianceFields.step":
		if e.complexity.MuckTruckSaleOrderDetailVarianceFields.Step == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderDetailVarianceFields.Step(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.belonging_enterprise":
		if e.complexity.MuckTruckSaleOrderMaxFields.BelongingEnterprise == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.BelongingEnterprise(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.book_date":
		if e.complexity.MuckTruckSaleOrderMaxFields.BookDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.BookDate(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderMaxFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.carriage_sealing_device":
		if e.complexity.MuckTruckSaleOrderMaxFields.CarriageSealingDevice == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.CarriageSealingDevice(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.commitment":
		if e.complexity.MuckTruckSaleOrderMaxFields.Commitment == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.Commitment(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.contact_phone":
		if e.complexity.MuckTruckSaleOrderMaxFields.ContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.ContactPhone(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.created_at":
		if e.complexity.MuckTruckSaleOrderMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.CreatedAt(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.created_by":
		if e.complexity.MuckTruckSaleOrderMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.CreatedBy(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.customer_id":
		if e.complexity.MuckTruckSaleOrderMaxFields.CustomerID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.CustomerID(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.customer_name":
		if e.complexity.MuckTruckSaleOrderMaxFields.CustomerName == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.CustomerName(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.deleted_at":
		if e.complexity.MuckTruckSaleOrderMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.DeletedAt(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.deleted_by":
		if e.complexity.MuckTruckSaleOrderMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.DeletedBy(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.id":
		if e.complexity.MuckTruckSaleOrderMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.ID(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.id_card_num":
		if e.complexity.MuckTruckSaleOrderMaxFields.IDCardNum == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.IDCardNum(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.id_card_picture":
		if e.complexity.MuckTruckSaleOrderMaxFields.IDCardPicture == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.IDCardPicture(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.is_completed":
		if e.complexity.MuckTruckSaleOrderMaxFields.IsCompleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.IsCompleted(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.is_deleted":
		if e.complexity.MuckTruckSaleOrderMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.IsDeleted(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.is_other_vehicle_model":
		if e.complexity.MuckTruckSaleOrderMaxFields.IsOtherVehicleModel == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.IsOtherVehicleModel(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.muck_truck_sale_order_id":
		if e.complexity.MuckTruckSaleOrderMaxFields.MuckTruckSaleOrderID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.MuckTruckSaleOrderID(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.notification":
		if e.complexity.MuckTruckSaleOrderMaxFields.Notification == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.Notification(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.progress":
		if e.complexity.MuckTruckSaleOrderMaxFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.registration_time":
		if e.complexity.MuckTruckSaleOrderMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.RegistrationTime(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderMaxFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderMaxFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderMaxFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderMaxFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderMaxFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.u_shaped_cargo_box":
		if e.complexity.MuckTruckSaleOrderMaxFields.UShapedCargoBox == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.UShapedCargoBox(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.updated_at":
		if e.complexity.MuckTruckSaleOrderMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.UpdatedAt(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.updated_by":
		if e.complexity.MuckTruckSaleOrderMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.UpdatedBy(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.vehicle_deposit_contract":
		if e.complexity.MuckTruckSaleOrderMaxFields.VehicleDepositContract == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.VehicleDepositContract(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderMaxFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderMaxFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.vehicle_sale_contract":
		if e.complexity.MuckTruckSaleOrderMaxFields.VehicleSaleContract == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.VehicleSaleContract(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.vehicle_sale_record_id":
		if e.complexity.MuckTruckSaleOrderMaxFields.VehicleSaleRecordID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.VehicleSaleRecordID(childComplexity), true

	case "MuckTruckSaleOrderMaxFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderMaxFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMaxFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderMinFields.belonging_enterprise":
		if e.complexity.MuckTruckSaleOrderMinFields.BelongingEnterprise == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.BelongingEnterprise(childComplexity), true

	case "MuckTruckSaleOrderMinFields.book_date":
		if e.complexity.MuckTruckSaleOrderMinFields.BookDate == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.BookDate(childComplexity), true

	case "MuckTruckSaleOrderMinFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderMinFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderMinFields.carriage_sealing_device":
		if e.complexity.MuckTruckSaleOrderMinFields.CarriageSealingDevice == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.CarriageSealingDevice(childComplexity), true

	case "MuckTruckSaleOrderMinFields.commitment":
		if e.complexity.MuckTruckSaleOrderMinFields.Commitment == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.Commitment(childComplexity), true

	case "MuckTruckSaleOrderMinFields.contact_phone":
		if e.complexity.MuckTruckSaleOrderMinFields.ContactPhone == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.ContactPhone(childComplexity), true

	case "MuckTruckSaleOrderMinFields.created_at":
		if e.complexity.MuckTruckSaleOrderMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.CreatedAt(childComplexity), true

	case "MuckTruckSaleOrderMinFields.created_by":
		if e.complexity.MuckTruckSaleOrderMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.CreatedBy(childComplexity), true

	case "MuckTruckSaleOrderMinFields.customer_id":
		if e.complexity.MuckTruckSaleOrderMinFields.CustomerID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.CustomerID(childComplexity), true

	case "MuckTruckSaleOrderMinFields.customer_name":
		if e.complexity.MuckTruckSaleOrderMinFields.CustomerName == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.CustomerName(childComplexity), true

	case "MuckTruckSaleOrderMinFields.deleted_at":
		if e.complexity.MuckTruckSaleOrderMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.DeletedAt(childComplexity), true

	case "MuckTruckSaleOrderMinFields.deleted_by":
		if e.complexity.MuckTruckSaleOrderMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.DeletedBy(childComplexity), true

	case "MuckTruckSaleOrderMinFields.id":
		if e.complexity.MuckTruckSaleOrderMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.ID(childComplexity), true

	case "MuckTruckSaleOrderMinFields.id_card_num":
		if e.complexity.MuckTruckSaleOrderMinFields.IDCardNum == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.IDCardNum(childComplexity), true

	case "MuckTruckSaleOrderMinFields.id_card_picture":
		if e.complexity.MuckTruckSaleOrderMinFields.IDCardPicture == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.IDCardPicture(childComplexity), true

	case "MuckTruckSaleOrderMinFields.is_completed":
		if e.complexity.MuckTruckSaleOrderMinFields.IsCompleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.IsCompleted(childComplexity), true

	case "MuckTruckSaleOrderMinFields.is_deleted":
		if e.complexity.MuckTruckSaleOrderMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.IsDeleted(childComplexity), true

	case "MuckTruckSaleOrderMinFields.is_other_vehicle_model":
		if e.complexity.MuckTruckSaleOrderMinFields.IsOtherVehicleModel == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.IsOtherVehicleModel(childComplexity), true

	case "MuckTruckSaleOrderMinFields.muck_truck_sale_order_id":
		if e.complexity.MuckTruckSaleOrderMinFields.MuckTruckSaleOrderID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.MuckTruckSaleOrderID(childComplexity), true

	case "MuckTruckSaleOrderMinFields.notification":
		if e.complexity.MuckTruckSaleOrderMinFields.Notification == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.Notification(childComplexity), true

	case "MuckTruckSaleOrderMinFields.progress":
		if e.complexity.MuckTruckSaleOrderMinFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderMinFields.registration_time":
		if e.complexity.MuckTruckSaleOrderMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.RegistrationTime(childComplexity), true

	case "MuckTruckSaleOrderMinFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderMinFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderMinFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderMinFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderMinFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderMinFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderMinFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderMinFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderMinFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderMinFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderMinFields.u_shaped_cargo_box":
		if e.complexity.MuckTruckSaleOrderMinFields.UShapedCargoBox == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.UShapedCargoBox(childComplexity), true

	case "MuckTruckSaleOrderMinFields.updated_at":
		if e.complexity.MuckTruckSaleOrderMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.UpdatedAt(childComplexity), true

	case "MuckTruckSaleOrderMinFields.updated_by":
		if e.complexity.MuckTruckSaleOrderMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.UpdatedBy(childComplexity), true

	case "MuckTruckSaleOrderMinFields.vehicle_deposit_contract":
		if e.complexity.MuckTruckSaleOrderMinFields.VehicleDepositContract == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.VehicleDepositContract(childComplexity), true

	case "MuckTruckSaleOrderMinFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderMinFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderMinFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderMinFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderMinFields.vehicle_sale_contract":
		if e.complexity.MuckTruckSaleOrderMinFields.VehicleSaleContract == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.VehicleSaleContract(childComplexity), true

	case "MuckTruckSaleOrderMinFields.vehicle_sale_record_id":
		if e.complexity.MuckTruckSaleOrderMinFields.VehicleSaleRecordID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.VehicleSaleRecordID(childComplexity), true

	case "MuckTruckSaleOrderMinFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderMinFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMinFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderMutationResponse.affected_rows":
		if e.complexity.MuckTruckSaleOrderMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMutationResponse.AffectedRows(childComplexity), true

	case "MuckTruckSaleOrderMutationResponse.returning":
		if e.complexity.MuckTruckSaleOrderMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderMutationResponse.Returning(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderStddevFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.id":
		if e.complexity.MuckTruckSaleOrderStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.ID(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.progress":
		if e.complexity.MuckTruckSaleOrderStddevFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderStddevFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderStddevFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderStddevFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderStddevFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderStddevFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderStddevFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderStddevFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderStddevFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderStddevFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.id":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.ID(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.progress":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderStddevPopFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderStddevPopFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevPopFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.id":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.ID(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.progress":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderStddevSampFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderStddevSampFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderStddevSampFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderSumFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderSumFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderSumFields.id":
		if e.complexity.MuckTruckSaleOrderSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.ID(childComplexity), true

	case "MuckTruckSaleOrderSumFields.progress":
		if e.complexity.MuckTruckSaleOrderSumFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderSumFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderSumFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderSumFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderSumFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderSumFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderSumFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderSumFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderSumFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderSumFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderSumFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderSumFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderSumFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderSumFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderSumFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderSumFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderSumFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderSumFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderVarPopFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.id":
		if e.complexity.MuckTruckSaleOrderVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.ID(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.progress":
		if e.complexity.MuckTruckSaleOrderVarPopFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderVarPopFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderVarPopFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderVarPopFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderVarPopFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderVarPopFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderVarPopFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderVarPopFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderVarPopFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderVarPopFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarPopFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderVarSampFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.id":
		if e.complexity.MuckTruckSaleOrderVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.ID(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.progress":
		if e.complexity.MuckTruckSaleOrderVarSampFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderVarSampFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderVarSampFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderVarSampFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderVarSampFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderVarSampFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderVarSampFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderVarSampFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderVarSampFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderVarSampFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarSampFields.VehicleWidth(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.book_vehicle_number":
		if e.complexity.MuckTruckSaleOrderVarianceFields.BookVehicleNumber == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.BookVehicleNumber(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.id":
		if e.complexity.MuckTruckSaleOrderVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.ID(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.progress":
		if e.complexity.MuckTruckSaleOrderVarianceFields.Progress == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.Progress(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.tank_truck_actual_volume":
		if e.complexity.MuckTruckSaleOrderVarianceFields.TankTruckActualVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.TankTruckActualVolume(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.tank_truck_marked_volume":
		if e.complexity.MuckTruckSaleOrderVarianceFields.TankTruckMarkedVolume == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.TankTruckMarkedVolume(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.tipper_height":
		if e.complexity.MuckTruckSaleOrderVarianceFields.TipperHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.TipperHeight(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.tipper_length":
		if e.complexity.MuckTruckSaleOrderVarianceFields.TipperLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.TipperLength(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.tipper_width":
		if e.complexity.MuckTruckSaleOrderVarianceFields.TipperWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.TipperWidth(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.vehicle_height":
		if e.complexity.MuckTruckSaleOrderVarianceFields.VehicleHeight == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.VehicleHeight(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.vehicle_length":
		if e.complexity.MuckTruckSaleOrderVarianceFields.VehicleLength == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.VehicleLength(childComplexity), true

	case "MuckTruckSaleOrderVarianceFields.vehicle_width":
		if e.complexity.MuckTruckSaleOrderVarianceFields.VehicleWidth == nil {
			break
		}

		return e.complexity.MuckTruckSaleOrderVarianceFields.VehicleWidth(childComplexity), true

	case "Mutation.delete_muck_truck_purchase_intention":
		if e.complexity.Mutation.DeleteMuckTruckPurchaseIntention == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_purchase_intention_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckPurchaseIntention(childComplexity, args["where"].(model.MuckTruckPurchaseIntentionBoolExp)), true

	case "Mutation.delete_muck_truck_purchase_intention_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckPurchaseIntentionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_purchase_intention_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckPurchaseIntentionByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_purchase_intention_by_union_pk":
		if e.complexity.Mutation.DeleteMuckTruckPurchaseIntentionByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_purchase_intention_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckPurchaseIntentionByUnionPk(childComplexity, args["muck_truck_purchase_intention_id"].(string)), true

	case "Mutation.delete_muck_truck_sale_order":
		if e.complexity.Mutation.DeleteMuckTruckSaleOrder == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_sale_order_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckSaleOrder(childComplexity, args["where"].(model.MuckTruckSaleOrderBoolExp)), true

	case "Mutation.delete_muck_truck_sale_order_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckSaleOrderByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_sale_order_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckSaleOrderByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_sale_order_by_union_pk":
		if e.complexity.Mutation.DeleteMuckTruckSaleOrderByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_sale_order_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckSaleOrderByUnionPk(childComplexity, args["muck_truck_sale_order_id"].(string)), true

	case "Mutation.delete_muck_truck_sale_order_detail":
		if e.complexity.Mutation.DeleteMuckTruckSaleOrderDetail == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_sale_order_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckSaleOrderDetail(childComplexity, args["where"].(model.MuckTruckSaleOrderDetailBoolExp)), true

	case "Mutation.delete_muck_truck_sale_order_detail_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckSaleOrderDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_sale_order_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckSaleOrderDetailByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_sale_order_detail_by_union_pk":
		if e.complexity.Mutation.DeleteMuckTruckSaleOrderDetailByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_sale_order_detail_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckSaleOrderDetailByUnionPk(childComplexity, args["muck_truck_sale_order_detail_id"].(string)), true

	case "Mutation.delete_new_muck_truck_info":
		if e.complexity.Mutation.DeleteNewMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckInfo(childComplexity, args["where"].(model.NewMuckTruckInfoBoolExp)), true

	case "Mutation.delete_new_muck_truck_info_by_pk":
		if e.complexity.Mutation.DeleteNewMuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckInfoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_new_muck_truck_info_by_union_pk":
		if e.complexity.Mutation.DeleteNewMuckTruckInfoByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_info_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckInfoByUnionPk(childComplexity, args["new_muck_truck_info_id"].(string)), true

	case "Mutation.delete_new_muck_truck_photo":
		if e.complexity.Mutation.DeleteNewMuckTruckPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckPhoto(childComplexity, args["where"].(model.NewMuckTruckPhotoBoolExp)), true

	case "Mutation.delete_new_muck_truck_photo_by_pk":
		if e.complexity.Mutation.DeleteNewMuckTruckPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckPhotoByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_new_muck_truck_photo_by_union_pk":
		if e.complexity.Mutation.DeleteNewMuckTruckPhotoByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_photo_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckPhotoByUnionPk(childComplexity, args["new_muck_truck_photo_id"].(string)), true

	case "Mutation.delete_new_muck_truck_recommend_catalog":
		if e.complexity.Mutation.DeleteNewMuckTruckRecommendCatalog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_recommend_catalog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckRecommendCatalog(childComplexity, args["where"].(model.NewMuckTruckRecommendCatalogBoolExp)), true

	case "Mutation.delete_new_muck_truck_recommend_catalog_by_pk":
		if e.complexity.Mutation.DeleteNewMuckTruckRecommendCatalogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_recommend_catalog_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckRecommendCatalogByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_new_muck_truck_recommend_catalog_by_union_pk":
		if e.complexity.Mutation.DeleteNewMuckTruckRecommendCatalogByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_new_muck_truck_recommend_catalog_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNewMuckTruckRecommendCatalogByUnionPk(childComplexity, args["new_muck_truck_recommend_catalog_id"].(string)), true

	case "Mutation.delete_seller_filing":
		if e.complexity.Mutation.DeleteSellerFiling == nil {
			break
		}

		args, err := ec.field_Mutation_delete_seller_filing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSellerFiling(childComplexity, args["where"].(model.SellerFilingBoolExp)), true

	case "Mutation.delete_seller_filing_by_pk":
		if e.complexity.Mutation.DeleteSellerFilingByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_seller_filing_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSellerFilingByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_seller_filing_by_union_pk":
		if e.complexity.Mutation.DeleteSellerFilingByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_seller_filing_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSellerFilingByUnionPk(childComplexity, args["seller_filing_id"].(string)), true

	case "Mutation.delete_seller_rating_record":
		if e.complexity.Mutation.DeleteSellerRatingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_seller_rating_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSellerRatingRecord(childComplexity, args["where"].(model.SellerRatingRecordBoolExp)), true

	case "Mutation.delete_seller_rating_record_by_pk":
		if e.complexity.Mutation.DeleteSellerRatingRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_seller_rating_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSellerRatingRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_seller_rating_record_by_union_pk":
		if e.complexity.Mutation.DeleteSellerRatingRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_seller_rating_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSellerRatingRecordByUnionPk(childComplexity, args["seller_rating_record_id"].(string)), true

	case "Mutation.delete_vehicle_sale_record":
		if e.complexity.Mutation.DeleteVehicleSaleRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_sale_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleSaleRecord(childComplexity, args["where"].(model.VehicleSaleRecordBoolExp)), true

	case "Mutation.delete_vehicle_sale_record_by_pk":
		if e.complexity.Mutation.DeleteVehicleSaleRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_sale_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleSaleRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_sale_record_by_union_pk":
		if e.complexity.Mutation.DeleteVehicleSaleRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_sale_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleSaleRecordByUnionPk(childComplexity, args["vehicle_sale_record_id"].(string)), true

	case "Mutation.insert_muck_truck_purchase_intention":
		if e.complexity.Mutation.InsertMuckTruckPurchaseIntention == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_purchase_intention_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckPurchaseIntention(childComplexity, args["objects"].([]*model.MuckTruckPurchaseIntentionInsertInput)), true

	case "Mutation.insert_muck_truck_purchase_intention_one":
		if e.complexity.Mutation.InsertMuckTruckPurchaseIntentionOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_purchase_intention_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckPurchaseIntentionOne(childComplexity, args["objects"].(model.MuckTruckPurchaseIntentionInsertInput)), true

	case "Mutation.insert_muck_truck_sale_order":
		if e.complexity.Mutation.InsertMuckTruckSaleOrder == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_sale_order_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckSaleOrder(childComplexity, args["objects"].([]*model.MuckTruckSaleOrderInsertInput)), true

	case "Mutation.insert_muck_truck_sale_order_detail":
		if e.complexity.Mutation.InsertMuckTruckSaleOrderDetail == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_sale_order_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckSaleOrderDetail(childComplexity, args["objects"].([]*model.MuckTruckSaleOrderDetailInsertInput)), true

	case "Mutation.insert_muck_truck_sale_order_detail_one":
		if e.complexity.Mutation.InsertMuckTruckSaleOrderDetailOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_sale_order_detail_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckSaleOrderDetailOne(childComplexity, args["objects"].(model.MuckTruckSaleOrderDetailInsertInput)), true

	case "Mutation.insert_muck_truck_sale_order_one":
		if e.complexity.Mutation.InsertMuckTruckSaleOrderOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_sale_order_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckSaleOrderOne(childComplexity, args["objects"].(model.MuckTruckSaleOrderInsertInput)), true

	case "Mutation.insert_new_muck_truck_info":
		if e.complexity.Mutation.InsertNewMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_new_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertNewMuckTruckInfo(childComplexity, args["objects"].([]*model.NewMuckTruckInfoInsertInput)), true

	case "Mutation.insert_new_muck_truck_info_one":
		if e.complexity.Mutation.InsertNewMuckTruckInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_new_muck_truck_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertNewMuckTruckInfoOne(childComplexity, args["objects"].(model.NewMuckTruckInfoInsertInput)), true

	case "Mutation.insert_new_muck_truck_photo":
		if e.complexity.Mutation.InsertNewMuckTruckPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_insert_new_muck_truck_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertNewMuckTruckPhoto(childComplexity, args["objects"].([]*model.NewMuckTruckPhotoInsertInput)), true

	case "Mutation.insert_new_muck_truck_photo_one":
		if e.complexity.Mutation.InsertNewMuckTruckPhotoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_new_muck_truck_photo_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertNewMuckTruckPhotoOne(childComplexity, args["objects"].(model.NewMuckTruckPhotoInsertInput)), true

	case "Mutation.insert_new_muck_truck_recommend_catalog":
		if e.complexity.Mutation.InsertNewMuckTruckRecommendCatalog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_new_muck_truck_recommend_catalog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertNewMuckTruckRecommendCatalog(childComplexity, args["objects"].([]*model.NewMuckTruckRecommendCatalogInsertInput)), true

	case "Mutation.insert_new_muck_truck_recommend_catalog_one":
		if e.complexity.Mutation.InsertNewMuckTruckRecommendCatalogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_new_muck_truck_recommend_catalog_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertNewMuckTruckRecommendCatalogOne(childComplexity, args["objects"].(model.NewMuckTruckRecommendCatalogInsertInput)), true

	case "Mutation.insert_seller_filing":
		if e.complexity.Mutation.InsertSellerFiling == nil {
			break
		}

		args, err := ec.field_Mutation_insert_seller_filing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSellerFiling(childComplexity, args["objects"].([]*model.SellerFilingInsertInput)), true

	case "Mutation.insert_seller_filing_one":
		if e.complexity.Mutation.InsertSellerFilingOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_seller_filing_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSellerFilingOne(childComplexity, args["objects"].(model.SellerFilingInsertInput)), true

	case "Mutation.insert_seller_rating_record":
		if e.complexity.Mutation.InsertSellerRatingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_seller_rating_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSellerRatingRecord(childComplexity, args["objects"].([]*model.SellerRatingRecordInsertInput)), true

	case "Mutation.insert_seller_rating_record_one":
		if e.complexity.Mutation.InsertSellerRatingRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_seller_rating_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSellerRatingRecordOne(childComplexity, args["objects"].(model.SellerRatingRecordInsertInput)), true

	case "Mutation.insert_vehicle_sale_record":
		if e.complexity.Mutation.InsertVehicleSaleRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_sale_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleSaleRecord(childComplexity, args["objects"].([]*model.VehicleSaleRecordInsertInput)), true

	case "Mutation.insert_vehicle_sale_record_one":
		if e.complexity.Mutation.InsertVehicleSaleRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_sale_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleSaleRecordOne(childComplexity, args["objects"].(model.VehicleSaleRecordInsertInput)), true

	case "Mutation.update_muck_truck_purchase_intention":
		if e.complexity.Mutation.UpdateMuckTruckPurchaseIntention == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_purchase_intention_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckPurchaseIntention(childComplexity, args["_inc"].(*model.MuckTruckPurchaseIntentionIncInput), args["_set"].(*model.MuckTruckPurchaseIntentionSetInput), args["where"].(model.MuckTruckPurchaseIntentionBoolExp)), true

	case "Mutation.update_muck_truck_purchase_intention_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckPurchaseIntentionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_purchase_intention_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckPurchaseIntentionByPk(childComplexity, args["_inc"].(*model.MuckTruckPurchaseIntentionIncInput), args["_set"].(*model.MuckTruckPurchaseIntentionSetInput), args["id"].(int64)), true

	case "Mutation.update_muck_truck_purchase_intention_by_union_pk":
		if e.complexity.Mutation.UpdateMuckTruckPurchaseIntentionByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_purchase_intention_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckPurchaseIntentionByUnionPk(childComplexity, args["_inc"].(*model.MuckTruckPurchaseIntentionIncInput), args["_set"].(*model.MuckTruckPurchaseIntentionSetInput), args["muck_truck_purchase_intention_id"].(string)), true

	case "Mutation.update_muck_truck_sale_order":
		if e.complexity.Mutation.UpdateMuckTruckSaleOrder == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_sale_order_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckSaleOrder(childComplexity, args["_inc"].(*model.MuckTruckSaleOrderIncInput), args["_set"].(*model.MuckTruckSaleOrderSetInput), args["where"].(model.MuckTruckSaleOrderBoolExp)), true

	case "Mutation.update_muck_truck_sale_order_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckSaleOrderByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_sale_order_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckSaleOrderByPk(childComplexity, args["_inc"].(*model.MuckTruckSaleOrderIncInput), args["_set"].(*model.MuckTruckSaleOrderSetInput), args["id"].(int64)), true

	case "Mutation.update_muck_truck_sale_order_by_union_pk":
		if e.complexity.Mutation.UpdateMuckTruckSaleOrderByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_sale_order_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckSaleOrderByUnionPk(childComplexity, args["_inc"].(*model.MuckTruckSaleOrderIncInput), args["_set"].(*model.MuckTruckSaleOrderSetInput), args["muck_truck_sale_order_id"].(string)), true

	case "Mutation.update_muck_truck_sale_order_detail":
		if e.complexity.Mutation.UpdateMuckTruckSaleOrderDetail == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_sale_order_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckSaleOrderDetail(childComplexity, args["_inc"].(*model.MuckTruckSaleOrderDetailIncInput), args["_set"].(*model.MuckTruckSaleOrderDetailSetInput), args["where"].(model.MuckTruckSaleOrderDetailBoolExp)), true

	case "Mutation.update_muck_truck_sale_order_detail_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckSaleOrderDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_sale_order_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckSaleOrderDetailByPk(childComplexity, args["_inc"].(*model.MuckTruckSaleOrderDetailIncInput), args["_set"].(*model.MuckTruckSaleOrderDetailSetInput), args["id"].(int64)), true

	case "Mutation.update_muck_truck_sale_order_detail_by_union_pk":
		if e.complexity.Mutation.UpdateMuckTruckSaleOrderDetailByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_sale_order_detail_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckSaleOrderDetailByUnionPk(childComplexity, args["_inc"].(*model.MuckTruckSaleOrderDetailIncInput), args["_set"].(*model.MuckTruckSaleOrderDetailSetInput), args["muck_truck_sale_order_detail_id"].(string)), true

	case "Mutation.update_new_muck_truck_info":
		if e.complexity.Mutation.UpdateNewMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckInfo(childComplexity, args["_inc"].(*model.NewMuckTruckInfoIncInput), args["_set"].(*model.NewMuckTruckInfoSetInput), args["where"].(model.NewMuckTruckInfoBoolExp)), true

	case "Mutation.update_new_muck_truck_info_by_pk":
		if e.complexity.Mutation.UpdateNewMuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckInfoByPk(childComplexity, args["_inc"].(*model.NewMuckTruckInfoIncInput), args["_set"].(*model.NewMuckTruckInfoSetInput), args["id"].(int64)), true

	case "Mutation.update_new_muck_truck_info_by_union_pk":
		if e.complexity.Mutation.UpdateNewMuckTruckInfoByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_info_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckInfoByUnionPk(childComplexity, args["_inc"].(*model.NewMuckTruckInfoIncInput), args["_set"].(*model.NewMuckTruckInfoSetInput), args["new_muck_truck_info_id"].(string)), true

	case "Mutation.update_new_muck_truck_photo":
		if e.complexity.Mutation.UpdateNewMuckTruckPhoto == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckPhoto(childComplexity, args["_inc"].(*model.NewMuckTruckPhotoIncInput), args["_set"].(*model.NewMuckTruckPhotoSetInput), args["where"].(model.NewMuckTruckPhotoBoolExp)), true

	case "Mutation.update_new_muck_truck_photo_by_pk":
		if e.complexity.Mutation.UpdateNewMuckTruckPhotoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckPhotoByPk(childComplexity, args["_inc"].(*model.NewMuckTruckPhotoIncInput), args["_set"].(*model.NewMuckTruckPhotoSetInput), args["id"].(int64)), true

	case "Mutation.update_new_muck_truck_photo_by_union_pk":
		if e.complexity.Mutation.UpdateNewMuckTruckPhotoByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_photo_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckPhotoByUnionPk(childComplexity, args["_inc"].(*model.NewMuckTruckPhotoIncInput), args["_set"].(*model.NewMuckTruckPhotoSetInput), args["new_muck_truck_photo_id"].(string)), true

	case "Mutation.update_new_muck_truck_recommend_catalog":
		if e.complexity.Mutation.UpdateNewMuckTruckRecommendCatalog == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_recommend_catalog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckRecommendCatalog(childComplexity, args["_inc"].(*model.NewMuckTruckRecommendCatalogIncInput), args["_set"].(*model.NewMuckTruckRecommendCatalogSetInput), args["where"].(model.NewMuckTruckRecommendCatalogBoolExp)), true

	case "Mutation.update_new_muck_truck_recommend_catalog_by_pk":
		if e.complexity.Mutation.UpdateNewMuckTruckRecommendCatalogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_recommend_catalog_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckRecommendCatalogByPk(childComplexity, args["_inc"].(*model.NewMuckTruckRecommendCatalogIncInput), args["_set"].(*model.NewMuckTruckRecommendCatalogSetInput), args["id"].(int64)), true

	case "Mutation.update_new_muck_truck_recommend_catalog_by_union_pk":
		if e.complexity.Mutation.UpdateNewMuckTruckRecommendCatalogByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_new_muck_truck_recommend_catalog_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNewMuckTruckRecommendCatalogByUnionPk(childComplexity, args["_inc"].(*model.NewMuckTruckRecommendCatalogIncInput), args["_set"].(*model.NewMuckTruckRecommendCatalogSetInput), args["new_muck_truck_recommend_catalog_id"].(string)), true

	case "Mutation.update_seller_filing":
		if e.complexity.Mutation.UpdateSellerFiling == nil {
			break
		}

		args, err := ec.field_Mutation_update_seller_filing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSellerFiling(childComplexity, args["_inc"].(*model.SellerFilingIncInput), args["_set"].(*model.SellerFilingSetInput), args["where"].(model.SellerFilingBoolExp)), true

	case "Mutation.update_seller_filing_by_pk":
		if e.complexity.Mutation.UpdateSellerFilingByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_seller_filing_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSellerFilingByPk(childComplexity, args["_inc"].(*model.SellerFilingIncInput), args["_set"].(*model.SellerFilingSetInput), args["id"].(int64)), true

	case "Mutation.update_seller_filing_by_union_pk":
		if e.complexity.Mutation.UpdateSellerFilingByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_seller_filing_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSellerFilingByUnionPk(childComplexity, args["_inc"].(*model.SellerFilingIncInput), args["_set"].(*model.SellerFilingSetInput), args["seller_filing_id"].(string)), true

	case "Mutation.update_seller_rating_record":
		if e.complexity.Mutation.UpdateSellerRatingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_seller_rating_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSellerRatingRecord(childComplexity, args["_inc"].(*model.SellerRatingRecordIncInput), args["_set"].(*model.SellerRatingRecordSetInput), args["where"].(model.SellerRatingRecordBoolExp)), true

	case "Mutation.update_seller_rating_record_by_pk":
		if e.complexity.Mutation.UpdateSellerRatingRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_seller_rating_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSellerRatingRecordByPk(childComplexity, args["_inc"].(*model.SellerRatingRecordIncInput), args["_set"].(*model.SellerRatingRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_seller_rating_record_by_union_pk":
		if e.complexity.Mutation.UpdateSellerRatingRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_seller_rating_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSellerRatingRecordByUnionPk(childComplexity, args["_inc"].(*model.SellerRatingRecordIncInput), args["_set"].(*model.SellerRatingRecordSetInput), args["seller_rating_record_id"].(string)), true

	case "Mutation.update_vehicle_sale_record":
		if e.complexity.Mutation.UpdateVehicleSaleRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_sale_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleSaleRecord(childComplexity, args["_inc"].(*model.VehicleSaleRecordIncInput), args["_set"].(*model.VehicleSaleRecordSetInput), args["where"].(model.VehicleSaleRecordBoolExp)), true

	case "Mutation.update_vehicle_sale_record_by_pk":
		if e.complexity.Mutation.UpdateVehicleSaleRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_sale_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleSaleRecordByPk(childComplexity, args["_inc"].(*model.VehicleSaleRecordIncInput), args["_set"].(*model.VehicleSaleRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_sale_record_by_union_pk":
		if e.complexity.Mutation.UpdateVehicleSaleRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_sale_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleSaleRecordByUnionPk(childComplexity, args["_inc"].(*model.VehicleSaleRecordIncInput), args["_set"].(*model.VehicleSaleRecordSetInput), args["vehicle_sale_record_id"].(string)), true

	case "NewMuckTruckInfo.created_at":
		if e.complexity.NewMuckTruckInfo.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.CreatedAt(childComplexity), true

	case "NewMuckTruckInfo.created_by":
		if e.complexity.NewMuckTruckInfo.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.CreatedBy(childComplexity), true

	case "NewMuckTruckInfo.deleted_at":
		if e.complexity.NewMuckTruckInfo.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.DeletedAt(childComplexity), true

	case "NewMuckTruckInfo.deleted_by":
		if e.complexity.NewMuckTruckInfo.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.DeletedBy(childComplexity), true

	case "NewMuckTruckInfo.emission_standard":
		if e.complexity.NewMuckTruckInfo.EmissionStandard == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.EmissionStandard(childComplexity), true

	case "NewMuckTruckInfo.height":
		if e.complexity.NewMuckTruckInfo.Height == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.Height(childComplexity), true

	case "NewMuckTruckInfo.id":
		if e.complexity.NewMuckTruckInfo.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.ID(childComplexity), true

	case "NewMuckTruckInfo.is_u_shaped_cargo_box":
		if e.complexity.NewMuckTruckInfo.IsUShapedCargoBox == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.IsUShapedCargoBox(childComplexity), true

	case "NewMuckTruckInfo.length":
		if e.complexity.NewMuckTruckInfo.Length == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.Length(childComplexity), true

	case "NewMuckTruckInfo.license_plate_number":
		if e.complexity.NewMuckTruckInfo.LicensePlateNumber == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.LicensePlateNumber(childComplexity), true

	case "NewMuckTruckInfo.new_muck_truck_info_id":
		if e.complexity.NewMuckTruckInfo.NewMuckTruckInfoID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.NewMuckTruckInfoID(childComplexity), true

	case "NewMuckTruckInfo.registration_time":
		if e.complexity.NewMuckTruckInfo.RegistrationTime == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.RegistrationTime(childComplexity), true

	case "NewMuckTruckInfo.sealing_device":
		if e.complexity.NewMuckTruckInfo.SealingDevice == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.SealingDevice(childComplexity), true

	case "NewMuckTruckInfo.top_cover_height":
		if e.complexity.NewMuckTruckInfo.TopCoverHeight == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.TopCoverHeight(childComplexity), true

	case "NewMuckTruckInfo.updated_at":
		if e.complexity.NewMuckTruckInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.UpdatedAt(childComplexity), true

	case "NewMuckTruckInfo.updated_by":
		if e.complexity.NewMuckTruckInfo.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.UpdatedBy(childComplexity), true

	case "NewMuckTruckInfo.vehicle_id":
		if e.complexity.NewMuckTruckInfo.VehicleID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.VehicleID(childComplexity), true

	case "NewMuckTruckInfo.width":
		if e.complexity.NewMuckTruckInfo.Width == nil {
			break
		}

		return e.complexity.NewMuckTruckInfo.Width(childComplexity), true

	case "NewMuckTruckInfoAggregate.aggregate":
		if e.complexity.NewMuckTruckInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregate.Aggregate(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.avg":
		if e.complexity.NewMuckTruckInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Avg(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.count":
		if e.complexity.NewMuckTruckInfoAggregateFields.Count == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Count(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.max":
		if e.complexity.NewMuckTruckInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Max(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.min":
		if e.complexity.NewMuckTruckInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Min(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.stddev":
		if e.complexity.NewMuckTruckInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Stddev(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.stddev_pop":
		if e.complexity.NewMuckTruckInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.StddevPop(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.stddev_samp":
		if e.complexity.NewMuckTruckInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.StddevSamp(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.sum":
		if e.complexity.NewMuckTruckInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Sum(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.var_pop":
		if e.complexity.NewMuckTruckInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.VarPop(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.var_samp":
		if e.complexity.NewMuckTruckInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.VarSamp(childComplexity), true

	case "NewMuckTruckInfoAggregateFields.variance":
		if e.complexity.NewMuckTruckInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAggregateFields.Variance(childComplexity), true

	case "NewMuckTruckInfoAvgFields.id":
		if e.complexity.NewMuckTruckInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoAvgFields.ID(childComplexity), true

	case "NewMuckTruckInfoMaxFields.created_at":
		if e.complexity.NewMuckTruckInfoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.CreatedAt(childComplexity), true

	case "NewMuckTruckInfoMaxFields.created_by":
		if e.complexity.NewMuckTruckInfoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.CreatedBy(childComplexity), true

	case "NewMuckTruckInfoMaxFields.deleted_at":
		if e.complexity.NewMuckTruckInfoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.DeletedAt(childComplexity), true

	case "NewMuckTruckInfoMaxFields.deleted_by":
		if e.complexity.NewMuckTruckInfoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.DeletedBy(childComplexity), true

	case "NewMuckTruckInfoMaxFields.emission_standard":
		if e.complexity.NewMuckTruckInfoMaxFields.EmissionStandard == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.EmissionStandard(childComplexity), true

	case "NewMuckTruckInfoMaxFields.height":
		if e.complexity.NewMuckTruckInfoMaxFields.Height == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.Height(childComplexity), true

	case "NewMuckTruckInfoMaxFields.id":
		if e.complexity.NewMuckTruckInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.ID(childComplexity), true

	case "NewMuckTruckInfoMaxFields.is_u_shaped_cargo_box":
		if e.complexity.NewMuckTruckInfoMaxFields.IsUShapedCargoBox == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.IsUShapedCargoBox(childComplexity), true

	case "NewMuckTruckInfoMaxFields.length":
		if e.complexity.NewMuckTruckInfoMaxFields.Length == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.Length(childComplexity), true

	case "NewMuckTruckInfoMaxFields.license_plate_number":
		if e.complexity.NewMuckTruckInfoMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.LicensePlateNumber(childComplexity), true

	case "NewMuckTruckInfoMaxFields.new_muck_truck_info_id":
		if e.complexity.NewMuckTruckInfoMaxFields.NewMuckTruckInfoID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.NewMuckTruckInfoID(childComplexity), true

	case "NewMuckTruckInfoMaxFields.registration_time":
		if e.complexity.NewMuckTruckInfoMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.RegistrationTime(childComplexity), true

	case "NewMuckTruckInfoMaxFields.sealing_device":
		if e.complexity.NewMuckTruckInfoMaxFields.SealingDevice == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.SealingDevice(childComplexity), true

	case "NewMuckTruckInfoMaxFields.top_cover_height":
		if e.complexity.NewMuckTruckInfoMaxFields.TopCoverHeight == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.TopCoverHeight(childComplexity), true

	case "NewMuckTruckInfoMaxFields.updated_at":
		if e.complexity.NewMuckTruckInfoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.UpdatedAt(childComplexity), true

	case "NewMuckTruckInfoMaxFields.updated_by":
		if e.complexity.NewMuckTruckInfoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.UpdatedBy(childComplexity), true

	case "NewMuckTruckInfoMaxFields.vehicle_id":
		if e.complexity.NewMuckTruckInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.VehicleID(childComplexity), true

	case "NewMuckTruckInfoMaxFields.width":
		if e.complexity.NewMuckTruckInfoMaxFields.Width == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMaxFields.Width(childComplexity), true

	case "NewMuckTruckInfoMinFields.created_at":
		if e.complexity.NewMuckTruckInfoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.CreatedAt(childComplexity), true

	case "NewMuckTruckInfoMinFields.created_by":
		if e.complexity.NewMuckTruckInfoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.CreatedBy(childComplexity), true

	case "NewMuckTruckInfoMinFields.deleted_at":
		if e.complexity.NewMuckTruckInfoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.DeletedAt(childComplexity), true

	case "NewMuckTruckInfoMinFields.deleted_by":
		if e.complexity.NewMuckTruckInfoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.DeletedBy(childComplexity), true

	case "NewMuckTruckInfoMinFields.emission_standard":
		if e.complexity.NewMuckTruckInfoMinFields.EmissionStandard == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.EmissionStandard(childComplexity), true

	case "NewMuckTruckInfoMinFields.height":
		if e.complexity.NewMuckTruckInfoMinFields.Height == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.Height(childComplexity), true

	case "NewMuckTruckInfoMinFields.id":
		if e.complexity.NewMuckTruckInfoMinFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.ID(childComplexity), true

	case "NewMuckTruckInfoMinFields.is_u_shaped_cargo_box":
		if e.complexity.NewMuckTruckInfoMinFields.IsUShapedCargoBox == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.IsUShapedCargoBox(childComplexity), true

	case "NewMuckTruckInfoMinFields.length":
		if e.complexity.NewMuckTruckInfoMinFields.Length == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.Length(childComplexity), true

	case "NewMuckTruckInfoMinFields.license_plate_number":
		if e.complexity.NewMuckTruckInfoMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.LicensePlateNumber(childComplexity), true

	case "NewMuckTruckInfoMinFields.new_muck_truck_info_id":
		if e.complexity.NewMuckTruckInfoMinFields.NewMuckTruckInfoID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.NewMuckTruckInfoID(childComplexity), true

	case "NewMuckTruckInfoMinFields.registration_time":
		if e.complexity.NewMuckTruckInfoMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.RegistrationTime(childComplexity), true

	case "NewMuckTruckInfoMinFields.sealing_device":
		if e.complexity.NewMuckTruckInfoMinFields.SealingDevice == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.SealingDevice(childComplexity), true

	case "NewMuckTruckInfoMinFields.top_cover_height":
		if e.complexity.NewMuckTruckInfoMinFields.TopCoverHeight == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.TopCoverHeight(childComplexity), true

	case "NewMuckTruckInfoMinFields.updated_at":
		if e.complexity.NewMuckTruckInfoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.UpdatedAt(childComplexity), true

	case "NewMuckTruckInfoMinFields.updated_by":
		if e.complexity.NewMuckTruckInfoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.UpdatedBy(childComplexity), true

	case "NewMuckTruckInfoMinFields.vehicle_id":
		if e.complexity.NewMuckTruckInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.VehicleID(childComplexity), true

	case "NewMuckTruckInfoMinFields.width":
		if e.complexity.NewMuckTruckInfoMinFields.Width == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMinFields.Width(childComplexity), true

	case "NewMuckTruckInfoMutationResponse.affected_rows":
		if e.complexity.NewMuckTruckInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMutationResponse.AffectedRows(childComplexity), true

	case "NewMuckTruckInfoMutationResponse.returning":
		if e.complexity.NewMuckTruckInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoMutationResponse.Returning(childComplexity), true

	case "NewMuckTruckInfoStddevFields.id":
		if e.complexity.NewMuckTruckInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoStddevFields.ID(childComplexity), true

	case "NewMuckTruckInfoStddevPopFields.id":
		if e.complexity.NewMuckTruckInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoStddevPopFields.ID(childComplexity), true

	case "NewMuckTruckInfoStddevSampFields.id":
		if e.complexity.NewMuckTruckInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoStddevSampFields.ID(childComplexity), true

	case "NewMuckTruckInfoSumFields.id":
		if e.complexity.NewMuckTruckInfoSumFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoSumFields.ID(childComplexity), true

	case "NewMuckTruckInfoVarPopFields.id":
		if e.complexity.NewMuckTruckInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoVarPopFields.ID(childComplexity), true

	case "NewMuckTruckInfoVarSampFields.id":
		if e.complexity.NewMuckTruckInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoVarSampFields.ID(childComplexity), true

	case "NewMuckTruckInfoVarianceFields.id":
		if e.complexity.NewMuckTruckInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckInfoVarianceFields.ID(childComplexity), true

	case "NewMuckTruckPhoto.created_at":
		if e.complexity.NewMuckTruckPhoto.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.CreatedAt(childComplexity), true

	case "NewMuckTruckPhoto.created_by":
		if e.complexity.NewMuckTruckPhoto.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.CreatedBy(childComplexity), true

	case "NewMuckTruckPhoto.deleted_at":
		if e.complexity.NewMuckTruckPhoto.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.DeletedAt(childComplexity), true

	case "NewMuckTruckPhoto.deleted_by":
		if e.complexity.NewMuckTruckPhoto.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.DeletedBy(childComplexity), true

	case "NewMuckTruckPhoto.file_path":
		if e.complexity.NewMuckTruckPhoto.FilePath == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.FilePath(childComplexity), true

	case "NewMuckTruckPhoto.id":
		if e.complexity.NewMuckTruckPhoto.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.ID(childComplexity), true

	case "NewMuckTruckPhoto.new_muck_truck_photo_id":
		if e.complexity.NewMuckTruckPhoto.NewMuckTruckPhotoID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.NewMuckTruckPhotoID(childComplexity), true

	case "NewMuckTruckPhoto.updated_at":
		if e.complexity.NewMuckTruckPhoto.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.UpdatedAt(childComplexity), true

	case "NewMuckTruckPhoto.updated_by":
		if e.complexity.NewMuckTruckPhoto.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.UpdatedBy(childComplexity), true

	case "NewMuckTruckPhoto.upload_user":
		if e.complexity.NewMuckTruckPhoto.UploadUser == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.UploadUser(childComplexity), true

	case "NewMuckTruckPhoto.vehicle_id":
		if e.complexity.NewMuckTruckPhoto.VehicleID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhoto.VehicleID(childComplexity), true

	case "NewMuckTruckPhotoAggregate.aggregate":
		if e.complexity.NewMuckTruckPhotoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregate.Aggregate(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.avg":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Avg(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.count":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Count == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Count(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.max":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Max == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Max(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.min":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Min == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Min(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.stddev":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Stddev(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.stddev_pop":
		if e.complexity.NewMuckTruckPhotoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.StddevPop(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.stddev_samp":
		if e.complexity.NewMuckTruckPhotoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.StddevSamp(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.sum":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Sum(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.var_pop":
		if e.complexity.NewMuckTruckPhotoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.VarPop(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.var_samp":
		if e.complexity.NewMuckTruckPhotoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.VarSamp(childComplexity), true

	case "NewMuckTruckPhotoAggregateFields.variance":
		if e.complexity.NewMuckTruckPhotoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAggregateFields.Variance(childComplexity), true

	case "NewMuckTruckPhotoAvgFields.id":
		if e.complexity.NewMuckTruckPhotoAvgFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoAvgFields.ID(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.created_at":
		if e.complexity.NewMuckTruckPhotoMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.CreatedAt(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.created_by":
		if e.complexity.NewMuckTruckPhotoMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.CreatedBy(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.deleted_at":
		if e.complexity.NewMuckTruckPhotoMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.DeletedAt(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.deleted_by":
		if e.complexity.NewMuckTruckPhotoMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.DeletedBy(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.file_path":
		if e.complexity.NewMuckTruckPhotoMaxFields.FilePath == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.FilePath(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.id":
		if e.complexity.NewMuckTruckPhotoMaxFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.ID(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.new_muck_truck_photo_id":
		if e.complexity.NewMuckTruckPhotoMaxFields.NewMuckTruckPhotoID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.NewMuckTruckPhotoID(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.updated_at":
		if e.complexity.NewMuckTruckPhotoMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.UpdatedAt(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.updated_by":
		if e.complexity.NewMuckTruckPhotoMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.UpdatedBy(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.upload_user":
		if e.complexity.NewMuckTruckPhotoMaxFields.UploadUser == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.UploadUser(childComplexity), true

	case "NewMuckTruckPhotoMaxFields.vehicle_id":
		if e.complexity.NewMuckTruckPhotoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMaxFields.VehicleID(childComplexity), true

	case "NewMuckTruckPhotoMinFields.created_at":
		if e.complexity.NewMuckTruckPhotoMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.CreatedAt(childComplexity), true

	case "NewMuckTruckPhotoMinFields.created_by":
		if e.complexity.NewMuckTruckPhotoMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.CreatedBy(childComplexity), true

	case "NewMuckTruckPhotoMinFields.deleted_at":
		if e.complexity.NewMuckTruckPhotoMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.DeletedAt(childComplexity), true

	case "NewMuckTruckPhotoMinFields.deleted_by":
		if e.complexity.NewMuckTruckPhotoMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.DeletedBy(childComplexity), true

	case "NewMuckTruckPhotoMinFields.file_path":
		if e.complexity.NewMuckTruckPhotoMinFields.FilePath == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.FilePath(childComplexity), true

	case "NewMuckTruckPhotoMinFields.id":
		if e.complexity.NewMuckTruckPhotoMinFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.ID(childComplexity), true

	case "NewMuckTruckPhotoMinFields.new_muck_truck_photo_id":
		if e.complexity.NewMuckTruckPhotoMinFields.NewMuckTruckPhotoID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.NewMuckTruckPhotoID(childComplexity), true

	case "NewMuckTruckPhotoMinFields.updated_at":
		if e.complexity.NewMuckTruckPhotoMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.UpdatedAt(childComplexity), true

	case "NewMuckTruckPhotoMinFields.updated_by":
		if e.complexity.NewMuckTruckPhotoMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.UpdatedBy(childComplexity), true

	case "NewMuckTruckPhotoMinFields.upload_user":
		if e.complexity.NewMuckTruckPhotoMinFields.UploadUser == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.UploadUser(childComplexity), true

	case "NewMuckTruckPhotoMinFields.vehicle_id":
		if e.complexity.NewMuckTruckPhotoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMinFields.VehicleID(childComplexity), true

	case "NewMuckTruckPhotoMutationResponse.affected_rows":
		if e.complexity.NewMuckTruckPhotoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMutationResponse.AffectedRows(childComplexity), true

	case "NewMuckTruckPhotoMutationResponse.returning":
		if e.complexity.NewMuckTruckPhotoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoMutationResponse.Returning(childComplexity), true

	case "NewMuckTruckPhotoStddevFields.id":
		if e.complexity.NewMuckTruckPhotoStddevFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoStddevFields.ID(childComplexity), true

	case "NewMuckTruckPhotoStddevPopFields.id":
		if e.complexity.NewMuckTruckPhotoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoStddevPopFields.ID(childComplexity), true

	case "NewMuckTruckPhotoStddevSampFields.id":
		if e.complexity.NewMuckTruckPhotoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoStddevSampFields.ID(childComplexity), true

	case "NewMuckTruckPhotoSumFields.id":
		if e.complexity.NewMuckTruckPhotoSumFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoSumFields.ID(childComplexity), true

	case "NewMuckTruckPhotoVarPopFields.id":
		if e.complexity.NewMuckTruckPhotoVarPopFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoVarPopFields.ID(childComplexity), true

	case "NewMuckTruckPhotoVarSampFields.id":
		if e.complexity.NewMuckTruckPhotoVarSampFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoVarSampFields.ID(childComplexity), true

	case "NewMuckTruckPhotoVarianceFields.id":
		if e.complexity.NewMuckTruckPhotoVarianceFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckPhotoVarianceFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalog.brand_name":
		if e.complexity.NewMuckTruckRecommendCatalog.BrandName == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.BrandName(childComplexity), true

	case "NewMuckTruckRecommendCatalog.created_at":
		if e.complexity.NewMuckTruckRecommendCatalog.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.CreatedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalog.created_by":
		if e.complexity.NewMuckTruckRecommendCatalog.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.CreatedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalog.deleted_at":
		if e.complexity.NewMuckTruckRecommendCatalog.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.DeletedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalog.deleted_by":
		if e.complexity.NewMuckTruckRecommendCatalog.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.DeletedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalog.id":
		if e.complexity.NewMuckTruckRecommendCatalog.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalog.new_muck_truck_recommend_catalog_id":
		if e.complexity.NewMuckTruckRecommendCatalog.NewMuckTruckRecommendCatalogID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.NewMuckTruckRecommendCatalogID(childComplexity), true

	case "NewMuckTruckRecommendCatalog.updated_at":
		if e.complexity.NewMuckTruckRecommendCatalog.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.UpdatedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalog.updated_by":
		if e.complexity.NewMuckTruckRecommendCatalog.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalog.UpdatedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregate.aggregate":
		if e.complexity.NewMuckTruckRecommendCatalogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregate.Aggregate(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.avg":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Avg(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.count":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Count == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Count(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.max":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Max == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Max(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.min":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Min == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Min(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.stddev":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Stddev(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.stddev_pop":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.StddevPop(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.stddev_samp":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.StddevSamp(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.sum":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Sum(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.var_pop":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.VarPop(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.var_samp":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.VarSamp(childComplexity), true

	case "NewMuckTruckRecommendCatalogAggregateFields.variance":
		if e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAggregateFields.Variance(childComplexity), true

	case "NewMuckTruckRecommendCatalogAvgFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogAvgFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogAvgFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.brand_name":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.BrandName == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.BrandName(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.created_at":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.CreatedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.created_by":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.CreatedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.deleted_at":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.DeletedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.deleted_by":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.DeletedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.new_muck_truck_recommend_catalog_id":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.NewMuckTruckRecommendCatalogID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.NewMuckTruckRecommendCatalogID(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.updated_at":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.UpdatedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalogMaxFields.updated_by":
		if e.complexity.NewMuckTruckRecommendCatalogMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMaxFields.UpdatedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.brand_name":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.BrandName == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.BrandName(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.created_at":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.CreatedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.created_by":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.CreatedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.deleted_at":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.DeletedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.deleted_by":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.DeletedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.new_muck_truck_recommend_catalog_id":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.NewMuckTruckRecommendCatalogID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.NewMuckTruckRecommendCatalogID(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.updated_at":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.UpdatedAt(childComplexity), true

	case "NewMuckTruckRecommendCatalogMinFields.updated_by":
		if e.complexity.NewMuckTruckRecommendCatalogMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMinFields.UpdatedBy(childComplexity), true

	case "NewMuckTruckRecommendCatalogMutationResponse.affected_rows":
		if e.complexity.NewMuckTruckRecommendCatalogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMutationResponse.AffectedRows(childComplexity), true

	case "NewMuckTruckRecommendCatalogMutationResponse.returning":
		if e.complexity.NewMuckTruckRecommendCatalogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogMutationResponse.Returning(childComplexity), true

	case "NewMuckTruckRecommendCatalogStddevFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogStddevFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogStddevFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogStddevPopFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogStddevPopFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogStddevSampFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogStddevSampFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogSumFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogSumFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogSumFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogVarPopFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogVarPopFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogVarPopFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogVarSampFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogVarSampFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogVarSampFields.ID(childComplexity), true

	case "NewMuckTruckRecommendCatalogVarianceFields.id":
		if e.complexity.NewMuckTruckRecommendCatalogVarianceFields.ID == nil {
			break
		}

		return e.complexity.NewMuckTruckRecommendCatalogVarianceFields.ID(childComplexity), true

	case "Query.muck_truck_purchase_intention":
		if e.complexity.Query.MuckTruckPurchaseIntention == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_purchase_intention_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPurchaseIntention(childComplexity, args["distinct_on"].([]model.MuckTruckPurchaseIntentionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPurchaseIntentionOrderBy), args["where"].(*model.MuckTruckPurchaseIntentionBoolExp)), true

	case "Query.muck_truck_purchase_intention_aggregate":
		if e.complexity.Query.MuckTruckPurchaseIntentionAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_purchase_intention_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPurchaseIntentionAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckPurchaseIntentionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPurchaseIntentionOrderBy), args["where"].(*model.MuckTruckPurchaseIntentionBoolExp)), true

	case "Query.muck_truck_purchase_intention_by_pk":
		if e.complexity.Query.MuckTruckPurchaseIntentionByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_purchase_intention_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPurchaseIntentionByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_purchase_intention_by_union_pk":
		if e.complexity.Query.MuckTruckPurchaseIntentionByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_purchase_intention_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckPurchaseIntentionByUnionPk(childComplexity, args["muck_truck_purchase_intention_id"].(string)), true

	case "Query.muck_truck_sale_order":
		if e.complexity.Query.MuckTruckSaleOrder == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrder(childComplexity, args["distinct_on"].([]model.MuckTruckSaleOrderSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderOrderBy), args["where"].(*model.MuckTruckSaleOrderBoolExp)), true

	case "Query.muck_truck_sale_order_aggregate":
		if e.complexity.Query.MuckTruckSaleOrderAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckSaleOrderSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderOrderBy), args["where"].(*model.MuckTruckSaleOrderBoolExp)), true

	case "Query.muck_truck_sale_order_by_pk":
		if e.complexity.Query.MuckTruckSaleOrderByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_sale_order_by_union_pk":
		if e.complexity.Query.MuckTruckSaleOrderByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderByUnionPk(childComplexity, args["muck_truck_sale_order_id"].(string)), true

	case "Query.muck_truck_sale_order_detail":
		if e.complexity.Query.MuckTruckSaleOrderDetail == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderDetail(childComplexity, args["distinct_on"].([]model.MuckTruckSaleOrderDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderDetailOrderBy), args["where"].(*model.MuckTruckSaleOrderDetailBoolExp)), true

	case "Query.muck_truck_sale_order_detail_aggregate":
		if e.complexity.Query.MuckTruckSaleOrderDetailAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_detail_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderDetailAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckSaleOrderDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderDetailOrderBy), args["where"].(*model.MuckTruckSaleOrderDetailBoolExp)), true

	case "Query.muck_truck_sale_order_detail_by_pk":
		if e.complexity.Query.MuckTruckSaleOrderDetailByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderDetailByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_sale_order_detail_by_union_pk":
		if e.complexity.Query.MuckTruckSaleOrderDetailByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_sale_order_detail_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckSaleOrderDetailByUnionPk(childComplexity, args["muck_truck_sale_order_detail_id"].(string)), true

	case "Query.new_muck_truck_info":
		if e.complexity.Query.NewMuckTruckInfo == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckInfo(childComplexity, args["distinct_on"].([]model.NewMuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckInfoOrderBy), args["where"].(*model.NewMuckTruckInfoBoolExp)), true

	case "Query.new_muck_truck_info_aggregate":
		if e.complexity.Query.NewMuckTruckInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckInfoAggregate(childComplexity, args["distinct_on"].([]model.NewMuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckInfoOrderBy), args["where"].(*model.NewMuckTruckInfoBoolExp)), true

	case "Query.new_muck_truck_info_by_pk":
		if e.complexity.Query.NewMuckTruckInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckInfoByPk(childComplexity, args["id"].(int64)), true

	case "Query.new_muck_truck_info_by_union_pk":
		if e.complexity.Query.NewMuckTruckInfoByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_info_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckInfoByUnionPk(childComplexity, args["new_muck_truck_info_id"].(string)), true

	case "Query.new_muck_truck_photo":
		if e.complexity.Query.NewMuckTruckPhoto == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_photo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckPhoto(childComplexity, args["distinct_on"].([]model.NewMuckTruckPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckPhotoOrderBy), args["where"].(*model.NewMuckTruckPhotoBoolExp)), true

	case "Query.new_muck_truck_photo_aggregate":
		if e.complexity.Query.NewMuckTruckPhotoAggregate == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_photo_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckPhotoAggregate(childComplexity, args["distinct_on"].([]model.NewMuckTruckPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckPhotoOrderBy), args["where"].(*model.NewMuckTruckPhotoBoolExp)), true

	case "Query.new_muck_truck_photo_by_pk":
		if e.complexity.Query.NewMuckTruckPhotoByPk == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_photo_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckPhotoByPk(childComplexity, args["id"].(int64)), true

	case "Query.new_muck_truck_photo_by_union_pk":
		if e.complexity.Query.NewMuckTruckPhotoByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_photo_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckPhotoByUnionPk(childComplexity, args["new_muck_truck_photo_id"].(string)), true

	case "Query.new_muck_truck_recommend_catalog":
		if e.complexity.Query.NewMuckTruckRecommendCatalog == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_recommend_catalog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckRecommendCatalog(childComplexity, args["distinct_on"].([]model.NewMuckTruckRecommendCatalogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckRecommendCatalogOrderBy), args["where"].(*model.NewMuckTruckRecommendCatalogBoolExp)), true

	case "Query.new_muck_truck_recommend_catalog_aggregate":
		if e.complexity.Query.NewMuckTruckRecommendCatalogAggregate == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_recommend_catalog_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckRecommendCatalogAggregate(childComplexity, args["distinct_on"].([]model.NewMuckTruckRecommendCatalogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckRecommendCatalogOrderBy), args["where"].(*model.NewMuckTruckRecommendCatalogBoolExp)), true

	case "Query.new_muck_truck_recommend_catalog_by_pk":
		if e.complexity.Query.NewMuckTruckRecommendCatalogByPk == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_recommend_catalog_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckRecommendCatalogByPk(childComplexity, args["id"].(int64)), true

	case "Query.new_muck_truck_recommend_catalog_by_union_pk":
		if e.complexity.Query.NewMuckTruckRecommendCatalogByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_new_muck_truck_recommend_catalog_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NewMuckTruckRecommendCatalogByUnionPk(childComplexity, args["new_muck_truck_recommend_catalog_id"].(string)), true

	case "Query.seller_filing":
		if e.complexity.Query.SellerFiling == nil {
			break
		}

		args, err := ec.field_Query_seller_filing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerFiling(childComplexity, args["distinct_on"].([]model.SellerFilingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerFilingOrderBy), args["where"].(*model.SellerFilingBoolExp)), true

	case "Query.seller_filing_aggregate":
		if e.complexity.Query.SellerFilingAggregate == nil {
			break
		}

		args, err := ec.field_Query_seller_filing_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerFilingAggregate(childComplexity, args["distinct_on"].([]model.SellerFilingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerFilingOrderBy), args["where"].(*model.SellerFilingBoolExp)), true

	case "Query.seller_filing_by_pk":
		if e.complexity.Query.SellerFilingByPk == nil {
			break
		}

		args, err := ec.field_Query_seller_filing_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerFilingByPk(childComplexity, args["id"].(int64)), true

	case "Query.seller_filing_by_union_pk":
		if e.complexity.Query.SellerFilingByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_seller_filing_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerFilingByUnionPk(childComplexity, args["seller_filing_id"].(string)), true

	case "Query.seller_rating_record":
		if e.complexity.Query.SellerRatingRecord == nil {
			break
		}

		args, err := ec.field_Query_seller_rating_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerRatingRecord(childComplexity, args["distinct_on"].([]model.SellerRatingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerRatingRecordOrderBy), args["where"].(*model.SellerRatingRecordBoolExp)), true

	case "Query.seller_rating_record_aggregate":
		if e.complexity.Query.SellerRatingRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_seller_rating_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerRatingRecordAggregate(childComplexity, args["distinct_on"].([]model.SellerRatingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerRatingRecordOrderBy), args["where"].(*model.SellerRatingRecordBoolExp)), true

	case "Query.seller_rating_record_by_pk":
		if e.complexity.Query.SellerRatingRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_seller_rating_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerRatingRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.seller_rating_record_by_union_pk":
		if e.complexity.Query.SellerRatingRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_seller_rating_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SellerRatingRecordByUnionPk(childComplexity, args["seller_rating_record_id"].(string)), true

	case "Query.vehicle_sale_record":
		if e.complexity.Query.VehicleSaleRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_sale_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSaleRecord(childComplexity, args["distinct_on"].([]model.VehicleSaleRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSaleRecordOrderBy), args["where"].(*model.VehicleSaleRecordBoolExp)), true

	case "Query.vehicle_sale_record_aggregate":
		if e.complexity.Query.VehicleSaleRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_sale_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSaleRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleSaleRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSaleRecordOrderBy), args["where"].(*model.VehicleSaleRecordBoolExp)), true

	case "Query.vehicle_sale_record_by_pk":
		if e.complexity.Query.VehicleSaleRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_sale_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSaleRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_sale_record_by_union_pk":
		if e.complexity.Query.VehicleSaleRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_sale_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleSaleRecordByUnionPk(childComplexity, args["vehicle_sale_record_id"].(string)), true

	case "SellerFiling.business_license":
		if e.complexity.SellerFiling.BusinessLicense == nil {
			break
		}

		return e.complexity.SellerFiling.BusinessLicense(childComplexity), true

	case "SellerFiling.catalog_id":
		if e.complexity.SellerFiling.CatalogID == nil {
			break
		}

		return e.complexity.SellerFiling.CatalogID(childComplexity), true

	case "SellerFiling.cause":
		if e.complexity.SellerFiling.Cause == nil {
			break
		}

		return e.complexity.SellerFiling.Cause(childComplexity), true

	case "SellerFiling.created_at":
		if e.complexity.SellerFiling.CreatedAt == nil {
			break
		}

		return e.complexity.SellerFiling.CreatedAt(childComplexity), true

	case "SellerFiling.created_by":
		if e.complexity.SellerFiling.CreatedBy == nil {
			break
		}

		return e.complexity.SellerFiling.CreatedBy(childComplexity), true

	case "SellerFiling.deleted_at":
		if e.complexity.SellerFiling.DeletedAt == nil {
			break
		}

		return e.complexity.SellerFiling.DeletedAt(childComplexity), true

	case "SellerFiling.deleted_by":
		if e.complexity.SellerFiling.DeletedBy == nil {
			break
		}

		return e.complexity.SellerFiling.DeletedBy(childComplexity), true

	case "SellerFiling.entrusted_agent_id_card":
		if e.complexity.SellerFiling.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.SellerFiling.EntrustedAgentIDCard(childComplexity), true

	case "SellerFiling.id":
		if e.complexity.SellerFiling.ID == nil {
			break
		}

		return e.complexity.SellerFiling.ID(childComplexity), true

	case "SellerFiling.industry_self_discipline_commitment":
		if e.complexity.SellerFiling.IndustrySelfDisciplineCommitment == nil {
			break
		}

		return e.complexity.SellerFiling.IndustrySelfDisciplineCommitment(childComplexity), true

	case "SellerFiling.is_deleted":
		if e.complexity.SellerFiling.IsDeleted == nil {
			break
		}

		return e.complexity.SellerFiling.IsDeleted(childComplexity), true

	case "SellerFiling.is_verify":
		if e.complexity.SellerFiling.IsVerify == nil {
			break
		}

		return e.complexity.SellerFiling.IsVerify(childComplexity), true

	case "SellerFiling.legal_representative_id_card":
		if e.complexity.SellerFiling.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.SellerFiling.LegalRepresentativeIDCard(childComplexity), true

	case "SellerFiling.manufacturer_production_sale_permit":
		if e.complexity.SellerFiling.ManufacturerProductionSalePermit == nil {
			break
		}

		return e.complexity.SellerFiling.ManufacturerProductionSalePermit(childComplexity), true

	case "SellerFiling.ministry_production_sale_permit":
		if e.complexity.SellerFiling.MinistryProductionSalePermit == nil {
			break
		}

		return e.complexity.SellerFiling.MinistryProductionSalePermit(childComplexity), true

	case "SellerFiling.organization_code":
		if e.complexity.SellerFiling.OrganizationCode == nil {
			break
		}

		return e.complexity.SellerFiling.OrganizationCode(childComplexity), true

	case "SellerFiling.other_material":
		if e.complexity.SellerFiling.OtherMaterial == nil {
			break
		}

		return e.complexity.SellerFiling.OtherMaterial(childComplexity), true

	case "SellerFiling.platform_docking_technology_agreement":
		if e.complexity.SellerFiling.PlatformDockingTechnologyAgreement == nil {
			break
		}

		return e.complexity.SellerFiling.PlatformDockingTechnologyAgreement(childComplexity), true

	case "SellerFiling.registration_time":
		if e.complexity.SellerFiling.RegistrationTime == nil {
			break
		}

		return e.complexity.SellerFiling.RegistrationTime(childComplexity), true

	case "SellerFiling.registration_user":
		if e.complexity.SellerFiling.RegistrationUser == nil {
			break
		}

		return e.complexity.SellerFiling.RegistrationUser(childComplexity), true

	case "SellerFiling.remarks":
		if e.complexity.SellerFiling.Remarks == nil {
			break
		}

		return e.complexity.SellerFiling.Remarks(childComplexity), true

	case "SellerFiling.repair_service_station_address":
		if e.complexity.SellerFiling.RepairServiceStationAddress == nil {
			break
		}

		return e.complexity.SellerFiling.RepairServiceStationAddress(childComplexity), true

	case "SellerFiling.repair_service_station_material":
		if e.complexity.SellerFiling.RepairServiceStationMaterial == nil {
			break
		}

		return e.complexity.SellerFiling.RepairServiceStationMaterial(childComplexity), true

	case "SellerFiling.repair_service_station_name":
		if e.complexity.SellerFiling.RepairServiceStationName == nil {
			break
		}

		return e.complexity.SellerFiling.RepairServiceStationName(childComplexity), true

	case "SellerFiling.seller":
		if e.complexity.SellerFiling.Seller == nil {
			break
		}

		return e.complexity.SellerFiling.Seller(childComplexity), true

	case "SellerFiling.seller_filing_id":
		if e.complexity.SellerFiling.SellerFilingID == nil {
			break
		}

		return e.complexity.SellerFiling.SellerFilingID(childComplexity), true

	case "SellerFiling.service_staff_id":
		if e.complexity.SellerFiling.ServiceStaffID == nil {
			break
		}

		return e.complexity.SellerFiling.ServiceStaffID(childComplexity), true

	case "SellerFiling.service_staff_material":
		if e.complexity.SellerFiling.ServiceStaffMaterial == nil {
			break
		}

		return e.complexity.SellerFiling.ServiceStaffMaterial(childComplexity), true

	case "SellerFiling.service_staff_name":
		if e.complexity.SellerFiling.ServiceStaffName == nil {
			break
		}

		return e.complexity.SellerFiling.ServiceStaffName(childComplexity), true

	case "SellerFiling.service_staff_phone":
		if e.complexity.SellerFiling.ServiceStaffPhone == nil {
			break
		}

		return e.complexity.SellerFiling.ServiceStaffPhone(childComplexity), true

	case "SellerFiling.updated_at":
		if e.complexity.SellerFiling.UpdatedAt == nil {
			break
		}

		return e.complexity.SellerFiling.UpdatedAt(childComplexity), true

	case "SellerFiling.updated_by":
		if e.complexity.SellerFiling.UpdatedBy == nil {
			break
		}

		return e.complexity.SellerFiling.UpdatedBy(childComplexity), true

	case "SellerFilingAggregate.aggregate":
		if e.complexity.SellerFilingAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SellerFilingAggregate.Aggregate(childComplexity), true

	case "SellerFilingAggregateFields.avg":
		if e.complexity.SellerFilingAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Avg(childComplexity), true

	case "SellerFilingAggregateFields.count":
		if e.complexity.SellerFilingAggregateFields.Count == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Count(childComplexity), true

	case "SellerFilingAggregateFields.max":
		if e.complexity.SellerFilingAggregateFields.Max == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Max(childComplexity), true

	case "SellerFilingAggregateFields.min":
		if e.complexity.SellerFilingAggregateFields.Min == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Min(childComplexity), true

	case "SellerFilingAggregateFields.stddev":
		if e.complexity.SellerFilingAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Stddev(childComplexity), true

	case "SellerFilingAggregateFields.stddev_pop":
		if e.complexity.SellerFilingAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.StddevPop(childComplexity), true

	case "SellerFilingAggregateFields.stddev_samp":
		if e.complexity.SellerFilingAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.StddevSamp(childComplexity), true

	case "SellerFilingAggregateFields.sum":
		if e.complexity.SellerFilingAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Sum(childComplexity), true

	case "SellerFilingAggregateFields.var_pop":
		if e.complexity.SellerFilingAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.VarPop(childComplexity), true

	case "SellerFilingAggregateFields.var_samp":
		if e.complexity.SellerFilingAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.VarSamp(childComplexity), true

	case "SellerFilingAggregateFields.variance":
		if e.complexity.SellerFilingAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SellerFilingAggregateFields.Variance(childComplexity), true

	case "SellerFilingAvgFields.id":
		if e.complexity.SellerFilingAvgFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingAvgFields.ID(childComplexity), true

	case "SellerFilingMaxFields.business_license":
		if e.complexity.SellerFilingMaxFields.BusinessLicense == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.BusinessLicense(childComplexity), true

	case "SellerFilingMaxFields.catalog_id":
		if e.complexity.SellerFilingMaxFields.CatalogID == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.CatalogID(childComplexity), true

	case "SellerFilingMaxFields.cause":
		if e.complexity.SellerFilingMaxFields.Cause == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.Cause(childComplexity), true

	case "SellerFilingMaxFields.created_at":
		if e.complexity.SellerFilingMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.CreatedAt(childComplexity), true

	case "SellerFilingMaxFields.created_by":
		if e.complexity.SellerFilingMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.CreatedBy(childComplexity), true

	case "SellerFilingMaxFields.deleted_at":
		if e.complexity.SellerFilingMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.DeletedAt(childComplexity), true

	case "SellerFilingMaxFields.deleted_by":
		if e.complexity.SellerFilingMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.DeletedBy(childComplexity), true

	case "SellerFilingMaxFields.entrusted_agent_id_card":
		if e.complexity.SellerFilingMaxFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.EntrustedAgentIDCard(childComplexity), true

	case "SellerFilingMaxFields.id":
		if e.complexity.SellerFilingMaxFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.ID(childComplexity), true

	case "SellerFilingMaxFields.industry_self_discipline_commitment":
		if e.complexity.SellerFilingMaxFields.IndustrySelfDisciplineCommitment == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.IndustrySelfDisciplineCommitment(childComplexity), true

	case "SellerFilingMaxFields.is_deleted":
		if e.complexity.SellerFilingMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.IsDeleted(childComplexity), true

	case "SellerFilingMaxFields.is_verify":
		if e.complexity.SellerFilingMaxFields.IsVerify == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.IsVerify(childComplexity), true

	case "SellerFilingMaxFields.legal_representative_id_card":
		if e.complexity.SellerFilingMaxFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.LegalRepresentativeIDCard(childComplexity), true

	case "SellerFilingMaxFields.manufacturer_production_sale_permit":
		if e.complexity.SellerFilingMaxFields.ManufacturerProductionSalePermit == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.ManufacturerProductionSalePermit(childComplexity), true

	case "SellerFilingMaxFields.ministry_production_sale_permit":
		if e.complexity.SellerFilingMaxFields.MinistryProductionSalePermit == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.MinistryProductionSalePermit(childComplexity), true

	case "SellerFilingMaxFields.organization_code":
		if e.complexity.SellerFilingMaxFields.OrganizationCode == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.OrganizationCode(childComplexity), true

	case "SellerFilingMaxFields.other_material":
		if e.complexity.SellerFilingMaxFields.OtherMaterial == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.OtherMaterial(childComplexity), true

	case "SellerFilingMaxFields.platform_docking_technology_agreement":
		if e.complexity.SellerFilingMaxFields.PlatformDockingTechnologyAgreement == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.PlatformDockingTechnologyAgreement(childComplexity), true

	case "SellerFilingMaxFields.registration_time":
		if e.complexity.SellerFilingMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.RegistrationTime(childComplexity), true

	case "SellerFilingMaxFields.registration_user":
		if e.complexity.SellerFilingMaxFields.RegistrationUser == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.RegistrationUser(childComplexity), true

	case "SellerFilingMaxFields.remarks":
		if e.complexity.SellerFilingMaxFields.Remarks == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.Remarks(childComplexity), true

	case "SellerFilingMaxFields.repair_service_station_address":
		if e.complexity.SellerFilingMaxFields.RepairServiceStationAddress == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.RepairServiceStationAddress(childComplexity), true

	case "SellerFilingMaxFields.repair_service_station_material":
		if e.complexity.SellerFilingMaxFields.RepairServiceStationMaterial == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.RepairServiceStationMaterial(childComplexity), true

	case "SellerFilingMaxFields.repair_service_station_name":
		if e.complexity.SellerFilingMaxFields.RepairServiceStationName == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.RepairServiceStationName(childComplexity), true

	case "SellerFilingMaxFields.seller":
		if e.complexity.SellerFilingMaxFields.Seller == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.Seller(childComplexity), true

	case "SellerFilingMaxFields.seller_filing_id":
		if e.complexity.SellerFilingMaxFields.SellerFilingID == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.SellerFilingID(childComplexity), true

	case "SellerFilingMaxFields.service_staff_id":
		if e.complexity.SellerFilingMaxFields.ServiceStaffID == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.ServiceStaffID(childComplexity), true

	case "SellerFilingMaxFields.service_staff_material":
		if e.complexity.SellerFilingMaxFields.ServiceStaffMaterial == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.ServiceStaffMaterial(childComplexity), true

	case "SellerFilingMaxFields.service_staff_name":
		if e.complexity.SellerFilingMaxFields.ServiceStaffName == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.ServiceStaffName(childComplexity), true

	case "SellerFilingMaxFields.service_staff_phone":
		if e.complexity.SellerFilingMaxFields.ServiceStaffPhone == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.ServiceStaffPhone(childComplexity), true

	case "SellerFilingMaxFields.updated_at":
		if e.complexity.SellerFilingMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.UpdatedAt(childComplexity), true

	case "SellerFilingMaxFields.updated_by":
		if e.complexity.SellerFilingMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SellerFilingMaxFields.UpdatedBy(childComplexity), true

	case "SellerFilingMinFields.business_license":
		if e.complexity.SellerFilingMinFields.BusinessLicense == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.BusinessLicense(childComplexity), true

	case "SellerFilingMinFields.catalog_id":
		if e.complexity.SellerFilingMinFields.CatalogID == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.CatalogID(childComplexity), true

	case "SellerFilingMinFields.cause":
		if e.complexity.SellerFilingMinFields.Cause == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.Cause(childComplexity), true

	case "SellerFilingMinFields.created_at":
		if e.complexity.SellerFilingMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.CreatedAt(childComplexity), true

	case "SellerFilingMinFields.created_by":
		if e.complexity.SellerFilingMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.CreatedBy(childComplexity), true

	case "SellerFilingMinFields.deleted_at":
		if e.complexity.SellerFilingMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.DeletedAt(childComplexity), true

	case "SellerFilingMinFields.deleted_by":
		if e.complexity.SellerFilingMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.DeletedBy(childComplexity), true

	case "SellerFilingMinFields.entrusted_agent_id_card":
		if e.complexity.SellerFilingMinFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.EntrustedAgentIDCard(childComplexity), true

	case "SellerFilingMinFields.id":
		if e.complexity.SellerFilingMinFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.ID(childComplexity), true

	case "SellerFilingMinFields.industry_self_discipline_commitment":
		if e.complexity.SellerFilingMinFields.IndustrySelfDisciplineCommitment == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.IndustrySelfDisciplineCommitment(childComplexity), true

	case "SellerFilingMinFields.is_deleted":
		if e.complexity.SellerFilingMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.IsDeleted(childComplexity), true

	case "SellerFilingMinFields.is_verify":
		if e.complexity.SellerFilingMinFields.IsVerify == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.IsVerify(childComplexity), true

	case "SellerFilingMinFields.legal_representative_id_card":
		if e.complexity.SellerFilingMinFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.LegalRepresentativeIDCard(childComplexity), true

	case "SellerFilingMinFields.manufacturer_production_sale_permit":
		if e.complexity.SellerFilingMinFields.ManufacturerProductionSalePermit == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.ManufacturerProductionSalePermit(childComplexity), true

	case "SellerFilingMinFields.ministry_production_sale_permit":
		if e.complexity.SellerFilingMinFields.MinistryProductionSalePermit == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.MinistryProductionSalePermit(childComplexity), true

	case "SellerFilingMinFields.organization_code":
		if e.complexity.SellerFilingMinFields.OrganizationCode == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.OrganizationCode(childComplexity), true

	case "SellerFilingMinFields.other_material":
		if e.complexity.SellerFilingMinFields.OtherMaterial == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.OtherMaterial(childComplexity), true

	case "SellerFilingMinFields.platform_docking_technology_agreement":
		if e.complexity.SellerFilingMinFields.PlatformDockingTechnologyAgreement == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.PlatformDockingTechnologyAgreement(childComplexity), true

	case "SellerFilingMinFields.registration_time":
		if e.complexity.SellerFilingMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.RegistrationTime(childComplexity), true

	case "SellerFilingMinFields.registration_user":
		if e.complexity.SellerFilingMinFields.RegistrationUser == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.RegistrationUser(childComplexity), true

	case "SellerFilingMinFields.remarks":
		if e.complexity.SellerFilingMinFields.Remarks == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.Remarks(childComplexity), true

	case "SellerFilingMinFields.repair_service_station_address":
		if e.complexity.SellerFilingMinFields.RepairServiceStationAddress == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.RepairServiceStationAddress(childComplexity), true

	case "SellerFilingMinFields.repair_service_station_material":
		if e.complexity.SellerFilingMinFields.RepairServiceStationMaterial == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.RepairServiceStationMaterial(childComplexity), true

	case "SellerFilingMinFields.repair_service_station_name":
		if e.complexity.SellerFilingMinFields.RepairServiceStationName == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.RepairServiceStationName(childComplexity), true

	case "SellerFilingMinFields.seller":
		if e.complexity.SellerFilingMinFields.Seller == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.Seller(childComplexity), true

	case "SellerFilingMinFields.seller_filing_id":
		if e.complexity.SellerFilingMinFields.SellerFilingID == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.SellerFilingID(childComplexity), true

	case "SellerFilingMinFields.service_staff_id":
		if e.complexity.SellerFilingMinFields.ServiceStaffID == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.ServiceStaffID(childComplexity), true

	case "SellerFilingMinFields.service_staff_material":
		if e.complexity.SellerFilingMinFields.ServiceStaffMaterial == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.ServiceStaffMaterial(childComplexity), true

	case "SellerFilingMinFields.service_staff_name":
		if e.complexity.SellerFilingMinFields.ServiceStaffName == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.ServiceStaffName(childComplexity), true

	case "SellerFilingMinFields.service_staff_phone":
		if e.complexity.SellerFilingMinFields.ServiceStaffPhone == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.ServiceStaffPhone(childComplexity), true

	case "SellerFilingMinFields.updated_at":
		if e.complexity.SellerFilingMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.UpdatedAt(childComplexity), true

	case "SellerFilingMinFields.updated_by":
		if e.complexity.SellerFilingMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SellerFilingMinFields.UpdatedBy(childComplexity), true

	case "SellerFilingMutationResponse.affected_rows":
		if e.complexity.SellerFilingMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SellerFilingMutationResponse.AffectedRows(childComplexity), true

	case "SellerFilingMutationResponse.returning":
		if e.complexity.SellerFilingMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SellerFilingMutationResponse.Returning(childComplexity), true

	case "SellerFilingStddevFields.id":
		if e.complexity.SellerFilingStddevFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingStddevFields.ID(childComplexity), true

	case "SellerFilingStddevPopFields.id":
		if e.complexity.SellerFilingStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingStddevPopFields.ID(childComplexity), true

	case "SellerFilingStddevSampFields.id":
		if e.complexity.SellerFilingStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingStddevSampFields.ID(childComplexity), true

	case "SellerFilingSumFields.id":
		if e.complexity.SellerFilingSumFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingSumFields.ID(childComplexity), true

	case "SellerFilingVarPopFields.id":
		if e.complexity.SellerFilingVarPopFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingVarPopFields.ID(childComplexity), true

	case "SellerFilingVarSampFields.id":
		if e.complexity.SellerFilingVarSampFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingVarSampFields.ID(childComplexity), true

	case "SellerFilingVarianceFields.id":
		if e.complexity.SellerFilingVarianceFields.ID == nil {
			break
		}

		return e.complexity.SellerFilingVarianceFields.ID(childComplexity), true

	case "SellerRatingRecord.created_at":
		if e.complexity.SellerRatingRecord.CreatedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecord.CreatedAt(childComplexity), true

	case "SellerRatingRecord.created_by":
		if e.complexity.SellerRatingRecord.CreatedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecord.CreatedBy(childComplexity), true

	case "SellerRatingRecord.deleted_at":
		if e.complexity.SellerRatingRecord.DeletedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecord.DeletedAt(childComplexity), true

	case "SellerRatingRecord.deleted_by":
		if e.complexity.SellerRatingRecord.DeletedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecord.DeletedBy(childComplexity), true

	case "SellerRatingRecord.demerit_obj":
		if e.complexity.SellerRatingRecord.DemeritObj == nil {
			break
		}

		return e.complexity.SellerRatingRecord.DemeritObj(childComplexity), true

	case "SellerRatingRecord.demerit_points":
		if e.complexity.SellerRatingRecord.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecord.DemeritPoints(childComplexity), true

	case "SellerRatingRecord.demerit_reason":
		if e.complexity.SellerRatingRecord.DemeritReason == nil {
			break
		}

		return e.complexity.SellerRatingRecord.DemeritReason(childComplexity), true

	case "SellerRatingRecord.id":
		if e.complexity.SellerRatingRecord.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecord.ID(childComplexity), true

	case "SellerRatingRecord.is_deleted":
		if e.complexity.SellerRatingRecord.IsDeleted == nil {
			break
		}

		return e.complexity.SellerRatingRecord.IsDeleted(childComplexity), true

	case "SellerRatingRecord.operation_time":
		if e.complexity.SellerRatingRecord.OperationTime == nil {
			break
		}

		return e.complexity.SellerRatingRecord.OperationTime(childComplexity), true

	case "SellerRatingRecord.operator":
		if e.complexity.SellerRatingRecord.Operator == nil {
			break
		}

		return e.complexity.SellerRatingRecord.Operator(childComplexity), true

	case "SellerRatingRecord.seller_rating_record_id":
		if e.complexity.SellerRatingRecord.SellerRatingRecordID == nil {
			break
		}

		return e.complexity.SellerRatingRecord.SellerRatingRecordID(childComplexity), true

	case "SellerRatingRecord.updated_at":
		if e.complexity.SellerRatingRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecord.UpdatedAt(childComplexity), true

	case "SellerRatingRecord.updated_by":
		if e.complexity.SellerRatingRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecord.UpdatedBy(childComplexity), true

	case "SellerRatingRecordAggregate.aggregate":
		if e.complexity.SellerRatingRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregate.Aggregate(childComplexity), true

	case "SellerRatingRecordAggregateFields.avg":
		if e.complexity.SellerRatingRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Avg(childComplexity), true

	case "SellerRatingRecordAggregateFields.count":
		if e.complexity.SellerRatingRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Count(childComplexity), true

	case "SellerRatingRecordAggregateFields.max":
		if e.complexity.SellerRatingRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Max(childComplexity), true

	case "SellerRatingRecordAggregateFields.min":
		if e.complexity.SellerRatingRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Min(childComplexity), true

	case "SellerRatingRecordAggregateFields.stddev":
		if e.complexity.SellerRatingRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Stddev(childComplexity), true

	case "SellerRatingRecordAggregateFields.stddev_pop":
		if e.complexity.SellerRatingRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.StddevPop(childComplexity), true

	case "SellerRatingRecordAggregateFields.stddev_samp":
		if e.complexity.SellerRatingRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.StddevSamp(childComplexity), true

	case "SellerRatingRecordAggregateFields.sum":
		if e.complexity.SellerRatingRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Sum(childComplexity), true

	case "SellerRatingRecordAggregateFields.var_pop":
		if e.complexity.SellerRatingRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.VarPop(childComplexity), true

	case "SellerRatingRecordAggregateFields.var_samp":
		if e.complexity.SellerRatingRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.VarSamp(childComplexity), true

	case "SellerRatingRecordAggregateFields.variance":
		if e.complexity.SellerRatingRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SellerRatingRecordAggregateFields.Variance(childComplexity), true

	case "SellerRatingRecordAvgFields.demerit_points":
		if e.complexity.SellerRatingRecordAvgFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordAvgFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordAvgFields.id":
		if e.complexity.SellerRatingRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordAvgFields.ID(childComplexity), true

	case "SellerRatingRecordMaxFields.created_at":
		if e.complexity.SellerRatingRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.CreatedAt(childComplexity), true

	case "SellerRatingRecordMaxFields.created_by":
		if e.complexity.SellerRatingRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.CreatedBy(childComplexity), true

	case "SellerRatingRecordMaxFields.deleted_at":
		if e.complexity.SellerRatingRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.DeletedAt(childComplexity), true

	case "SellerRatingRecordMaxFields.deleted_by":
		if e.complexity.SellerRatingRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.DeletedBy(childComplexity), true

	case "SellerRatingRecordMaxFields.demerit_obj":
		if e.complexity.SellerRatingRecordMaxFields.DemeritObj == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.DemeritObj(childComplexity), true

	case "SellerRatingRecordMaxFields.demerit_points":
		if e.complexity.SellerRatingRecordMaxFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordMaxFields.demerit_reason":
		if e.complexity.SellerRatingRecordMaxFields.DemeritReason == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.DemeritReason(childComplexity), true

	case "SellerRatingRecordMaxFields.id":
		if e.complexity.SellerRatingRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.ID(childComplexity), true

	case "SellerRatingRecordMaxFields.is_deleted":
		if e.complexity.SellerRatingRecordMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.IsDeleted(childComplexity), true

	case "SellerRatingRecordMaxFields.operation_time":
		if e.complexity.SellerRatingRecordMaxFields.OperationTime == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.OperationTime(childComplexity), true

	case "SellerRatingRecordMaxFields.operator":
		if e.complexity.SellerRatingRecordMaxFields.Operator == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.Operator(childComplexity), true

	case "SellerRatingRecordMaxFields.seller_rating_record_id":
		if e.complexity.SellerRatingRecordMaxFields.SellerRatingRecordID == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.SellerRatingRecordID(childComplexity), true

	case "SellerRatingRecordMaxFields.updated_at":
		if e.complexity.SellerRatingRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.UpdatedAt(childComplexity), true

	case "SellerRatingRecordMaxFields.updated_by":
		if e.complexity.SellerRatingRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecordMaxFields.UpdatedBy(childComplexity), true

	case "SellerRatingRecordMinFields.created_at":
		if e.complexity.SellerRatingRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.CreatedAt(childComplexity), true

	case "SellerRatingRecordMinFields.created_by":
		if e.complexity.SellerRatingRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.CreatedBy(childComplexity), true

	case "SellerRatingRecordMinFields.deleted_at":
		if e.complexity.SellerRatingRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.DeletedAt(childComplexity), true

	case "SellerRatingRecordMinFields.deleted_by":
		if e.complexity.SellerRatingRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.DeletedBy(childComplexity), true

	case "SellerRatingRecordMinFields.demerit_obj":
		if e.complexity.SellerRatingRecordMinFields.DemeritObj == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.DemeritObj(childComplexity), true

	case "SellerRatingRecordMinFields.demerit_points":
		if e.complexity.SellerRatingRecordMinFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordMinFields.demerit_reason":
		if e.complexity.SellerRatingRecordMinFields.DemeritReason == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.DemeritReason(childComplexity), true

	case "SellerRatingRecordMinFields.id":
		if e.complexity.SellerRatingRecordMinFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.ID(childComplexity), true

	case "SellerRatingRecordMinFields.is_deleted":
		if e.complexity.SellerRatingRecordMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.IsDeleted(childComplexity), true

	case "SellerRatingRecordMinFields.operation_time":
		if e.complexity.SellerRatingRecordMinFields.OperationTime == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.OperationTime(childComplexity), true

	case "SellerRatingRecordMinFields.operator":
		if e.complexity.SellerRatingRecordMinFields.Operator == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.Operator(childComplexity), true

	case "SellerRatingRecordMinFields.seller_rating_record_id":
		if e.complexity.SellerRatingRecordMinFields.SellerRatingRecordID == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.SellerRatingRecordID(childComplexity), true

	case "SellerRatingRecordMinFields.updated_at":
		if e.complexity.SellerRatingRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.UpdatedAt(childComplexity), true

	case "SellerRatingRecordMinFields.updated_by":
		if e.complexity.SellerRatingRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.SellerRatingRecordMinFields.UpdatedBy(childComplexity), true

	case "SellerRatingRecordMutationResponse.affected_rows":
		if e.complexity.SellerRatingRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SellerRatingRecordMutationResponse.AffectedRows(childComplexity), true

	case "SellerRatingRecordMutationResponse.returning":
		if e.complexity.SellerRatingRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SellerRatingRecordMutationResponse.Returning(childComplexity), true

	case "SellerRatingRecordStddevFields.demerit_points":
		if e.complexity.SellerRatingRecordStddevFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordStddevFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordStddevFields.id":
		if e.complexity.SellerRatingRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordStddevFields.ID(childComplexity), true

	case "SellerRatingRecordStddevPopFields.demerit_points":
		if e.complexity.SellerRatingRecordStddevPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordStddevPopFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordStddevPopFields.id":
		if e.complexity.SellerRatingRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordStddevPopFields.ID(childComplexity), true

	case "SellerRatingRecordStddevSampFields.demerit_points":
		if e.complexity.SellerRatingRecordStddevSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordStddevSampFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordStddevSampFields.id":
		if e.complexity.SellerRatingRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordStddevSampFields.ID(childComplexity), true

	case "SellerRatingRecordSumFields.demerit_points":
		if e.complexity.SellerRatingRecordSumFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordSumFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordSumFields.id":
		if e.complexity.SellerRatingRecordSumFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordSumFields.ID(childComplexity), true

	case "SellerRatingRecordVarPopFields.demerit_points":
		if e.complexity.SellerRatingRecordVarPopFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordVarPopFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordVarPopFields.id":
		if e.complexity.SellerRatingRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordVarPopFields.ID(childComplexity), true

	case "SellerRatingRecordVarSampFields.demerit_points":
		if e.complexity.SellerRatingRecordVarSampFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordVarSampFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordVarSampFields.id":
		if e.complexity.SellerRatingRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordVarSampFields.ID(childComplexity), true

	case "SellerRatingRecordVarianceFields.demerit_points":
		if e.complexity.SellerRatingRecordVarianceFields.DemeritPoints == nil {
			break
		}

		return e.complexity.SellerRatingRecordVarianceFields.DemeritPoints(childComplexity), true

	case "SellerRatingRecordVarianceFields.id":
		if e.complexity.SellerRatingRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.SellerRatingRecordVarianceFields.ID(childComplexity), true

	case "VehicleSaleRecord.axis_type":
		if e.complexity.VehicleSaleRecord.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.AxisType(childComplexity), true

	case "VehicleSaleRecord.catalog_id":
		if e.complexity.VehicleSaleRecord.CatalogID == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.CatalogID(childComplexity), true

	case "VehicleSaleRecord.cause":
		if e.complexity.VehicleSaleRecord.Cause == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.Cause(childComplexity), true

	case "VehicleSaleRecord.created_at":
		if e.complexity.VehicleSaleRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.CreatedAt(childComplexity), true

	case "VehicleSaleRecord.created_by":
		if e.complexity.VehicleSaleRecord.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.CreatedBy(childComplexity), true

	case "VehicleSaleRecord.deleted_at":
		if e.complexity.VehicleSaleRecord.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.DeletedAt(childComplexity), true

	case "VehicleSaleRecord.deleted_by":
		if e.complexity.VehicleSaleRecord.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.DeletedBy(childComplexity), true

	case "VehicleSaleRecord.id":
		if e.complexity.VehicleSaleRecord.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.ID(childComplexity), true

	case "VehicleSaleRecord.is_deleted":
		if e.complexity.VehicleSaleRecord.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.IsDeleted(childComplexity), true

	case "VehicleSaleRecord.is_review":
		if e.complexity.VehicleSaleRecord.IsReview == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.IsReview(childComplexity), true

	case "VehicleSaleRecord.other_material":
		if e.complexity.VehicleSaleRecord.OtherMaterial == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.OtherMaterial(childComplexity), true

	case "VehicleSaleRecord.reference_price":
		if e.complexity.VehicleSaleRecord.ReferencePrice == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.ReferencePrice(childComplexity), true

	case "VehicleSaleRecord.registration_time":
		if e.complexity.VehicleSaleRecord.RegistrationTime == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.RegistrationTime(childComplexity), true

	case "VehicleSaleRecord.registration_user":
		if e.complexity.VehicleSaleRecord.RegistrationUser == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.RegistrationUser(childComplexity), true

	case "VehicleSaleRecord.remarks":
		if e.complexity.VehicleSaleRecord.Remarks == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.Remarks(childComplexity), true

	case "VehicleSaleRecord.seller":
		if e.complexity.VehicleSaleRecord.Seller == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.Seller(childComplexity), true

	case "VehicleSaleRecord.transport_volume":
		if e.complexity.VehicleSaleRecord.TransportVolume == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.TransportVolume(childComplexity), true

	case "VehicleSaleRecord.updated_at":
		if e.complexity.VehicleSaleRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.UpdatedAt(childComplexity), true

	case "VehicleSaleRecord.updated_by":
		if e.complexity.VehicleSaleRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.UpdatedBy(childComplexity), true

	case "VehicleSaleRecord.vehicle_model":
		if e.complexity.VehicleSaleRecord.VehicleModel == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.VehicleModel(childComplexity), true

	case "VehicleSaleRecord.vehicle_parameter":
		if e.complexity.VehicleSaleRecord.VehicleParameter == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.VehicleParameter(childComplexity), true

	case "VehicleSaleRecord.vehicle_picture":
		if e.complexity.VehicleSaleRecord.VehiclePicture == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.VehiclePicture(childComplexity), true

	case "VehicleSaleRecord.vehicle_sale_record_id":
		if e.complexity.VehicleSaleRecord.VehicleSaleRecordID == nil {
			break
		}

		return e.complexity.VehicleSaleRecord.VehicleSaleRecordID(childComplexity), true

	case "VehicleSaleRecordAggregate.aggregate":
		if e.complexity.VehicleSaleRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregate.Aggregate(childComplexity), true

	case "VehicleSaleRecordAggregateFields.avg":
		if e.complexity.VehicleSaleRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Avg(childComplexity), true

	case "VehicleSaleRecordAggregateFields.count":
		if e.complexity.VehicleSaleRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Count(childComplexity), true

	case "VehicleSaleRecordAggregateFields.max":
		if e.complexity.VehicleSaleRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Max(childComplexity), true

	case "VehicleSaleRecordAggregateFields.min":
		if e.complexity.VehicleSaleRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Min(childComplexity), true

	case "VehicleSaleRecordAggregateFields.stddev":
		if e.complexity.VehicleSaleRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Stddev(childComplexity), true

	case "VehicleSaleRecordAggregateFields.stddev_pop":
		if e.complexity.VehicleSaleRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.StddevPop(childComplexity), true

	case "VehicleSaleRecordAggregateFields.stddev_samp":
		if e.complexity.VehicleSaleRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.StddevSamp(childComplexity), true

	case "VehicleSaleRecordAggregateFields.sum":
		if e.complexity.VehicleSaleRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Sum(childComplexity), true

	case "VehicleSaleRecordAggregateFields.var_pop":
		if e.complexity.VehicleSaleRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.VarPop(childComplexity), true

	case "VehicleSaleRecordAggregateFields.var_samp":
		if e.complexity.VehicleSaleRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.VarSamp(childComplexity), true

	case "VehicleSaleRecordAggregateFields.variance":
		if e.complexity.VehicleSaleRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAggregateFields.Variance(childComplexity), true

	case "VehicleSaleRecordAvgFields.axis_type":
		if e.complexity.VehicleSaleRecordAvgFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAvgFields.AxisType(childComplexity), true

	case "VehicleSaleRecordAvgFields.id":
		if e.complexity.VehicleSaleRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordAvgFields.ID(childComplexity), true

	case "VehicleSaleRecordMaxFields.axis_type":
		if e.complexity.VehicleSaleRecordMaxFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.AxisType(childComplexity), true

	case "VehicleSaleRecordMaxFields.catalog_id":
		if e.complexity.VehicleSaleRecordMaxFields.CatalogID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.CatalogID(childComplexity), true

	case "VehicleSaleRecordMaxFields.cause":
		if e.complexity.VehicleSaleRecordMaxFields.Cause == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.Cause(childComplexity), true

	case "VehicleSaleRecordMaxFields.created_at":
		if e.complexity.VehicleSaleRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.CreatedAt(childComplexity), true

	case "VehicleSaleRecordMaxFields.created_by":
		if e.complexity.VehicleSaleRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.CreatedBy(childComplexity), true

	case "VehicleSaleRecordMaxFields.deleted_at":
		if e.complexity.VehicleSaleRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.DeletedAt(childComplexity), true

	case "VehicleSaleRecordMaxFields.deleted_by":
		if e.complexity.VehicleSaleRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.DeletedBy(childComplexity), true

	case "VehicleSaleRecordMaxFields.id":
		if e.complexity.VehicleSaleRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.ID(childComplexity), true

	case "VehicleSaleRecordMaxFields.is_deleted":
		if e.complexity.VehicleSaleRecordMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.IsDeleted(childComplexity), true

	case "VehicleSaleRecordMaxFields.is_review":
		if e.complexity.VehicleSaleRecordMaxFields.IsReview == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.IsReview(childComplexity), true

	case "VehicleSaleRecordMaxFields.other_material":
		if e.complexity.VehicleSaleRecordMaxFields.OtherMaterial == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.OtherMaterial(childComplexity), true

	case "VehicleSaleRecordMaxFields.reference_price":
		if e.complexity.VehicleSaleRecordMaxFields.ReferencePrice == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.ReferencePrice(childComplexity), true

	case "VehicleSaleRecordMaxFields.registration_time":
		if e.complexity.VehicleSaleRecordMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.RegistrationTime(childComplexity), true

	case "VehicleSaleRecordMaxFields.registration_user":
		if e.complexity.VehicleSaleRecordMaxFields.RegistrationUser == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.RegistrationUser(childComplexity), true

	case "VehicleSaleRecordMaxFields.remarks":
		if e.complexity.VehicleSaleRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.Remarks(childComplexity), true

	case "VehicleSaleRecordMaxFields.seller":
		if e.complexity.VehicleSaleRecordMaxFields.Seller == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.Seller(childComplexity), true

	case "VehicleSaleRecordMaxFields.transport_volume":
		if e.complexity.VehicleSaleRecordMaxFields.TransportVolume == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.TransportVolume(childComplexity), true

	case "VehicleSaleRecordMaxFields.updated_at":
		if e.complexity.VehicleSaleRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.UpdatedAt(childComplexity), true

	case "VehicleSaleRecordMaxFields.updated_by":
		if e.complexity.VehicleSaleRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.UpdatedBy(childComplexity), true

	case "VehicleSaleRecordMaxFields.vehicle_model":
		if e.complexity.VehicleSaleRecordMaxFields.VehicleModel == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.VehicleModel(childComplexity), true

	case "VehicleSaleRecordMaxFields.vehicle_parameter":
		if e.complexity.VehicleSaleRecordMaxFields.VehicleParameter == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.VehicleParameter(childComplexity), true

	case "VehicleSaleRecordMaxFields.vehicle_picture":
		if e.complexity.VehicleSaleRecordMaxFields.VehiclePicture == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.VehiclePicture(childComplexity), true

	case "VehicleSaleRecordMaxFields.vehicle_sale_record_id":
		if e.complexity.VehicleSaleRecordMaxFields.VehicleSaleRecordID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMaxFields.VehicleSaleRecordID(childComplexity), true

	case "VehicleSaleRecordMinFields.axis_type":
		if e.complexity.VehicleSaleRecordMinFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.AxisType(childComplexity), true

	case "VehicleSaleRecordMinFields.catalog_id":
		if e.complexity.VehicleSaleRecordMinFields.CatalogID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.CatalogID(childComplexity), true

	case "VehicleSaleRecordMinFields.cause":
		if e.complexity.VehicleSaleRecordMinFields.Cause == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.Cause(childComplexity), true

	case "VehicleSaleRecordMinFields.created_at":
		if e.complexity.VehicleSaleRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.CreatedAt(childComplexity), true

	case "VehicleSaleRecordMinFields.created_by":
		if e.complexity.VehicleSaleRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.CreatedBy(childComplexity), true

	case "VehicleSaleRecordMinFields.deleted_at":
		if e.complexity.VehicleSaleRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.DeletedAt(childComplexity), true

	case "VehicleSaleRecordMinFields.deleted_by":
		if e.complexity.VehicleSaleRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.DeletedBy(childComplexity), true

	case "VehicleSaleRecordMinFields.id":
		if e.complexity.VehicleSaleRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.ID(childComplexity), true

	case "VehicleSaleRecordMinFields.is_deleted":
		if e.complexity.VehicleSaleRecordMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.IsDeleted(childComplexity), true

	case "VehicleSaleRecordMinFields.is_review":
		if e.complexity.VehicleSaleRecordMinFields.IsReview == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.IsReview(childComplexity), true

	case "VehicleSaleRecordMinFields.other_material":
		if e.complexity.VehicleSaleRecordMinFields.OtherMaterial == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.OtherMaterial(childComplexity), true

	case "VehicleSaleRecordMinFields.reference_price":
		if e.complexity.VehicleSaleRecordMinFields.ReferencePrice == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.ReferencePrice(childComplexity), true

	case "VehicleSaleRecordMinFields.registration_time":
		if e.complexity.VehicleSaleRecordMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.RegistrationTime(childComplexity), true

	case "VehicleSaleRecordMinFields.registration_user":
		if e.complexity.VehicleSaleRecordMinFields.RegistrationUser == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.RegistrationUser(childComplexity), true

	case "VehicleSaleRecordMinFields.remarks":
		if e.complexity.VehicleSaleRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.Remarks(childComplexity), true

	case "VehicleSaleRecordMinFields.seller":
		if e.complexity.VehicleSaleRecordMinFields.Seller == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.Seller(childComplexity), true

	case "VehicleSaleRecordMinFields.transport_volume":
		if e.complexity.VehicleSaleRecordMinFields.TransportVolume == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.TransportVolume(childComplexity), true

	case "VehicleSaleRecordMinFields.updated_at":
		if e.complexity.VehicleSaleRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.UpdatedAt(childComplexity), true

	case "VehicleSaleRecordMinFields.updated_by":
		if e.complexity.VehicleSaleRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.UpdatedBy(childComplexity), true

	case "VehicleSaleRecordMinFields.vehicle_model":
		if e.complexity.VehicleSaleRecordMinFields.VehicleModel == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.VehicleModel(childComplexity), true

	case "VehicleSaleRecordMinFields.vehicle_parameter":
		if e.complexity.VehicleSaleRecordMinFields.VehicleParameter == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.VehicleParameter(childComplexity), true

	case "VehicleSaleRecordMinFields.vehicle_picture":
		if e.complexity.VehicleSaleRecordMinFields.VehiclePicture == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.VehiclePicture(childComplexity), true

	case "VehicleSaleRecordMinFields.vehicle_sale_record_id":
		if e.complexity.VehicleSaleRecordMinFields.VehicleSaleRecordID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMinFields.VehicleSaleRecordID(childComplexity), true

	case "VehicleSaleRecordMutationResponse.affected_rows":
		if e.complexity.VehicleSaleRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMutationResponse.AffectedRows(childComplexity), true

	case "VehicleSaleRecordMutationResponse.returning":
		if e.complexity.VehicleSaleRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleSaleRecordMutationResponse.Returning(childComplexity), true

	case "VehicleSaleRecordStddevFields.axis_type":
		if e.complexity.VehicleSaleRecordStddevFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordStddevFields.AxisType(childComplexity), true

	case "VehicleSaleRecordStddevFields.id":
		if e.complexity.VehicleSaleRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordStddevFields.ID(childComplexity), true

	case "VehicleSaleRecordStddevPopFields.axis_type":
		if e.complexity.VehicleSaleRecordStddevPopFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordStddevPopFields.AxisType(childComplexity), true

	case "VehicleSaleRecordStddevPopFields.id":
		if e.complexity.VehicleSaleRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordStddevPopFields.ID(childComplexity), true

	case "VehicleSaleRecordStddevSampFields.axis_type":
		if e.complexity.VehicleSaleRecordStddevSampFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordStddevSampFields.AxisType(childComplexity), true

	case "VehicleSaleRecordStddevSampFields.id":
		if e.complexity.VehicleSaleRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordStddevSampFields.ID(childComplexity), true

	case "VehicleSaleRecordSumFields.axis_type":
		if e.complexity.VehicleSaleRecordSumFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordSumFields.AxisType(childComplexity), true

	case "VehicleSaleRecordSumFields.id":
		if e.complexity.VehicleSaleRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordSumFields.ID(childComplexity), true

	case "VehicleSaleRecordVarPopFields.axis_type":
		if e.complexity.VehicleSaleRecordVarPopFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordVarPopFields.AxisType(childComplexity), true

	case "VehicleSaleRecordVarPopFields.id":
		if e.complexity.VehicleSaleRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordVarPopFields.ID(childComplexity), true

	case "VehicleSaleRecordVarSampFields.axis_type":
		if e.complexity.VehicleSaleRecordVarSampFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordVarSampFields.AxisType(childComplexity), true

	case "VehicleSaleRecordVarSampFields.id":
		if e.complexity.VehicleSaleRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordVarSampFields.ID(childComplexity), true

	case "VehicleSaleRecordVarianceFields.axis_type":
		if e.complexity.VehicleSaleRecordVarianceFields.AxisType == nil {
			break
		}

		return e.complexity.VehicleSaleRecordVarianceFields.AxisType(childComplexity), true

	case "VehicleSaleRecordVarianceFields.id":
		if e.complexity.VehicleSaleRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleSaleRecordVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_purchase_intention.graphqls", Input: `"""
渣土车购车意向
"""
type MuckTruckPurchaseIntention {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	muck_truck_purchase_intention_id: String!
	"""
	 供应商                                          ( enterprise_info表的enterprise_id )
	"""
	supplier: String
	"""
	 购车用户姓名                                    
	"""
	customer_name: String
	"""
	 购车用户电话                                    
	"""
	customer_phone: String
	"""
	 所有人企业                                      ( enterprise_info表的enterprise_id )
	"""
	owner_enterprise: String
	"""
	 所有人所在省                                    ( 省份表province_id                )
	"""
	province_id: String
	"""
	 所有人所在市                                    ( 城市表city_id                    )
	"""
	city_id: String
	"""
	 所有人所在县                                    ( 区域表district_id                )
	"""
	district_id: String
	"""
	 运力申请                                        
	"""
	capacigy_application: String
	"""
	 品牌型号                                        
	"""
	brand_model: String
	"""
	 购车数量                                        
	"""
	vehicle_purchase: Int
	"""
	 编码                                            
	"""
	code: String
	"""
	 登记日期                                        
	"""
	registration_time: Timestamptz
	"""
	 登记用户                                        ( system_user表的user_id           )
	"""
	registration_user: String
	"""
	 审核                                            
	"""
	review: String
	"""
	 备注                                            
	"""
	remarks: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by: String
}
"""
aggregated selection of "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionAggregate {
	aggregate: MuckTruckPurchaseIntentionAggregateFields
}
"""
aggregate fields of "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionAggregateFields {
	avg: MuckTruckPurchaseIntentionAvgFields
	count: Int
	max: MuckTruckPurchaseIntentionMaxFields
	min: MuckTruckPurchaseIntentionMinFields
	stddev: MuckTruckPurchaseIntentionStddevFields
	stddev_pop: MuckTruckPurchaseIntentionStddevPopFields
	stddev_samp: MuckTruckPurchaseIntentionStddevSampFields
	sum: MuckTruckPurchaseIntentionSumFields
	var_pop: MuckTruckPurchaseIntentionVarPopFields
	var_samp: MuckTruckPurchaseIntentionVarSampFields
	variance: MuckTruckPurchaseIntentionVarianceFields
}
"""
aggregate avg on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionAvgFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate max on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionMaxFields {
	id: Bigint
	muck_truck_purchase_intention_id: String
	supplier: String
	customer_name: String
	customer_phone: String
	owner_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	capacigy_application: String
	brand_model: String
	vehicle_purchase: Int
	code: String
	registration_time: Timestamptz
	registration_user: String
	review: String
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionMinFields {
	id: Bigint
	muck_truck_purchase_intention_id: String
	supplier: String
	customer_name: String
	customer_phone: String
	owner_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	capacigy_application: String
	brand_model: String
	vehicle_purchase: Int
	code: String
	registration_time: Timestamptz
	registration_user: String
	review: String
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionStddevFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate stddev_pop on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionStddevPopFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate stddev_samp on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionStddevSampFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate sum on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionSumFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate var_pop on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionVarPopFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate var_samp on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionVarSampFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
aggregate variance on columns of table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionVarianceFields {
	id: Bigint
	vehicle_purchase: Int
}
"""
response of any mutation on the table "muck_truck_purchase_intention"
"""
type MuckTruckPurchaseIntentionMutationResponse {
	affected_rows: Int!
	returning: [MuckTruckPurchaseIntention!]!
}
"""
ordering options when selecting data from "muck_truck_purchase_intention"
"""
input MuckTruckPurchaseIntentionOrderBy {
	id: OrderBy
	muck_truck_purchase_intention_id: OrderBy
	supplier: OrderBy
	customer_name: OrderBy
	customer_phone: OrderBy
	owner_enterprise: OrderBy
	province_id: OrderBy
	city_id: OrderBy
	district_id: OrderBy
	capacigy_application: OrderBy
	brand_model: OrderBy
	vehicle_purchase: OrderBy
	code: OrderBy
	registration_time: OrderBy
	registration_user: OrderBy
	review: OrderBy
	remarks: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'muck_truck_purchase_intention'.
"""
input MuckTruckPurchaseIntentionBoolExp {
	_and: [MuckTruckPurchaseIntentionBoolExp]
	_not: MuckTruckPurchaseIntentionBoolExp
	_or: [MuckTruckPurchaseIntentionBoolExp]
	id: BigintComparisonExp
	muck_truck_purchase_intention_id: StringComparisonExp
	supplier: StringComparisonExp
	customer_name: StringComparisonExp
	customer_phone: StringComparisonExp
	owner_enterprise: StringComparisonExp
	province_id: StringComparisonExp
	city_id: StringComparisonExp
	district_id: StringComparisonExp
	capacigy_application: StringComparisonExp
	brand_model: StringComparisonExp
	vehicle_purchase: IntComparisonExp
	code: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	registration_user: StringComparisonExp
	review: StringComparisonExp
	remarks: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "muck_truck_purchase_intention"
"""
input MuckTruckPurchaseIntentionInsertInput {
	muck_truck_purchase_intention_id: String!
	supplier: String
	customer_name: String
	customer_phone: String
	owner_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	capacigy_application: String
	brand_model: String
	vehicle_purchase: Int
	code: String
	registration_time: Timestamptz
	registration_user: String
	review: String
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "muck_truck_purchase_intention"
"""
input MuckTruckPurchaseIntentionIncInput {
	id: Bigint
	vehicle_purchase: Int
}
"""
input type for updating data in table "muck_truck_purchase_intention"
"""
input MuckTruckPurchaseIntentionSetInput {
	id: Bigint
	muck_truck_purchase_intention_id: String
	supplier: String
	customer_name: String
	customer_phone: String
	owner_enterprise: String
	province_id: String
	city_id: String
	district_id: String
	capacigy_application: String
	brand_model: String
	vehicle_purchase: Int
	code: String
	registration_time: Timestamptz
	registration_user: String
	review: String
	remarks: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum MuckTruckPurchaseIntentionSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	muck_truck_purchase_intention_id
	"""
	 供应商                                          ( enterprise_info表的enterprise_id )
	"""
	supplier
	"""
	 购车用户姓名                                    
	"""
	customer_name
	"""
	 购车用户电话                                    
	"""
	customer_phone
	"""
	 所有人企业                                      ( enterprise_info表的enterprise_id )
	"""
	owner_enterprise
	"""
	 所有人所在省                                    ( 省份表province_id                )
	"""
	province_id
	"""
	 所有人所在市                                    ( 城市表city_id                    )
	"""
	city_id
	"""
	 所有人所在县                                    ( 区域表district_id                )
	"""
	district_id
	"""
	 运力申请                                        
	"""
	capacigy_application
	"""
	 品牌型号                                        
	"""
	brand_model
	"""
	 购车数量                                        
	"""
	vehicle_purchase
	"""
	 编码                                            
	"""
	code
	"""
	 登记日期                                        
	"""
	registration_time
	"""
	 登记用户                                        ( system_user表的user_id           )
	"""
	registration_user
	"""
	 审核                                            
	"""
	review
	"""
	 备注                                            
	"""
	remarks
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	muck_truck_purchase_intention(distinct_on: [MuckTruckPurchaseIntentionSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckPurchaseIntentionOrderBy!], where: MuckTruckPurchaseIntentionBoolExp): [MuckTruckPurchaseIntention!]!
	"""
	聚合查询
	"""
	muck_truck_purchase_intention_aggregate(distinct_on: [MuckTruckPurchaseIntentionSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckPurchaseIntentionOrderBy!], where: MuckTruckPurchaseIntentionBoolExp): MuckTruckPurchaseIntentionAggregate!
	"""
	主键查询
	"""
	muck_truck_purchase_intention_by_pk(id: Bigint!): MuckTruckPurchaseIntention
	"""
	联合主键查询
	"""
	muck_truck_purchase_intention_by_union_pk(muck_truck_purchase_intention_id: String!): MuckTruckPurchaseIntention
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_muck_truck_purchase_intention(where: MuckTruckPurchaseIntentionBoolExp!): MuckTruckPurchaseIntentionMutationResponse
	"""
	根据主键删除记录
	"""
	delete_muck_truck_purchase_intention_by_pk(id: Bigint!): MuckTruckPurchaseIntention
	"""
	插入
	"""
	insert_muck_truck_purchase_intention(objects: [MuckTruckPurchaseIntentionInsertInput!]!): MuckTruckPurchaseIntentionMutationResponse
	"""
	插入一条记录
	"""
	insert_muck_truck_purchase_intention_one(objects: MuckTruckPurchaseIntentionInsertInput!): MuckTruckPurchaseIntention
	"""
	更新
	"""
	update_muck_truck_purchase_intention(_inc: MuckTruckPurchaseIntentionIncInput, _set: MuckTruckPurchaseIntentionSetInput, where: MuckTruckPurchaseIntentionBoolExp!): MuckTruckPurchaseIntentionMutationResponse
	"""
	根据主键更新
	"""
	update_muck_truck_purchase_intention_by_pk(_inc: MuckTruckPurchaseIntentionIncInput, _set: MuckTruckPurchaseIntentionSetInput, id: Bigint!): MuckTruckPurchaseIntention
	"""
	根据联合主键更新
	"""
	update_muck_truck_purchase_intention_by_union_pk(_inc: MuckTruckPurchaseIntentionIncInput, _set: MuckTruckPurchaseIntentionSetInput, muck_truck_purchase_intention_id: String!): MuckTruckPurchaseIntention
	"""
	根据联合主键删除记录
	"""
	delete_muck_truck_purchase_intention_by_union_pk(muck_truck_purchase_intention_id: String!): MuckTruckPurchaseIntention
}
`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_sale_order.graphqls", Input: `"""
新型渣土车销售订单
"""
type MuckTruckSaleOrder {
	"""
	 按指定方法生成                                  ( 主键                                     )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                 )
	"""
	muck_truck_sale_order_id: String!
	"""
	 顾客企业id                                      
	"""
	customer_name: String
	"""
	 购车企业或个人姓名                              ( enterprise_info表的enterprise_id     )
	"""
	customer_id: String
	"""
	 身份证号                                        
	"""
	id_card_num: String
	"""
	 联系电话                                        
	"""
	contact_phone: String
	"""
	 告知书                                          
	"""
	notification: String
	"""
	 汽车销售合同(销售合同照片地址)                  
	"""
	vehicle_sale_contract: String
	"""
	 订金合同(订金合同照片地址)                      
	"""
	vehicle_deposit_contract: String
	"""
	 承诺书                                          
	"""
	commitment: String
	"""
	 订车日期                                        
	"""
	book_date: Timestamptz
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 所属单位                                        
	"""
	belonging_enterprise: String
	"""
	 身份证(身份证照片路径)                          
	"""
	id_card_picture: String
	"""
	 进度                                            
	"""
	progress: Numeric
	"""
	 汽车型号                                        ( vehicle_sale_record 汽车销售备案的id )
	"""
	vehicle_sale_record_id: String
	"""
	 订购车辆数                                      
	"""
	book_vehicle_number: Int
	"""
	 整车长度                                        
	"""
	vehicle_length: Numeric
	"""
	 整车宽度                                        
	"""
	vehicle_width: Numeric
	"""
	 整车高度                                        
	"""
	vehicle_height: Numeric
	"""
	 自卸车长度                                      
	"""
	tipper_length: Numeric
	"""
	 自卸车宽度                                      
	"""
	tipper_width: Numeric
	"""
	 自卸车高度                                      
	"""
	tipper_height: Numeric
	"""
	 罐车标注容积                                    
	"""
	tank_truck_marked_volume: Numeric
	"""
	 罐车实际搅动容积                                
	"""
	tank_truck_actual_volume: Numeric
	"""
	 车厢密闭装置                                    
	"""
	carriage_sealing_device: String
	"""
	 U型货箱                                         
	"""
	u_shaped_cargo_box: String
	"""
	 是否其他汽车型号                                
	"""
	is_other_vehicle_model: Boolean
	"""
	 是否完成                                        
	"""
	is_completed: Boolean
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id               )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id               )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id               )
	"""
	deleted_by: String
}
"""
aggregated selection of "muck_truck_sale_order"
"""
type MuckTruckSaleOrderAggregate {
	aggregate: MuckTruckSaleOrderAggregateFields
}
"""
aggregate fields of "muck_truck_sale_order"
"""
type MuckTruckSaleOrderAggregateFields {
	avg: MuckTruckSaleOrderAvgFields
	count: Int
	max: MuckTruckSaleOrderMaxFields
	min: MuckTruckSaleOrderMinFields
	stddev: MuckTruckSaleOrderStddevFields
	stddev_pop: MuckTruckSaleOrderStddevPopFields
	stddev_samp: MuckTruckSaleOrderStddevSampFields
	sum: MuckTruckSaleOrderSumFields
	var_pop: MuckTruckSaleOrderVarPopFields
	var_samp: MuckTruckSaleOrderVarSampFields
	variance: MuckTruckSaleOrderVarianceFields
}
"""
aggregate avg on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderAvgFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate max on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderMaxFields {
	id: Bigint
	muck_truck_sale_order_id: String
	customer_name: String
	customer_id: String
	id_card_num: String
	contact_phone: String
	notification: String
	vehicle_sale_contract: String
	vehicle_deposit_contract: String
	commitment: String
	book_date: Timestamptz
	registration_time: Timestamptz
	belonging_enterprise: String
	id_card_picture: String
	progress: Numeric
	vehicle_sale_record_id: String
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
	carriage_sealing_device: String
	u_shaped_cargo_box: String
	is_other_vehicle_model: Boolean
	is_completed: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderMinFields {
	id: Bigint
	muck_truck_sale_order_id: String
	customer_name: String
	customer_id: String
	id_card_num: String
	contact_phone: String
	notification: String
	vehicle_sale_contract: String
	vehicle_deposit_contract: String
	commitment: String
	book_date: Timestamptz
	registration_time: Timestamptz
	belonging_enterprise: String
	id_card_picture: String
	progress: Numeric
	vehicle_sale_record_id: String
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
	carriage_sealing_device: String
	u_shaped_cargo_box: String
	is_other_vehicle_model: Boolean
	is_completed: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderStddevFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate stddev_pop on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderStddevPopFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate stddev_samp on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderStddevSampFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate sum on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderSumFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate var_pop on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderVarPopFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate var_samp on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderVarSampFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
aggregate variance on columns of table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderVarianceFields {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
response of any mutation on the table "muck_truck_sale_order"
"""
type MuckTruckSaleOrderMutationResponse {
	affected_rows: Int!
	returning: [MuckTruckSaleOrder!]!
}
"""
ordering options when selecting data from "muck_truck_sale_order"
"""
input MuckTruckSaleOrderOrderBy {
	id: OrderBy
	muck_truck_sale_order_id: OrderBy
	customer_name: OrderBy
	customer_id: OrderBy
	id_card_num: OrderBy
	contact_phone: OrderBy
	notification: OrderBy
	vehicle_sale_contract: OrderBy
	vehicle_deposit_contract: OrderBy
	commitment: OrderBy
	book_date: OrderBy
	registration_time: OrderBy
	belonging_enterprise: OrderBy
	id_card_picture: OrderBy
	progress: OrderBy
	vehicle_sale_record_id: OrderBy
	book_vehicle_number: OrderBy
	vehicle_length: OrderBy
	vehicle_width: OrderBy
	vehicle_height: OrderBy
	tipper_length: OrderBy
	tipper_width: OrderBy
	tipper_height: OrderBy
	tank_truck_marked_volume: OrderBy
	tank_truck_actual_volume: OrderBy
	carriage_sealing_device: OrderBy
	u_shaped_cargo_box: OrderBy
	is_other_vehicle_model: OrderBy
	is_completed: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'muck_truck_sale_order'.
"""
input MuckTruckSaleOrderBoolExp {
	_and: [MuckTruckSaleOrderBoolExp]
	_not: MuckTruckSaleOrderBoolExp
	_or: [MuckTruckSaleOrderBoolExp]
	id: BigintComparisonExp
	muck_truck_sale_order_id: StringComparisonExp
	customer_name: StringComparisonExp
	customer_id: StringComparisonExp
	id_card_num: StringComparisonExp
	contact_phone: StringComparisonExp
	notification: StringComparisonExp
	vehicle_sale_contract: StringComparisonExp
	vehicle_deposit_contract: StringComparisonExp
	commitment: StringComparisonExp
	book_date: TimestamptzComparisonExp
	registration_time: TimestamptzComparisonExp
	belonging_enterprise: StringComparisonExp
	id_card_picture: StringComparisonExp
	progress: NumericComparisonExp
	vehicle_sale_record_id: StringComparisonExp
	book_vehicle_number: IntComparisonExp
	vehicle_length: NumericComparisonExp
	vehicle_width: NumericComparisonExp
	vehicle_height: NumericComparisonExp
	tipper_length: NumericComparisonExp
	tipper_width: NumericComparisonExp
	tipper_height: NumericComparisonExp
	tank_truck_marked_volume: NumericComparisonExp
	tank_truck_actual_volume: NumericComparisonExp
	carriage_sealing_device: StringComparisonExp
	u_shaped_cargo_box: StringComparisonExp
	is_other_vehicle_model: BooleanComparisonExp
	is_completed: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "muck_truck_sale_order"
"""
input MuckTruckSaleOrderInsertInput {
	muck_truck_sale_order_id: String!
	customer_name: String
	customer_id: String
	id_card_num: String
	contact_phone: String
	notification: String
	vehicle_sale_contract: String
	vehicle_deposit_contract: String
	commitment: String
	book_date: Timestamptz
	registration_time: Timestamptz
	belonging_enterprise: String
	id_card_picture: String
	progress: Numeric
	vehicle_sale_record_id: String
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
	carriage_sealing_device: String
	u_shaped_cargo_box: String
	is_other_vehicle_model: Boolean
	is_completed: Boolean
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "muck_truck_sale_order"
"""
input MuckTruckSaleOrderIncInput {
	id: Bigint
	progress: Numeric
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
}
"""
input type for updating data in table "muck_truck_sale_order"
"""
input MuckTruckSaleOrderSetInput {
	id: Bigint
	muck_truck_sale_order_id: String
	customer_name: String
	customer_id: String
	id_card_num: String
	contact_phone: String
	notification: String
	vehicle_sale_contract: String
	vehicle_deposit_contract: String
	commitment: String
	book_date: Timestamptz
	registration_time: Timestamptz
	belonging_enterprise: String
	id_card_picture: String
	progress: Numeric
	vehicle_sale_record_id: String
	book_vehicle_number: Int
	vehicle_length: Numeric
	vehicle_width: Numeric
	vehicle_height: Numeric
	tipper_length: Numeric
	tipper_width: Numeric
	tipper_height: Numeric
	tank_truck_marked_volume: Numeric
	tank_truck_actual_volume: Numeric
	carriage_sealing_device: String
	u_shaped_cargo_box: String
	is_other_vehicle_model: Boolean
	is_completed: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum MuckTruckSaleOrderSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                     )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                 )
	"""
	muck_truck_sale_order_id
	"""
	 顾客企业id                                      
	"""
	customer_name
	"""
	 购车企业或个人姓名                              ( enterprise_info表的enterprise_id     )
	"""
	customer_id
	"""
	 身份证号                                        
	"""
	id_card_num
	"""
	 联系电话                                        
	"""
	contact_phone
	"""
	 告知书                                          
	"""
	notification
	"""
	 汽车销售合同(销售合同照片地址)                  
	"""
	vehicle_sale_contract
	"""
	 订金合同(订金合同照片地址)                      
	"""
	vehicle_deposit_contract
	"""
	 承诺书                                          
	"""
	commitment
	"""
	 订车日期                                        
	"""
	book_date
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 所属单位                                        
	"""
	belonging_enterprise
	"""
	 身份证(身份证照片路径)                          
	"""
	id_card_picture
	"""
	 进度                                            
	"""
	progress
	"""
	 汽车型号                                        ( vehicle_sale_record 汽车销售备案的id )
	"""
	vehicle_sale_record_id
	"""
	 订购车辆数                                      
	"""
	book_vehicle_number
	"""
	 整车长度                                        
	"""
	vehicle_length
	"""
	 整车宽度                                        
	"""
	vehicle_width
	"""
	 整车高度                                        
	"""
	vehicle_height
	"""
	 自卸车长度                                      
	"""
	tipper_length
	"""
	 自卸车宽度                                      
	"""
	tipper_width
	"""
	 自卸车高度                                      
	"""
	tipper_height
	"""
	 罐车标注容积                                    
	"""
	tank_truck_marked_volume
	"""
	 罐车实际搅动容积                                
	"""
	tank_truck_actual_volume
	"""
	 车厢密闭装置                                    
	"""
	carriage_sealing_device
	"""
	 U型货箱                                         
	"""
	u_shaped_cargo_box
	"""
	 是否其他汽车型号                                
	"""
	is_other_vehicle_model
	"""
	 是否完成                                        
	"""
	is_completed
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id               )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id               )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id               )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	muck_truck_sale_order(distinct_on: [MuckTruckSaleOrderSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckSaleOrderOrderBy!], where: MuckTruckSaleOrderBoolExp): [MuckTruckSaleOrder!]!
	"""
	聚合查询
	"""
	muck_truck_sale_order_aggregate(distinct_on: [MuckTruckSaleOrderSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckSaleOrderOrderBy!], where: MuckTruckSaleOrderBoolExp): MuckTruckSaleOrderAggregate!
	"""
	主键查询
	"""
	muck_truck_sale_order_by_pk(id: Bigint!): MuckTruckSaleOrder
	"""
	联合主键查询
	"""
	muck_truck_sale_order_by_union_pk(muck_truck_sale_order_id: String!): MuckTruckSaleOrder
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_muck_truck_sale_order(where: MuckTruckSaleOrderBoolExp!): MuckTruckSaleOrderMutationResponse
	"""
	根据主键删除记录
	"""
	delete_muck_truck_sale_order_by_pk(id: Bigint!): MuckTruckSaleOrder
	"""
	插入
	"""
	insert_muck_truck_sale_order(objects: [MuckTruckSaleOrderInsertInput!]!): MuckTruckSaleOrderMutationResponse
	"""
	插入一条记录
	"""
	insert_muck_truck_sale_order_one(objects: MuckTruckSaleOrderInsertInput!): MuckTruckSaleOrder
	"""
	更新
	"""
	update_muck_truck_sale_order(_inc: MuckTruckSaleOrderIncInput, _set: MuckTruckSaleOrderSetInput, where: MuckTruckSaleOrderBoolExp!): MuckTruckSaleOrderMutationResponse
	"""
	根据主键更新
	"""
	update_muck_truck_sale_order_by_pk(_inc: MuckTruckSaleOrderIncInput, _set: MuckTruckSaleOrderSetInput, id: Bigint!): MuckTruckSaleOrder
	"""
	根据联合主键更新
	"""
	update_muck_truck_sale_order_by_union_pk(_inc: MuckTruckSaleOrderIncInput, _set: MuckTruckSaleOrderSetInput, muck_truck_sale_order_id: String!): MuckTruckSaleOrder
	"""
	根据联合主键删除记录
	"""
	delete_muck_truck_sale_order_by_union_pk(muck_truck_sale_order_id: String!): MuckTruckSaleOrder
}
`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_sale_order_detail.graphqls", Input: `"""
新型渣土车销售订单明细
"""
type MuckTruckSaleOrderDetail {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	muck_truck_sale_order_detail_id: String!
	"""
	 订单号                                          ( muck_truck_sale_order 新型渣土车销售订单的muck_truck_sale_order_id )
	"""
	order_id: String
	"""
	 车架号(后6位)                                   ( 车辆识别代号vin,如D02133                                     )
	"""
	vehicle_identification_number: String
	"""
	 合格证                                          
	"""
	certificate: String
	"""
	 终端证明                                        
	"""
	terminal_proof: String
	"""
	 行驶证(照片)                                    
	"""
	driver_license_pic: String
	"""
	 车牌号码                                        
	"""
	license_plate_number: String
	"""
	 车牌颜色                                        ( 车牌颜色字典                                             )
	"""
	license_plate_color: Int
	"""
	 号牌种类                                        ( 号牌种类字典                                             )
	"""
	license_plate_type: Int
	"""
	 抵达泉州日期                                    
	"""
	arrive_qz_date: Timestamptz
	"""
	 初次登记日期                                    
	"""
	first_registration_date: Timestamptz
	"""
	 登记时间                                        
	"""
	registration_date: Timestamptz
	"""
	 步骤(销售订单登记进度（2.到车登记 3.上牌登记）) 
	"""
	step: Int
	"""
	 车辆照片                                        
	"""
	vehicle_photo: String
	"""
	 供应商销售预编号                                
	"""
	seller_preview_number: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailAggregate {
	aggregate: MuckTruckSaleOrderDetailAggregateFields
}
"""
aggregate fields of "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailAggregateFields {
	avg: MuckTruckSaleOrderDetailAvgFields
	count: Int
	max: MuckTruckSaleOrderDetailMaxFields
	min: MuckTruckSaleOrderDetailMinFields
	stddev: MuckTruckSaleOrderDetailStddevFields
	stddev_pop: MuckTruckSaleOrderDetailStddevPopFields
	stddev_samp: MuckTruckSaleOrderDetailStddevSampFields
	sum: MuckTruckSaleOrderDetailSumFields
	var_pop: MuckTruckSaleOrderDetailVarPopFields
	var_samp: MuckTruckSaleOrderDetailVarSampFields
	variance: MuckTruckSaleOrderDetailVarianceFields
}
"""
aggregate avg on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailAvgFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate max on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailMaxFields {
	id: Bigint
	muck_truck_sale_order_detail_id: String
	order_id: String
	vehicle_identification_number: String
	certificate: String
	terminal_proof: String
	driver_license_pic: String
	license_plate_number: String
	license_plate_color: Int
	license_plate_type: Int
	arrive_qz_date: Timestamptz
	first_registration_date: Timestamptz
	registration_date: Timestamptz
	step: Int
	vehicle_photo: String
	seller_preview_number: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailMinFields {
	id: Bigint
	muck_truck_sale_order_detail_id: String
	order_id: String
	vehicle_identification_number: String
	certificate: String
	terminal_proof: String
	driver_license_pic: String
	license_plate_number: String
	license_plate_color: Int
	license_plate_type: Int
	arrive_qz_date: Timestamptz
	first_registration_date: Timestamptz
	registration_date: Timestamptz
	step: Int
	vehicle_photo: String
	seller_preview_number: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailStddevFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate stddev_pop on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailStddevPopFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate stddev_samp on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailStddevSampFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate sum on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailSumFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate var_pop on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailVarPopFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate var_samp on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailVarSampFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
aggregate variance on columns of table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailVarianceFields {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
response of any mutation on the table "muck_truck_sale_order_detail"
"""
type MuckTruckSaleOrderDetailMutationResponse {
	affected_rows: Int!
	returning: [MuckTruckSaleOrderDetail!]!
}
"""
ordering options when selecting data from "muck_truck_sale_order_detail"
"""
input MuckTruckSaleOrderDetailOrderBy {
	id: OrderBy
	muck_truck_sale_order_detail_id: OrderBy
	order_id: OrderBy
	vehicle_identification_number: OrderBy
	certificate: OrderBy
	terminal_proof: OrderBy
	driver_license_pic: OrderBy
	license_plate_number: OrderBy
	license_plate_color: OrderBy
	license_plate_type: OrderBy
	arrive_qz_date: OrderBy
	first_registration_date: OrderBy
	registration_date: OrderBy
	step: OrderBy
	vehicle_photo: OrderBy
	seller_preview_number: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'muck_truck_sale_order_detail'.
"""
input MuckTruckSaleOrderDetailBoolExp {
	_and: [MuckTruckSaleOrderDetailBoolExp]
	_not: MuckTruckSaleOrderDetailBoolExp
	_or: [MuckTruckSaleOrderDetailBoolExp]
	id: BigintComparisonExp
	muck_truck_sale_order_detail_id: StringComparisonExp
	order_id: StringComparisonExp
	vehicle_identification_number: StringComparisonExp
	certificate: StringComparisonExp
	terminal_proof: StringComparisonExp
	driver_license_pic: StringComparisonExp
	license_plate_number: StringComparisonExp
	license_plate_color: IntComparisonExp
	license_plate_type: IntComparisonExp
	arrive_qz_date: TimestamptzComparisonExp
	first_registration_date: TimestamptzComparisonExp
	registration_date: TimestamptzComparisonExp
	step: IntComparisonExp
	vehicle_photo: StringComparisonExp
	seller_preview_number: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "muck_truck_sale_order_detail"
"""
input MuckTruckSaleOrderDetailInsertInput {
	muck_truck_sale_order_detail_id: String!
	order_id: String
	vehicle_identification_number: String
	certificate: String
	terminal_proof: String
	driver_license_pic: String
	license_plate_number: String
	license_plate_color: Int
	license_plate_type: Int
	arrive_qz_date: Timestamptz
	first_registration_date: Timestamptz
	registration_date: Timestamptz
	step: Int
	vehicle_photo: String
	seller_preview_number: String
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "muck_truck_sale_order_detail"
"""
input MuckTruckSaleOrderDetailIncInput {
	id: Bigint
	license_plate_color: Int
	license_plate_type: Int
	step: Int
}
"""
input type for updating data in table "muck_truck_sale_order_detail"
"""
input MuckTruckSaleOrderDetailSetInput {
	id: Bigint
	muck_truck_sale_order_detail_id: String
	order_id: String
	vehicle_identification_number: String
	certificate: String
	terminal_proof: String
	driver_license_pic: String
	license_plate_number: String
	license_plate_color: Int
	license_plate_type: Int
	arrive_qz_date: Timestamptz
	first_registration_date: Timestamptz
	registration_date: Timestamptz
	step: Int
	vehicle_photo: String
	seller_preview_number: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum MuckTruckSaleOrderDetailSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	muck_truck_sale_order_detail_id
	"""
	 订单号                                          ( muck_truck_sale_order 新型渣土车销售订单的muck_truck_sale_order_id )
	"""
	order_id
	"""
	 车架号(后6位)                                   ( 车辆识别代号vin,如D02133                                     )
	"""
	vehicle_identification_number
	"""
	 合格证                                          
	"""
	certificate
	"""
	 终端证明                                        
	"""
	terminal_proof
	"""
	 行驶证(照片)                                    
	"""
	driver_license_pic
	"""
	 车牌号码                                        
	"""
	license_plate_number
	"""
	 车牌颜色                                        ( 车牌颜色字典                                             )
	"""
	license_plate_color
	"""
	 号牌种类                                        ( 号牌种类字典                                             )
	"""
	license_plate_type
	"""
	 抵达泉州日期                                    
	"""
	arrive_qz_date
	"""
	 初次登记日期                                    
	"""
	first_registration_date
	"""
	 登记时间                                        
	"""
	registration_date
	"""
	 步骤(销售订单登记进度（2.到车登记 3.上牌登记）) 
	"""
	step
	"""
	 车辆照片                                        
	"""
	vehicle_photo
	"""
	 供应商销售预编号                                
	"""
	seller_preview_number
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	muck_truck_sale_order_detail(distinct_on: [MuckTruckSaleOrderDetailSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckSaleOrderDetailOrderBy!], where: MuckTruckSaleOrderDetailBoolExp): [MuckTruckSaleOrderDetail!]!
	"""
	聚合查询
	"""
	muck_truck_sale_order_detail_aggregate(distinct_on: [MuckTruckSaleOrderDetailSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckSaleOrderDetailOrderBy!], where: MuckTruckSaleOrderDetailBoolExp): MuckTruckSaleOrderDetailAggregate!
	"""
	主键查询
	"""
	muck_truck_sale_order_detail_by_pk(id: Bigint!): MuckTruckSaleOrderDetail
	"""
	联合主键查询
	"""
	muck_truck_sale_order_detail_by_union_pk(muck_truck_sale_order_detail_id: String!): MuckTruckSaleOrderDetail
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_muck_truck_sale_order_detail(where: MuckTruckSaleOrderDetailBoolExp!): MuckTruckSaleOrderDetailMutationResponse
	"""
	根据主键删除记录
	"""
	delete_muck_truck_sale_order_detail_by_pk(id: Bigint!): MuckTruckSaleOrderDetail
	"""
	插入
	"""
	insert_muck_truck_sale_order_detail(objects: [MuckTruckSaleOrderDetailInsertInput!]!): MuckTruckSaleOrderDetailMutationResponse
	"""
	插入一条记录
	"""
	insert_muck_truck_sale_order_detail_one(objects: MuckTruckSaleOrderDetailInsertInput!): MuckTruckSaleOrderDetail
	"""
	更新
	"""
	update_muck_truck_sale_order_detail(_inc: MuckTruckSaleOrderDetailIncInput, _set: MuckTruckSaleOrderDetailSetInput, where: MuckTruckSaleOrderDetailBoolExp!): MuckTruckSaleOrderDetailMutationResponse
	"""
	根据主键更新
	"""
	update_muck_truck_sale_order_detail_by_pk(_inc: MuckTruckSaleOrderDetailIncInput, _set: MuckTruckSaleOrderDetailSetInput, id: Bigint!): MuckTruckSaleOrderDetail
	"""
	根据联合主键更新
	"""
	update_muck_truck_sale_order_detail_by_union_pk(_inc: MuckTruckSaleOrderDetailIncInput, _set: MuckTruckSaleOrderDetailSetInput, muck_truck_sale_order_detail_id: String!): MuckTruckSaleOrderDetail
	"""
	根据联合主键删除记录
	"""
	delete_muck_truck_sale_order_detail_by_union_pk(muck_truck_sale_order_detail_id: String!): MuckTruckSaleOrderDetail
}
`, BuiltIn: false},
	{Name: "graph/graphqls/new_muck_truck_info.graphqls", Input: `"""
新型渣土车信息表
"""
type NewMuckTruckInfo {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	new_muck_truck_info_id: String!
	"""
	 扣分车辆id                                      ( vehicle_info表的vehicle_id )
	"""
	vehicle_id: String
	"""
	 车牌号                                          
	"""
	license_plate_number: String
	"""
	 登记注册时间                                    
	"""
	registration_time: Timestamptz
	"""
	 排放标准                                        
	"""
	emission_standard: String
	"""
	 是否U型货箱                                     
	"""
	is_u_shaped_cargo_box: Boolean
	"""
	 长                                              
	"""
	length: String
	"""
	 宽                                              
	"""
	width: String
	"""
	 高                                              
	"""
	height: String
	"""
	 密封设备                                        
	"""
	sealing_device: String
	"""
	 顶盖高度                                        
	"""
	top_cover_height: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by: String
}
"""
aggregated selection of "new_muck_truck_info"
"""
type NewMuckTruckInfoAggregate {
	aggregate: NewMuckTruckInfoAggregateFields
}
"""
aggregate fields of "new_muck_truck_info"
"""
type NewMuckTruckInfoAggregateFields {
	avg: NewMuckTruckInfoAvgFields
	count: Int
	max: NewMuckTruckInfoMaxFields
	min: NewMuckTruckInfoMinFields
	stddev: NewMuckTruckInfoStddevFields
	stddev_pop: NewMuckTruckInfoStddevPopFields
	stddev_samp: NewMuckTruckInfoStddevSampFields
	sum: NewMuckTruckInfoSumFields
	var_pop: NewMuckTruckInfoVarPopFields
	var_samp: NewMuckTruckInfoVarSampFields
	variance: NewMuckTruckInfoVarianceFields
}
"""
aggregate avg on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoMaxFields {
	id: Bigint
	new_muck_truck_info_id: String
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	emission_standard: String
	is_u_shaped_cargo_box: Boolean
	length: String
	width: String
	height: String
	sealing_device: String
	top_cover_height: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoMinFields {
	id: Bigint
	new_muck_truck_info_id: String
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	emission_standard: String
	is_u_shaped_cargo_box: Boolean
	length: String
	width: String
	height: String
	sealing_device: String
	top_cover_height: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "new_muck_truck_info"
"""
type NewMuckTruckInfoVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "new_muck_truck_info"
"""
type NewMuckTruckInfoMutationResponse {
	affected_rows: Int!
	returning: [NewMuckTruckInfo!]!
}
"""
ordering options when selecting data from "new_muck_truck_info"
"""
input NewMuckTruckInfoOrderBy {
	id: OrderBy
	new_muck_truck_info_id: OrderBy
	vehicle_id: OrderBy
	license_plate_number: OrderBy
	registration_time: OrderBy
	emission_standard: OrderBy
	is_u_shaped_cargo_box: OrderBy
	length: OrderBy
	width: OrderBy
	height: OrderBy
	sealing_device: OrderBy
	top_cover_height: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'new_muck_truck_info'.
"""
input NewMuckTruckInfoBoolExp {
	_and: [NewMuckTruckInfoBoolExp]
	_not: NewMuckTruckInfoBoolExp
	_or: [NewMuckTruckInfoBoolExp]
	id: BigintComparisonExp
	new_muck_truck_info_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	license_plate_number: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	emission_standard: StringComparisonExp
	is_u_shaped_cargo_box: BooleanComparisonExp
	length: StringComparisonExp
	width: StringComparisonExp
	height: StringComparisonExp
	sealing_device: StringComparisonExp
	top_cover_height: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "new_muck_truck_info"
"""
input NewMuckTruckInfoInsertInput {
	new_muck_truck_info_id: String!
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	emission_standard: String
	is_u_shaped_cargo_box: Boolean
	length: String
	width: String
	height: String
	sealing_device: String
	top_cover_height: String
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "new_muck_truck_info"
"""
input NewMuckTruckInfoIncInput {
	id: Bigint
}
"""
input type for updating data in table "new_muck_truck_info"
"""
input NewMuckTruckInfoSetInput {
	id: Bigint
	new_muck_truck_info_id: String
	vehicle_id: String
	license_plate_number: String
	registration_time: Timestamptz
	emission_standard: String
	is_u_shaped_cargo_box: Boolean
	length: String
	width: String
	height: String
	sealing_device: String
	top_cover_height: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum NewMuckTruckInfoSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	new_muck_truck_info_id
	"""
	 扣分车辆id                                      ( vehicle_info表的vehicle_id )
	"""
	vehicle_id
	"""
	 车牌号                                          
	"""
	license_plate_number
	"""
	 登记注册时间                                    
	"""
	registration_time
	"""
	 排放标准                                        
	"""
	emission_standard
	"""
	 是否U型货箱                                     
	"""
	is_u_shaped_cargo_box
	"""
	 长                                              
	"""
	length
	"""
	 宽                                              
	"""
	width
	"""
	 高                                              
	"""
	height
	"""
	 密封设备                                        
	"""
	sealing_device
	"""
	 顶盖高度                                        
	"""
	top_cover_height
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	new_muck_truck_info(distinct_on: [NewMuckTruckInfoSelectColumn!], limit: Int, offset: Int, order_by: [NewMuckTruckInfoOrderBy!], where: NewMuckTruckInfoBoolExp): [NewMuckTruckInfo!]!
	"""
	聚合查询
	"""
	new_muck_truck_info_aggregate(distinct_on: [NewMuckTruckInfoSelectColumn!], limit: Int, offset: Int, order_by: [NewMuckTruckInfoOrderBy!], where: NewMuckTruckInfoBoolExp): NewMuckTruckInfoAggregate!
	"""
	主键查询
	"""
	new_muck_truck_info_by_pk(id: Bigint!): NewMuckTruckInfo
	"""
	联合主键查询
	"""
	new_muck_truck_info_by_union_pk(new_muck_truck_info_id: String!): NewMuckTruckInfo
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_new_muck_truck_info(where: NewMuckTruckInfoBoolExp!): NewMuckTruckInfoMutationResponse
	"""
	根据主键删除记录
	"""
	delete_new_muck_truck_info_by_pk(id: Bigint!): NewMuckTruckInfo
	"""
	插入
	"""
	insert_new_muck_truck_info(objects: [NewMuckTruckInfoInsertInput!]!): NewMuckTruckInfoMutationResponse
	"""
	插入一条记录
	"""
	insert_new_muck_truck_info_one(objects: NewMuckTruckInfoInsertInput!): NewMuckTruckInfo
	"""
	更新
	"""
	update_new_muck_truck_info(_inc: NewMuckTruckInfoIncInput, _set: NewMuckTruckInfoSetInput, where: NewMuckTruckInfoBoolExp!): NewMuckTruckInfoMutationResponse
	"""
	根据主键更新
	"""
	update_new_muck_truck_info_by_pk(_inc: NewMuckTruckInfoIncInput, _set: NewMuckTruckInfoSetInput, id: Bigint!): NewMuckTruckInfo
	"""
	根据联合主键更新
	"""
	update_new_muck_truck_info_by_union_pk(_inc: NewMuckTruckInfoIncInput, _set: NewMuckTruckInfoSetInput, new_muck_truck_info_id: String!): NewMuckTruckInfo
	"""
	根据联合主键删除记录
	"""
	delete_new_muck_truck_info_by_union_pk(new_muck_truck_info_id: String!): NewMuckTruckInfo
}
`, BuiltIn: false},
	{Name: "graph/graphqls/new_muck_truck_photo.graphqls", Input: `"""
新型渣土车拍照图片表
"""
type NewMuckTruckPhoto {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	new_muck_truck_photo_id: String!
	"""
	 扣分车辆id                                      ( vehicle_info表的vehicle_id )
	"""
	vehicle_id: String
	"""
	 路径                                            
	"""
	file_path: String
	"""
	 上传用户                                        ( system_user表的user_id     )
	"""
	upload_user: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by: String
}
"""
aggregated selection of "new_muck_truck_photo"
"""
type NewMuckTruckPhotoAggregate {
	aggregate: NewMuckTruckPhotoAggregateFields
}
"""
aggregate fields of "new_muck_truck_photo"
"""
type NewMuckTruckPhotoAggregateFields {
	avg: NewMuckTruckPhotoAvgFields
	count: Int
	max: NewMuckTruckPhotoMaxFields
	min: NewMuckTruckPhotoMinFields
	stddev: NewMuckTruckPhotoStddevFields
	stddev_pop: NewMuckTruckPhotoStddevPopFields
	stddev_samp: NewMuckTruckPhotoStddevSampFields
	sum: NewMuckTruckPhotoSumFields
	var_pop: NewMuckTruckPhotoVarPopFields
	var_samp: NewMuckTruckPhotoVarSampFields
	variance: NewMuckTruckPhotoVarianceFields
}
"""
aggregate avg on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoMaxFields {
	id: Bigint
	new_muck_truck_photo_id: String
	vehicle_id: String
	file_path: String
	upload_user: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoMinFields {
	id: Bigint
	new_muck_truck_photo_id: String
	vehicle_id: String
	file_path: String
	upload_user: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "new_muck_truck_photo"
"""
type NewMuckTruckPhotoMutationResponse {
	affected_rows: Int!
	returning: [NewMuckTruckPhoto!]!
}
"""
ordering options when selecting data from "new_muck_truck_photo"
"""
input NewMuckTruckPhotoOrderBy {
	id: OrderBy
	new_muck_truck_photo_id: OrderBy
	vehicle_id: OrderBy
	file_path: OrderBy
	upload_user: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'new_muck_truck_photo'.
"""
input NewMuckTruckPhotoBoolExp {
	_and: [NewMuckTruckPhotoBoolExp]
	_not: NewMuckTruckPhotoBoolExp
	_or: [NewMuckTruckPhotoBoolExp]
	id: BigintComparisonExp
	new_muck_truck_photo_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	file_path: StringComparisonExp
	upload_user: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "new_muck_truck_photo"
"""
input NewMuckTruckPhotoInsertInput {
	new_muck_truck_photo_id: String!
	vehicle_id: String
	file_path: String
	upload_user: String
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "new_muck_truck_photo"
"""
input NewMuckTruckPhotoIncInput {
	id: Bigint
}
"""
input type for updating data in table "new_muck_truck_photo"
"""
input NewMuckTruckPhotoSetInput {
	id: Bigint
	new_muck_truck_photo_id: String
	vehicle_id: String
	file_path: String
	upload_user: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum NewMuckTruckPhotoSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                           )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	new_muck_truck_photo_id
	"""
	 扣分车辆id                                      ( vehicle_info表的vehicle_id )
	"""
	vehicle_id
	"""
	 路径                                            
	"""
	file_path
	"""
	 上传用户                                        ( system_user表的user_id     )
	"""
	upload_user
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id     )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id     )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id     )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	new_muck_truck_photo(distinct_on: [NewMuckTruckPhotoSelectColumn!], limit: Int, offset: Int, order_by: [NewMuckTruckPhotoOrderBy!], where: NewMuckTruckPhotoBoolExp): [NewMuckTruckPhoto!]!
	"""
	聚合查询
	"""
	new_muck_truck_photo_aggregate(distinct_on: [NewMuckTruckPhotoSelectColumn!], limit: Int, offset: Int, order_by: [NewMuckTruckPhotoOrderBy!], where: NewMuckTruckPhotoBoolExp): NewMuckTruckPhotoAggregate!
	"""
	主键查询
	"""
	new_muck_truck_photo_by_pk(id: Bigint!): NewMuckTruckPhoto
	"""
	联合主键查询
	"""
	new_muck_truck_photo_by_union_pk(new_muck_truck_photo_id: String!): NewMuckTruckPhoto
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_new_muck_truck_photo(where: NewMuckTruckPhotoBoolExp!): NewMuckTruckPhotoMutationResponse
	"""
	根据主键删除记录
	"""
	delete_new_muck_truck_photo_by_pk(id: Bigint!): NewMuckTruckPhoto
	"""
	插入
	"""
	insert_new_muck_truck_photo(objects: [NewMuckTruckPhotoInsertInput!]!): NewMuckTruckPhotoMutationResponse
	"""
	插入一条记录
	"""
	insert_new_muck_truck_photo_one(objects: NewMuckTruckPhotoInsertInput!): NewMuckTruckPhoto
	"""
	更新
	"""
	update_new_muck_truck_photo(_inc: NewMuckTruckPhotoIncInput, _set: NewMuckTruckPhotoSetInput, where: NewMuckTruckPhotoBoolExp!): NewMuckTruckPhotoMutationResponse
	"""
	根据主键更新
	"""
	update_new_muck_truck_photo_by_pk(_inc: NewMuckTruckPhotoIncInput, _set: NewMuckTruckPhotoSetInput, id: Bigint!): NewMuckTruckPhoto
	"""
	根据联合主键更新
	"""
	update_new_muck_truck_photo_by_union_pk(_inc: NewMuckTruckPhotoIncInput, _set: NewMuckTruckPhotoSetInput, new_muck_truck_photo_id: String!): NewMuckTruckPhoto
	"""
	根据联合主键删除记录
	"""
	delete_new_muck_truck_photo_by_union_pk(new_muck_truck_photo_id: String!): NewMuckTruckPhoto
}
`, BuiltIn: false},
	{Name: "graph/graphqls/new_muck_truck_recommend_catalog.graphqls", Input: `"""
新型渣土车推荐目录
"""
type NewMuckTruckRecommendCatalog {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	new_muck_truck_recommend_catalog_id: String!
	"""
	 品牌简称                                        
	"""
	brand_name: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogAggregate {
	aggregate: NewMuckTruckRecommendCatalogAggregateFields
}
"""
aggregate fields of "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogAggregateFields {
	avg: NewMuckTruckRecommendCatalogAvgFields
	count: Int
	max: NewMuckTruckRecommendCatalogMaxFields
	min: NewMuckTruckRecommendCatalogMinFields
	stddev: NewMuckTruckRecommendCatalogStddevFields
	stddev_pop: NewMuckTruckRecommendCatalogStddevPopFields
	stddev_samp: NewMuckTruckRecommendCatalogStddevSampFields
	sum: NewMuckTruckRecommendCatalogSumFields
	var_pop: NewMuckTruckRecommendCatalogVarPopFields
	var_samp: NewMuckTruckRecommendCatalogVarSampFields
	variance: NewMuckTruckRecommendCatalogVarianceFields
}
"""
aggregate avg on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogMaxFields {
	id: Bigint
	new_muck_truck_recommend_catalog_id: String
	brand_name: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogMinFields {
	id: Bigint
	new_muck_truck_recommend_catalog_id: String
	brand_name: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "new_muck_truck_recommend_catalog"
"""
type NewMuckTruckRecommendCatalogMutationResponse {
	affected_rows: Int!
	returning: [NewMuckTruckRecommendCatalog!]!
}
"""
ordering options when selecting data from "new_muck_truck_recommend_catalog"
"""
input NewMuckTruckRecommendCatalogOrderBy {
	id: OrderBy
	new_muck_truck_recommend_catalog_id: OrderBy
	brand_name: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'new_muck_truck_recommend_catalog'.
"""
input NewMuckTruckRecommendCatalogBoolExp {
	_and: [NewMuckTruckRecommendCatalogBoolExp]
	_not: NewMuckTruckRecommendCatalogBoolExp
	_or: [NewMuckTruckRecommendCatalogBoolExp]
	id: BigintComparisonExp
	new_muck_truck_recommend_catalog_id: StringComparisonExp
	brand_name: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "new_muck_truck_recommend_catalog"
"""
input NewMuckTruckRecommendCatalogInsertInput {
	new_muck_truck_recommend_catalog_id: String!
	brand_name: String
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "new_muck_truck_recommend_catalog"
"""
input NewMuckTruckRecommendCatalogIncInput {
	id: Bigint
}
"""
input type for updating data in table "new_muck_truck_recommend_catalog"
"""
input NewMuckTruckRecommendCatalogSetInput {
	id: Bigint
	new_muck_truck_recommend_catalog_id: String
	brand_name: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum NewMuckTruckRecommendCatalogSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	new_muck_truck_recommend_catalog_id
	"""
	 品牌简称                                        
	"""
	brand_name
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	new_muck_truck_recommend_catalog(distinct_on: [NewMuckTruckRecommendCatalogSelectColumn!], limit: Int, offset: Int, order_by: [NewMuckTruckRecommendCatalogOrderBy!], where: NewMuckTruckRecommendCatalogBoolExp): [NewMuckTruckRecommendCatalog!]!
	"""
	聚合查询
	"""
	new_muck_truck_recommend_catalog_aggregate(distinct_on: [NewMuckTruckRecommendCatalogSelectColumn!], limit: Int, offset: Int, order_by: [NewMuckTruckRecommendCatalogOrderBy!], where: NewMuckTruckRecommendCatalogBoolExp): NewMuckTruckRecommendCatalogAggregate!
	"""
	主键查询
	"""
	new_muck_truck_recommend_catalog_by_pk(id: Bigint!): NewMuckTruckRecommendCatalog
	"""
	联合主键查询
	"""
	new_muck_truck_recommend_catalog_by_union_pk(new_muck_truck_recommend_catalog_id: String!): NewMuckTruckRecommendCatalog
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_new_muck_truck_recommend_catalog(where: NewMuckTruckRecommendCatalogBoolExp!): NewMuckTruckRecommendCatalogMutationResponse
	"""
	根据主键删除记录
	"""
	delete_new_muck_truck_recommend_catalog_by_pk(id: Bigint!): NewMuckTruckRecommendCatalog
	"""
	插入
	"""
	insert_new_muck_truck_recommend_catalog(objects: [NewMuckTruckRecommendCatalogInsertInput!]!): NewMuckTruckRecommendCatalogMutationResponse
	"""
	插入一条记录
	"""
	insert_new_muck_truck_recommend_catalog_one(objects: NewMuckTruckRecommendCatalogInsertInput!): NewMuckTruckRecommendCatalog
	"""
	更新
	"""
	update_new_muck_truck_recommend_catalog(_inc: NewMuckTruckRecommendCatalogIncInput, _set: NewMuckTruckRecommendCatalogSetInput, where: NewMuckTruckRecommendCatalogBoolExp!): NewMuckTruckRecommendCatalogMutationResponse
	"""
	根据主键更新
	"""
	update_new_muck_truck_recommend_catalog_by_pk(_inc: NewMuckTruckRecommendCatalogIncInput, _set: NewMuckTruckRecommendCatalogSetInput, id: Bigint!): NewMuckTruckRecommendCatalog
	"""
	根据联合主键更新
	"""
	update_new_muck_truck_recommend_catalog_by_union_pk(_inc: NewMuckTruckRecommendCatalogIncInput, _set: NewMuckTruckRecommendCatalogSetInput, new_muck_truck_recommend_catalog_id: String!): NewMuckTruckRecommendCatalog
	"""
	根据联合主键删除记录
	"""
	delete_new_muck_truck_recommend_catalog_by_union_pk(new_muck_truck_recommend_catalog_id: String!): NewMuckTruckRecommendCatalog
}
`, BuiltIn: false},
	{Name: "graph/graphqls/seller_filing.graphqls", Input: `"""
销售商备案
"""
type SellerFiling {
	"""
	 按指定方法生成                                  ( 主键                                                    )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                )
	"""
	seller_filing_id: String!
	"""
	 销售商                                          ( enterprise_info表的enterprise_id                    )
	"""
	seller: String
	"""
	 工商营业执照                                    
	"""
	business_license: String
	"""
	 组织机构代码证                                  
	"""
	organization_code: String
	"""
	 法人代表身份证                                  
	"""
	legal_representative_id_card: String
	"""
	 委托代理人身份证                                
	"""
	entrusted_agent_id_card: String
	"""
	 工信部汽车生产销售许可证明                      
	"""
	ministry_production_sale_permit: String
	"""
	 行业自律承诺书                                  
	"""
	industry_self_discipline_commitment: String
	"""
	 汽车厂家汽车销售许可证明                        
	"""
	manufacturer_production_sale_permit: String
	"""
	 维修服务服务站名称                              
	"""
	repair_service_station_name: String
	"""
	 维修服务服务站地址                              
	"""
	repair_service_station_address: String
	"""
	 维修服务服务站相关材料                          
	"""
	repair_service_station_material: String
	"""
	 服务人员名称                                    
	"""
	service_staff_name: String
	"""
	 服务人员电话                                    
	"""
	service_staff_phone: String
	"""
	 服务人员身份证                                  
	"""
	service_staff_id: String
	"""
	 服务人员相关材料                                
	"""
	service_staff_material: String
	"""
	 其他相关材料                                    
	"""
	other_material: String
	"""
	 备注                                            
	"""
	remarks: String
	"""
	 登记日期                                        
	"""
	registration_time: Timestamptz
	"""
	 登记用户                                        ( system_user表的user_id                              )
	"""
	registration_user: String
	"""
	 是否核查                                        
	"""
	is_verify: Boolean
	"""
	 原因                                            
	"""
	cause: String
	"""
	 汽车品牌(简称)                                  ( new_muck_truck_recommend_catalog 新型渣土车推荐目录的id )
	"""
	catalog_id: String
	"""
	 平台对接技术协议                                
	"""
	platform_docking_technology_agreement: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                              )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                              )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                              )
	"""
	deleted_by: String
}
"""
aggregated selection of "seller_filing"
"""
type SellerFilingAggregate {
	aggregate: SellerFilingAggregateFields
}
"""
aggregate fields of "seller_filing"
"""
type SellerFilingAggregateFields {
	avg: SellerFilingAvgFields
	count: Int
	max: SellerFilingMaxFields
	min: SellerFilingMinFields
	stddev: SellerFilingStddevFields
	stddev_pop: SellerFilingStddevPopFields
	stddev_samp: SellerFilingStddevSampFields
	sum: SellerFilingSumFields
	var_pop: SellerFilingVarPopFields
	var_samp: SellerFilingVarSampFields
	variance: SellerFilingVarianceFields
}
"""
aggregate avg on columns of table "seller_filing"
"""
type SellerFilingAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "seller_filing"
"""
type SellerFilingMaxFields {
	id: Bigint
	seller_filing_id: String
	seller: String
	business_license: String
	organization_code: String
	legal_representative_id_card: String
	entrusted_agent_id_card: String
	ministry_production_sale_permit: String
	industry_self_discipline_commitment: String
	manufacturer_production_sale_permit: String
	repair_service_station_name: String
	repair_service_station_address: String
	repair_service_station_material: String
	service_staff_name: String
	service_staff_phone: String
	service_staff_id: String
	service_staff_material: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	is_verify: Boolean
	cause: String
	catalog_id: String
	platform_docking_technology_agreement: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "seller_filing"
"""
type SellerFilingMinFields {
	id: Bigint
	seller_filing_id: String
	seller: String
	business_license: String
	organization_code: String
	legal_representative_id_card: String
	entrusted_agent_id_card: String
	ministry_production_sale_permit: String
	industry_self_discipline_commitment: String
	manufacturer_production_sale_permit: String
	repair_service_station_name: String
	repair_service_station_address: String
	repair_service_station_material: String
	service_staff_name: String
	service_staff_phone: String
	service_staff_id: String
	service_staff_material: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	is_verify: Boolean
	cause: String
	catalog_id: String
	platform_docking_technology_agreement: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "seller_filing"
"""
type SellerFilingStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "seller_filing"
"""
type SellerFilingStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "seller_filing"
"""
type SellerFilingStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "seller_filing"
"""
type SellerFilingSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "seller_filing"
"""
type SellerFilingVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "seller_filing"
"""
type SellerFilingVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "seller_filing"
"""
type SellerFilingVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "seller_filing"
"""
type SellerFilingMutationResponse {
	affected_rows: Int!
	returning: [SellerFiling!]!
}
"""
ordering options when selecting data from "seller_filing"
"""
input SellerFilingOrderBy {
	id: OrderBy
	seller_filing_id: OrderBy
	seller: OrderBy
	business_license: OrderBy
	organization_code: OrderBy
	legal_representative_id_card: OrderBy
	entrusted_agent_id_card: OrderBy
	ministry_production_sale_permit: OrderBy
	industry_self_discipline_commitment: OrderBy
	manufacturer_production_sale_permit: OrderBy
	repair_service_station_name: OrderBy
	repair_service_station_address: OrderBy
	repair_service_station_material: OrderBy
	service_staff_name: OrderBy
	service_staff_phone: OrderBy
	service_staff_id: OrderBy
	service_staff_material: OrderBy
	other_material: OrderBy
	remarks: OrderBy
	registration_time: OrderBy
	registration_user: OrderBy
	is_verify: OrderBy
	cause: OrderBy
	catalog_id: OrderBy
	platform_docking_technology_agreement: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'seller_filing'.
"""
input SellerFilingBoolExp {
	_and: [SellerFilingBoolExp]
	_not: SellerFilingBoolExp
	_or: [SellerFilingBoolExp]
	id: BigintComparisonExp
	seller_filing_id: StringComparisonExp
	seller: StringComparisonExp
	business_license: StringComparisonExp
	organization_code: StringComparisonExp
	legal_representative_id_card: StringComparisonExp
	entrusted_agent_id_card: StringComparisonExp
	ministry_production_sale_permit: StringComparisonExp
	industry_self_discipline_commitment: StringComparisonExp
	manufacturer_production_sale_permit: StringComparisonExp
	repair_service_station_name: StringComparisonExp
	repair_service_station_address: StringComparisonExp
	repair_service_station_material: StringComparisonExp
	service_staff_name: StringComparisonExp
	service_staff_phone: StringComparisonExp
	service_staff_id: StringComparisonExp
	service_staff_material: StringComparisonExp
	other_material: StringComparisonExp
	remarks: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	registration_user: StringComparisonExp
	is_verify: BooleanComparisonExp
	cause: StringComparisonExp
	catalog_id: StringComparisonExp
	platform_docking_technology_agreement: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "seller_filing"
"""
input SellerFilingInsertInput {
	seller_filing_id: String!
	seller: String
	business_license: String
	organization_code: String
	legal_representative_id_card: String
	entrusted_agent_id_card: String
	ministry_production_sale_permit: String
	industry_self_discipline_commitment: String
	manufacturer_production_sale_permit: String
	repair_service_station_name: String
	repair_service_station_address: String
	repair_service_station_material: String
	service_staff_name: String
	service_staff_phone: String
	service_staff_id: String
	service_staff_material: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	is_verify: Boolean
	cause: String
	catalog_id: String
	platform_docking_technology_agreement: String
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "seller_filing"
"""
input SellerFilingIncInput {
	id: Bigint
}
"""
input type for updating data in table "seller_filing"
"""
input SellerFilingSetInput {
	id: Bigint
	seller_filing_id: String
	seller: String
	business_license: String
	organization_code: String
	legal_representative_id_card: String
	entrusted_agent_id_card: String
	ministry_production_sale_permit: String
	industry_self_discipline_commitment: String
	manufacturer_production_sale_permit: String
	repair_service_station_name: String
	repair_service_station_address: String
	repair_service_station_material: String
	service_staff_name: String
	service_staff_phone: String
	service_staff_id: String
	service_staff_material: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	is_verify: Boolean
	cause: String
	catalog_id: String
	platform_docking_technology_agreement: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum SellerFilingSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                    )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                )
	"""
	seller_filing_id
	"""
	 销售商                                          ( enterprise_info表的enterprise_id                    )
	"""
	seller
	"""
	 工商营业执照                                    
	"""
	business_license
	"""
	 组织机构代码证                                  
	"""
	organization_code
	"""
	 法人代表身份证                                  
	"""
	legal_representative_id_card
	"""
	 委托代理人身份证                                
	"""
	entrusted_agent_id_card
	"""
	 工信部汽车生产销售许可证明                      
	"""
	ministry_production_sale_permit
	"""
	 行业自律承诺书                                  
	"""
	industry_self_discipline_commitment
	"""
	 汽车厂家汽车销售许可证明                        
	"""
	manufacturer_production_sale_permit
	"""
	 维修服务服务站名称                              
	"""
	repair_service_station_name
	"""
	 维修服务服务站地址                              
	"""
	repair_service_station_address
	"""
	 维修服务服务站相关材料                          
	"""
	repair_service_station_material
	"""
	 服务人员名称                                    
	"""
	service_staff_name
	"""
	 服务人员电话                                    
	"""
	service_staff_phone
	"""
	 服务人员身份证                                  
	"""
	service_staff_id
	"""
	 服务人员相关材料                                
	"""
	service_staff_material
	"""
	 其他相关材料                                    
	"""
	other_material
	"""
	 备注                                            
	"""
	remarks
	"""
	 登记日期                                        
	"""
	registration_time
	"""
	 登记用户                                        ( system_user表的user_id                              )
	"""
	registration_user
	"""
	 是否核查                                        
	"""
	is_verify
	"""
	 原因                                            
	"""
	cause
	"""
	 汽车品牌(简称)                                  ( new_muck_truck_recommend_catalog 新型渣土车推荐目录的id )
	"""
	catalog_id
	"""
	 平台对接技术协议                                
	"""
	platform_docking_technology_agreement
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                              )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                              )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                              )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	seller_filing(distinct_on: [SellerFilingSelectColumn!], limit: Int, offset: Int, order_by: [SellerFilingOrderBy!], where: SellerFilingBoolExp): [SellerFiling!]!
	"""
	聚合查询
	"""
	seller_filing_aggregate(distinct_on: [SellerFilingSelectColumn!], limit: Int, offset: Int, order_by: [SellerFilingOrderBy!], where: SellerFilingBoolExp): SellerFilingAggregate!
	"""
	主键查询
	"""
	seller_filing_by_pk(id: Bigint!): SellerFiling
	"""
	联合主键查询
	"""
	seller_filing_by_union_pk(seller_filing_id: String!): SellerFiling
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_seller_filing(where: SellerFilingBoolExp!): SellerFilingMutationResponse
	"""
	根据主键删除记录
	"""
	delete_seller_filing_by_pk(id: Bigint!): SellerFiling
	"""
	插入
	"""
	insert_seller_filing(objects: [SellerFilingInsertInput!]!): SellerFilingMutationResponse
	"""
	插入一条记录
	"""
	insert_seller_filing_one(objects: SellerFilingInsertInput!): SellerFiling
	"""
	更新
	"""
	update_seller_filing(_inc: SellerFilingIncInput, _set: SellerFilingSetInput, where: SellerFilingBoolExp!): SellerFilingMutationResponse
	"""
	根据主键更新
	"""
	update_seller_filing_by_pk(_inc: SellerFilingIncInput, _set: SellerFilingSetInput, id: Bigint!): SellerFiling
	"""
	根据联合主键更新
	"""
	update_seller_filing_by_union_pk(_inc: SellerFilingIncInput, _set: SellerFilingSetInput, seller_filing_id: String!): SellerFiling
	"""
	根据联合主键删除记录
	"""
	delete_seller_filing_by_union_pk(seller_filing_id: String!): SellerFiling
}
`, BuiltIn: false},
	{Name: "graph/graphqls/seller_rating_record.graphqls", Input: `"""
销售商评分记录
"""
type SellerRatingRecord {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	seller_rating_record_id: String!
	"""
	 扣分对象                                        ( enterprise_info表的enterprise_id )
	"""
	demerit_obj: String
	"""
	 扣分分值                                        
	"""
	demerit_points: Numeric
	"""
	 扣分原因                                        
	"""
	demerit_reason: String
	"""
	 操作人                                          ( system_user表的user_id           )
	"""
	operator: String
	"""
	 操作时间                                        
	"""
	operation_time: Timestamptz
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by: String
}
"""
aggregated selection of "seller_rating_record"
"""
type SellerRatingRecordAggregate {
	aggregate: SellerRatingRecordAggregateFields
}
"""
aggregate fields of "seller_rating_record"
"""
type SellerRatingRecordAggregateFields {
	avg: SellerRatingRecordAvgFields
	count: Int
	max: SellerRatingRecordMaxFields
	min: SellerRatingRecordMinFields
	stddev: SellerRatingRecordStddevFields
	stddev_pop: SellerRatingRecordStddevPopFields
	stddev_samp: SellerRatingRecordStddevSampFields
	sum: SellerRatingRecordSumFields
	var_pop: SellerRatingRecordVarPopFields
	var_samp: SellerRatingRecordVarSampFields
	variance: SellerRatingRecordVarianceFields
}
"""
aggregate avg on columns of table "seller_rating_record"
"""
type SellerRatingRecordAvgFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate max on columns of table "seller_rating_record"
"""
type SellerRatingRecordMaxFields {
	id: Bigint
	seller_rating_record_id: String
	demerit_obj: String
	demerit_points: Numeric
	demerit_reason: String
	operator: String
	operation_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "seller_rating_record"
"""
type SellerRatingRecordMinFields {
	id: Bigint
	seller_rating_record_id: String
	demerit_obj: String
	demerit_points: Numeric
	demerit_reason: String
	operator: String
	operation_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "seller_rating_record"
"""
type SellerRatingRecordStddevFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate stddev_pop on columns of table "seller_rating_record"
"""
type SellerRatingRecordStddevPopFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate stddev_samp on columns of table "seller_rating_record"
"""
type SellerRatingRecordStddevSampFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate sum on columns of table "seller_rating_record"
"""
type SellerRatingRecordSumFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate var_pop on columns of table "seller_rating_record"
"""
type SellerRatingRecordVarPopFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate var_samp on columns of table "seller_rating_record"
"""
type SellerRatingRecordVarSampFields {
	id: Bigint
	demerit_points: Numeric
}
"""
aggregate variance on columns of table "seller_rating_record"
"""
type SellerRatingRecordVarianceFields {
	id: Bigint
	demerit_points: Numeric
}
"""
response of any mutation on the table "seller_rating_record"
"""
type SellerRatingRecordMutationResponse {
	affected_rows: Int!
	returning: [SellerRatingRecord!]!
}
"""
ordering options when selecting data from "seller_rating_record"
"""
input SellerRatingRecordOrderBy {
	id: OrderBy
	seller_rating_record_id: OrderBy
	demerit_obj: OrderBy
	demerit_points: OrderBy
	demerit_reason: OrderBy
	operator: OrderBy
	operation_time: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'seller_rating_record'.
"""
input SellerRatingRecordBoolExp {
	_and: [SellerRatingRecordBoolExp]
	_not: SellerRatingRecordBoolExp
	_or: [SellerRatingRecordBoolExp]
	id: BigintComparisonExp
	seller_rating_record_id: StringComparisonExp
	demerit_obj: StringComparisonExp
	demerit_points: NumericComparisonExp
	demerit_reason: StringComparisonExp
	operator: StringComparisonExp
	operation_time: TimestamptzComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "seller_rating_record"
"""
input SellerRatingRecordInsertInput {
	seller_rating_record_id: String!
	demerit_obj: String
	demerit_points: Numeric
	demerit_reason: String
	operator: String
	operation_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "seller_rating_record"
"""
input SellerRatingRecordIncInput {
	id: Bigint
	demerit_points: Numeric
}
"""
input type for updating data in table "seller_rating_record"
"""
input SellerRatingRecordSetInput {
	id: Bigint
	seller_rating_record_id: String
	demerit_obj: String
	demerit_points: Numeric
	demerit_reason: String
	operator: String
	operation_time: Timestamptz
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum SellerRatingRecordSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                 )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	"""
	seller_rating_record_id
	"""
	 扣分对象                                        ( enterprise_info表的enterprise_id )
	"""
	demerit_obj
	"""
	 扣分分值                                        
	"""
	demerit_points
	"""
	 扣分原因                                        
	"""
	demerit_reason
	"""
	 操作人                                          ( system_user表的user_id           )
	"""
	operator
	"""
	 操作时间                                        
	"""
	operation_time
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id           )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id           )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id           )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	seller_rating_record(distinct_on: [SellerRatingRecordSelectColumn!], limit: Int, offset: Int, order_by: [SellerRatingRecordOrderBy!], where: SellerRatingRecordBoolExp): [SellerRatingRecord!]!
	"""
	聚合查询
	"""
	seller_rating_record_aggregate(distinct_on: [SellerRatingRecordSelectColumn!], limit: Int, offset: Int, order_by: [SellerRatingRecordOrderBy!], where: SellerRatingRecordBoolExp): SellerRatingRecordAggregate!
	"""
	主键查询
	"""
	seller_rating_record_by_pk(id: Bigint!): SellerRatingRecord
	"""
	联合主键查询
	"""
	seller_rating_record_by_union_pk(seller_rating_record_id: String!): SellerRatingRecord
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_seller_rating_record(where: SellerRatingRecordBoolExp!): SellerRatingRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_seller_rating_record_by_pk(id: Bigint!): SellerRatingRecord
	"""
	插入
	"""
	insert_seller_rating_record(objects: [SellerRatingRecordInsertInput!]!): SellerRatingRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_seller_rating_record_one(objects: SellerRatingRecordInsertInput!): SellerRatingRecord
	"""
	更新
	"""
	update_seller_rating_record(_inc: SellerRatingRecordIncInput, _set: SellerRatingRecordSetInput, where: SellerRatingRecordBoolExp!): SellerRatingRecordMutationResponse
	"""
	根据主键更新
	"""
	update_seller_rating_record_by_pk(_inc: SellerRatingRecordIncInput, _set: SellerRatingRecordSetInput, id: Bigint!): SellerRatingRecord
	"""
	根据联合主键更新
	"""
	update_seller_rating_record_by_union_pk(_inc: SellerRatingRecordIncInput, _set: SellerRatingRecordSetInput, seller_rating_record_id: String!): SellerRatingRecord
	"""
	根据联合主键删除记录
	"""
	delete_seller_rating_record_by_union_pk(seller_rating_record_id: String!): SellerRatingRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_sale_record.graphqls", Input: `"""
汽车销售备案
"""
type VehicleSaleRecord {
	"""
	 按指定方法生成                                  ( 主键                                                    )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                )
	"""
	vehicle_sale_record_id: String!
	"""
	 销售商                                          ( enterprise_info表的enterprise_id                    )
	"""
	seller: String
	"""
	 汽车型号                                        
	"""
	vehicle_model: String
	"""
	 汽车相关图片的路径                              
	"""
	vehicle_picture: String
	"""
	 汽车参数                                        
	"""
	vehicle_parameter: String
	"""
	 参考报价                                        
	"""
	reference_price: String
	"""
	 其他相关材料                                    
	"""
	other_material: String
	"""
	 备注                                            
	"""
	remarks: String
	"""
	 登记日期                                        
	"""
	registration_time: Timestamptz
	"""
	 登记用户                                        ( system_user表的user_id                              )
	"""
	registration_user: String
	"""
	 原因                                            
	"""
	cause: String
	"""
	 汽车品牌(简称)                                  ( new_muck_truck_recommend_catalog 新型渣土车推荐目录的id )
	"""
	catalog_id: String
	"""
	 轴数类型                                        ( 轴数类型字典                                        )
	"""
	axis_type: Int
	"""
	 运输方量                                        
	"""
	transport_volume: String
	"""
	 是否审核                                        
	"""
	is_review: Boolean
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                              )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                              )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                              )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_sale_record"
"""
type VehicleSaleRecordAggregate {
	aggregate: VehicleSaleRecordAggregateFields
}
"""
aggregate fields of "vehicle_sale_record"
"""
type VehicleSaleRecordAggregateFields {
	avg: VehicleSaleRecordAvgFields
	count: Int
	max: VehicleSaleRecordMaxFields
	min: VehicleSaleRecordMinFields
	stddev: VehicleSaleRecordStddevFields
	stddev_pop: VehicleSaleRecordStddevPopFields
	stddev_samp: VehicleSaleRecordStddevSampFields
	sum: VehicleSaleRecordSumFields
	var_pop: VehicleSaleRecordVarPopFields
	var_samp: VehicleSaleRecordVarSampFields
	variance: VehicleSaleRecordVarianceFields
}
"""
aggregate avg on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordAvgFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate max on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordMaxFields {
	id: Bigint
	vehicle_sale_record_id: String
	seller: String
	vehicle_model: String
	vehicle_picture: String
	vehicle_parameter: String
	reference_price: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	cause: String
	catalog_id: String
	axis_type: Int
	transport_volume: String
	is_review: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordMinFields {
	id: Bigint
	vehicle_sale_record_id: String
	seller: String
	vehicle_model: String
	vehicle_picture: String
	vehicle_parameter: String
	reference_price: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	cause: String
	catalog_id: String
	axis_type: Int
	transport_volume: String
	is_review: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordStddevFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate stddev_pop on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordStddevPopFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate stddev_samp on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordStddevSampFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate sum on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordSumFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate var_pop on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordVarPopFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate var_samp on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordVarSampFields {
	id: Bigint
	axis_type: Int
}
"""
aggregate variance on columns of table "vehicle_sale_record"
"""
type VehicleSaleRecordVarianceFields {
	id: Bigint
	axis_type: Int
}
"""
response of any mutation on the table "vehicle_sale_record"
"""
type VehicleSaleRecordMutationResponse {
	affected_rows: Int!
	returning: [VehicleSaleRecord!]!
}
"""
ordering options when selecting data from "vehicle_sale_record"
"""
input VehicleSaleRecordOrderBy {
	id: OrderBy
	vehicle_sale_record_id: OrderBy
	seller: OrderBy
	vehicle_model: OrderBy
	vehicle_picture: OrderBy
	vehicle_parameter: OrderBy
	reference_price: OrderBy
	other_material: OrderBy
	remarks: OrderBy
	registration_time: OrderBy
	registration_user: OrderBy
	cause: OrderBy
	catalog_id: OrderBy
	axis_type: OrderBy
	transport_volume: OrderBy
	is_review: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_sale_record'.
"""
input VehicleSaleRecordBoolExp {
	_and: [VehicleSaleRecordBoolExp]
	_not: VehicleSaleRecordBoolExp
	_or: [VehicleSaleRecordBoolExp]
	id: BigintComparisonExp
	vehicle_sale_record_id: StringComparisonExp
	seller: StringComparisonExp
	vehicle_model: StringComparisonExp
	vehicle_picture: StringComparisonExp
	vehicle_parameter: StringComparisonExp
	reference_price: StringComparisonExp
	other_material: StringComparisonExp
	remarks: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	registration_user: StringComparisonExp
	cause: StringComparisonExp
	catalog_id: StringComparisonExp
	axis_type: IntComparisonExp
	transport_volume: StringComparisonExp
	is_review: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_sale_record"
"""
input VehicleSaleRecordInsertInput {
	vehicle_sale_record_id: String!
	seller: String
	vehicle_model: String
	vehicle_picture: String
	vehicle_parameter: String
	reference_price: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	cause: String
	catalog_id: String
	axis_type: Int
	transport_volume: String
	is_review: Boolean
	is_deleted: Boolean
	created_at: Timestamptz!
	created_by: String!
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_sale_record"
"""
input VehicleSaleRecordIncInput {
	id: Bigint
	axis_type: Int
}
"""
input type for updating data in table "vehicle_sale_record"
"""
input VehicleSaleRecordSetInput {
	id: Bigint
	vehicle_sale_record_id: String
	seller: String
	vehicle_model: String
	vehicle_picture: String
	vehicle_parameter: String
	reference_price: String
	other_material: String
	remarks: String
	registration_time: Timestamptz
	registration_user: String
	cause: String
	catalog_id: String
	axis_type: Int
	transport_volume: String
	is_review: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleSaleRecordSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                    )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                )
	"""
	vehicle_sale_record_id
	"""
	 销售商                                          ( enterprise_info表的enterprise_id                    )
	"""
	seller
	"""
	 汽车型号                                        
	"""
	vehicle_model
	"""
	 汽车相关图片的路径                              
	"""
	vehicle_picture
	"""
	 汽车参数                                        
	"""
	vehicle_parameter
	"""
	 参考报价                                        
	"""
	reference_price
	"""
	 其他相关材料                                    
	"""
	other_material
	"""
	 备注                                            
	"""
	remarks
	"""
	 登记日期                                        
	"""
	registration_time
	"""
	 登记用户                                        ( system_user表的user_id                              )
	"""
	registration_user
	"""
	 原因                                            
	"""
	cause
	"""
	 汽车品牌(简称)                                  ( new_muck_truck_recommend_catalog 新型渣土车推荐目录的id )
	"""
	catalog_id
	"""
	 轴数类型                                        ( 轴数类型字典                                        )
	"""
	axis_type
	"""
	 运输方量                                        
	"""
	transport_volume
	"""
	 是否审核                                        
	"""
	is_review
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                              )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                              )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                              )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_sale_record(distinct_on: [VehicleSaleRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleSaleRecordOrderBy!], where: VehicleSaleRecordBoolExp): [VehicleSaleRecord!]!
	"""
	聚合查询
	"""
	vehicle_sale_record_aggregate(distinct_on: [VehicleSaleRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleSaleRecordOrderBy!], where: VehicleSaleRecordBoolExp): VehicleSaleRecordAggregate!
	"""
	主键查询
	"""
	vehicle_sale_record_by_pk(id: Bigint!): VehicleSaleRecord
	"""
	联合主键查询
	"""
	vehicle_sale_record_by_union_pk(vehicle_sale_record_id: String!): VehicleSaleRecord
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_sale_record(where: VehicleSaleRecordBoolExp!): VehicleSaleRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_sale_record_by_pk(id: Bigint!): VehicleSaleRecord
	"""
	插入
	"""
	insert_vehicle_sale_record(objects: [VehicleSaleRecordInsertInput!]!): VehicleSaleRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_sale_record_one(objects: VehicleSaleRecordInsertInput!): VehicleSaleRecord
	"""
	更新
	"""
	update_vehicle_sale_record(_inc: VehicleSaleRecordIncInput, _set: VehicleSaleRecordSetInput, where: VehicleSaleRecordBoolExp!): VehicleSaleRecordMutationResponse
	"""
	根据主键更新
	"""
	update_vehicle_sale_record_by_pk(_inc: VehicleSaleRecordIncInput, _set: VehicleSaleRecordSetInput, id: Bigint!): VehicleSaleRecord
	"""
	根据联合主键更新
	"""
	update_vehicle_sale_record_by_union_pk(_inc: VehicleSaleRecordIncInput, _set: VehicleSaleRecordSetInput, vehicle_sale_record_id: String!): VehicleSaleRecord
	"""
	根据联合主键删除记录
	"""
	delete_vehicle_sale_record_by_union_pk(vehicle_sale_record_id: String!): VehicleSaleRecord
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_muck_truck_purchase_intention_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckPurchaseIntentionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNMuckTruckPurchaseIntentionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_purchase_intention_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_purchase_intention_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["muck_truck_purchase_intention_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_purchase_intention_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_sale_order_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckSaleOrderBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNMuckTruckSaleOrderBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_sale_order_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_sale_order_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["muck_truck_sale_order_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_sale_order_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_sale_order_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckSaleOrderDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNMuckTruckSaleOrderDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_sale_order_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_sale_order_detail_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["muck_truck_sale_order_detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_sale_order_detail_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewMuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNNewMuckTruckInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_info_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["new_muck_truck_info_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_info_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewMuckTruckPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNNewMuckTruckPhotoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_photo_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["new_muck_truck_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_photo_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_recommend_catalog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewMuckTruckRecommendCatalogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNNewMuckTruckRecommendCatalogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_recommend_catalog_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_new_muck_truck_recommend_catalog_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["new_muck_truck_recommend_catalog_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_recommend_catalog_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_seller_filing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SellerFilingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNSellerFilingBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_seller_filing_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_seller_filing_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["seller_filing_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seller_filing_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_seller_rating_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SellerRatingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNSellerRatingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_seller_rating_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_seller_rating_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["seller_rating_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seller_rating_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_sale_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleSaleRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleSaleRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_sale_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_sale_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vehicle_sale_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_sale_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_purchase_intention_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckPurchaseIntentionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckPurchaseIntentionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_purchase_intention_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckPurchaseIntentionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckPurchaseIntentionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_sale_order_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckSaleOrderInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckSaleOrderInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_sale_order_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckSaleOrderDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckSaleOrderDetailInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_sale_order_detail_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckSaleOrderDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckSaleOrderDetailInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_sale_order_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckSaleOrderInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckSaleOrderInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_new_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.NewMuckTruckInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNNewMuckTruckInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_new_muck_truck_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewMuckTruckInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNNewMuckTruckInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_new_muck_truck_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.NewMuckTruckPhotoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNNewMuckTruckPhotoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_new_muck_truck_photo_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewMuckTruckPhotoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNNewMuckTruckPhotoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_new_muck_truck_recommend_catalog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.NewMuckTruckRecommendCatalogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNNewMuckTruckRecommendCatalogInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_new_muck_truck_recommend_catalog_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewMuckTruckRecommendCatalogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNNewMuckTruckRecommendCatalogInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_seller_filing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SellerFilingInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSellerFilingInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_seller_filing_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SellerFilingInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSellerFilingInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_seller_rating_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SellerRatingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSellerRatingRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_seller_rating_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SellerRatingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSellerRatingRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_sale_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleSaleRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleSaleRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_sale_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleSaleRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleSaleRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_purchase_intention_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckPurchaseIntentionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckPurchaseIntentionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckPurchaseIntentionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckPurchaseIntentionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckPurchaseIntentionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNMuckTruckPurchaseIntentionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_purchase_intention_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckPurchaseIntentionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckPurchaseIntentionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckPurchaseIntentionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckPurchaseIntentionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_purchase_intention_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckPurchaseIntentionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckPurchaseIntentionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckPurchaseIntentionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckPurchaseIntentionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["muck_truck_purchase_intention_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_purchase_intention_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_sale_order_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckSaleOrderIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckSaleOrderSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckSaleOrderSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckSaleOrderBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNMuckTruckSaleOrderBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_sale_order_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckSaleOrderIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckSaleOrderSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckSaleOrderSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_sale_order_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckSaleOrderIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckSaleOrderSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckSaleOrderSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["muck_truck_sale_order_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_sale_order_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_sale_order_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckSaleOrderDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckSaleOrderDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckSaleOrderDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckSaleOrderDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNMuckTruckSaleOrderDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_sale_order_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckSaleOrderDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckSaleOrderDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckSaleOrderDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_sale_order_detail_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckSaleOrderDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckSaleOrderDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckSaleOrderDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["muck_truck_sale_order_detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_sale_order_detail_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.NewMuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNNewMuckTruckInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_info_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["new_muck_truck_info_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_info_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.NewMuckTruckPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNNewMuckTruckPhotoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_photo_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckPhotoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckPhotoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["new_muck_truck_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_photo_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_recommend_catalog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckRecommendCatalogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckRecommendCatalogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckRecommendCatalogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckRecommendCatalogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.NewMuckTruckRecommendCatalogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNNewMuckTruckRecommendCatalogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_recommend_catalog_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckRecommendCatalogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckRecommendCatalogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckRecommendCatalogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckRecommendCatalogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_new_muck_truck_recommend_catalog_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.NewMuckTruckRecommendCatalogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalONewMuckTruckRecommendCatalogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.NewMuckTruckRecommendCatalogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalONewMuckTruckRecommendCatalogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["new_muck_truck_recommend_catalog_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_recommend_catalog_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_seller_filing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SellerFilingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSellerFilingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SellerFilingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSellerFilingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SellerFilingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNSellerFilingBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_seller_filing_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SellerFilingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSellerFilingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SellerFilingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSellerFilingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_seller_filing_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SellerFilingIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSellerFilingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SellerFilingSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSellerFilingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["seller_filing_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seller_filing_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_seller_rating_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SellerRatingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSellerRatingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SellerRatingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSellerRatingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SellerRatingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNSellerRatingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_seller_rating_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SellerRatingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSellerRatingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SellerRatingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSellerRatingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_seller_rating_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SellerRatingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSellerRatingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SellerRatingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSellerRatingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["seller_rating_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seller_rating_record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_sale_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleSaleRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleSaleRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleSaleRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleSaleRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleSaleRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleSaleRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_sale_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleSaleRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleSaleRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleSaleRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleSaleRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_sale_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleSaleRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleSaleRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleSaleRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleSaleRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["vehicle_sale_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_sale_record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_purchase_intention_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPurchaseIntentionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckPurchaseIntentionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckPurchaseIntentionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckPurchaseIntentionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckPurchaseIntentionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_purchase_intention_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckPurchaseIntentionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckPurchaseIntentionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckPurchaseIntentionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckPurchaseIntentionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckPurchaseIntentionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_purchase_intention_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_purchase_intention_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["muck_truck_purchase_intention_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_purchase_intention_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckSaleOrderSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckSaleOrderOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckSaleOrderOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckSaleOrderBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckSaleOrderBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckSaleOrderSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckSaleOrderOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckSaleOrderOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckSaleOrderBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckSaleOrderBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["muck_truck_sale_order_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_sale_order_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_detail_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckSaleOrderDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckSaleOrderDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckSaleOrderDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckSaleOrderDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckSaleOrderDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckSaleOrderDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckSaleOrderDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckSaleOrderDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckSaleOrderDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_sale_order_detail_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["muck_truck_sale_order_detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["muck_truck_sale_order_detail_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.NewMuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalONewMuckTruckInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.NewMuckTruckInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalONewMuckTruckInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.NewMuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalONewMuckTruckInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.NewMuckTruckInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalONewMuckTruckInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.NewMuckTruckInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalONewMuckTruckInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.NewMuckTruckInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalONewMuckTruckInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_info_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["new_muck_truck_info_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_info_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_photo_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.NewMuckTruckPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalONewMuckTruckPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.NewMuckTruckPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalONewMuckTruckPhotoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.NewMuckTruckPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalONewMuckTruckPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_photo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.NewMuckTruckPhotoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalONewMuckTruckPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.NewMuckTruckPhotoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalONewMuckTruckPhotoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.NewMuckTruckPhotoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalONewMuckTruckPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_photo_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_photo_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["new_muck_truck_photo_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_photo_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_recommend_catalog_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.NewMuckTruckRecommendCatalogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalONewMuckTruckRecommendCatalogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.NewMuckTruckRecommendCatalogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalONewMuckTruckRecommendCatalogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.NewMuckTruckRecommendCatalogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_recommend_catalog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.NewMuckTruckRecommendCatalogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalONewMuckTruckRecommendCatalogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.NewMuckTruckRecommendCatalogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalONewMuckTruckRecommendCatalogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.NewMuckTruckRecommendCatalogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_recommend_catalog_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_new_muck_truck_recommend_catalog_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["new_muck_truck_recommend_catalog_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["new_muck_truck_recommend_catalog_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_seller_filing_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SellerFilingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSellerFilingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SellerFilingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSellerFilingOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SellerFilingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSellerFilingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_seller_filing_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SellerFilingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSellerFilingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SellerFilingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSellerFilingOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SellerFilingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSellerFilingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_seller_filing_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_seller_filing_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["seller_filing_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seller_filing_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_seller_rating_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SellerRatingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSellerRatingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SellerRatingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSellerRatingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SellerRatingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSellerRatingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_seller_rating_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SellerRatingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSellerRatingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SellerRatingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSellerRatingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SellerRatingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSellerRatingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_seller_rating_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_seller_rating_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["seller_rating_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seller_rating_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_sale_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSaleRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleSaleRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleSaleRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleSaleRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleSaleRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleSaleRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_sale_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleSaleRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleSaleRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleSaleRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleSaleRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleSaleRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleSaleRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_sale_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_sale_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vehicle_sale_record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_sale_record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _MuckTruckPurchaseIntention_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_muck_truck_purchase_intention_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckPurchaseIntentionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_supplier(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_customer_name(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_customer_phone(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_owner_enterprise(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_capacigy_application(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CapacigyApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_brand_model(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_code(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_registration_user(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_review(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntention_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckPurchaseIntention) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntention",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionAggregateFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionAvgFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionMaxFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionMinFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionStddevFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionStddevPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionStddevSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionSumFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionVarPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionVarSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionVarianceFields)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionAvgFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_muck_truck_purchase_intention_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckPurchaseIntentionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_supplier(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_customer_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_customer_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_owner_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_capacigy_application(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CapacigyApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_brand_model(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_code(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_review(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_muck_truck_purchase_intention_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckPurchaseIntentionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_supplier(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_customer_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_customer_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_owner_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_capacigy_application(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CapacigyApplication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_brand_model(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_code(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_review(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalNMuckTruckPurchaseIntention2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntentionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevPopFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevSampFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionSumFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarPopFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarSampFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarianceFields_vehicle_purchase(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckPurchaseIntentionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckPurchaseIntentionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_muck_truck_sale_order_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckSaleOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_customer_name(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_customer_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_notification(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_vehicle_sale_contract(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_vehicle_deposit_contract(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDepositContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_commitment(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commitment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_book_date(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_belonging_enterprise(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BelongingEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_id_card_picture(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_progress(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_vehicle_sale_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_carriage_sealing_device(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarriageSealingDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_u_shaped_cargo_box(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UShapedCargoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_is_other_vehicle_model(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOtherVehicleModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_is_completed(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrder_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderAggregateFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderAvgFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderMaxFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderMinFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderStddevFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderStddevPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderStddevSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderSumFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderVarPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderVarSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderVarianceFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_muck_truck_sale_order_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckSaleOrderDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_order_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_certificate(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_terminal_proof(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalProof, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_arrive_qz_date(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArriveQzDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_first_registration_date(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_registration_date(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_step(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_vehicle_photo(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_seller_preview_number(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerPreviewNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetail_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckSaleOrderDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailAggregateFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailAvgFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailMaxFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailMinFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailStddevFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailStddevPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailStddevSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailSumFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailVarPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailVarSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailVarianceFields)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAvgFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAvgFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailAvgFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_muck_truck_sale_order_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckSaleOrderDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_order_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_certificate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_terminal_proof(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalProof, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_arrive_qz_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArriveQzDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_first_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_vehicle_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_seller_preview_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerPreviewNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_muck_truck_sale_order_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckSaleOrderDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_order_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_certificate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_terminal_proof(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalProof, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_driver_license_pic(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverLicensePic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_arrive_qz_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArriveQzDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_first_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstRegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_registration_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_vehicle_photo(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_seller_preview_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerPreviewNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalNMuckTruckSaleOrderDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevPopFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevPopFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevPopFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevSampFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevSampFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevSampFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailSumFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailSumFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailSumFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarPopFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarPopFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarPopFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarSampFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarSampFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarSampFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarianceFields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarianceFields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarianceFields_step(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_muck_truck_sale_order_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckSaleOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_customer_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_customer_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_notification(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_vehicle_sale_contract(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_vehicle_deposit_contract(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDepositContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_commitment(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commitment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_book_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_belonging_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BelongingEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_id_card_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_vehicle_sale_record_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_carriage_sealing_device(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarriageSealingDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_u_shaped_cargo_box(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UShapedCargoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_is_other_vehicle_model(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOtherVehicleModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_is_completed(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_muck_truck_sale_order_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckSaleOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_customer_name(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_customer_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_id_card_num(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_contact_phone(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_notification(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_vehicle_sale_contract(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_vehicle_deposit_contract(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleDepositContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_commitment(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commitment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_book_date(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_belonging_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BelongingEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_id_card_picture(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDCardPicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_vehicle_sale_record_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_carriage_sealing_device(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CarriageSealingDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_u_shaped_cargo_box(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UShapedCargoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_is_other_vehicle_model(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOtherVehicleModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_is_completed(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalNMuckTruckSaleOrder2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderSumFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_progress(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_book_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_vehicle_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_vehicle_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_vehicle_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_tipper_length(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_tipper_width(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_tipper_height(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TipperHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_tank_truck_marked_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckMarkedVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields_tank_truck_actual_volume(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckSaleOrderVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckSaleOrderVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TankTruckActualVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_purchase_intention(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_purchase_intention_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckPurchaseIntention(rctx, args["where"].(model.MuckTruckPurchaseIntentionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_purchase_intention_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_purchase_intention_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckPurchaseIntentionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_purchase_intention(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_purchase_intention_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckPurchaseIntention(rctx, args["objects"].([]*model.MuckTruckPurchaseIntentionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_purchase_intention_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_purchase_intention_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckPurchaseIntentionOne(rctx, args["objects"].(model.MuckTruckPurchaseIntentionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_purchase_intention(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_purchase_intention_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckPurchaseIntention(rctx, args["_inc"].(*model.MuckTruckPurchaseIntentionIncInput), args["_set"].(*model.MuckTruckPurchaseIntentionSetInput), args["where"].(model.MuckTruckPurchaseIntentionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntentionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_purchase_intention_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_purchase_intention_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckPurchaseIntentionByPk(rctx, args["_inc"].(*model.MuckTruckPurchaseIntentionIncInput), args["_set"].(*model.MuckTruckPurchaseIntentionSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_purchase_intention_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_purchase_intention_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckPurchaseIntentionByUnionPk(rctx, args["_inc"].(*model.MuckTruckPurchaseIntentionIncInput), args["_set"].(*model.MuckTruckPurchaseIntentionSetInput), args["muck_truck_purchase_intention_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_purchase_intention_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_purchase_intention_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckPurchaseIntentionByUnionPk(rctx, args["muck_truck_purchase_intention_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_sale_order(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_sale_order_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckSaleOrder(rctx, args["where"].(model.MuckTruckSaleOrderBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_sale_order_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_sale_order_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckSaleOrderByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_sale_order(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_sale_order_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckSaleOrder(rctx, args["objects"].([]*model.MuckTruckSaleOrderInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_sale_order_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_sale_order_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckSaleOrderOne(rctx, args["objects"].(model.MuckTruckSaleOrderInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_sale_order(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_sale_order_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckSaleOrder(rctx, args["_inc"].(*model.MuckTruckSaleOrderIncInput), args["_set"].(*model.MuckTruckSaleOrderSetInput), args["where"].(model.MuckTruckSaleOrderBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_sale_order_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_sale_order_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckSaleOrderByPk(rctx, args["_inc"].(*model.MuckTruckSaleOrderIncInput), args["_set"].(*model.MuckTruckSaleOrderSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_sale_order_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_sale_order_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckSaleOrderByUnionPk(rctx, args["_inc"].(*model.MuckTruckSaleOrderIncInput), args["_set"].(*model.MuckTruckSaleOrderSetInput), args["muck_truck_sale_order_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_sale_order_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_sale_order_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckSaleOrderByUnionPk(rctx, args["muck_truck_sale_order_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_sale_order_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_sale_order_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckSaleOrderDetail(rctx, args["where"].(model.MuckTruckSaleOrderDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_sale_order_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_sale_order_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckSaleOrderDetailByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_sale_order_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_sale_order_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckSaleOrderDetail(rctx, args["objects"].([]*model.MuckTruckSaleOrderDetailInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_sale_order_detail_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_sale_order_detail_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckSaleOrderDetailOne(rctx, args["objects"].(model.MuckTruckSaleOrderDetailInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_sale_order_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_sale_order_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckSaleOrderDetail(rctx, args["_inc"].(*model.MuckTruckSaleOrderDetailIncInput), args["_set"].(*model.MuckTruckSaleOrderDetailSetInput), args["where"].(model.MuckTruckSaleOrderDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_sale_order_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_sale_order_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckSaleOrderDetailByPk(rctx, args["_inc"].(*model.MuckTruckSaleOrderDetailIncInput), args["_set"].(*model.MuckTruckSaleOrderDetailSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_sale_order_detail_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_sale_order_detail_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckSaleOrderDetailByUnionPk(rctx, args["_inc"].(*model.MuckTruckSaleOrderDetailIncInput), args["_set"].(*model.MuckTruckSaleOrderDetailSetInput), args["muck_truck_sale_order_detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_sale_order_detail_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_sale_order_detail_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckSaleOrderDetailByUnionPk(rctx, args["muck_truck_sale_order_detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckInfo(rctx, args["where"].(model.NewMuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_new_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_new_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertNewMuckTruckInfo(rctx, args["objects"].([]*model.NewMuckTruckInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_new_muck_truck_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_new_muck_truck_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertNewMuckTruckInfoOne(rctx, args["objects"].(model.NewMuckTruckInfoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckInfo(rctx, args["_inc"].(*model.NewMuckTruckInfoIncInput), args["_set"].(*model.NewMuckTruckInfoSetInput), args["where"].(model.NewMuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckInfoByPk(rctx, args["_inc"].(*model.NewMuckTruckInfoIncInput), args["_set"].(*model.NewMuckTruckInfoSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_info_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_info_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckInfoByUnionPk(rctx, args["_inc"].(*model.NewMuckTruckInfoIncInput), args["_set"].(*model.NewMuckTruckInfoSetInput), args["new_muck_truck_info_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_info_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_info_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckInfoByUnionPk(rctx, args["new_muck_truck_info_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckPhoto(rctx, args["where"].(model.NewMuckTruckPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckPhotoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_new_muck_truck_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_new_muck_truck_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertNewMuckTruckPhoto(rctx, args["objects"].([]*model.NewMuckTruckPhotoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_new_muck_truck_photo_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_new_muck_truck_photo_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertNewMuckTruckPhotoOne(rctx, args["objects"].(model.NewMuckTruckPhotoInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckPhoto(rctx, args["_inc"].(*model.NewMuckTruckPhotoIncInput), args["_set"].(*model.NewMuckTruckPhotoSetInput), args["where"].(model.NewMuckTruckPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckPhotoByPk(rctx, args["_inc"].(*model.NewMuckTruckPhotoIncInput), args["_set"].(*model.NewMuckTruckPhotoSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_photo_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_photo_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckPhotoByUnionPk(rctx, args["_inc"].(*model.NewMuckTruckPhotoIncInput), args["_set"].(*model.NewMuckTruckPhotoSetInput), args["new_muck_truck_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_photo_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_photo_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckPhotoByUnionPk(rctx, args["new_muck_truck_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_recommend_catalog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_recommend_catalog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckRecommendCatalog(rctx, args["where"].(model.NewMuckTruckRecommendCatalogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_recommend_catalog_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_recommend_catalog_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckRecommendCatalogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_new_muck_truck_recommend_catalog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_new_muck_truck_recommend_catalog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertNewMuckTruckRecommendCatalog(rctx, args["objects"].([]*model.NewMuckTruckRecommendCatalogInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_new_muck_truck_recommend_catalog_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_new_muck_truck_recommend_catalog_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertNewMuckTruckRecommendCatalogOne(rctx, args["objects"].(model.NewMuckTruckRecommendCatalogInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_recommend_catalog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_recommend_catalog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckRecommendCatalog(rctx, args["_inc"].(*model.NewMuckTruckRecommendCatalogIncInput), args["_set"].(*model.NewMuckTruckRecommendCatalogSetInput), args["where"].(model.NewMuckTruckRecommendCatalogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogMutationResponse)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_recommend_catalog_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_recommend_catalog_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckRecommendCatalogByPk(rctx, args["_inc"].(*model.NewMuckTruckRecommendCatalogIncInput), args["_set"].(*model.NewMuckTruckRecommendCatalogSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_new_muck_truck_recommend_catalog_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_new_muck_truck_recommend_catalog_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNewMuckTruckRecommendCatalogByUnionPk(rctx, args["_inc"].(*model.NewMuckTruckRecommendCatalogIncInput), args["_set"].(*model.NewMuckTruckRecommendCatalogSetInput), args["new_muck_truck_recommend_catalog_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_new_muck_truck_recommend_catalog_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_new_muck_truck_recommend_catalog_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNewMuckTruckRecommendCatalogByUnionPk(rctx, args["new_muck_truck_recommend_catalog_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_seller_filing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_seller_filing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSellerFiling(rctx, args["where"].(model.SellerFilingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingMutationResponse)
	fc.Result = res
	return ec.marshalOSellerFilingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_seller_filing_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_seller_filing_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSellerFilingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_seller_filing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_seller_filing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSellerFiling(rctx, args["objects"].([]*model.SellerFilingInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingMutationResponse)
	fc.Result = res
	return ec.marshalOSellerFilingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_seller_filing_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_seller_filing_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSellerFilingOne(rctx, args["objects"].(model.SellerFilingInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_seller_filing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_seller_filing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSellerFiling(rctx, args["_inc"].(*model.SellerFilingIncInput), args["_set"].(*model.SellerFilingSetInput), args["where"].(model.SellerFilingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingMutationResponse)
	fc.Result = res
	return ec.marshalOSellerFilingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_seller_filing_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_seller_filing_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSellerFilingByPk(rctx, args["_inc"].(*model.SellerFilingIncInput), args["_set"].(*model.SellerFilingSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_seller_filing_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_seller_filing_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSellerFilingByUnionPk(rctx, args["_inc"].(*model.SellerFilingIncInput), args["_set"].(*model.SellerFilingSetInput), args["seller_filing_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_seller_filing_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_seller_filing_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSellerFilingByUnionPk(rctx, args["seller_filing_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_seller_rating_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_seller_rating_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSellerRatingRecord(rctx, args["where"].(model.SellerRatingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOSellerRatingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_seller_rating_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_seller_rating_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSellerRatingRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_seller_rating_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_seller_rating_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSellerRatingRecord(rctx, args["objects"].([]*model.SellerRatingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOSellerRatingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_seller_rating_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_seller_rating_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSellerRatingRecordOne(rctx, args["objects"].(model.SellerRatingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_seller_rating_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_seller_rating_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSellerRatingRecord(rctx, args["_inc"].(*model.SellerRatingRecordIncInput), args["_set"].(*model.SellerRatingRecordSetInput), args["where"].(model.SellerRatingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOSellerRatingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_seller_rating_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_seller_rating_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSellerRatingRecordByPk(rctx, args["_inc"].(*model.SellerRatingRecordIncInput), args["_set"].(*model.SellerRatingRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_seller_rating_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_seller_rating_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSellerRatingRecordByUnionPk(rctx, args["_inc"].(*model.SellerRatingRecordIncInput), args["_set"].(*model.SellerRatingRecordSetInput), args["seller_rating_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_seller_rating_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_seller_rating_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSellerRatingRecordByUnionPk(rctx, args["seller_rating_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_sale_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_sale_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleSaleRecord(rctx, args["where"].(model.VehicleSaleRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_sale_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_sale_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleSaleRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_sale_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_sale_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleSaleRecord(rctx, args["objects"].([]*model.VehicleSaleRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_sale_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_sale_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleSaleRecordOne(rctx, args["objects"].(model.VehicleSaleRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_sale_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_sale_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleSaleRecord(rctx, args["_inc"].(*model.VehicleSaleRecordIncInput), args["_set"].(*model.VehicleSaleRecordSetInput), args["where"].(model.VehicleSaleRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_sale_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_sale_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleSaleRecordByPk(rctx, args["_inc"].(*model.VehicleSaleRecordIncInput), args["_set"].(*model.VehicleSaleRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_sale_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_sale_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleSaleRecordByUnionPk(rctx, args["_inc"].(*model.VehicleSaleRecordIncInput), args["_set"].(*model.VehicleSaleRecordSetInput), args["vehicle_sale_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_sale_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_sale_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleSaleRecordByUnionPk(rctx, args["vehicle_sale_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_new_muck_truck_info_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_emission_standard(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmissionStandard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_is_u_shaped_cargo_box(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUShapedCargoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_length(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_width(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_height(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_sealing_device(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealingDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_top_cover_height(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopCoverHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfo_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoAggregateFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoAvgFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoMaxFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoMinFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoStddevFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoStddevPopFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoStddevSampFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoSumFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoVarPopFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoVarSampFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoVarianceFields)
	fc.Result = res
	return ec.marshalONewMuckTruckInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_new_muck_truck_info_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_emission_standard(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmissionStandard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_is_u_shaped_cargo_box(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUShapedCargoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_length(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_width(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_height(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_sealing_device(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealingDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_top_cover_height(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopCoverHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_new_muck_truck_info_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_emission_standard(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmissionStandard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_is_u_shaped_cargo_box(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUShapedCargoBox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_length(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_width(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_height(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_sealing_device(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SealingDevice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_top_cover_height(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopCoverHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalNNewMuckTruckInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckInfoVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckInfoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_new_muck_truck_photo_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_file_path(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_upload_user(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhoto_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckPhoto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhoto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoAggregateFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoAvgFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoMaxFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoMinFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoStddevFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoStddevPopFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoStddevSampFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoSumFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoVarPopFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoVarSampFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoVarianceFields)
	fc.Result = res
	return ec.marshalONewMuckTruckPhotoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_new_muck_truck_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_file_path(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_upload_user(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_new_muck_truck_photo_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckPhotoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_file_path(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_upload_user(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalNNewMuckTruckPhoto2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckPhotoVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckPhotoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckPhotoVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_new_muck_truck_recommend_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckRecommendCatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_brand_name(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalog_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.NewMuckTruckRecommendCatalog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogAggregateFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogAvgFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogMaxFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogMinFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogStddevFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogStddevPopFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogStddevSampFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogSumFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogVarPopFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogVarSampFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogVarianceFields)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalogVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_new_muck_truck_recommend_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckRecommendCatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_brand_name(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_new_muck_truck_recommend_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewMuckTruckRecommendCatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_brand_name(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrandName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalNNewMuckTruckRecommendCatalog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _NewMuckTruckRecommendCatalogVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.NewMuckTruckRecommendCatalogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewMuckTruckRecommendCatalogVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_purchase_intention(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_purchase_intention_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPurchaseIntention(rctx, args["distinct_on"].([]model.MuckTruckPurchaseIntentionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPurchaseIntentionOrderBy), args["where"].(*model.MuckTruckPurchaseIntentionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalNMuckTruckPurchaseIntention2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntentionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_purchase_intention_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_purchase_intention_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPurchaseIntentionAggregate(rctx, args["distinct_on"].([]model.MuckTruckPurchaseIntentionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckPurchaseIntentionOrderBy), args["where"].(*model.MuckTruckPurchaseIntentionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckPurchaseIntentionAggregate)
	fc.Result = res
	return ec.marshalNMuckTruckPurchaseIntentionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_purchase_intention_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_purchase_intention_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPurchaseIntentionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_purchase_intention_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_purchase_intention_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckPurchaseIntentionByUnionPk(rctx, args["muck_truck_purchase_intention_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckPurchaseIntention)
	fc.Result = res
	return ec.marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrder(rctx, args["distinct_on"].([]model.MuckTruckSaleOrderSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderOrderBy), args["where"].(*model.MuckTruckSaleOrderBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalNMuckTruckSaleOrder2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderAggregate(rctx, args["distinct_on"].([]model.MuckTruckSaleOrderSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderOrderBy), args["where"].(*model.MuckTruckSaleOrderBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderAggregate)
	fc.Result = res
	return ec.marshalNMuckTruckSaleOrderAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderByUnionPk(rctx, args["muck_truck_sale_order_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrder)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderDetail(rctx, args["distinct_on"].([]model.MuckTruckSaleOrderDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderDetailOrderBy), args["where"].(*model.MuckTruckSaleOrderDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalNMuckTruckSaleOrderDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_detail_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_detail_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderDetailAggregate(rctx, args["distinct_on"].([]model.MuckTruckSaleOrderDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckSaleOrderDetailOrderBy), args["where"].(*model.MuckTruckSaleOrderDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckSaleOrderDetailAggregate)
	fc.Result = res
	return ec.marshalNMuckTruckSaleOrderDetailAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderDetailByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_sale_order_detail_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_sale_order_detail_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckSaleOrderDetailByUnionPk(rctx, args["muck_truck_sale_order_detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckSaleOrderDetail)
	fc.Result = res
	return ec.marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckInfo(rctx, args["distinct_on"].([]model.NewMuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckInfoOrderBy), args["where"].(*model.NewMuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalNNewMuckTruckInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckInfoAggregate(rctx, args["distinct_on"].([]model.NewMuckTruckInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckInfoOrderBy), args["where"].(*model.NewMuckTruckInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckInfoAggregate)
	fc.Result = res
	return ec.marshalNNewMuckTruckInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckInfoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_info_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_info_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckInfoByUnionPk(rctx, args["new_muck_truck_info_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckInfo)
	fc.Result = res
	return ec.marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_photo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_photo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckPhoto(rctx, args["distinct_on"].([]model.NewMuckTruckPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckPhotoOrderBy), args["where"].(*model.NewMuckTruckPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalNNewMuckTruckPhoto2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhotoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_photo_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_photo_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckPhotoAggregate(rctx, args["distinct_on"].([]model.NewMuckTruckPhotoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckPhotoOrderBy), args["where"].(*model.NewMuckTruckPhotoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckPhotoAggregate)
	fc.Result = res
	return ec.marshalNNewMuckTruckPhotoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_photo_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_photo_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckPhotoByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_photo_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_photo_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckPhotoByUnionPk(rctx, args["new_muck_truck_photo_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckPhoto)
	fc.Result = res
	return ec.marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_recommend_catalog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_recommend_catalog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckRecommendCatalog(rctx, args["distinct_on"].([]model.NewMuckTruckRecommendCatalogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckRecommendCatalogOrderBy), args["where"].(*model.NewMuckTruckRecommendCatalogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalNNewMuckTruckRecommendCatalog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_recommend_catalog_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_recommend_catalog_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckRecommendCatalogAggregate(rctx, args["distinct_on"].([]model.NewMuckTruckRecommendCatalogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.NewMuckTruckRecommendCatalogOrderBy), args["where"].(*model.NewMuckTruckRecommendCatalogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NewMuckTruckRecommendCatalogAggregate)
	fc.Result = res
	return ec.marshalNNewMuckTruckRecommendCatalogAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_recommend_catalog_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_recommend_catalog_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckRecommendCatalogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_new_muck_truck_recommend_catalog_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_new_muck_truck_recommend_catalog_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NewMuckTruckRecommendCatalogByUnionPk(rctx, args["new_muck_truck_recommend_catalog_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.NewMuckTruckRecommendCatalog)
	fc.Result = res
	return ec.marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_filing(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_filing_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerFiling(rctx, args["distinct_on"].([]model.SellerFilingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerFilingOrderBy), args["where"].(*model.SellerFilingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SellerFiling)
	fc.Result = res
	return ec.marshalNSellerFiling2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFilingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_filing_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_filing_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerFilingAggregate(rctx, args["distinct_on"].([]model.SellerFilingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerFilingOrderBy), args["where"].(*model.SellerFilingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingAggregate)
	fc.Result = res
	return ec.marshalNSellerFilingAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_filing_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_filing_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerFilingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_filing_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_filing_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerFilingByUnionPk(rctx, args["seller_filing_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerFiling)
	fc.Result = res
	return ec.marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_rating_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_rating_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerRatingRecord(rctx, args["distinct_on"].([]model.SellerRatingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerRatingRecordOrderBy), args["where"].(*model.SellerRatingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalNSellerRatingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_rating_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_rating_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerRatingRecordAggregate(rctx, args["distinct_on"].([]model.SellerRatingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SellerRatingRecordOrderBy), args["where"].(*model.SellerRatingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordAggregate)
	fc.Result = res
	return ec.marshalNSellerRatingRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_rating_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_rating_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerRatingRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_seller_rating_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_seller_rating_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SellerRatingRecordByUnionPk(rctx, args["seller_rating_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_sale_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_sale_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSaleRecord(rctx, args["distinct_on"].([]model.VehicleSaleRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSaleRecordOrderBy), args["where"].(*model.VehicleSaleRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalNVehicleSaleRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_sale_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_sale_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSaleRecordAggregate(rctx, args["distinct_on"].([]model.VehicleSaleRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleSaleRecordOrderBy), args["where"].(*model.VehicleSaleRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordAggregate)
	fc.Result = res
	return ec.marshalNVehicleSaleRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_sale_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_sale_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSaleRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_sale_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_sale_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleSaleRecordByUnionPk(rctx, args["vehicle_sale_record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_id(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_seller_filing_id(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerFilingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_seller(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_business_license(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_organization_code(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_ministry_production_sale_permit(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinistryProductionSalePermit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_industry_self_discipline_commitment(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustrySelfDisciplineCommitment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_manufacturer_production_sale_permit(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManufacturerProductionSalePermit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_repair_service_station_name(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_repair_service_station_address(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_repair_service_station_material(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_service_staff_name(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_service_staff_phone(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_service_staff_id(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_service_staff_material(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_other_material(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_registration_user(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_is_verify(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVerify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_cause(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_platform_docking_technology_agreement(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformDockingTechnologyAgreement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFiling_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.SellerFiling) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFiling",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingAggregateFields)
	fc.Result = res
	return ec.marshalOSellerFilingAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingAvgFields)
	fc.Result = res
	return ec.marshalOSellerFilingAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingMaxFields)
	fc.Result = res
	return ec.marshalOSellerFilingMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingMinFields)
	fc.Result = res
	return ec.marshalOSellerFilingMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingStddevFields)
	fc.Result = res
	return ec.marshalOSellerFilingStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingStddevPopFields)
	fc.Result = res
	return ec.marshalOSellerFilingStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingStddevSampFields)
	fc.Result = res
	return ec.marshalOSellerFilingStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingSumFields)
	fc.Result = res
	return ec.marshalOSellerFilingSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingVarPopFields)
	fc.Result = res
	return ec.marshalOSellerFilingVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingVarSampFields)
	fc.Result = res
	return ec.marshalOSellerFilingVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerFilingVarianceFields)
	fc.Result = res
	return ec.marshalOSellerFilingVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_seller_filing_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerFilingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_seller(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_business_license(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_ministry_production_sale_permit(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinistryProductionSalePermit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_industry_self_discipline_commitment(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustrySelfDisciplineCommitment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_manufacturer_production_sale_permit(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManufacturerProductionSalePermit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_repair_service_station_name(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_repair_service_station_address(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_repair_service_station_material(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_service_staff_name(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_service_staff_phone(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_service_staff_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_service_staff_material(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_other_material(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_is_verify(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVerify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_platform_docking_technology_agreement(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformDockingTechnologyAgreement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_seller_filing_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerFilingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_seller(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_business_license(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_ministry_production_sale_permit(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinistryProductionSalePermit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_industry_self_discipline_commitment(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustrySelfDisciplineCommitment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_manufacturer_production_sale_permit(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManufacturerProductionSalePermit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_repair_service_station_name(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_repair_service_station_address(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_repair_service_station_material(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepairServiceStationMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_service_staff_name(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_service_staff_phone(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_service_staff_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_service_staff_material(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStaffMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_other_material(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_is_verify(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVerify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_platform_docking_technology_agreement(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformDockingTechnologyAgreement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SellerFiling)
	fc.Result = res
	return ec.marshalNSellerFiling2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFilingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerFilingVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerFilingVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerFilingVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_seller_rating_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerRatingRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_demerit_obj(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritObj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_demerit_reason(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_operator(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_operation_time(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.SellerRatingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordAggregateFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordAvgFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordMaxFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordMinFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordStddevFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordSumFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordVarPopFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordVarSampFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SellerRatingRecordVarianceFields)
	fc.Result = res
	return ec.marshalOSellerRatingRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordAvgFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_seller_rating_record_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerRatingRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_demerit_obj(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritObj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_demerit_reason(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_seller_rating_record_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellerRatingRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_demerit_obj(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritObj, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_demerit_reason(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_operator(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_operation_time(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SellerRatingRecord)
	fc.Result = res
	return ec.marshalNSellerRatingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordStddevFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordStddevPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordStddevSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordSumFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordVarPopFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordVarSampFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SellerRatingRecordVarianceFields_demerit_points(ctx context.Context, field graphql.CollectedField, obj *model.SellerRatingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SellerRatingRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DemeritPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_vehicle_sale_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_seller(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_vehicle_model(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_vehicle_picture(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_vehicle_parameter(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleParameter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_reference_price(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferencePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_other_material(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_registration_user(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_cause(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_axis_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_transport_volume(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_is_review(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleSaleRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordAvgFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordMaxFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordMinFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordStddevFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordSumFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleSaleRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleSaleRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordAvgFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_vehicle_sale_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_seller(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_vehicle_model(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_vehicle_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_vehicle_parameter(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleParameter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_reference_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferencePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_other_material(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_transport_volume(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_is_review(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_vehicle_sale_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleSaleRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_seller(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_vehicle_model(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_vehicle_picture(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehiclePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_vehicle_parameter(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleParameter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_reference_price(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferencePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_other_material(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherMaterial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_registration_user(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_catalog_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_transport_volume(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransportVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_is_review(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleSaleRecord)
	fc.Result = res
	return ec.marshalNVehicleSaleRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordStddevFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordStddevPopFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordStddevSampFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordSumFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordVarPopFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordVarSampFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleSaleRecordVarianceFields_axis_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleSaleRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleSaleRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AxisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckPurchaseIntentionBoolExp(ctx context.Context, obj interface{}) (model.MuckTruckPurchaseIntentionBoolExp, error) {
	var it model.MuckTruckPurchaseIntentionBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_purchase_intention_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
			it.MuckTruckPurchaseIntentionID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_phone"))
			it.CustomerPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_enterprise"))
			it.OwnerEnterprise, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacigy_application":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacigy_application"))
			it.CapacigyApplication, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_model"))
			it.BrandModel, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_purchase":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_purchase"))
			it.VehiclePurchase, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review"))
			it.Review, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckPurchaseIntentionIncInput(ctx context.Context, obj interface{}) (model.MuckTruckPurchaseIntentionIncInput, error) {
	var it model.MuckTruckPurchaseIntentionIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_purchase":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_purchase"))
			it.VehiclePurchase, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckPurchaseIntentionInsertInput(ctx context.Context, obj interface{}) (model.MuckTruckPurchaseIntentionInsertInput, error) {
	var it model.MuckTruckPurchaseIntentionInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_purchase_intention_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
			it.MuckTruckPurchaseIntentionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_phone"))
			it.CustomerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_enterprise"))
			it.OwnerEnterprise, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacigy_application":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacigy_application"))
			it.CapacigyApplication, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_model"))
			it.BrandModel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_purchase":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_purchase"))
			it.VehiclePurchase, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review"))
			it.Review, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckPurchaseIntentionOrderBy(ctx context.Context, obj interface{}) (model.MuckTruckPurchaseIntentionOrderBy, error) {
	var it model.MuckTruckPurchaseIntentionOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_purchase_intention_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
			it.MuckTruckPurchaseIntentionID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_phone"))
			it.CustomerPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_enterprise"))
			it.OwnerEnterprise, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacigy_application":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacigy_application"))
			it.CapacigyApplication, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_model"))
			it.BrandModel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_purchase":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_purchase"))
			it.VehiclePurchase, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review"))
			it.Review, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckPurchaseIntentionSetInput(ctx context.Context, obj interface{}) (model.MuckTruckPurchaseIntentionSetInput, error) {
	var it model.MuckTruckPurchaseIntentionSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_purchase_intention_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_purchase_intention_id"))
			it.MuckTruckPurchaseIntentionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_phone"))
			it.CustomerPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "owner_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("owner_enterprise"))
			it.OwnerEnterprise, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "capacigy_application":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacigy_application"))
			it.CapacigyApplication, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_model"))
			it.BrandModel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_purchase":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_purchase"))
			it.VehiclePurchase, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("review"))
			it.Review, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderBoolExp(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderBoolExp, error) {
	var it model.MuckTruckSaleOrderBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOMuckTruckSaleOrderBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOMuckTruckSaleOrderBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOMuckTruckSaleOrderBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_sale_order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
			it.MuckTruckSaleOrderID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_id"))
			it.CustomerID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
			it.Notification, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_contract"))
			it.VehicleSaleContract, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_deposit_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_deposit_contract"))
			it.VehicleDepositContract, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitment"))
			it.Commitment, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_date"))
			it.BookDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "belonging_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("belonging_enterprise"))
			it.BelongingEnterprise, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_picture"))
			it.IDCardPicture, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_vehicle_number"))
			it.BookVehicleNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_length"))
			it.VehicleLength, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_width"))
			it.VehicleWidth, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_height"))
			it.VehicleHeight, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_length"))
			it.TipperLength, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_width"))
			it.TipperWidth, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_height"))
			it.TipperHeight, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_marked_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_marked_volume"))
			it.TankTruckMarkedVolume, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_actual_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_actual_volume"))
			it.TankTruckActualVolume, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "carriage_sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carriage_sealing_device"))
			it.CarriageSealingDevice, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("u_shaped_cargo_box"))
			it.UShapedCargoBox, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_other_vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_other_vehicle_model"))
			it.IsOtherVehicleModel, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_completed"))
			it.IsCompleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderDetailBoolExp(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderDetailBoolExp, error) {
	var it model.MuckTruckSaleOrderDetailBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_sale_order_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
			it.MuckTruckSaleOrderDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_id"))
			it.OrderID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificate"))
			it.Certificate, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_proof":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_proof"))
			it.TerminalProof, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "arrive_qz_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arrive_qz_date"))
			it.ArriveQzDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_registration_date"))
			it.FirstRegistrationDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_photo"))
			it.VehiclePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_preview_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_preview_number"))
			it.SellerPreviewNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderDetailIncInput(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderDetailIncInput, error) {
	var it model.MuckTruckSaleOrderDetailIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderDetailInsertInput(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderDetailInsertInput, error) {
	var it model.MuckTruckSaleOrderDetailInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_sale_order_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
			it.MuckTruckSaleOrderDetailID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_id"))
			it.OrderID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificate"))
			it.Certificate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_proof":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_proof"))
			it.TerminalProof, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "arrive_qz_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arrive_qz_date"))
			it.ArriveQzDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_registration_date"))
			it.FirstRegistrationDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_photo"))
			it.VehiclePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_preview_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_preview_number"))
			it.SellerPreviewNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderDetailOrderBy(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderDetailOrderBy, error) {
	var it model.MuckTruckSaleOrderDetailOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_sale_order_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
			it.MuckTruckSaleOrderDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_id"))
			it.OrderID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificate"))
			it.Certificate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_proof":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_proof"))
			it.TerminalProof, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "arrive_qz_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arrive_qz_date"))
			it.ArriveQzDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_registration_date"))
			it.FirstRegistrationDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_photo"))
			it.VehiclePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_preview_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_preview_number"))
			it.SellerPreviewNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderDetailSetInput(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderDetailSetInput, error) {
	var it model.MuckTruckSaleOrderDetailSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_sale_order_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_detail_id"))
			it.MuckTruckSaleOrderDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_id"))
			it.OrderID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificate"))
			it.Certificate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_proof":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_proof"))
			it.TerminalProof, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_license_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_license_pic"))
			it.DriverLicensePic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "arrive_qz_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arrive_qz_date"))
			it.ArriveQzDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_registration_date"))
			it.FirstRegistrationDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_date"))
			it.RegistrationDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_photo"))
			it.VehiclePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_preview_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_preview_number"))
			it.SellerPreviewNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderIncInput(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderIncInput, error) {
	var it model.MuckTruckSaleOrderIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_vehicle_number"))
			it.BookVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_length"))
			it.VehicleLength, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_width"))
			it.VehicleWidth, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_height"))
			it.VehicleHeight, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_length"))
			it.TipperLength, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_width"))
			it.TipperWidth, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_height"))
			it.TipperHeight, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_marked_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_marked_volume"))
			it.TankTruckMarkedVolume, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_actual_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_actual_volume"))
			it.TankTruckActualVolume, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderInsertInput(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderInsertInput, error) {
	var it model.MuckTruckSaleOrderInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "muck_truck_sale_order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
			it.MuckTruckSaleOrderID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_id"))
			it.CustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
			it.Notification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_contract"))
			it.VehicleSaleContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_deposit_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_deposit_contract"))
			it.VehicleDepositContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitment"))
			it.Commitment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_date"))
			it.BookDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "belonging_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("belonging_enterprise"))
			it.BelongingEnterprise, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_picture"))
			it.IDCardPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_vehicle_number"))
			it.BookVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_length"))
			it.VehicleLength, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_width"))
			it.VehicleWidth, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_height"))
			it.VehicleHeight, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_length"))
			it.TipperLength, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_width"))
			it.TipperWidth, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_height"))
			it.TipperHeight, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_marked_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_marked_volume"))
			it.TankTruckMarkedVolume, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_actual_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_actual_volume"))
			it.TankTruckActualVolume, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "carriage_sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carriage_sealing_device"))
			it.CarriageSealingDevice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("u_shaped_cargo_box"))
			it.UShapedCargoBox, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_other_vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_other_vehicle_model"))
			it.IsOtherVehicleModel, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_completed"))
			it.IsCompleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderOrderBy(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderOrderBy, error) {
	var it model.MuckTruckSaleOrderOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_sale_order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
			it.MuckTruckSaleOrderID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_id"))
			it.CustomerID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
			it.Notification, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_contract"))
			it.VehicleSaleContract, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_deposit_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_deposit_contract"))
			it.VehicleDepositContract, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitment"))
			it.Commitment, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_date"))
			it.BookDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "belonging_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("belonging_enterprise"))
			it.BelongingEnterprise, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_picture"))
			it.IDCardPicture, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_vehicle_number"))
			it.BookVehicleNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_length"))
			it.VehicleLength, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_width"))
			it.VehicleWidth, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_height"))
			it.VehicleHeight, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_length"))
			it.TipperLength, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_width"))
			it.TipperWidth, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_height"))
			it.TipperHeight, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_marked_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_marked_volume"))
			it.TankTruckMarkedVolume, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_actual_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_actual_volume"))
			it.TankTruckActualVolume, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "carriage_sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carriage_sealing_device"))
			it.CarriageSealingDevice, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("u_shaped_cargo_box"))
			it.UShapedCargoBox, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_other_vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_other_vehicle_model"))
			it.IsOtherVehicleModel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_completed"))
			it.IsCompleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckSaleOrderSetInput(ctx context.Context, obj interface{}) (model.MuckTruckSaleOrderSetInput, error) {
	var it model.MuckTruckSaleOrderSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_sale_order_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_sale_order_id"))
			it.MuckTruckSaleOrderID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_name"))
			it.CustomerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "customer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customer_id"))
			it.CustomerID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_num"))
			it.IDCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_phone"))
			it.ContactPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
			it.Notification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_contract"))
			it.VehicleSaleContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_deposit_contract":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_deposit_contract"))
			it.VehicleDepositContract, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commitment"))
			it.Commitment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_date"))
			it.BookDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "belonging_enterprise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("belonging_enterprise"))
			it.BelongingEnterprise, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_card_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_card_picture"))
			it.IDCardPicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "progress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("progress"))
			it.Progress, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "book_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("book_vehicle_number"))
			it.BookVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_length"))
			it.VehicleLength, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_width"))
			it.VehicleWidth, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_height"))
			it.VehicleHeight, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_length"))
			it.TipperLength, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_width"))
			it.TipperWidth, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tipper_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tipper_height"))
			it.TipperHeight, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_marked_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_marked_volume"))
			it.TankTruckMarkedVolume, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tank_truck_actual_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tank_truck_actual_volume"))
			it.TankTruckActualVolume, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "carriage_sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carriage_sealing_device"))
			it.CarriageSealingDevice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("u_shaped_cargo_box"))
			it.UShapedCargoBox, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_other_vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_other_vehicle_model"))
			it.IsOtherVehicleModel, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_completed"))
			it.IsCompleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckInfoBoolExp(ctx context.Context, obj interface{}) (model.NewMuckTruckInfoBoolExp, error) {
	var it model.NewMuckTruckInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalONewMuckTruckInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalONewMuckTruckInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalONewMuckTruckInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
			it.NewMuckTruckInfoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "emission_standard":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emission_standard"))
			it.EmissionStandard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_u_shaped_cargo_box"))
			it.IsUShapedCargoBox, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			it.Length, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			it.Width, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealing_device"))
			it.SealingDevice, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "top_cover_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("top_cover_height"))
			it.TopCoverHeight, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckInfoIncInput(ctx context.Context, obj interface{}) (model.NewMuckTruckInfoIncInput, error) {
	var it model.NewMuckTruckInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckInfoInsertInput(ctx context.Context, obj interface{}) (model.NewMuckTruckInfoInsertInput, error) {
	var it model.NewMuckTruckInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "new_muck_truck_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
			it.NewMuckTruckInfoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "emission_standard":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emission_standard"))
			it.EmissionStandard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_u_shaped_cargo_box"))
			it.IsUShapedCargoBox, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			it.Length, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			it.Width, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealing_device"))
			it.SealingDevice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "top_cover_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("top_cover_height"))
			it.TopCoverHeight, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckInfoOrderBy(ctx context.Context, obj interface{}) (model.NewMuckTruckInfoOrderBy, error) {
	var it model.NewMuckTruckInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
			it.NewMuckTruckInfoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "emission_standard":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emission_standard"))
			it.EmissionStandard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_u_shaped_cargo_box"))
			it.IsUShapedCargoBox, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			it.Length, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			it.Width, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealing_device"))
			it.SealingDevice, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "top_cover_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("top_cover_height"))
			it.TopCoverHeight, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckInfoSetInput(ctx context.Context, obj interface{}) (model.NewMuckTruckInfoSetInput, error) {
	var it model.NewMuckTruckInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_info_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_info_id"))
			it.NewMuckTruckInfoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "emission_standard":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emission_standard"))
			it.EmissionStandard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_u_shaped_cargo_box":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_u_shaped_cargo_box"))
			it.IsUShapedCargoBox, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			it.Length, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			it.Width, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sealing_device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sealing_device"))
			it.SealingDevice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "top_cover_height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("top_cover_height"))
			it.TopCoverHeight, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckPhotoBoolExp(ctx context.Context, obj interface{}) (model.NewMuckTruckPhotoBoolExp, error) {
	var it model.NewMuckTruckPhotoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalONewMuckTruckPhotoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalONewMuckTruckPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalONewMuckTruckPhotoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
			it.NewMuckTruckPhotoID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_user"))
			it.UploadUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckPhotoIncInput(ctx context.Context, obj interface{}) (model.NewMuckTruckPhotoIncInput, error) {
	var it model.NewMuckTruckPhotoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckPhotoInsertInput(ctx context.Context, obj interface{}) (model.NewMuckTruckPhotoInsertInput, error) {
	var it model.NewMuckTruckPhotoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "new_muck_truck_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
			it.NewMuckTruckPhotoID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_user"))
			it.UploadUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckPhotoOrderBy(ctx context.Context, obj interface{}) (model.NewMuckTruckPhotoOrderBy, error) {
	var it model.NewMuckTruckPhotoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
			it.NewMuckTruckPhotoID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_user"))
			it.UploadUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckPhotoSetInput(ctx context.Context, obj interface{}) (model.NewMuckTruckPhotoSetInput, error) {
	var it model.NewMuckTruckPhotoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_photo_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_photo_id"))
			it.NewMuckTruckPhotoID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_path"))
			it.FilePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "upload_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upload_user"))
			it.UploadUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckRecommendCatalogBoolExp(ctx context.Context, obj interface{}) (model.NewMuckTruckRecommendCatalogBoolExp, error) {
	var it model.NewMuckTruckRecommendCatalogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_recommend_catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
			it.NewMuckTruckRecommendCatalogID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_name"))
			it.BrandName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckRecommendCatalogIncInput(ctx context.Context, obj interface{}) (model.NewMuckTruckRecommendCatalogIncInput, error) {
	var it model.NewMuckTruckRecommendCatalogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckRecommendCatalogInsertInput(ctx context.Context, obj interface{}) (model.NewMuckTruckRecommendCatalogInsertInput, error) {
	var it model.NewMuckTruckRecommendCatalogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "new_muck_truck_recommend_catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
			it.NewMuckTruckRecommendCatalogID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_name"))
			it.BrandName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckRecommendCatalogOrderBy(ctx context.Context, obj interface{}) (model.NewMuckTruckRecommendCatalogOrderBy, error) {
	var it model.NewMuckTruckRecommendCatalogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_recommend_catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
			it.NewMuckTruckRecommendCatalogID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_name"))
			it.BrandName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMuckTruckRecommendCatalogSetInput(ctx context.Context, obj interface{}) (model.NewMuckTruckRecommendCatalogSetInput, error) {
	var it model.NewMuckTruckRecommendCatalogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "new_muck_truck_recommend_catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("new_muck_truck_recommend_catalog_id"))
			it.NewMuckTruckRecommendCatalogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brand_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brand_name"))
			it.BrandName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerFilingBoolExp(ctx context.Context, obj interface{}) (model.SellerFilingBoolExp, error) {
	var it model.SellerFilingBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOSellerFilingBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOSellerFilingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOSellerFilingBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_filing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
			it.SellerFilingID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ministry_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ministry_production_sale_permit"))
			it.MinistryProductionSalePermit, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_self_discipline_commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_self_discipline_commitment"))
			it.IndustrySelfDisciplineCommitment, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "manufacturer_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturer_production_sale_permit"))
			it.ManufacturerProductionSalePermit, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_name"))
			it.RepairServiceStationName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_address"))
			it.RepairServiceStationAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_material"))
			it.RepairServiceStationMaterial, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_name"))
			it.ServiceStaffName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_phone"))
			it.ServiceStaffPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_id"))
			it.ServiceStaffID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_material"))
			it.ServiceStaffMaterial, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_verify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_verify"))
			it.IsVerify, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform_docking_technology_agreement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform_docking_technology_agreement"))
			it.PlatformDockingTechnologyAgreement, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerFilingIncInput(ctx context.Context, obj interface{}) (model.SellerFilingIncInput, error) {
	var it model.SellerFilingIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerFilingInsertInput(ctx context.Context, obj interface{}) (model.SellerFilingInsertInput, error) {
	var it model.SellerFilingInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "seller_filing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
			it.SellerFilingID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ministry_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ministry_production_sale_permit"))
			it.MinistryProductionSalePermit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_self_discipline_commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_self_discipline_commitment"))
			it.IndustrySelfDisciplineCommitment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "manufacturer_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturer_production_sale_permit"))
			it.ManufacturerProductionSalePermit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_name"))
			it.RepairServiceStationName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_address"))
			it.RepairServiceStationAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_material"))
			it.RepairServiceStationMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_name"))
			it.ServiceStaffName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_phone"))
			it.ServiceStaffPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_id"))
			it.ServiceStaffID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_material"))
			it.ServiceStaffMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_verify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_verify"))
			it.IsVerify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform_docking_technology_agreement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform_docking_technology_agreement"))
			it.PlatformDockingTechnologyAgreement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerFilingOrderBy(ctx context.Context, obj interface{}) (model.SellerFilingOrderBy, error) {
	var it model.SellerFilingOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_filing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
			it.SellerFilingID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ministry_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ministry_production_sale_permit"))
			it.MinistryProductionSalePermit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_self_discipline_commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_self_discipline_commitment"))
			it.IndustrySelfDisciplineCommitment, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "manufacturer_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturer_production_sale_permit"))
			it.ManufacturerProductionSalePermit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_name"))
			it.RepairServiceStationName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_address"))
			it.RepairServiceStationAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_material"))
			it.RepairServiceStationMaterial, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_name"))
			it.ServiceStaffName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_phone"))
			it.ServiceStaffPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_id"))
			it.ServiceStaffID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_material"))
			it.ServiceStaffMaterial, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_verify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_verify"))
			it.IsVerify, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform_docking_technology_agreement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform_docking_technology_agreement"))
			it.PlatformDockingTechnologyAgreement, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerFilingSetInput(ctx context.Context, obj interface{}) (model.SellerFilingSetInput, error) {
	var it model.SellerFilingSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_filing_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_filing_id"))
			it.SellerFilingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ministry_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ministry_production_sale_permit"))
			it.MinistryProductionSalePermit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_self_discipline_commitment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_self_discipline_commitment"))
			it.IndustrySelfDisciplineCommitment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "manufacturer_production_sale_permit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturer_production_sale_permit"))
			it.ManufacturerProductionSalePermit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_name"))
			it.RepairServiceStationName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_address"))
			it.RepairServiceStationAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "repair_service_station_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repair_service_station_material"))
			it.RepairServiceStationMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_name"))
			it.ServiceStaffName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_phone"))
			it.ServiceStaffPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_id"))
			it.ServiceStaffID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_staff_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_staff_material"))
			it.ServiceStaffMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_verify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_verify"))
			it.IsVerify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform_docking_technology_agreement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform_docking_technology_agreement"))
			it.PlatformDockingTechnologyAgreement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerRatingRecordBoolExp(ctx context.Context, obj interface{}) (model.SellerRatingRecordBoolExp, error) {
	var it model.SellerRatingRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOSellerRatingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOSellerRatingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOSellerRatingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_rating_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
			it.SellerRatingRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_obj":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_obj"))
			it.DemeritObj, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_reason"))
			it.DemeritReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerRatingRecordIncInput(ctx context.Context, obj interface{}) (model.SellerRatingRecordIncInput, error) {
	var it model.SellerRatingRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerRatingRecordInsertInput(ctx context.Context, obj interface{}) (model.SellerRatingRecordInsertInput, error) {
	var it model.SellerRatingRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "seller_rating_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
			it.SellerRatingRecordID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_obj":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_obj"))
			it.DemeritObj, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_reason"))
			it.DemeritReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerRatingRecordOrderBy(ctx context.Context, obj interface{}) (model.SellerRatingRecordOrderBy, error) {
	var it model.SellerRatingRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_rating_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
			it.SellerRatingRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_obj":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_obj"))
			it.DemeritObj, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_reason"))
			it.DemeritReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSellerRatingRecordSetInput(ctx context.Context, obj interface{}) (model.SellerRatingRecordSetInput, error) {
	var it model.SellerRatingRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller_rating_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller_rating_record_id"))
			it.SellerRatingRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_obj":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_obj"))
			it.DemeritObj, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_points"))
			it.DemeritPoints, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "demerit_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("demerit_reason"))
			it.DemeritReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_time"))
			it.OperationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleSaleRecordBoolExp(ctx context.Context, obj interface{}) (model.VehicleSaleRecordBoolExp, error) {
	var it model.VehicleSaleRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleSaleRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleSaleRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleSaleRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_model"))
			it.VehicleModel, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_parameter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_parameter"))
			it.VehicleParameter, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_price"))
			it.ReferencePrice, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "axis_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axis_type"))
			it.AxisType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_volume"))
			it.TransportVolume, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleSaleRecordIncInput(ctx context.Context, obj interface{}) (model.VehicleSaleRecordIncInput, error) {
	var it model.VehicleSaleRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "axis_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axis_type"))
			it.AxisType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleSaleRecordInsertInput(ctx context.Context, obj interface{}) (model.VehicleSaleRecordInsertInput, error) {
	var it model.VehicleSaleRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_model"))
			it.VehicleModel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_parameter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_parameter"))
			it.VehicleParameter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_price"))
			it.ReferencePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "axis_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axis_type"))
			it.AxisType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_volume"))
			it.TransportVolume, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleSaleRecordOrderBy(ctx context.Context, obj interface{}) (model.VehicleSaleRecordOrderBy, error) {
	var it model.VehicleSaleRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_model"))
			it.VehicleModel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_parameter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_parameter"))
			it.VehicleParameter, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_price"))
			it.ReferencePrice, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "axis_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axis_type"))
			it.AxisType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_volume"))
			it.TransportVolume, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleSaleRecordSetInput(ctx context.Context, obj interface{}) (model.VehicleSaleRecordSetInput, error) {
	var it model.VehicleSaleRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_sale_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_sale_record_id"))
			it.VehicleSaleRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seller":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seller"))
			it.Seller, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_model"))
			it.VehicleModel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_picture":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_picture"))
			it.VehiclePicture, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_parameter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_parameter"))
			it.VehicleParameter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference_price"))
			it.ReferencePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_material":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_material"))
			it.OtherMaterial, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_user"))
			it.RegistrationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "catalog_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog_id"))
			it.CatalogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "axis_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("axis_type"))
			it.AxisType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "transport_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transport_volume"))
			it.TransportVolume, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_review":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_review"))
			it.IsReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var muckTruckPurchaseIntentionImplementors = []string{"MuckTruckPurchaseIntention"}

func (ec *executionContext) _MuckTruckPurchaseIntention(ctx context.Context, sel ast.SelectionSet, obj *model1.MuckTruckPurchaseIntention) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntention")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntention_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "muck_truck_purchase_intention_id":
			out.Values[i] = ec._MuckTruckPurchaseIntention_muck_truck_purchase_intention_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._MuckTruckPurchaseIntention_supplier(ctx, field, obj)
		case "customer_name":
			out.Values[i] = ec._MuckTruckPurchaseIntention_customer_name(ctx, field, obj)
		case "customer_phone":
			out.Values[i] = ec._MuckTruckPurchaseIntention_customer_phone(ctx, field, obj)
		case "owner_enterprise":
			out.Values[i] = ec._MuckTruckPurchaseIntention_owner_enterprise(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._MuckTruckPurchaseIntention_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._MuckTruckPurchaseIntention_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._MuckTruckPurchaseIntention_district_id(ctx, field, obj)
		case "capacigy_application":
			out.Values[i] = ec._MuckTruckPurchaseIntention_capacigy_application(ctx, field, obj)
		case "brand_model":
			out.Values[i] = ec._MuckTruckPurchaseIntention_brand_model(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntention_vehicle_purchase(ctx, field, obj)
		case "code":
			out.Values[i] = ec._MuckTruckPurchaseIntention_code(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._MuckTruckPurchaseIntention_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._MuckTruckPurchaseIntention_registration_user(ctx, field, obj)
		case "review":
			out.Values[i] = ec._MuckTruckPurchaseIntention_review(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._MuckTruckPurchaseIntention_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckPurchaseIntention_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckPurchaseIntention_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._MuckTruckPurchaseIntention_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._MuckTruckPurchaseIntention_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckPurchaseIntention_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckPurchaseIntention_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckPurchaseIntention_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionAggregateImplementors = []string{"MuckTruckPurchaseIntentionAggregate"}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionAggregate")
		case "aggregate":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionAggregateFieldsImplementors = []string{"MuckTruckPurchaseIntentionAggregateFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionAggregateFields")
		case "avg":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionAvgFieldsImplementors = []string{"MuckTruckPurchaseIntentionAvgFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionAvgFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAvgFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionAvgFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionMaxFieldsImplementors = []string{"MuckTruckPurchaseIntentionMaxFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionMaxFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_id(ctx, field, obj)
		case "muck_truck_purchase_intention_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_muck_truck_purchase_intention_id(ctx, field, obj)
		case "supplier":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_supplier(ctx, field, obj)
		case "customer_name":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_customer_name(ctx, field, obj)
		case "customer_phone":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_customer_phone(ctx, field, obj)
		case "owner_enterprise":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_owner_enterprise(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_district_id(ctx, field, obj)
		case "capacigy_application":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_capacigy_application(ctx, field, obj)
		case "brand_model":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_brand_model(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_vehicle_purchase(ctx, field, obj)
		case "code":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_code(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_registration_user(ctx, field, obj)
		case "review":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_review(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionMinFieldsImplementors = []string{"MuckTruckPurchaseIntentionMinFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionMinFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_id(ctx, field, obj)
		case "muck_truck_purchase_intention_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_muck_truck_purchase_intention_id(ctx, field, obj)
		case "supplier":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_supplier(ctx, field, obj)
		case "customer_name":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_customer_name(ctx, field, obj)
		case "customer_phone":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_customer_phone(ctx, field, obj)
		case "owner_enterprise":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_owner_enterprise(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_district_id(ctx, field, obj)
		case "capacigy_application":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_capacigy_application(ctx, field, obj)
		case "brand_model":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_brand_model(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_vehicle_purchase(ctx, field, obj)
		case "code":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_code(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_registration_user(ctx, field, obj)
		case "review":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_review(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_remarks(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionMutationResponseImplementors = []string{"MuckTruckPurchaseIntentionMutationResponse"}

func (ec *executionContext) _MuckTruckPurchaseIntentionMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._MuckTruckPurchaseIntentionMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionStddevFieldsImplementors = []string{"MuckTruckPurchaseIntentionStddevFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionStddevFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionStddevFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionStddevFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionStddevPopFieldsImplementors = []string{"MuckTruckPurchaseIntentionStddevPopFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionStddevPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionStddevPopFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionStddevPopFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionStddevSampFieldsImplementors = []string{"MuckTruckPurchaseIntentionStddevSampFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionStddevSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionStddevSampFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionStddevSampFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionSumFieldsImplementors = []string{"MuckTruckPurchaseIntentionSumFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionSumFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionSumFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionSumFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionVarPopFieldsImplementors = []string{"MuckTruckPurchaseIntentionVarPopFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionVarPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionVarPopFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionVarPopFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionVarSampFieldsImplementors = []string{"MuckTruckPurchaseIntentionVarSampFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionVarSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionVarSampFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionVarSampFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckPurchaseIntentionVarianceFieldsImplementors = []string{"MuckTruckPurchaseIntentionVarianceFields"}

func (ec *executionContext) _MuckTruckPurchaseIntentionVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckPurchaseIntentionVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckPurchaseIntentionVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckPurchaseIntentionVarianceFields")
		case "id":
			out.Values[i] = ec._MuckTruckPurchaseIntentionVarianceFields_id(ctx, field, obj)
		case "vehicle_purchase":
			out.Values[i] = ec._MuckTruckPurchaseIntentionVarianceFields_vehicle_purchase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderImplementors = []string{"MuckTruckSaleOrder"}

func (ec *executionContext) _MuckTruckSaleOrder(ctx context.Context, sel ast.SelectionSet, obj *model1.MuckTruckSaleOrder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrder")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrder_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "muck_truck_sale_order_id":
			out.Values[i] = ec._MuckTruckSaleOrder_muck_truck_sale_order_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customer_name":
			out.Values[i] = ec._MuckTruckSaleOrder_customer_name(ctx, field, obj)
		case "customer_id":
			out.Values[i] = ec._MuckTruckSaleOrder_customer_id(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._MuckTruckSaleOrder_id_card_num(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._MuckTruckSaleOrder_contact_phone(ctx, field, obj)
		case "notification":
			out.Values[i] = ec._MuckTruckSaleOrder_notification(ctx, field, obj)
		case "vehicle_sale_contract":
			out.Values[i] = ec._MuckTruckSaleOrder_vehicle_sale_contract(ctx, field, obj)
		case "vehicle_deposit_contract":
			out.Values[i] = ec._MuckTruckSaleOrder_vehicle_deposit_contract(ctx, field, obj)
		case "commitment":
			out.Values[i] = ec._MuckTruckSaleOrder_commitment(ctx, field, obj)
		case "book_date":
			out.Values[i] = ec._MuckTruckSaleOrder_book_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._MuckTruckSaleOrder_registration_time(ctx, field, obj)
		case "belonging_enterprise":
			out.Values[i] = ec._MuckTruckSaleOrder_belonging_enterprise(ctx, field, obj)
		case "id_card_picture":
			out.Values[i] = ec._MuckTruckSaleOrder_id_card_picture(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrder_progress(ctx, field, obj)
		case "vehicle_sale_record_id":
			out.Values[i] = ec._MuckTruckSaleOrder_vehicle_sale_record_id(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrder_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrder_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrder_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrder_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrder_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrder_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrder_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrder_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrder_tank_truck_actual_volume(ctx, field, obj)
		case "carriage_sealing_device":
			out.Values[i] = ec._MuckTruckSaleOrder_carriage_sealing_device(ctx, field, obj)
		case "u_shaped_cargo_box":
			out.Values[i] = ec._MuckTruckSaleOrder_u_shaped_cargo_box(ctx, field, obj)
		case "is_other_vehicle_model":
			out.Values[i] = ec._MuckTruckSaleOrder_is_other_vehicle_model(ctx, field, obj)
		case "is_completed":
			out.Values[i] = ec._MuckTruckSaleOrder_is_completed(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckSaleOrder_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckSaleOrder_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._MuckTruckSaleOrder_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._MuckTruckSaleOrder_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckSaleOrder_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckSaleOrder_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckSaleOrder_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderAggregateImplementors = []string{"MuckTruckSaleOrderAggregate"}

func (ec *executionContext) _MuckTruckSaleOrderAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderAggregate")
		case "aggregate":
			out.Values[i] = ec._MuckTruckSaleOrderAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderAggregateFieldsImplementors = []string{"MuckTruckSaleOrderAggregateFields"}

func (ec *executionContext) _MuckTruckSaleOrderAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderAggregateFields")
		case "avg":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._MuckTruckSaleOrderAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderAvgFieldsImplementors = []string{"MuckTruckSaleOrderAvgFields"}

func (ec *executionContext) _MuckTruckSaleOrderAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderAvgFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderAvgFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailImplementors = []string{"MuckTruckSaleOrderDetail"}

func (ec *executionContext) _MuckTruckSaleOrderDetail(ctx context.Context, sel ast.SelectionSet, obj *model1.MuckTruckSaleOrderDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetail")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "muck_truck_sale_order_detail_id":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_muck_truck_sale_order_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "order_id":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_order_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_vehicle_identification_number(ctx, field, obj)
		case "certificate":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_certificate(ctx, field, obj)
		case "terminal_proof":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_terminal_proof(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_driver_license_pic(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_license_plate_number(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_license_plate_type(ctx, field, obj)
		case "arrive_qz_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_arrive_qz_date(ctx, field, obj)
		case "first_registration_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_first_registration_date(ctx, field, obj)
		case "registration_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_registration_date(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_step(ctx, field, obj)
		case "vehicle_photo":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_vehicle_photo(ctx, field, obj)
		case "seller_preview_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_seller_preview_number(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetail_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailAggregateImplementors = []string{"MuckTruckSaleOrderDetailAggregate"}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailAggregate")
		case "aggregate":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailAggregateFieldsImplementors = []string{"MuckTruckSaleOrderDetailAggregateFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailAggregateFields")
		case "avg":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailAvgFieldsImplementors = []string{"MuckTruckSaleOrderDetailAvgFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailAvgFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAvgFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAvgFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAvgFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailAvgFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailMaxFieldsImplementors = []string{"MuckTruckSaleOrderDetailMaxFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailMaxFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_id(ctx, field, obj)
		case "muck_truck_sale_order_detail_id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_muck_truck_sale_order_detail_id(ctx, field, obj)
		case "order_id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_order_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_vehicle_identification_number(ctx, field, obj)
		case "certificate":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_certificate(ctx, field, obj)
		case "terminal_proof":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_terminal_proof(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_driver_license_pic(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_license_plate_number(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_license_plate_type(ctx, field, obj)
		case "arrive_qz_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_arrive_qz_date(ctx, field, obj)
		case "first_registration_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_first_registration_date(ctx, field, obj)
		case "registration_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_registration_date(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_step(ctx, field, obj)
		case "vehicle_photo":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_vehicle_photo(ctx, field, obj)
		case "seller_preview_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_seller_preview_number(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailMinFieldsImplementors = []string{"MuckTruckSaleOrderDetailMinFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailMinFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_id(ctx, field, obj)
		case "muck_truck_sale_order_detail_id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_muck_truck_sale_order_detail_id(ctx, field, obj)
		case "order_id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_order_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_vehicle_identification_number(ctx, field, obj)
		case "certificate":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_certificate(ctx, field, obj)
		case "terminal_proof":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_terminal_proof(ctx, field, obj)
		case "driver_license_pic":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_driver_license_pic(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_license_plate_number(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_license_plate_type(ctx, field, obj)
		case "arrive_qz_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_arrive_qz_date(ctx, field, obj)
		case "first_registration_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_first_registration_date(ctx, field, obj)
		case "registration_date":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_registration_date(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_step(ctx, field, obj)
		case "vehicle_photo":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_vehicle_photo(ctx, field, obj)
		case "seller_preview_number":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_seller_preview_number(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailMutationResponseImplementors = []string{"MuckTruckSaleOrderDetailMutationResponse"}

func (ec *executionContext) _MuckTruckSaleOrderDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._MuckTruckSaleOrderDetailMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailStddevFieldsImplementors = []string{"MuckTruckSaleOrderDetailStddevFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailStddevFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailStddevPopFieldsImplementors = []string{"MuckTruckSaleOrderDetailStddevPopFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailStddevPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevPopFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevPopFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevPopFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevPopFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailStddevSampFieldsImplementors = []string{"MuckTruckSaleOrderDetailStddevSampFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailStddevSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevSampFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevSampFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevSampFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailStddevSampFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailSumFieldsImplementors = []string{"MuckTruckSaleOrderDetailSumFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailSumFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailSumFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailSumFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailSumFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailSumFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailVarPopFieldsImplementors = []string{"MuckTruckSaleOrderDetailVarPopFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailVarPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarPopFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarPopFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarPopFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarPopFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailVarSampFieldsImplementors = []string{"MuckTruckSaleOrderDetailVarSampFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailVarSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarSampFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarSampFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarSampFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarSampFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderDetailVarianceFieldsImplementors = []string{"MuckTruckSaleOrderDetailVarianceFields"}

func (ec *executionContext) _MuckTruckSaleOrderDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderDetailVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderDetailVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderDetailVarianceFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarianceFields_id(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarianceFields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarianceFields_license_plate_type(ctx, field, obj)
		case "step":
			out.Values[i] = ec._MuckTruckSaleOrderDetailVarianceFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderMaxFieldsImplementors = []string{"MuckTruckSaleOrderMaxFields"}

func (ec *executionContext) _MuckTruckSaleOrderMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderMaxFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_id(ctx, field, obj)
		case "muck_truck_sale_order_id":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_muck_truck_sale_order_id(ctx, field, obj)
		case "customer_name":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_customer_name(ctx, field, obj)
		case "customer_id":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_customer_id(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_id_card_num(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_contact_phone(ctx, field, obj)
		case "notification":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_notification(ctx, field, obj)
		case "vehicle_sale_contract":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_vehicle_sale_contract(ctx, field, obj)
		case "vehicle_deposit_contract":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_vehicle_deposit_contract(ctx, field, obj)
		case "commitment":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_commitment(ctx, field, obj)
		case "book_date":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_book_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_registration_time(ctx, field, obj)
		case "belonging_enterprise":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_belonging_enterprise(ctx, field, obj)
		case "id_card_picture":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_id_card_picture(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_progress(ctx, field, obj)
		case "vehicle_sale_record_id":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_vehicle_sale_record_id(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_tank_truck_actual_volume(ctx, field, obj)
		case "carriage_sealing_device":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_carriage_sealing_device(ctx, field, obj)
		case "u_shaped_cargo_box":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_u_shaped_cargo_box(ctx, field, obj)
		case "is_other_vehicle_model":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_is_other_vehicle_model(ctx, field, obj)
		case "is_completed":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_is_completed(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckSaleOrderMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderMinFieldsImplementors = []string{"MuckTruckSaleOrderMinFields"}

func (ec *executionContext) _MuckTruckSaleOrderMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderMinFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_id(ctx, field, obj)
		case "muck_truck_sale_order_id":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_muck_truck_sale_order_id(ctx, field, obj)
		case "customer_name":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_customer_name(ctx, field, obj)
		case "customer_id":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_customer_id(ctx, field, obj)
		case "id_card_num":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_id_card_num(ctx, field, obj)
		case "contact_phone":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_contact_phone(ctx, field, obj)
		case "notification":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_notification(ctx, field, obj)
		case "vehicle_sale_contract":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_vehicle_sale_contract(ctx, field, obj)
		case "vehicle_deposit_contract":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_vehicle_deposit_contract(ctx, field, obj)
		case "commitment":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_commitment(ctx, field, obj)
		case "book_date":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_book_date(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_registration_time(ctx, field, obj)
		case "belonging_enterprise":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_belonging_enterprise(ctx, field, obj)
		case "id_card_picture":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_id_card_picture(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_progress(ctx, field, obj)
		case "vehicle_sale_record_id":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_vehicle_sale_record_id(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_tank_truck_actual_volume(ctx, field, obj)
		case "carriage_sealing_device":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_carriage_sealing_device(ctx, field, obj)
		case "u_shaped_cargo_box":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_u_shaped_cargo_box(ctx, field, obj)
		case "is_other_vehicle_model":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_is_other_vehicle_model(ctx, field, obj)
		case "is_completed":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_is_completed(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckSaleOrderMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderMutationResponseImplementors = []string{"MuckTruckSaleOrderMutationResponse"}

func (ec *executionContext) _MuckTruckSaleOrderMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._MuckTruckSaleOrderMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._MuckTruckSaleOrderMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderStddevFieldsImplementors = []string{"MuckTruckSaleOrderStddevFields"}

func (ec *executionContext) _MuckTruckSaleOrderStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderStddevFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderStddevFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderStddevPopFieldsImplementors = []string{"MuckTruckSaleOrderStddevPopFields"}

func (ec *executionContext) _MuckTruckSaleOrderStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderStddevPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderStddevPopFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderStddevSampFieldsImplementors = []string{"MuckTruckSaleOrderStddevSampFields"}

func (ec *executionContext) _MuckTruckSaleOrderStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderStddevSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderStddevSampFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderSumFieldsImplementors = []string{"MuckTruckSaleOrderSumFields"}

func (ec *executionContext) _MuckTruckSaleOrderSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderSumFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderSumFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderVarPopFieldsImplementors = []string{"MuckTruckSaleOrderVarPopFields"}

func (ec *executionContext) _MuckTruckSaleOrderVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderVarPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderVarPopFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderVarSampFieldsImplementors = []string{"MuckTruckSaleOrderVarSampFields"}

func (ec *executionContext) _MuckTruckSaleOrderVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderVarSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderVarSampFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckSaleOrderVarianceFieldsImplementors = []string{"MuckTruckSaleOrderVarianceFields"}

func (ec *executionContext) _MuckTruckSaleOrderVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckSaleOrderVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckSaleOrderVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckSaleOrderVarianceFields")
		case "id":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_id(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_progress(ctx, field, obj)
		case "book_vehicle_number":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_book_vehicle_number(ctx, field, obj)
		case "vehicle_length":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_vehicle_length(ctx, field, obj)
		case "vehicle_width":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_vehicle_width(ctx, field, obj)
		case "vehicle_height":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_vehicle_height(ctx, field, obj)
		case "tipper_length":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_tipper_length(ctx, field, obj)
		case "tipper_width":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_tipper_width(ctx, field, obj)
		case "tipper_height":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_tipper_height(ctx, field, obj)
		case "tank_truck_marked_volume":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_tank_truck_marked_volume(ctx, field, obj)
		case "tank_truck_actual_volume":
			out.Values[i] = ec._MuckTruckSaleOrderVarianceFields_tank_truck_actual_volume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_muck_truck_purchase_intention":
			out.Values[i] = ec._Mutation_delete_muck_truck_purchase_intention(ctx, field)
		case "delete_muck_truck_purchase_intention_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_purchase_intention_by_pk(ctx, field)
		case "insert_muck_truck_purchase_intention":
			out.Values[i] = ec._Mutation_insert_muck_truck_purchase_intention(ctx, field)
		case "insert_muck_truck_purchase_intention_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_purchase_intention_one(ctx, field)
		case "update_muck_truck_purchase_intention":
			out.Values[i] = ec._Mutation_update_muck_truck_purchase_intention(ctx, field)
		case "update_muck_truck_purchase_intention_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_purchase_intention_by_pk(ctx, field)
		case "update_muck_truck_purchase_intention_by_union_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_purchase_intention_by_union_pk(ctx, field)
		case "delete_muck_truck_purchase_intention_by_union_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_purchase_intention_by_union_pk(ctx, field)
		case "delete_muck_truck_sale_order":
			out.Values[i] = ec._Mutation_delete_muck_truck_sale_order(ctx, field)
		case "delete_muck_truck_sale_order_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_sale_order_by_pk(ctx, field)
		case "insert_muck_truck_sale_order":
			out.Values[i] = ec._Mutation_insert_muck_truck_sale_order(ctx, field)
		case "insert_muck_truck_sale_order_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_sale_order_one(ctx, field)
		case "update_muck_truck_sale_order":
			out.Values[i] = ec._Mutation_update_muck_truck_sale_order(ctx, field)
		case "update_muck_truck_sale_order_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_sale_order_by_pk(ctx, field)
		case "update_muck_truck_sale_order_by_union_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_sale_order_by_union_pk(ctx, field)
		case "delete_muck_truck_sale_order_by_union_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_sale_order_by_union_pk(ctx, field)
		case "delete_muck_truck_sale_order_detail":
			out.Values[i] = ec._Mutation_delete_muck_truck_sale_order_detail(ctx, field)
		case "delete_muck_truck_sale_order_detail_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_sale_order_detail_by_pk(ctx, field)
		case "insert_muck_truck_sale_order_detail":
			out.Values[i] = ec._Mutation_insert_muck_truck_sale_order_detail(ctx, field)
		case "insert_muck_truck_sale_order_detail_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_sale_order_detail_one(ctx, field)
		case "update_muck_truck_sale_order_detail":
			out.Values[i] = ec._Mutation_update_muck_truck_sale_order_detail(ctx, field)
		case "update_muck_truck_sale_order_detail_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_sale_order_detail_by_pk(ctx, field)
		case "update_muck_truck_sale_order_detail_by_union_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_sale_order_detail_by_union_pk(ctx, field)
		case "delete_muck_truck_sale_order_detail_by_union_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_sale_order_detail_by_union_pk(ctx, field)
		case "delete_new_muck_truck_info":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_info(ctx, field)
		case "delete_new_muck_truck_info_by_pk":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_info_by_pk(ctx, field)
		case "insert_new_muck_truck_info":
			out.Values[i] = ec._Mutation_insert_new_muck_truck_info(ctx, field)
		case "insert_new_muck_truck_info_one":
			out.Values[i] = ec._Mutation_insert_new_muck_truck_info_one(ctx, field)
		case "update_new_muck_truck_info":
			out.Values[i] = ec._Mutation_update_new_muck_truck_info(ctx, field)
		case "update_new_muck_truck_info_by_pk":
			out.Values[i] = ec._Mutation_update_new_muck_truck_info_by_pk(ctx, field)
		case "update_new_muck_truck_info_by_union_pk":
			out.Values[i] = ec._Mutation_update_new_muck_truck_info_by_union_pk(ctx, field)
		case "delete_new_muck_truck_info_by_union_pk":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_info_by_union_pk(ctx, field)
		case "delete_new_muck_truck_photo":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_photo(ctx, field)
		case "delete_new_muck_truck_photo_by_pk":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_photo_by_pk(ctx, field)
		case "insert_new_muck_truck_photo":
			out.Values[i] = ec._Mutation_insert_new_muck_truck_photo(ctx, field)
		case "insert_new_muck_truck_photo_one":
			out.Values[i] = ec._Mutation_insert_new_muck_truck_photo_one(ctx, field)
		case "update_new_muck_truck_photo":
			out.Values[i] = ec._Mutation_update_new_muck_truck_photo(ctx, field)
		case "update_new_muck_truck_photo_by_pk":
			out.Values[i] = ec._Mutation_update_new_muck_truck_photo_by_pk(ctx, field)
		case "update_new_muck_truck_photo_by_union_pk":
			out.Values[i] = ec._Mutation_update_new_muck_truck_photo_by_union_pk(ctx, field)
		case "delete_new_muck_truck_photo_by_union_pk":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_photo_by_union_pk(ctx, field)
		case "delete_new_muck_truck_recommend_catalog":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_recommend_catalog(ctx, field)
		case "delete_new_muck_truck_recommend_catalog_by_pk":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_recommend_catalog_by_pk(ctx, field)
		case "insert_new_muck_truck_recommend_catalog":
			out.Values[i] = ec._Mutation_insert_new_muck_truck_recommend_catalog(ctx, field)
		case "insert_new_muck_truck_recommend_catalog_one":
			out.Values[i] = ec._Mutation_insert_new_muck_truck_recommend_catalog_one(ctx, field)
		case "update_new_muck_truck_recommend_catalog":
			out.Values[i] = ec._Mutation_update_new_muck_truck_recommend_catalog(ctx, field)
		case "update_new_muck_truck_recommend_catalog_by_pk":
			out.Values[i] = ec._Mutation_update_new_muck_truck_recommend_catalog_by_pk(ctx, field)
		case "update_new_muck_truck_recommend_catalog_by_union_pk":
			out.Values[i] = ec._Mutation_update_new_muck_truck_recommend_catalog_by_union_pk(ctx, field)
		case "delete_new_muck_truck_recommend_catalog_by_union_pk":
			out.Values[i] = ec._Mutation_delete_new_muck_truck_recommend_catalog_by_union_pk(ctx, field)
		case "delete_seller_filing":
			out.Values[i] = ec._Mutation_delete_seller_filing(ctx, field)
		case "delete_seller_filing_by_pk":
			out.Values[i] = ec._Mutation_delete_seller_filing_by_pk(ctx, field)
		case "insert_seller_filing":
			out.Values[i] = ec._Mutation_insert_seller_filing(ctx, field)
		case "insert_seller_filing_one":
			out.Values[i] = ec._Mutation_insert_seller_filing_one(ctx, field)
		case "update_seller_filing":
			out.Values[i] = ec._Mutation_update_seller_filing(ctx, field)
		case "update_seller_filing_by_pk":
			out.Values[i] = ec._Mutation_update_seller_filing_by_pk(ctx, field)
		case "update_seller_filing_by_union_pk":
			out.Values[i] = ec._Mutation_update_seller_filing_by_union_pk(ctx, field)
		case "delete_seller_filing_by_union_pk":
			out.Values[i] = ec._Mutation_delete_seller_filing_by_union_pk(ctx, field)
		case "delete_seller_rating_record":
			out.Values[i] = ec._Mutation_delete_seller_rating_record(ctx, field)
		case "delete_seller_rating_record_by_pk":
			out.Values[i] = ec._Mutation_delete_seller_rating_record_by_pk(ctx, field)
		case "insert_seller_rating_record":
			out.Values[i] = ec._Mutation_insert_seller_rating_record(ctx, field)
		case "insert_seller_rating_record_one":
			out.Values[i] = ec._Mutation_insert_seller_rating_record_one(ctx, field)
		case "update_seller_rating_record":
			out.Values[i] = ec._Mutation_update_seller_rating_record(ctx, field)
		case "update_seller_rating_record_by_pk":
			out.Values[i] = ec._Mutation_update_seller_rating_record_by_pk(ctx, field)
		case "update_seller_rating_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_seller_rating_record_by_union_pk(ctx, field)
		case "delete_seller_rating_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_seller_rating_record_by_union_pk(ctx, field)
		case "delete_vehicle_sale_record":
			out.Values[i] = ec._Mutation_delete_vehicle_sale_record(ctx, field)
		case "delete_vehicle_sale_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_sale_record_by_pk(ctx, field)
		case "insert_vehicle_sale_record":
			out.Values[i] = ec._Mutation_insert_vehicle_sale_record(ctx, field)
		case "insert_vehicle_sale_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_sale_record_one(ctx, field)
		case "update_vehicle_sale_record":
			out.Values[i] = ec._Mutation_update_vehicle_sale_record(ctx, field)
		case "update_vehicle_sale_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_sale_record_by_pk(ctx, field)
		case "update_vehicle_sale_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_vehicle_sale_record_by_union_pk(ctx, field)
		case "delete_vehicle_sale_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_sale_record_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoImplementors = []string{"NewMuckTruckInfo"}

func (ec *executionContext) _NewMuckTruckInfo(ctx context.Context, sel ast.SelectionSet, obj *model1.NewMuckTruckInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfo")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "new_muck_truck_info_id":
			out.Values[i] = ec._NewMuckTruckInfo_new_muck_truck_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._NewMuckTruckInfo_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._NewMuckTruckInfo_license_plate_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._NewMuckTruckInfo_registration_time(ctx, field, obj)
		case "emission_standard":
			out.Values[i] = ec._NewMuckTruckInfo_emission_standard(ctx, field, obj)
		case "is_u_shaped_cargo_box":
			out.Values[i] = ec._NewMuckTruckInfo_is_u_shaped_cargo_box(ctx, field, obj)
		case "length":
			out.Values[i] = ec._NewMuckTruckInfo_length(ctx, field, obj)
		case "width":
			out.Values[i] = ec._NewMuckTruckInfo_width(ctx, field, obj)
		case "height":
			out.Values[i] = ec._NewMuckTruckInfo_height(ctx, field, obj)
		case "sealing_device":
			out.Values[i] = ec._NewMuckTruckInfo_sealing_device(ctx, field, obj)
		case "top_cover_height":
			out.Values[i] = ec._NewMuckTruckInfo_top_cover_height(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckInfo_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._NewMuckTruckInfo_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckInfo_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckInfo_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckInfo_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckInfo_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoAggregateImplementors = []string{"NewMuckTruckInfoAggregate"}

func (ec *executionContext) _NewMuckTruckInfoAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoAggregate")
		case "aggregate":
			out.Values[i] = ec._NewMuckTruckInfoAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoAggregateFieldsImplementors = []string{"NewMuckTruckInfoAggregateFields"}

func (ec *executionContext) _NewMuckTruckInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoAggregateFields")
		case "avg":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._NewMuckTruckInfoAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoAvgFieldsImplementors = []string{"NewMuckTruckInfoAvgFields"}

func (ec *executionContext) _NewMuckTruckInfoAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoAvgFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoMaxFieldsImplementors = []string{"NewMuckTruckInfoMaxFields"}

func (ec *executionContext) _NewMuckTruckInfoMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoMaxFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_id(ctx, field, obj)
		case "new_muck_truck_info_id":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_new_muck_truck_info_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_license_plate_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_registration_time(ctx, field, obj)
		case "emission_standard":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_emission_standard(ctx, field, obj)
		case "is_u_shaped_cargo_box":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_is_u_shaped_cargo_box(ctx, field, obj)
		case "length":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_length(ctx, field, obj)
		case "width":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_width(ctx, field, obj)
		case "height":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_height(ctx, field, obj)
		case "sealing_device":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_sealing_device(ctx, field, obj)
		case "top_cover_height":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_top_cover_height(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckInfoMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoMinFieldsImplementors = []string{"NewMuckTruckInfoMinFields"}

func (ec *executionContext) _NewMuckTruckInfoMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoMinFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_id(ctx, field, obj)
		case "new_muck_truck_info_id":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_new_muck_truck_info_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_license_plate_number(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_registration_time(ctx, field, obj)
		case "emission_standard":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_emission_standard(ctx, field, obj)
		case "is_u_shaped_cargo_box":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_is_u_shaped_cargo_box(ctx, field, obj)
		case "length":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_length(ctx, field, obj)
		case "width":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_width(ctx, field, obj)
		case "height":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_height(ctx, field, obj)
		case "sealing_device":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_sealing_device(ctx, field, obj)
		case "top_cover_height":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_top_cover_height(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckInfoMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoMutationResponseImplementors = []string{"NewMuckTruckInfoMutationResponse"}

func (ec *executionContext) _NewMuckTruckInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._NewMuckTruckInfoMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._NewMuckTruckInfoMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoStddevFieldsImplementors = []string{"NewMuckTruckInfoStddevFields"}

func (ec *executionContext) _NewMuckTruckInfoStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoStddevFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoStddevPopFieldsImplementors = []string{"NewMuckTruckInfoStddevPopFields"}

func (ec *executionContext) _NewMuckTruckInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoStddevPopFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoStddevSampFieldsImplementors = []string{"NewMuckTruckInfoStddevSampFields"}

func (ec *executionContext) _NewMuckTruckInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoStddevSampFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoSumFieldsImplementors = []string{"NewMuckTruckInfoSumFields"}

func (ec *executionContext) _NewMuckTruckInfoSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoSumFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoVarPopFieldsImplementors = []string{"NewMuckTruckInfoVarPopFields"}

func (ec *executionContext) _NewMuckTruckInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoVarPopFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoVarSampFieldsImplementors = []string{"NewMuckTruckInfoVarSampFields"}

func (ec *executionContext) _NewMuckTruckInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoVarSampFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckInfoVarianceFieldsImplementors = []string{"NewMuckTruckInfoVarianceFields"}

func (ec *executionContext) _NewMuckTruckInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckInfoVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckInfoVarianceFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckInfoVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoImplementors = []string{"NewMuckTruckPhoto"}

func (ec *executionContext) _NewMuckTruckPhoto(ctx context.Context, sel ast.SelectionSet, obj *model1.NewMuckTruckPhoto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhoto")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhoto_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "new_muck_truck_photo_id":
			out.Values[i] = ec._NewMuckTruckPhoto_new_muck_truck_photo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._NewMuckTruckPhoto_vehicle_id(ctx, field, obj)
		case "file_path":
			out.Values[i] = ec._NewMuckTruckPhoto_file_path(ctx, field, obj)
		case "upload_user":
			out.Values[i] = ec._NewMuckTruckPhoto_upload_user(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckPhoto_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._NewMuckTruckPhoto_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckPhoto_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckPhoto_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckPhoto_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckPhoto_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoAggregateImplementors = []string{"NewMuckTruckPhotoAggregate"}

func (ec *executionContext) _NewMuckTruckPhotoAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoAggregate")
		case "aggregate":
			out.Values[i] = ec._NewMuckTruckPhotoAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoAggregateFieldsImplementors = []string{"NewMuckTruckPhotoAggregateFields"}

func (ec *executionContext) _NewMuckTruckPhotoAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoAggregateFields")
		case "avg":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._NewMuckTruckPhotoAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoAvgFieldsImplementors = []string{"NewMuckTruckPhotoAvgFields"}

func (ec *executionContext) _NewMuckTruckPhotoAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoAvgFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoMaxFieldsImplementors = []string{"NewMuckTruckPhotoMaxFields"}

func (ec *executionContext) _NewMuckTruckPhotoMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoMaxFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_id(ctx, field, obj)
		case "new_muck_truck_photo_id":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_new_muck_truck_photo_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_vehicle_id(ctx, field, obj)
		case "file_path":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_file_path(ctx, field, obj)
		case "upload_user":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_upload_user(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckPhotoMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoMinFieldsImplementors = []string{"NewMuckTruckPhotoMinFields"}

func (ec *executionContext) _NewMuckTruckPhotoMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoMinFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_id(ctx, field, obj)
		case "new_muck_truck_photo_id":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_new_muck_truck_photo_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_vehicle_id(ctx, field, obj)
		case "file_path":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_file_path(ctx, field, obj)
		case "upload_user":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_upload_user(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckPhotoMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoMutationResponseImplementors = []string{"NewMuckTruckPhotoMutationResponse"}

func (ec *executionContext) _NewMuckTruckPhotoMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._NewMuckTruckPhotoMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._NewMuckTruckPhotoMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoStddevFieldsImplementors = []string{"NewMuckTruckPhotoStddevFields"}

func (ec *executionContext) _NewMuckTruckPhotoStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoStddevFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoStddevPopFieldsImplementors = []string{"NewMuckTruckPhotoStddevPopFields"}

func (ec *executionContext) _NewMuckTruckPhotoStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoStddevPopFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoStddevSampFieldsImplementors = []string{"NewMuckTruckPhotoStddevSampFields"}

func (ec *executionContext) _NewMuckTruckPhotoStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoStddevSampFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoSumFieldsImplementors = []string{"NewMuckTruckPhotoSumFields"}

func (ec *executionContext) _NewMuckTruckPhotoSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoSumFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoVarPopFieldsImplementors = []string{"NewMuckTruckPhotoVarPopFields"}

func (ec *executionContext) _NewMuckTruckPhotoVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoVarPopFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoVarSampFieldsImplementors = []string{"NewMuckTruckPhotoVarSampFields"}

func (ec *executionContext) _NewMuckTruckPhotoVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoVarSampFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckPhotoVarianceFieldsImplementors = []string{"NewMuckTruckPhotoVarianceFields"}

func (ec *executionContext) _NewMuckTruckPhotoVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckPhotoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckPhotoVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckPhotoVarianceFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckPhotoVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogImplementors = []string{"NewMuckTruckRecommendCatalog"}

func (ec *executionContext) _NewMuckTruckRecommendCatalog(ctx context.Context, sel ast.SelectionSet, obj *model1.NewMuckTruckRecommendCatalog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalog")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "new_muck_truck_recommend_catalog_id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_new_muck_truck_recommend_catalog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brand_name":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_brand_name(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalog_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogAggregateImplementors = []string{"NewMuckTruckRecommendCatalogAggregate"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogAggregate")
		case "aggregate":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogAggregateFieldsImplementors = []string{"NewMuckTruckRecommendCatalogAggregateFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogAggregateFields")
		case "avg":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogAvgFieldsImplementors = []string{"NewMuckTruckRecommendCatalogAvgFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogAvgFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogMaxFieldsImplementors = []string{"NewMuckTruckRecommendCatalogMaxFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogMaxFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_id(ctx, field, obj)
		case "new_muck_truck_recommend_catalog_id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_new_muck_truck_recommend_catalog_id(ctx, field, obj)
		case "brand_name":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_brand_name(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogMinFieldsImplementors = []string{"NewMuckTruckRecommendCatalogMinFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogMinFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_id(ctx, field, obj)
		case "new_muck_truck_recommend_catalog_id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_new_muck_truck_recommend_catalog_id(ctx, field, obj)
		case "brand_name":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_brand_name(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogMutationResponseImplementors = []string{"NewMuckTruckRecommendCatalogMutationResponse"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogStddevFieldsImplementors = []string{"NewMuckTruckRecommendCatalogStddevFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogStddevFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogStddevPopFieldsImplementors = []string{"NewMuckTruckRecommendCatalogStddevPopFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogStddevPopFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogStddevSampFieldsImplementors = []string{"NewMuckTruckRecommendCatalogStddevSampFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogStddevSampFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogSumFieldsImplementors = []string{"NewMuckTruckRecommendCatalogSumFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogSumFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogVarPopFieldsImplementors = []string{"NewMuckTruckRecommendCatalogVarPopFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogVarPopFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogVarSampFieldsImplementors = []string{"NewMuckTruckRecommendCatalogVarSampFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogVarSampFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newMuckTruckRecommendCatalogVarianceFieldsImplementors = []string{"NewMuckTruckRecommendCatalogVarianceFields"}

func (ec *executionContext) _NewMuckTruckRecommendCatalogVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.NewMuckTruckRecommendCatalogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newMuckTruckRecommendCatalogVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewMuckTruckRecommendCatalogVarianceFields")
		case "id":
			out.Values[i] = ec._NewMuckTruckRecommendCatalogVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "muck_truck_purchase_intention":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_purchase_intention(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_purchase_intention_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_purchase_intention_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_purchase_intention_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_purchase_intention_by_pk(ctx, field)
				return res
			})
		case "muck_truck_purchase_intention_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_purchase_intention_by_union_pk(ctx, field)
				return res
			})
		case "muck_truck_sale_order":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_sale_order_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_sale_order_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_by_pk(ctx, field)
				return res
			})
		case "muck_truck_sale_order_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_by_union_pk(ctx, field)
				return res
			})
		case "muck_truck_sale_order_detail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_detail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_sale_order_detail_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_detail_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_sale_order_detail_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_detail_by_pk(ctx, field)
				return res
			})
		case "muck_truck_sale_order_detail_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_sale_order_detail_by_union_pk(ctx, field)
				return res
			})
		case "new_muck_truck_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "new_muck_truck_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "new_muck_truck_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_info_by_pk(ctx, field)
				return res
			})
		case "new_muck_truck_info_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_info_by_union_pk(ctx, field)
				return res
			})
		case "new_muck_truck_photo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_photo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "new_muck_truck_photo_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_photo_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "new_muck_truck_photo_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_photo_by_pk(ctx, field)
				return res
			})
		case "new_muck_truck_photo_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_photo_by_union_pk(ctx, field)
				return res
			})
		case "new_muck_truck_recommend_catalog":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_recommend_catalog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "new_muck_truck_recommend_catalog_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_recommend_catalog_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "new_muck_truck_recommend_catalog_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_recommend_catalog_by_pk(ctx, field)
				return res
			})
		case "new_muck_truck_recommend_catalog_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_new_muck_truck_recommend_catalog_by_union_pk(ctx, field)
				return res
			})
		case "seller_filing":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_filing(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "seller_filing_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_filing_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "seller_filing_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_filing_by_pk(ctx, field)
				return res
			})
		case "seller_filing_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_filing_by_union_pk(ctx, field)
				return res
			})
		case "seller_rating_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_rating_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "seller_rating_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_rating_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "seller_rating_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_rating_record_by_pk(ctx, field)
				return res
			})
		case "seller_rating_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_seller_rating_record_by_union_pk(ctx, field)
				return res
			})
		case "vehicle_sale_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_sale_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_sale_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_sale_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_sale_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_sale_record_by_pk(ctx, field)
				return res
			})
		case "vehicle_sale_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_sale_record_by_union_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingImplementors = []string{"SellerFiling"}

func (ec *executionContext) _SellerFiling(ctx context.Context, sel ast.SelectionSet, obj *model1.SellerFiling) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFiling")
		case "id":
			out.Values[i] = ec._SellerFiling_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seller_filing_id":
			out.Values[i] = ec._SellerFiling_seller_filing_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seller":
			out.Values[i] = ec._SellerFiling_seller(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._SellerFiling_business_license(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._SellerFiling_organization_code(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._SellerFiling_legal_representative_id_card(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._SellerFiling_entrusted_agent_id_card(ctx, field, obj)
		case "ministry_production_sale_permit":
			out.Values[i] = ec._SellerFiling_ministry_production_sale_permit(ctx, field, obj)
		case "industry_self_discipline_commitment":
			out.Values[i] = ec._SellerFiling_industry_self_discipline_commitment(ctx, field, obj)
		case "manufacturer_production_sale_permit":
			out.Values[i] = ec._SellerFiling_manufacturer_production_sale_permit(ctx, field, obj)
		case "repair_service_station_name":
			out.Values[i] = ec._SellerFiling_repair_service_station_name(ctx, field, obj)
		case "repair_service_station_address":
			out.Values[i] = ec._SellerFiling_repair_service_station_address(ctx, field, obj)
		case "repair_service_station_material":
			out.Values[i] = ec._SellerFiling_repair_service_station_material(ctx, field, obj)
		case "service_staff_name":
			out.Values[i] = ec._SellerFiling_service_staff_name(ctx, field, obj)
		case "service_staff_phone":
			out.Values[i] = ec._SellerFiling_service_staff_phone(ctx, field, obj)
		case "service_staff_id":
			out.Values[i] = ec._SellerFiling_service_staff_id(ctx, field, obj)
		case "service_staff_material":
			out.Values[i] = ec._SellerFiling_service_staff_material(ctx, field, obj)
		case "other_material":
			out.Values[i] = ec._SellerFiling_other_material(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SellerFiling_remarks(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._SellerFiling_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._SellerFiling_registration_user(ctx, field, obj)
		case "is_verify":
			out.Values[i] = ec._SellerFiling_is_verify(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._SellerFiling_cause(ctx, field, obj)
		case "catalog_id":
			out.Values[i] = ec._SellerFiling_catalog_id(ctx, field, obj)
		case "platform_docking_technology_agreement":
			out.Values[i] = ec._SellerFiling_platform_docking_technology_agreement(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._SellerFiling_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SellerFiling_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._SellerFiling_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._SellerFiling_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SellerFiling_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SellerFiling_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SellerFiling_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingAggregateImplementors = []string{"SellerFilingAggregate"}

func (ec *executionContext) _SellerFilingAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingAggregate")
		case "aggregate":
			out.Values[i] = ec._SellerFilingAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingAggregateFieldsImplementors = []string{"SellerFilingAggregateFields"}

func (ec *executionContext) _SellerFilingAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingAggregateFields")
		case "avg":
			out.Values[i] = ec._SellerFilingAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SellerFilingAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._SellerFilingAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._SellerFilingAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._SellerFilingAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._SellerFilingAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._SellerFilingAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._SellerFilingAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._SellerFilingAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._SellerFilingAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._SellerFilingAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingAvgFieldsImplementors = []string{"SellerFilingAvgFields"}

func (ec *executionContext) _SellerFilingAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingAvgFields")
		case "id":
			out.Values[i] = ec._SellerFilingAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingMaxFieldsImplementors = []string{"SellerFilingMaxFields"}

func (ec *executionContext) _SellerFilingMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingMaxFields")
		case "id":
			out.Values[i] = ec._SellerFilingMaxFields_id(ctx, field, obj)
		case "seller_filing_id":
			out.Values[i] = ec._SellerFilingMaxFields_seller_filing_id(ctx, field, obj)
		case "seller":
			out.Values[i] = ec._SellerFilingMaxFields_seller(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._SellerFilingMaxFields_business_license(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._SellerFilingMaxFields_organization_code(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._SellerFilingMaxFields_legal_representative_id_card(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._SellerFilingMaxFields_entrusted_agent_id_card(ctx, field, obj)
		case "ministry_production_sale_permit":
			out.Values[i] = ec._SellerFilingMaxFields_ministry_production_sale_permit(ctx, field, obj)
		case "industry_self_discipline_commitment":
			out.Values[i] = ec._SellerFilingMaxFields_industry_self_discipline_commitment(ctx, field, obj)
		case "manufacturer_production_sale_permit":
			out.Values[i] = ec._SellerFilingMaxFields_manufacturer_production_sale_permit(ctx, field, obj)
		case "repair_service_station_name":
			out.Values[i] = ec._SellerFilingMaxFields_repair_service_station_name(ctx, field, obj)
		case "repair_service_station_address":
			out.Values[i] = ec._SellerFilingMaxFields_repair_service_station_address(ctx, field, obj)
		case "repair_service_station_material":
			out.Values[i] = ec._SellerFilingMaxFields_repair_service_station_material(ctx, field, obj)
		case "service_staff_name":
			out.Values[i] = ec._SellerFilingMaxFields_service_staff_name(ctx, field, obj)
		case "service_staff_phone":
			out.Values[i] = ec._SellerFilingMaxFields_service_staff_phone(ctx, field, obj)
		case "service_staff_id":
			out.Values[i] = ec._SellerFilingMaxFields_service_staff_id(ctx, field, obj)
		case "service_staff_material":
			out.Values[i] = ec._SellerFilingMaxFields_service_staff_material(ctx, field, obj)
		case "other_material":
			out.Values[i] = ec._SellerFilingMaxFields_other_material(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SellerFilingMaxFields_remarks(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._SellerFilingMaxFields_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._SellerFilingMaxFields_registration_user(ctx, field, obj)
		case "is_verify":
			out.Values[i] = ec._SellerFilingMaxFields_is_verify(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._SellerFilingMaxFields_cause(ctx, field, obj)
		case "catalog_id":
			out.Values[i] = ec._SellerFilingMaxFields_catalog_id(ctx, field, obj)
		case "platform_docking_technology_agreement":
			out.Values[i] = ec._SellerFilingMaxFields_platform_docking_technology_agreement(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._SellerFilingMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SellerFilingMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SellerFilingMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SellerFilingMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SellerFilingMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SellerFilingMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SellerFilingMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingMinFieldsImplementors = []string{"SellerFilingMinFields"}

func (ec *executionContext) _SellerFilingMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingMinFields")
		case "id":
			out.Values[i] = ec._SellerFilingMinFields_id(ctx, field, obj)
		case "seller_filing_id":
			out.Values[i] = ec._SellerFilingMinFields_seller_filing_id(ctx, field, obj)
		case "seller":
			out.Values[i] = ec._SellerFilingMinFields_seller(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._SellerFilingMinFields_business_license(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._SellerFilingMinFields_organization_code(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._SellerFilingMinFields_legal_representative_id_card(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._SellerFilingMinFields_entrusted_agent_id_card(ctx, field, obj)
		case "ministry_production_sale_permit":
			out.Values[i] = ec._SellerFilingMinFields_ministry_production_sale_permit(ctx, field, obj)
		case "industry_self_discipline_commitment":
			out.Values[i] = ec._SellerFilingMinFields_industry_self_discipline_commitment(ctx, field, obj)
		case "manufacturer_production_sale_permit":
			out.Values[i] = ec._SellerFilingMinFields_manufacturer_production_sale_permit(ctx, field, obj)
		case "repair_service_station_name":
			out.Values[i] = ec._SellerFilingMinFields_repair_service_station_name(ctx, field, obj)
		case "repair_service_station_address":
			out.Values[i] = ec._SellerFilingMinFields_repair_service_station_address(ctx, field, obj)
		case "repair_service_station_material":
			out.Values[i] = ec._SellerFilingMinFields_repair_service_station_material(ctx, field, obj)
		case "service_staff_name":
			out.Values[i] = ec._SellerFilingMinFields_service_staff_name(ctx, field, obj)
		case "service_staff_phone":
			out.Values[i] = ec._SellerFilingMinFields_service_staff_phone(ctx, field, obj)
		case "service_staff_id":
			out.Values[i] = ec._SellerFilingMinFields_service_staff_id(ctx, field, obj)
		case "service_staff_material":
			out.Values[i] = ec._SellerFilingMinFields_service_staff_material(ctx, field, obj)
		case "other_material":
			out.Values[i] = ec._SellerFilingMinFields_other_material(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SellerFilingMinFields_remarks(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._SellerFilingMinFields_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._SellerFilingMinFields_registration_user(ctx, field, obj)
		case "is_verify":
			out.Values[i] = ec._SellerFilingMinFields_is_verify(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._SellerFilingMinFields_cause(ctx, field, obj)
		case "catalog_id":
			out.Values[i] = ec._SellerFilingMinFields_catalog_id(ctx, field, obj)
		case "platform_docking_technology_agreement":
			out.Values[i] = ec._SellerFilingMinFields_platform_docking_technology_agreement(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._SellerFilingMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SellerFilingMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SellerFilingMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SellerFilingMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SellerFilingMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SellerFilingMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SellerFilingMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingMutationResponseImplementors = []string{"SellerFilingMutationResponse"}

func (ec *executionContext) _SellerFilingMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._SellerFilingMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._SellerFilingMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingStddevFieldsImplementors = []string{"SellerFilingStddevFields"}

func (ec *executionContext) _SellerFilingStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingStddevFields")
		case "id":
			out.Values[i] = ec._SellerFilingStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingStddevPopFieldsImplementors = []string{"SellerFilingStddevPopFields"}

func (ec *executionContext) _SellerFilingStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingStddevPopFields")
		case "id":
			out.Values[i] = ec._SellerFilingStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingStddevSampFieldsImplementors = []string{"SellerFilingStddevSampFields"}

func (ec *executionContext) _SellerFilingStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingStddevSampFields")
		case "id":
			out.Values[i] = ec._SellerFilingStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingSumFieldsImplementors = []string{"SellerFilingSumFields"}

func (ec *executionContext) _SellerFilingSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingSumFields")
		case "id":
			out.Values[i] = ec._SellerFilingSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingVarPopFieldsImplementors = []string{"SellerFilingVarPopFields"}

func (ec *executionContext) _SellerFilingVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingVarPopFields")
		case "id":
			out.Values[i] = ec._SellerFilingVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingVarSampFieldsImplementors = []string{"SellerFilingVarSampFields"}

func (ec *executionContext) _SellerFilingVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingVarSampFields")
		case "id":
			out.Values[i] = ec._SellerFilingVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerFilingVarianceFieldsImplementors = []string{"SellerFilingVarianceFields"}

func (ec *executionContext) _SellerFilingVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerFilingVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerFilingVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerFilingVarianceFields")
		case "id":
			out.Values[i] = ec._SellerFilingVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordImplementors = []string{"SellerRatingRecord"}

func (ec *executionContext) _SellerRatingRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.SellerRatingRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecord")
		case "id":
			out.Values[i] = ec._SellerRatingRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seller_rating_record_id":
			out.Values[i] = ec._SellerRatingRecord_seller_rating_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "demerit_obj":
			out.Values[i] = ec._SellerRatingRecord_demerit_obj(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecord_demerit_points(ctx, field, obj)
		case "demerit_reason":
			out.Values[i] = ec._SellerRatingRecord_demerit_reason(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._SellerRatingRecord_operator(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._SellerRatingRecord_operation_time(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._SellerRatingRecord_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SellerRatingRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._SellerRatingRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._SellerRatingRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SellerRatingRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SellerRatingRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SellerRatingRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordAggregateImplementors = []string{"SellerRatingRecordAggregate"}

func (ec *executionContext) _SellerRatingRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._SellerRatingRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordAggregateFieldsImplementors = []string{"SellerRatingRecordAggregateFields"}

func (ec *executionContext) _SellerRatingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._SellerRatingRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordAvgFieldsImplementors = []string{"SellerRatingRecordAvgFields"}

func (ec *executionContext) _SellerRatingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordAvgFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordAvgFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordAvgFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordMaxFieldsImplementors = []string{"SellerRatingRecordMaxFields"}

func (ec *executionContext) _SellerRatingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordMaxFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordMaxFields_id(ctx, field, obj)
		case "seller_rating_record_id":
			out.Values[i] = ec._SellerRatingRecordMaxFields_seller_rating_record_id(ctx, field, obj)
		case "demerit_obj":
			out.Values[i] = ec._SellerRatingRecordMaxFields_demerit_obj(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordMaxFields_demerit_points(ctx, field, obj)
		case "demerit_reason":
			out.Values[i] = ec._SellerRatingRecordMaxFields_demerit_reason(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._SellerRatingRecordMaxFields_operator(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._SellerRatingRecordMaxFields_operation_time(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._SellerRatingRecordMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SellerRatingRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SellerRatingRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SellerRatingRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SellerRatingRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SellerRatingRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SellerRatingRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordMinFieldsImplementors = []string{"SellerRatingRecordMinFields"}

func (ec *executionContext) _SellerRatingRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordMinFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordMinFields_id(ctx, field, obj)
		case "seller_rating_record_id":
			out.Values[i] = ec._SellerRatingRecordMinFields_seller_rating_record_id(ctx, field, obj)
		case "demerit_obj":
			out.Values[i] = ec._SellerRatingRecordMinFields_demerit_obj(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordMinFields_demerit_points(ctx, field, obj)
		case "demerit_reason":
			out.Values[i] = ec._SellerRatingRecordMinFields_demerit_reason(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._SellerRatingRecordMinFields_operator(ctx, field, obj)
		case "operation_time":
			out.Values[i] = ec._SellerRatingRecordMinFields_operation_time(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._SellerRatingRecordMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SellerRatingRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._SellerRatingRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._SellerRatingRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._SellerRatingRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._SellerRatingRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._SellerRatingRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordMutationResponseImplementors = []string{"SellerRatingRecordMutationResponse"}

func (ec *executionContext) _SellerRatingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._SellerRatingRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._SellerRatingRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordStddevFieldsImplementors = []string{"SellerRatingRecordStddevFields"}

func (ec *executionContext) _SellerRatingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordStddevFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordStddevFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordStddevFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordStddevPopFieldsImplementors = []string{"SellerRatingRecordStddevPopFields"}

func (ec *executionContext) _SellerRatingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordStddevPopFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordStddevPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordStddevSampFieldsImplementors = []string{"SellerRatingRecordStddevSampFields"}

func (ec *executionContext) _SellerRatingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordStddevSampFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordStddevSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordSumFieldsImplementors = []string{"SellerRatingRecordSumFields"}

func (ec *executionContext) _SellerRatingRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordSumFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordSumFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordSumFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordVarPopFieldsImplementors = []string{"SellerRatingRecordVarPopFields"}

func (ec *executionContext) _SellerRatingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordVarPopFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordVarPopFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordVarPopFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordVarSampFieldsImplementors = []string{"SellerRatingRecordVarSampFields"}

func (ec *executionContext) _SellerRatingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordVarSampFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordVarSampFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordVarSampFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sellerRatingRecordVarianceFieldsImplementors = []string{"SellerRatingRecordVarianceFields"}

func (ec *executionContext) _SellerRatingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.SellerRatingRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sellerRatingRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SellerRatingRecordVarianceFields")
		case "id":
			out.Values[i] = ec._SellerRatingRecordVarianceFields_id(ctx, field, obj)
		case "demerit_points":
			out.Values[i] = ec._SellerRatingRecordVarianceFields_demerit_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordImplementors = []string{"VehicleSaleRecord"}

func (ec *executionContext) _VehicleSaleRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleSaleRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecord")
		case "id":
			out.Values[i] = ec._VehicleSaleRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_sale_record_id":
			out.Values[i] = ec._VehicleSaleRecord_vehicle_sale_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seller":
			out.Values[i] = ec._VehicleSaleRecord_seller(ctx, field, obj)
		case "vehicle_model":
			out.Values[i] = ec._VehicleSaleRecord_vehicle_model(ctx, field, obj)
		case "vehicle_picture":
			out.Values[i] = ec._VehicleSaleRecord_vehicle_picture(ctx, field, obj)
		case "vehicle_parameter":
			out.Values[i] = ec._VehicleSaleRecord_vehicle_parameter(ctx, field, obj)
		case "reference_price":
			out.Values[i] = ec._VehicleSaleRecord_reference_price(ctx, field, obj)
		case "other_material":
			out.Values[i] = ec._VehicleSaleRecord_other_material(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleSaleRecord_remarks(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehicleSaleRecord_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._VehicleSaleRecord_registration_user(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleSaleRecord_cause(ctx, field, obj)
		case "catalog_id":
			out.Values[i] = ec._VehicleSaleRecord_catalog_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecord_axis_type(ctx, field, obj)
		case "transport_volume":
			out.Values[i] = ec._VehicleSaleRecord_transport_volume(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._VehicleSaleRecord_is_review(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleSaleRecord_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleSaleRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleSaleRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleSaleRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleSaleRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleSaleRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleSaleRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordAggregateImplementors = []string{"VehicleSaleRecordAggregate"}

func (ec *executionContext) _VehicleSaleRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleSaleRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordAggregateFieldsImplementors = []string{"VehicleSaleRecordAggregateFields"}

func (ec *executionContext) _VehicleSaleRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleSaleRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordAvgFieldsImplementors = []string{"VehicleSaleRecordAvgFields"}

func (ec *executionContext) _VehicleSaleRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordAvgFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordAvgFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordAvgFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordMaxFieldsImplementors = []string{"VehicleSaleRecordMaxFields"}

func (ec *executionContext) _VehicleSaleRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordMaxFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_id(ctx, field, obj)
		case "vehicle_sale_record_id":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_vehicle_sale_record_id(ctx, field, obj)
		case "seller":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_seller(ctx, field, obj)
		case "vehicle_model":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_vehicle_model(ctx, field, obj)
		case "vehicle_picture":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_vehicle_picture(ctx, field, obj)
		case "vehicle_parameter":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_vehicle_parameter(ctx, field, obj)
		case "reference_price":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_reference_price(ctx, field, obj)
		case "other_material":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_other_material(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_remarks(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_registration_user(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_cause(ctx, field, obj)
		case "catalog_id":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_catalog_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_axis_type(ctx, field, obj)
		case "transport_volume":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_transport_volume(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_is_review(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleSaleRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordMinFieldsImplementors = []string{"VehicleSaleRecordMinFields"}

func (ec *executionContext) _VehicleSaleRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordMinFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordMinFields_id(ctx, field, obj)
		case "vehicle_sale_record_id":
			out.Values[i] = ec._VehicleSaleRecordMinFields_vehicle_sale_record_id(ctx, field, obj)
		case "seller":
			out.Values[i] = ec._VehicleSaleRecordMinFields_seller(ctx, field, obj)
		case "vehicle_model":
			out.Values[i] = ec._VehicleSaleRecordMinFields_vehicle_model(ctx, field, obj)
		case "vehicle_picture":
			out.Values[i] = ec._VehicleSaleRecordMinFields_vehicle_picture(ctx, field, obj)
		case "vehicle_parameter":
			out.Values[i] = ec._VehicleSaleRecordMinFields_vehicle_parameter(ctx, field, obj)
		case "reference_price":
			out.Values[i] = ec._VehicleSaleRecordMinFields_reference_price(ctx, field, obj)
		case "other_material":
			out.Values[i] = ec._VehicleSaleRecordMinFields_other_material(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleSaleRecordMinFields_remarks(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehicleSaleRecordMinFields_registration_time(ctx, field, obj)
		case "registration_user":
			out.Values[i] = ec._VehicleSaleRecordMinFields_registration_user(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleSaleRecordMinFields_cause(ctx, field, obj)
		case "catalog_id":
			out.Values[i] = ec._VehicleSaleRecordMinFields_catalog_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordMinFields_axis_type(ctx, field, obj)
		case "transport_volume":
			out.Values[i] = ec._VehicleSaleRecordMinFields_transport_volume(ctx, field, obj)
		case "is_review":
			out.Values[i] = ec._VehicleSaleRecordMinFields_is_review(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleSaleRecordMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleSaleRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleSaleRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleSaleRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleSaleRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleSaleRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleSaleRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordMutationResponseImplementors = []string{"VehicleSaleRecordMutationResponse"}

func (ec *executionContext) _VehicleSaleRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleSaleRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleSaleRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordStddevFieldsImplementors = []string{"VehicleSaleRecordStddevFields"}

func (ec *executionContext) _VehicleSaleRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordStddevFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordStddevFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordStddevFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordStddevPopFieldsImplementors = []string{"VehicleSaleRecordStddevPopFields"}

func (ec *executionContext) _VehicleSaleRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordStddevPopFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordStddevPopFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordStddevSampFieldsImplementors = []string{"VehicleSaleRecordStddevSampFields"}

func (ec *executionContext) _VehicleSaleRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordStddevSampFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordStddevSampFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordSumFieldsImplementors = []string{"VehicleSaleRecordSumFields"}

func (ec *executionContext) _VehicleSaleRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordSumFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordSumFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordSumFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordVarPopFieldsImplementors = []string{"VehicleSaleRecordVarPopFields"}

func (ec *executionContext) _VehicleSaleRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordVarPopFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordVarPopFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordVarSampFieldsImplementors = []string{"VehicleSaleRecordVarSampFields"}

func (ec *executionContext) _VehicleSaleRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordVarSampFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordVarSampFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleSaleRecordVarianceFieldsImplementors = []string{"VehicleSaleRecordVarianceFields"}

func (ec *executionContext) _VehicleSaleRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleSaleRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleSaleRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleSaleRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleSaleRecordVarianceFields_id(ctx, field, obj)
		case "axis_type":
			out.Values[i] = ec._VehicleSaleRecordVarianceFields_axis_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMuckTruckPurchaseIntention2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntentionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.MuckTruckPurchaseIntention) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckPurchaseIntention) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntention(ctx, sel, v)
}

func (ec *executionContext) marshalNMuckTruckPurchaseIntentionAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckPurchaseIntentionAggregate) graphql.Marshaler {
	return ec._MuckTruckPurchaseIntentionAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNMuckTruckPurchaseIntentionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMuckTruckPurchaseIntentionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx context.Context, v interface{}) (model.MuckTruckPurchaseIntentionBoolExp, error) {
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckPurchaseIntentionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionInsertInput(ctx context.Context, v interface{}) (model.MuckTruckPurchaseIntentionInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckPurchaseIntentionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckPurchaseIntentionInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckPurchaseIntentionInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckPurchaseIntentionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMuckTruckPurchaseIntentionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckPurchaseIntentionInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckPurchaseIntentionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckPurchaseIntentionOrderBy, error) {
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckPurchaseIntentionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckPurchaseIntentionSelectColumn, error) {
	var res model.MuckTruckPurchaseIntentionSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMuckTruckPurchaseIntentionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckPurchaseIntentionSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMuckTruckSaleOrder2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.MuckTruckSaleOrder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckSaleOrder) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckSaleOrder(ctx, sel, v)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckSaleOrderAggregate) graphql.Marshaler {
	return ec._MuckTruckSaleOrderAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx context.Context, v interface{}) (model.MuckTruckSaleOrderBoolExp, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.MuckTruckSaleOrderDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckSaleOrderDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderDetailAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckSaleOrderDetailAggregate) graphql.Marshaler {
	return ec._MuckTruckSaleOrderDetailAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderDetailAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx context.Context, v interface{}) (model.MuckTruckSaleOrderDetailBoolExp, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderDetailInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailInsertInput(ctx context.Context, v interface{}) (model.MuckTruckSaleOrderDetailInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderDetailInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckSaleOrderDetailInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckSaleOrderDetailInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckSaleOrderDetailInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderDetailInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderDetailInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderDetailOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderDetailOrderBy, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckSaleOrderDetailSelectColumn, error) {
	var res model.MuckTruckSaleOrderDetailSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckSaleOrderDetailSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderInsertInput(ctx context.Context, v interface{}) (model.MuckTruckSaleOrderInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckSaleOrderInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckSaleOrderInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckSaleOrderInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderOrderBy, error) {
	res, err := ec.unmarshalInputMuckTruckSaleOrderOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckSaleOrderSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckSaleOrderSelectColumn, error) {
	var res model.MuckTruckSaleOrderSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMuckTruckSaleOrderSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckSaleOrderSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNNewMuckTruckInfo2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.NewMuckTruckInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx context.Context, sel ast.SelectionSet, v *model1.NewMuckTruckInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewMuckTruckInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNNewMuckTruckInfoAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.NewMuckTruckInfoAggregate) graphql.Marshaler {
	return ec._NewMuckTruckInfoAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNNewMuckTruckInfoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewMuckTruckInfoAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNewMuckTruckInfoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx context.Context, v interface{}) (model.NewMuckTruckInfoBoolExp, error) {
	res, err := ec.unmarshalInputNewMuckTruckInfoBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckInfoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoInsertInput(ctx context.Context, v interface{}) (model.NewMuckTruckInfoInsertInput, error) {
	res, err := ec.unmarshalInputNewMuckTruckInfoInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckInfoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.NewMuckTruckInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNewMuckTruckInfoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoInsertInput(ctx context.Context, v interface{}) (*model.NewMuckTruckInfoInsertInput, error) {
	res, err := ec.unmarshalInputNewMuckTruckInfoInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoOrderBy(ctx context.Context, v interface{}) (*model.NewMuckTruckInfoOrderBy, error) {
	res, err := ec.unmarshalInputNewMuckTruckInfoOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumn(ctx context.Context, v interface{}) (model.NewMuckTruckInfoSelectColumn, error) {
	var res model.NewMuckTruckInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNewMuckTruckInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.NewMuckTruckInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNNewMuckTruckPhoto2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhotoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.NewMuckTruckPhoto) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx context.Context, sel ast.SelectionSet, v *model1.NewMuckTruckPhoto) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewMuckTruckPhoto(ctx, sel, v)
}

func (ec *executionContext) marshalNNewMuckTruckPhotoAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v model.NewMuckTruckPhotoAggregate) graphql.Marshaler {
	return ec._NewMuckTruckPhotoAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNNewMuckTruckPhotoAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNewMuckTruckPhotoBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx context.Context, v interface{}) (model.NewMuckTruckPhotoBoolExp, error) {
	res, err := ec.unmarshalInputNewMuckTruckPhotoBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckPhotoInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoInsertInput(ctx context.Context, v interface{}) (model.NewMuckTruckPhotoInsertInput, error) {
	res, err := ec.unmarshalInputNewMuckTruckPhotoInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckPhotoInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.NewMuckTruckPhotoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckPhotoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckPhotoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNewMuckTruckPhotoInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoInsertInput(ctx context.Context, v interface{}) (*model.NewMuckTruckPhotoInsertInput, error) {
	res, err := ec.unmarshalInputNewMuckTruckPhotoInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckPhotoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoOrderBy(ctx context.Context, v interface{}) (*model.NewMuckTruckPhotoOrderBy, error) {
	res, err := ec.unmarshalInputNewMuckTruckPhotoOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumn(ctx context.Context, v interface{}) (model.NewMuckTruckPhotoSelectColumn, error) {
	var res model.NewMuckTruckPhotoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNewMuckTruckPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.NewMuckTruckPhotoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNNewMuckTruckRecommendCatalog2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.NewMuckTruckRecommendCatalog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx context.Context, sel ast.SelectionSet, v *model1.NewMuckTruckRecommendCatalog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalog(ctx, sel, v)
}

func (ec *executionContext) marshalNNewMuckTruckRecommendCatalogAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAggregate(ctx context.Context, sel ast.SelectionSet, v model.NewMuckTruckRecommendCatalogAggregate) graphql.Marshaler {
	return ec._NewMuckTruckRecommendCatalogAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNNewMuckTruckRecommendCatalogAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNewMuckTruckRecommendCatalogBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx context.Context, v interface{}) (model.NewMuckTruckRecommendCatalogBoolExp, error) {
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckRecommendCatalogInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogInsertInput(ctx context.Context, v interface{}) (model.NewMuckTruckRecommendCatalogInsertInput, error) {
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckRecommendCatalogInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.NewMuckTruckRecommendCatalogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckRecommendCatalogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckRecommendCatalogInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNewMuckTruckRecommendCatalogInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogInsertInput(ctx context.Context, v interface{}) (*model.NewMuckTruckRecommendCatalogInsertInput, error) {
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckRecommendCatalogOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogOrderBy(ctx context.Context, v interface{}) (*model.NewMuckTruckRecommendCatalogOrderBy, error) {
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMuckTruckRecommendCatalogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumn(ctx context.Context, v interface{}) (model.NewMuckTruckRecommendCatalogSelectColumn, error) {
	var res model.NewMuckTruckRecommendCatalogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNewMuckTruckRecommendCatalogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.NewMuckTruckRecommendCatalogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSellerFiling2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFilingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SellerFiling) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx context.Context, sel ast.SelectionSet, v *model1.SellerFiling) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SellerFiling(ctx, sel, v)
}

func (ec *executionContext) marshalNSellerFilingAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAggregate(ctx context.Context, sel ast.SelectionSet, v model.SellerFilingAggregate) graphql.Marshaler {
	return ec._SellerFilingAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNSellerFilingAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SellerFilingAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSellerFilingBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx context.Context, v interface{}) (model.SellerFilingBoolExp, error) {
	res, err := ec.unmarshalInputSellerFilingBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerFilingInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingInsertInput(ctx context.Context, v interface{}) (model.SellerFilingInsertInput, error) {
	res, err := ec.unmarshalInputSellerFilingInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerFilingInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SellerFilingInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SellerFilingInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSellerFilingInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSellerFilingInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingInsertInput(ctx context.Context, v interface{}) (*model.SellerFilingInsertInput, error) {
	res, err := ec.unmarshalInputSellerFilingInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerFilingOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingOrderBy(ctx context.Context, v interface{}) (*model.SellerFilingOrderBy, error) {
	res, err := ec.unmarshalInputSellerFilingOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerFilingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumn(ctx context.Context, v interface{}) (model.SellerFilingSelectColumn, error) {
	var res model.SellerFilingSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSellerFilingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SellerFilingSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSellerRatingRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SellerRatingRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx context.Context, sel ast.SelectionSet, v *model1.SellerRatingRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SellerRatingRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNSellerRatingRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.SellerRatingRecordAggregate) graphql.Marshaler {
	return ec._SellerRatingRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNSellerRatingRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SellerRatingRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSellerRatingRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx context.Context, v interface{}) (model.SellerRatingRecordBoolExp, error) {
	res, err := ec.unmarshalInputSellerRatingRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerRatingRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordInsertInput(ctx context.Context, v interface{}) (model.SellerRatingRecordInsertInput, error) {
	res, err := ec.unmarshalInputSellerRatingRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerRatingRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SellerRatingRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SellerRatingRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSellerRatingRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSellerRatingRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordInsertInput(ctx context.Context, v interface{}) (*model.SellerRatingRecordInsertInput, error) {
	res, err := ec.unmarshalInputSellerRatingRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerRatingRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordOrderBy(ctx context.Context, v interface{}) (*model.SellerRatingRecordOrderBy, error) {
	res, err := ec.unmarshalInputSellerRatingRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSellerRatingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumn(ctx context.Context, v interface{}) (model.SellerRatingRecordSelectColumn, error) {
	var res model.SellerRatingRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSellerRatingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SellerRatingRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleSaleRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleSaleRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleSaleRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleSaleRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleSaleRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleSaleRecordAggregate) graphql.Marshaler {
	return ec._VehicleSaleRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleSaleRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleSaleRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleSaleRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx context.Context, v interface{}) (model.VehicleSaleRecordBoolExp, error) {
	res, err := ec.unmarshalInputVehicleSaleRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleSaleRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordInsertInput(ctx context.Context, v interface{}) (model.VehicleSaleRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleSaleRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleSaleRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleSaleRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleSaleRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleSaleRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleSaleRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordInsertInput(ctx context.Context, v interface{}) (*model.VehicleSaleRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleSaleRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleSaleRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordOrderBy(ctx context.Context, v interface{}) (*model.VehicleSaleRecordOrderBy, error) {
	res, err := ec.unmarshalInputVehicleSaleRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleSaleRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumn(ctx context.Context, v interface{}) (model.VehicleSaleRecordSelectColumn, error) {
	var res model.VehicleSaleRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleSaleRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleSaleRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntention2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckPurchaseIntention(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckPurchaseIntention) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntention(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckPurchaseIntentionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckPurchaseIntentionBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckPurchaseIntentionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckPurchaseIntentionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMuckTruckPurchaseIntentionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionIncInput(ctx context.Context, v interface{}) (*model.MuckTruckPurchaseIntentionIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckPurchaseIntentionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckPurchaseIntentionOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckPurchaseIntentionOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckPurchaseIntentionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckPurchaseIntentionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckPurchaseIntentionSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckPurchaseIntentionSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckPurchaseIntentionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckPurchaseIntentionSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckPurchaseIntentionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOMuckTruckPurchaseIntentionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSetInput(ctx context.Context, v interface{}) (*model.MuckTruckPurchaseIntentionSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckPurchaseIntentionSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckPurchaseIntentionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckPurchaseIntentionVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckPurchaseIntentionVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckPurchaseIntentionVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrder2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrder(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckSaleOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrder(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckSaleOrderBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckSaleOrderBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMuckTruckSaleOrderBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckSaleOrderBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐMuckTruckSaleOrderDetail(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckSaleOrderDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckSaleOrderDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckSaleOrderDetailBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailIncInput(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderDetailIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckSaleOrderDetailOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckSaleOrderDetailOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckSaleOrderDetailOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckSaleOrderDetailSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckSaleOrderDetailSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckSaleOrderDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckSaleOrderDetailSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckSaleOrderDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSetInput(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderDetailSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckSaleOrderDetailSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderDetailVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderDetailVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderDetailVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderIncInput(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckSaleOrderIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckSaleOrderOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckSaleOrderOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckSaleOrderOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckSaleOrderSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckSaleOrderSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckSaleOrderSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMuckTruckSaleOrderSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckSaleOrderSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckSaleOrderSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOMuckTruckSaleOrderSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSetInput(ctx context.Context, v interface{}) (*model.MuckTruckSaleOrderSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckSaleOrderSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckSaleOrderVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐMuckTruckSaleOrderVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckSaleOrderVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckSaleOrderVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfo2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckInfo(ctx context.Context, sel ast.SelectionSet, v *model1.NewMuckTruckInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfo(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewMuckTruckInfoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx context.Context, v interface{}) ([]*model.NewMuckTruckInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONewMuckTruckInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONewMuckTruckInfoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoBoolExp(ctx context.Context, v interface{}) (*model.NewMuckTruckInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckInfoBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONewMuckTruckInfoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoIncInput(ctx context.Context, v interface{}) (*model.NewMuckTruckInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckInfoIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONewMuckTruckInfoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewMuckTruckInfoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.NewMuckTruckInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckInfoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONewMuckTruckInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.NewMuckTruckInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.NewMuckTruckInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONewMuckTruckInfoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NewMuckTruckInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNewMuckTruckInfoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalONewMuckTruckInfoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSetInput(ctx context.Context, v interface{}) (*model.NewMuckTruckInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckInfoSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONewMuckTruckInfoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckInfoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckInfoVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhoto2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckPhoto(ctx context.Context, sel ast.SelectionSet, v *model1.NewMuckTruckPhoto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhoto(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewMuckTruckPhotoBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx context.Context, v interface{}) ([]*model.NewMuckTruckPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckPhotoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONewMuckTruckPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONewMuckTruckPhotoBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoBoolExp(ctx context.Context, v interface{}) (*model.NewMuckTruckPhotoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckPhotoBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONewMuckTruckPhotoIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoIncInput(ctx context.Context, v interface{}) (*model.NewMuckTruckPhotoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckPhotoIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONewMuckTruckPhotoMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewMuckTruckPhotoOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.NewMuckTruckPhotoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckPhotoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckPhotoOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONewMuckTruckPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.NewMuckTruckPhotoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.NewMuckTruckPhotoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONewMuckTruckPhotoSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NewMuckTruckPhotoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNewMuckTruckPhotoSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalONewMuckTruckPhotoSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSetInput(ctx context.Context, v interface{}) (*model.NewMuckTruckPhotoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckPhotoSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONewMuckTruckPhotoStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckPhotoVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckPhotoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckPhotoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckPhotoVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalog2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐNewMuckTruckRecommendCatalog(ctx context.Context, sel ast.SelectionSet, v *model1.NewMuckTruckRecommendCatalog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalog(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx context.Context, v interface{}) ([]*model.NewMuckTruckRecommendCatalogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckRecommendCatalogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONewMuckTruckRecommendCatalogBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogBoolExp(ctx context.Context, v interface{}) (*model.NewMuckTruckRecommendCatalogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONewMuckTruckRecommendCatalogIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogIncInput(ctx context.Context, v interface{}) (*model.NewMuckTruckRecommendCatalogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalONewMuckTruckRecommendCatalogOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.NewMuckTruckRecommendCatalogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.NewMuckTruckRecommendCatalogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckRecommendCatalogOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONewMuckTruckRecommendCatalogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.NewMuckTruckRecommendCatalogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.NewMuckTruckRecommendCatalogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewMuckTruckRecommendCatalogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NewMuckTruckRecommendCatalogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNewMuckTruckRecommendCatalogSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalONewMuckTruckRecommendCatalogSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSetInput(ctx context.Context, v interface{}) (*model.NewMuckTruckRecommendCatalogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewMuckTruckRecommendCatalogSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalONewMuckTruckRecommendCatalogVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐNewMuckTruckRecommendCatalogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.NewMuckTruckRecommendCatalogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewMuckTruckRecommendCatalogVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOSellerFiling2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerFiling(ctx context.Context, sel ast.SelectionSet, v *model1.SellerFiling) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFiling(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSellerFilingBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx context.Context, v interface{}) ([]*model.SellerFilingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SellerFilingBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSellerFilingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSellerFilingBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingBoolExp(ctx context.Context, v interface{}) (*model.SellerFilingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSellerFilingBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSellerFilingIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingIncInput(ctx context.Context, v interface{}) (*model.SellerFilingIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSellerFilingIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSellerFilingMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSellerFilingOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SellerFilingOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SellerFilingOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSellerFilingOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSellerFilingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SellerFilingSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SellerFilingSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSellerFilingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSellerFilingSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SellerFilingSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellerFilingSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSellerFilingSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSetInput(ctx context.Context, v interface{}) (*model.SellerFilingSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSellerFilingSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSellerFilingStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerFilingVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerFilingVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerFilingVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerFilingVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐSellerRatingRecord(ctx context.Context, sel ast.SelectionSet, v *model1.SellerRatingRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSellerRatingRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx context.Context, v interface{}) ([]*model.SellerRatingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SellerRatingRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSellerRatingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSellerRatingRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordBoolExp(ctx context.Context, v interface{}) (*model.SellerRatingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSellerRatingRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSellerRatingRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordIncInput(ctx context.Context, v interface{}) (*model.SellerRatingRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSellerRatingRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSellerRatingRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSellerRatingRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SellerRatingRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SellerRatingRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSellerRatingRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSellerRatingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SellerRatingRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SellerRatingRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSellerRatingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSellerRatingRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SellerRatingRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSellerRatingRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSellerRatingRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSetInput(ctx context.Context, v interface{}) (*model.SellerRatingRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSellerRatingRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSellerRatingRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSellerRatingRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐSellerRatingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SellerRatingRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SellerRatingRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleSaleRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋmodelᚐVehicleSaleRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleSaleRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleSaleRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleSaleRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleSaleRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleSaleRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleSaleRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordBoolExp(ctx context.Context, v interface{}) (*model.VehicleSaleRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleSaleRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleSaleRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordIncInput(ctx context.Context, v interface{}) (*model.VehicleSaleRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleSaleRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleSaleRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleSaleRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleSaleRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleSaleRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleSaleRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleSaleRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleSaleRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleSaleRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleSaleRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleSaleRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleSaleRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleSaleRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleSaleRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSetInput(ctx context.Context, v interface{}) (*model.VehicleSaleRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleSaleRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleSaleRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleSaleRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋmuck_truck_recommend_catalogᚋgraphᚋmodelᚐVehicleSaleRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleSaleRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleSaleRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
