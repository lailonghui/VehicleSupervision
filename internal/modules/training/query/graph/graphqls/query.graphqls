schema {
    query: Query
}

type Query {
    # fetch data from the table: "answer_log"
    answer_log_connection(
        after: String
        before: String
        # distinct select on columns
        distinct_on: [answer_log_select_column!]
        first: Int
        last: Int
        # sort the rows by one or more columns
        order_by: [answer_log_order_by!]
        # filter the rows returned
        where: answer_log_bool_exp
    ): answer_logConnection!
    # fetch data from the table: "driver_study_details"
    driver_study_details_connection(
        after: String
        before: String
        # distinct select on columns
        distinct_on: [driver_study_details_select_column!]
        first: Int
        last: Int
        # sort the rows by one or more columns
        order_by: [driver_study_details_order_by!]
        # filter the rows returned
        where: driver_study_details_bool_exp
    ): driver_study_detailsConnection!
    # fetch data from the table: "enterprise_training"
    enterprise_training_connection(
        after: String
        before: String
        # distinct select on columns
        distinct_on: [enterprise_training_select_column!]
        first: Int
        last: Int
        # sort the rows by one or more columns
        order_by: [enterprise_training_order_by!]
        # filter the rows returned
        where: enterprise_training_bool_exp
    ): enterprise_trainingConnection!
    # fetch data from the table: "government_manager"
    government_manager_connection(
        after: String
        before: String
        # distinct select on columns
        distinct_on: [government_manager_select_column!]
        first: Int
        last: Int
        # sort the rows by one or more columns
        order_by: [government_manager_order_by!]
        # filter the rows returned
        where: government_manager_bool_exp
    ): government_managerConnection!
    node(
        # A globally unique id
        id: ID!
    ): Node
    # fetch data from the table: "score_log"
    score_log_connection(
        after: String
        before: String
        # distinct select on columns
        distinct_on: [score_log_select_column!]
        first: Int
        last: Int
        # sort the rows by one or more columns
        order_by: [score_log_order_by!]
        # filter the rows returned
        where: score_log_bool_exp
    ): score_logConnection!
    # fetch data from the table: "training_material"
    training_material_connection(
        after: String
        before: String
        # distinct select on columns
        distinct_on: [training_material_select_column!]
        first: Int
        last: Int
        # sort the rows by one or more columns
        order_by: [training_material_order_by!]
        # filter the rows returned
        where: training_material_bool_exp
    ): training_materialConnection!
}