# columns and relationships of "score_log"
type score_log {
    create_at: timestamptz
    create_by: String
    id: bigint!
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "score_log"
type score_log_aggregate {
    aggregate: score_log_aggregate_fields
    nodes: [score_log!]!
}

# aggregate fields of "score_log"
type score_log_aggregate_fields {
    avg: score_log_avg_fields
    count(columns: [score_log_select_column!], distinct: Boolean): Int
    max: score_log_max_fields
    min: score_log_min_fields
    stddev: score_log_stddev_fields
    stddev_pop: score_log_stddev_pop_fields
    stddev_samp: score_log_stddev_samp_fields
    sum: score_log_sum_fields
    var_pop: score_log_var_pop_fields
    var_samp: score_log_var_samp_fields
    variance: score_log_variance_fields
}

# order by aggregate values of table "score_log"
input score_log_aggregate_order_by {
    avg: score_log_avg_order_by
    count: order_by
    max: score_log_max_order_by
    min: score_log_min_order_by
    stddev: score_log_stddev_order_by
    stddev_pop: score_log_stddev_pop_order_by
    stddev_samp: score_log_stddev_samp_order_by
    sum: score_log_sum_order_by
    var_pop: score_log_var_pop_order_by
    var_samp: score_log_var_samp_order_by
    variance: score_log_variance_order_by
}

# input type for inserting array relation for remote table "score_log"
input score_log_arr_rel_insert_input {
    data: [score_log_insert_input!]!
    on_conflict: score_log_on_conflict
}

# aggregate avg on columns
type score_log_avg_fields {
    id: Float
    training_score: Float
}

# order by avg() on columns of table "score_log"
input score_log_avg_order_by {
    id: order_by
    training_score: order_by
}

# Boolean expression to filter rows from the table "score_log". All fields are combined with a logical 'AND'.
input score_log_bool_exp {
    _and: [score_log_bool_exp]
    _not: score_log_bool_exp
    _or: [score_log_bool_exp]
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    id: bigint_comparison_exp
    id_number: String_comparison_exp
    name: String_comparison_exp
    score_log_id: String_comparison_exp
    training_programs: String_comparison_exp
    training_score: bigint_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "score_log"
enum score_log_constraint {
    # unique or primary key constraint
    score_log_pkey
}

# input type for incrementing integer column in table "score_log"
input score_log_inc_input {
    id: bigint
    training_score: bigint
}

# input type for inserting data into table "score_log"
input score_log_insert_input {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type score_log_max_fields {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "score_log"
input score_log_max_order_by {
    create_at: order_by
    create_by: order_by
    id: order_by
    id_number: order_by
    name: order_by
    score_log_id: order_by
    training_programs: order_by
    training_score: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type score_log_min_fields {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "score_log"
input score_log_min_order_by {
    create_at: order_by
    create_by: order_by
    id: order_by
    id_number: order_by
    name: order_by
    score_log_id: order_by
    training_programs: order_by
    training_score: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "score_log"
type score_log_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [score_log!]!
}

# input type for inserting object relation for remote table "score_log"
input score_log_obj_rel_insert_input {
    data: score_log_insert_input!
    on_conflict: score_log_on_conflict
}

# on conflict condition type for table "score_log"
input score_log_on_conflict {
    constraint: score_log_constraint!
    update_columns: [score_log_update_column!]!
    where: score_log_bool_exp
}

# ordering options when selecting data from "score_log"
input score_log_order_by {
    create_at: order_by
    create_by: order_by
    id: order_by
    id_number: order_by
    name: order_by
    score_log_id: order_by
    training_programs: order_by
    training_score: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "score_log"
input score_log_pk_columns_input {
    id: bigint!
}

# select columns of table "score_log"
enum score_log_select_column {
    # column name
    create_at
    # column name
    create_by
    # column name
    id
    # column name
    id_number
    # column name
    name
    # column name
    score_log_id
    # column name
    training_programs
    # column name
    training_score
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "score_log"
input score_log_set_input {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type score_log_stddev_fields {
    id: Float
    training_score: Float
}

# order by stddev() on columns of table "score_log"
input score_log_stddev_order_by {
    id: order_by
    training_score: order_by
}

# aggregate stddev_pop on columns
type score_log_stddev_pop_fields {
    id: Float
    training_score: Float
}

# order by stddev_pop() on columns of table "score_log"
input score_log_stddev_pop_order_by {
    id: order_by
    training_score: order_by
}

# aggregate stddev_samp on columns
type score_log_stddev_samp_fields {
    id: Float
    training_score: Float
}

# order by stddev_samp() on columns of table "score_log"
input score_log_stddev_samp_order_by {
    id: order_by
    training_score: order_by
}

# aggregate sum on columns
type score_log_sum_fields {
    id: bigint
    training_score: bigint
}

# order by sum() on columns of table "score_log"
input score_log_sum_order_by {
    id: order_by
    training_score: order_by
}

# update columns of table "score_log"
enum score_log_update_column {
    # column name
    create_at
    # column name
    create_by
    # column name
    id
    # column name
    id_number
    # column name
    name
    # column name
    score_log_id
    # column name
    training_programs
    # column name
    training_score
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type score_log_var_pop_fields {
    id: Float
    training_score: Float
}

# order by var_pop() on columns of table "score_log"
input score_log_var_pop_order_by {
    id: order_by
    training_score: order_by
}

# aggregate var_samp on columns
type score_log_var_samp_fields {
    id: Float
    training_score: Float
}

# order by var_samp() on columns of table "score_log"
input score_log_var_samp_order_by {
    id: order_by
    training_score: order_by
}

# aggregate variance on columns
type score_log_variance_fields {
    id: Float
    training_score: Float
}

# order by variance() on columns of table "score_log"
input score_log_variance_order_by {
    id: order_by
    training_score: order_by
}