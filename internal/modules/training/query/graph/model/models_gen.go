// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
}

type PageInfo struct {
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
}

type AnswerLog struct {
	Answer      *string    `json:"answer"`
	AnswerLogID *string    `json:"answer_log_id"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	DriverID    *string    `json:"driver_id"`
	ID          int64      `json:"id"`
	MaterialID  *string    `json:"material_id"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
}

type AnswerLogAggregate struct {
	Aggregate *AnswerLogAggregateFields `json:"aggregate"`
	Nodes     []*AnswerLog              `json:"nodes"`
}

type AnswerLogAggregateFields struct {
	Avg        *AnswerLogAvgFields        `json:"avg"`
	Count      *int                       `json:"count"`
	Max        *AnswerLogMaxFields        `json:"max"`
	Min        *AnswerLogMinFields        `json:"min"`
	Stddev     *AnswerLogStddevFields     `json:"stddev"`
	StddevPop  *AnswerLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *AnswerLogStddevSampFields `json:"stddev_samp"`
	Sum        *AnswerLogSumFields        `json:"sum"`
	VarPop     *AnswerLogVarPopFields     `json:"var_pop"`
	VarSamp    *AnswerLogVarSampFields    `json:"var_samp"`
	Variance   *AnswerLogVarianceFields   `json:"variance"`
}

type AnswerLogAggregateOrderBy struct {
	Avg        *AnswerLogAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy              `json:"count"`
	Max        *AnswerLogMaxOrderBy        `json:"max"`
	Min        *AnswerLogMinOrderBy        `json:"min"`
	Stddev     *AnswerLogStddevOrderBy     `json:"stddev"`
	StddevPop  *AnswerLogStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *AnswerLogStddevSampOrderBy `json:"stddev_samp"`
	Sum        *AnswerLogSumOrderBy        `json:"sum"`
	VarPop     *AnswerLogVarPopOrderBy     `json:"var_pop"`
	VarSamp    *AnswerLogVarSampOrderBy    `json:"var_samp"`
	Variance   *AnswerLogVarianceOrderBy   `json:"variance"`
}

type AnswerLogArrRelInsertInput struct {
	Data       []*AnswerLogInsertInput `json:"data"`
	OnConflict *AnswerLogOnConflict    `json:"on_conflict"`
}

type AnswerLogAvgFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogBoolExp struct {
	And         []*AnswerLogBoolExp             `json:"_and"`
	Not         *AnswerLogBoolExp               `json:"_not"`
	Or          []*AnswerLogBoolExp             `json:"_or"`
	Answer      *model.StringComparisonExp      `json:"answer"`
	AnswerLogID *model.StringComparisonExp      `json:"answer_log_id"`
	CreateAt    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy    *model.StringComparisonExp      `json:"create_by"`
	DriverID    *model.StringComparisonExp      `json:"driver_id"`
	ID          *model.BigintComparisonExp      `json:"id"`
	MaterialID  *model.StringComparisonExp      `json:"material_id"`
	UpdateAt    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy    *model.StringComparisonExp      `json:"update_by"`
}

type AnswerLogIncInput struct {
	ID *int64 `json:"id"`
}

type AnswerLogInsertInput struct {
	Answer      *string    `json:"answer"`
	AnswerLogID *string    `json:"answer_log_id"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	DriverID    *string    `json:"driver_id"`
	ID          *int64     `json:"id"`
	MaterialID  *string    `json:"material_id"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
}

type AnswerLogMaxFields struct {
	Answer      *string    `json:"answer"`
	AnswerLogID *string    `json:"answer_log_id"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	DriverID    *string    `json:"driver_id"`
	ID          *int64     `json:"id"`
	MaterialID  *string    `json:"material_id"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
}

type AnswerLogMaxOrderBy struct {
	Answer      *model.OrderBy `json:"answer"`
	AnswerLogID *model.OrderBy `json:"answer_log_id"`
	CreateAt    *model.OrderBy `json:"create_at"`
	CreateBy    *model.OrderBy `json:"create_by"`
	DriverID    *model.OrderBy `json:"driver_id"`
	ID          *model.OrderBy `json:"id"`
	MaterialID  *model.OrderBy `json:"material_id"`
	UpdateAt    *model.OrderBy `json:"update_at"`
	UpdateBy    *model.OrderBy `json:"update_by"`
}

type AnswerLogMinFields struct {
	Answer      *string    `json:"answer"`
	AnswerLogID *string    `json:"answer_log_id"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	DriverID    *string    `json:"driver_id"`
	ID          *int64     `json:"id"`
	MaterialID  *string    `json:"material_id"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
}

type AnswerLogMinOrderBy struct {
	Answer      *model.OrderBy `json:"answer"`
	AnswerLogID *model.OrderBy `json:"answer_log_id"`
	CreateAt    *model.OrderBy `json:"create_at"`
	CreateBy    *model.OrderBy `json:"create_by"`
	DriverID    *model.OrderBy `json:"driver_id"`
	ID          *model.OrderBy `json:"id"`
	MaterialID  *model.OrderBy `json:"material_id"`
	UpdateAt    *model.OrderBy `json:"update_at"`
	UpdateBy    *model.OrderBy `json:"update_by"`
}

type AnswerLogMutationResponse struct {
	AffectedRows int          `json:"affected_rows"`
	Returning    []*AnswerLog `json:"returning"`
}

type AnswerLogObjRelInsertInput struct {
	Data       *AnswerLogInsertInput `json:"data"`
	OnConflict *AnswerLogOnConflict  `json:"on_conflict"`
}

type AnswerLogOnConflict struct {
	Constraint    AnswerLogConstraint     `json:"constraint"`
	UpdateColumns []AnswerLogUpdateColumn `json:"update_columns"`
	Where         *AnswerLogBoolExp       `json:"where"`
}

type AnswerLogOrderBy struct {
	Answer      *model.OrderBy `json:"answer"`
	AnswerLogID *model.OrderBy `json:"answer_log_id"`
	CreateAt    *model.OrderBy `json:"create_at"`
	CreateBy    *model.OrderBy `json:"create_by"`
	DriverID    *model.OrderBy `json:"driver_id"`
	ID          *model.OrderBy `json:"id"`
	MaterialID  *model.OrderBy `json:"material_id"`
	UpdateAt    *model.OrderBy `json:"update_at"`
	UpdateBy    *model.OrderBy `json:"update_by"`
}

type AnswerLogPkColumnsInput struct {
	ID int64 `json:"id"`
}

type AnswerLogSetInput struct {
	Answer      *string    `json:"answer"`
	AnswerLogID *string    `json:"answer_log_id"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	DriverID    *string    `json:"driver_id"`
	ID          *int64     `json:"id"`
	MaterialID  *string    `json:"material_id"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
}

type AnswerLogStddevFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogStddevPopFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogStddevSampFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogSumFields struct {
	ID *int64 `json:"id"`
}

type AnswerLogSumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogVarPopFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogVarSampFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogVarianceFields struct {
	ID *float64 `json:"id"`
}

type AnswerLogVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DriverStudyDetails struct {
	CreateBy            *string    `json:"create_by"`
	CreateTime          *time.Time `json:"create_time"`
	DriverID            *string    `json:"driver_id"`
	DriverTrainingID    *string    `json:"driver_training_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	ID                  int64      `json:"id"`
	IsTrainingCompleted *bool      `json:"is_training_completed"`
	MaterialID          *int64     `json:"material_id"`
	Score               *int64     `json:"score"`
	TrainingTime        *float64   `json:"training_time"`
}

type DriverStudyDetailsAggregate struct {
	Aggregate *DriverStudyDetailsAggregateFields `json:"aggregate"`
	Nodes     []*DriverStudyDetails              `json:"nodes"`
}

type DriverStudyDetailsAggregateFields struct {
	Avg        *DriverStudyDetailsAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *DriverStudyDetailsMaxFields        `json:"max"`
	Min        *DriverStudyDetailsMinFields        `json:"min"`
	Stddev     *DriverStudyDetailsStddevFields     `json:"stddev"`
	StddevPop  *DriverStudyDetailsStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverStudyDetailsStddevSampFields `json:"stddev_samp"`
	Sum        *DriverStudyDetailsSumFields        `json:"sum"`
	VarPop     *DriverStudyDetailsVarPopFields     `json:"var_pop"`
	VarSamp    *DriverStudyDetailsVarSampFields    `json:"var_samp"`
	Variance   *DriverStudyDetailsVarianceFields   `json:"variance"`
}

type DriverStudyDetailsAggregateOrderBy struct {
	Avg        *DriverStudyDetailsAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                       `json:"count"`
	Max        *DriverStudyDetailsMaxOrderBy        `json:"max"`
	Min        *DriverStudyDetailsMinOrderBy        `json:"min"`
	Stddev     *DriverStudyDetailsStddevOrderBy     `json:"stddev"`
	StddevPop  *DriverStudyDetailsStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *DriverStudyDetailsStddevSampOrderBy `json:"stddev_samp"`
	Sum        *DriverStudyDetailsSumOrderBy        `json:"sum"`
	VarPop     *DriverStudyDetailsVarPopOrderBy     `json:"var_pop"`
	VarSamp    *DriverStudyDetailsVarSampOrderBy    `json:"var_samp"`
	Variance   *DriverStudyDetailsVarianceOrderBy   `json:"variance"`
}

type DriverStudyDetailsArrRelInsertInput struct {
	Data       []*DriverStudyDetailsInsertInput `json:"data"`
	OnConflict *DriverStudyDetailsOnConflict    `json:"on_conflict"`
}

type DriverStudyDetailsAvgFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsAvgOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsBoolExp struct {
	And                 []*DriverStudyDetailsBoolExp    `json:"_and"`
	Not                 *DriverStudyDetailsBoolExp      `json:"_not"`
	Or                  []*DriverStudyDetailsBoolExp    `json:"_or"`
	CreateBy            *model.StringComparisonExp      `json:"create_by"`
	CreateTime          *model.TimestamptzComparisonExp `json:"create_time"`
	DriverID            *model.StringComparisonExp      `json:"driver_id"`
	DriverTrainingID    *model.StringComparisonExp      `json:"driver_training_id"`
	EnterpriseID        *model.StringComparisonExp      `json:"enterprise_id"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	IsTrainingCompleted *model.BooleanComparisonExp     `json:"is_training_completed"`
	MaterialID          *model.BigintComparisonExp      `json:"material_id"`
	Score               *model.BigintComparisonExp      `json:"score"`
	TrainingTime        *NumericComparisonExp           `json:"training_time"`
}

type DriverStudyDetailsIncInput struct {
	ID           *int64   `json:"id"`
	MaterialID   *int64   `json:"material_id"`
	Score        *int64   `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsInsertInput struct {
	CreateBy            *string    `json:"create_by"`
	CreateTime          *time.Time `json:"create_time"`
	DriverID            *string    `json:"driver_id"`
	DriverTrainingID    *string    `json:"driver_training_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	ID                  *int64     `json:"id"`
	IsTrainingCompleted *bool      `json:"is_training_completed"`
	MaterialID          *int64     `json:"material_id"`
	Score               *int64     `json:"score"`
	TrainingTime        *float64   `json:"training_time"`
}

type DriverStudyDetailsMaxFields struct {
	CreateBy         *string    `json:"create_by"`
	CreateTime       *time.Time `json:"create_time"`
	DriverID         *string    `json:"driver_id"`
	DriverTrainingID *string    `json:"driver_training_id"`
	EnterpriseID     *string    `json:"enterprise_id"`
	ID               *int64     `json:"id"`
	MaterialID       *int64     `json:"material_id"`
	Score            *int64     `json:"score"`
	TrainingTime     *float64   `json:"training_time"`
}

type DriverStudyDetailsMaxOrderBy struct {
	CreateBy         *model.OrderBy `json:"create_by"`
	CreateTime       *model.OrderBy `json:"create_time"`
	DriverID         *model.OrderBy `json:"driver_id"`
	DriverTrainingID *model.OrderBy `json:"driver_training_id"`
	EnterpriseID     *model.OrderBy `json:"enterprise_id"`
	ID               *model.OrderBy `json:"id"`
	MaterialID       *model.OrderBy `json:"material_id"`
	Score            *model.OrderBy `json:"score"`
	TrainingTime     *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsMinFields struct {
	CreateBy         *string    `json:"create_by"`
	CreateTime       *time.Time `json:"create_time"`
	DriverID         *string    `json:"driver_id"`
	DriverTrainingID *string    `json:"driver_training_id"`
	EnterpriseID     *string    `json:"enterprise_id"`
	ID               *int64     `json:"id"`
	MaterialID       *int64     `json:"material_id"`
	Score            *int64     `json:"score"`
	TrainingTime     *float64   `json:"training_time"`
}

type DriverStudyDetailsMinOrderBy struct {
	CreateBy         *model.OrderBy `json:"create_by"`
	CreateTime       *model.OrderBy `json:"create_time"`
	DriverID         *model.OrderBy `json:"driver_id"`
	DriverTrainingID *model.OrderBy `json:"driver_training_id"`
	EnterpriseID     *model.OrderBy `json:"enterprise_id"`
	ID               *model.OrderBy `json:"id"`
	MaterialID       *model.OrderBy `json:"material_id"`
	Score            *model.OrderBy `json:"score"`
	TrainingTime     *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*DriverStudyDetails `json:"returning"`
}

type DriverStudyDetailsObjRelInsertInput struct {
	Data       *DriverStudyDetailsInsertInput `json:"data"`
	OnConflict *DriverStudyDetailsOnConflict  `json:"on_conflict"`
}

type DriverStudyDetailsOnConflict struct {
	Constraint    DriverStudyDetailsConstraint     `json:"constraint"`
	UpdateColumns []DriverStudyDetailsUpdateColumn `json:"update_columns"`
	Where         *DriverStudyDetailsBoolExp       `json:"where"`
}

type DriverStudyDetailsOrderBy struct {
	CreateBy            *model.OrderBy `json:"create_by"`
	CreateTime          *model.OrderBy `json:"create_time"`
	DriverID            *model.OrderBy `json:"driver_id"`
	DriverTrainingID    *model.OrderBy `json:"driver_training_id"`
	EnterpriseID        *model.OrderBy `json:"enterprise_id"`
	ID                  *model.OrderBy `json:"id"`
	IsTrainingCompleted *model.OrderBy `json:"is_training_completed"`
	MaterialID          *model.OrderBy `json:"material_id"`
	Score               *model.OrderBy `json:"score"`
	TrainingTime        *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsPkColumnsInput struct {
	ID int64 `json:"id"`
}

type DriverStudyDetailsSetInput struct {
	CreateBy            *string    `json:"create_by"`
	CreateTime          *time.Time `json:"create_time"`
	DriverID            *string    `json:"driver_id"`
	DriverTrainingID    *string    `json:"driver_training_id"`
	EnterpriseID        *string    `json:"enterprise_id"`
	ID                  *int64     `json:"id"`
	IsTrainingCompleted *bool      `json:"is_training_completed"`
	MaterialID          *int64     `json:"material_id"`
	Score               *int64     `json:"score"`
	TrainingTime        *float64   `json:"training_time"`
}

type DriverStudyDetailsStddevFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsStddevOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsStddevPopFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsStddevPopOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsStddevSampFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsStddevSampOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsSumFields struct {
	ID           *int64   `json:"id"`
	MaterialID   *int64   `json:"material_id"`
	Score        *int64   `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsSumOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsVarPopFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsVarPopOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsVarSampFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsVarSampOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type DriverStudyDetailsVarianceFields struct {
	ID           *float64 `json:"id"`
	MaterialID   *float64 `json:"material_id"`
	Score        *float64 `json:"score"`
	TrainingTime *float64 `json:"training_time"`
}

type DriverStudyDetailsVarianceOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	MaterialID   *model.OrderBy `json:"material_id"`
	Score        *model.OrderBy `json:"score"`
	TrainingTime *model.OrderBy `json:"training_time"`
}

type EnterpriseTraining struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	EnterpriseID         *string    `json:"enterprise_id"`
	EnterpriseTrainingID *string    `json:"enterprise_training_id"`
	ID                   int64      `json:"id"`
	IsDelete             *bool      `json:"is_delete"`
	IsReceived           *bool      `json:"is_received"`
	MaterialID           *string    `json:"material_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

type EnterpriseTrainingAggregate struct {
	Aggregate *EnterpriseTrainingAggregateFields `json:"aggregate"`
	Nodes     []*EnterpriseTraining              `json:"nodes"`
}

type EnterpriseTrainingAggregateFields struct {
	Avg        *EnterpriseTrainingAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *EnterpriseTrainingMaxFields        `json:"max"`
	Min        *EnterpriseTrainingMinFields        `json:"min"`
	Stddev     *EnterpriseTrainingStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseTrainingStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseTrainingStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseTrainingSumFields        `json:"sum"`
	VarPop     *EnterpriseTrainingVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseTrainingVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseTrainingVarianceFields   `json:"variance"`
}

type EnterpriseTrainingAggregateOrderBy struct {
	Avg        *EnterpriseTrainingAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                       `json:"count"`
	Max        *EnterpriseTrainingMaxOrderBy        `json:"max"`
	Min        *EnterpriseTrainingMinOrderBy        `json:"min"`
	Stddev     *EnterpriseTrainingStddevOrderBy     `json:"stddev"`
	StddevPop  *EnterpriseTrainingStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *EnterpriseTrainingStddevSampOrderBy `json:"stddev_samp"`
	Sum        *EnterpriseTrainingSumOrderBy        `json:"sum"`
	VarPop     *EnterpriseTrainingVarPopOrderBy     `json:"var_pop"`
	VarSamp    *EnterpriseTrainingVarSampOrderBy    `json:"var_samp"`
	Variance   *EnterpriseTrainingVarianceOrderBy   `json:"variance"`
}

type EnterpriseTrainingArrRelInsertInput struct {
	Data       []*EnterpriseTrainingInsertInput `json:"data"`
	OnConflict *EnterpriseTrainingOnConflict    `json:"on_conflict"`
}

type EnterpriseTrainingAvgFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingBoolExp struct {
	And                  []*EnterpriseTrainingBoolExp    `json:"_and"`
	Not                  *EnterpriseTrainingBoolExp      `json:"_not"`
	Or                   []*EnterpriseTrainingBoolExp    `json:"_or"`
	CreateAt             *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy             *model.StringComparisonExp      `json:"create_by"`
	DeleteAt             *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy             *model.StringComparisonExp      `json:"delete_by"`
	EnterpriseID         *model.StringComparisonExp      `json:"enterprise_id"`
	EnterpriseTrainingID *model.StringComparisonExp      `json:"enterprise_training_id"`
	ID                   *model.BigintComparisonExp      `json:"id"`
	IsDelete             *model.BooleanComparisonExp     `json:"is_delete"`
	IsReceived           *model.BooleanComparisonExp     `json:"is_received"`
	MaterialID           *model.StringComparisonExp      `json:"material_id"`
	UpdateAt             *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy             *model.StringComparisonExp      `json:"update_by"`
}

type EnterpriseTrainingIncInput struct {
	ID *int64 `json:"id"`
}

type EnterpriseTrainingInsertInput struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	EnterpriseID         *string    `json:"enterprise_id"`
	EnterpriseTrainingID *string    `json:"enterprise_training_id"`
	ID                   *int64     `json:"id"`
	IsDelete             *bool      `json:"is_delete"`
	IsReceived           *bool      `json:"is_received"`
	MaterialID           *string    `json:"material_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

type EnterpriseTrainingMaxFields struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	EnterpriseID         *string    `json:"enterprise_id"`
	EnterpriseTrainingID *string    `json:"enterprise_training_id"`
	ID                   *int64     `json:"id"`
	MaterialID           *string    `json:"material_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

type EnterpriseTrainingMaxOrderBy struct {
	CreateAt             *model.OrderBy `json:"create_at"`
	CreateBy             *model.OrderBy `json:"create_by"`
	DeleteAt             *model.OrderBy `json:"delete_at"`
	DeleteBy             *model.OrderBy `json:"delete_by"`
	EnterpriseID         *model.OrderBy `json:"enterprise_id"`
	EnterpriseTrainingID *model.OrderBy `json:"enterprise_training_id"`
	ID                   *model.OrderBy `json:"id"`
	MaterialID           *model.OrderBy `json:"material_id"`
	UpdateAt             *model.OrderBy `json:"update_at"`
	UpdateBy             *model.OrderBy `json:"update_by"`
}

type EnterpriseTrainingMinFields struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	EnterpriseID         *string    `json:"enterprise_id"`
	EnterpriseTrainingID *string    `json:"enterprise_training_id"`
	ID                   *int64     `json:"id"`
	MaterialID           *string    `json:"material_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

type EnterpriseTrainingMinOrderBy struct {
	CreateAt             *model.OrderBy `json:"create_at"`
	CreateBy             *model.OrderBy `json:"create_by"`
	DeleteAt             *model.OrderBy `json:"delete_at"`
	DeleteBy             *model.OrderBy `json:"delete_by"`
	EnterpriseID         *model.OrderBy `json:"enterprise_id"`
	EnterpriseTrainingID *model.OrderBy `json:"enterprise_training_id"`
	ID                   *model.OrderBy `json:"id"`
	MaterialID           *model.OrderBy `json:"material_id"`
	UpdateAt             *model.OrderBy `json:"update_at"`
	UpdateBy             *model.OrderBy `json:"update_by"`
}

type EnterpriseTrainingMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*EnterpriseTraining `json:"returning"`
}

type EnterpriseTrainingObjRelInsertInput struct {
	Data       *EnterpriseTrainingInsertInput `json:"data"`
	OnConflict *EnterpriseTrainingOnConflict  `json:"on_conflict"`
}

type EnterpriseTrainingOnConflict struct {
	Constraint    EnterpriseTrainingConstraint     `json:"constraint"`
	UpdateColumns []EnterpriseTrainingUpdateColumn `json:"update_columns"`
	Where         *EnterpriseTrainingBoolExp       `json:"where"`
}

type EnterpriseTrainingOrderBy struct {
	CreateAt             *model.OrderBy `json:"create_at"`
	CreateBy             *model.OrderBy `json:"create_by"`
	DeleteAt             *model.OrderBy `json:"delete_at"`
	DeleteBy             *model.OrderBy `json:"delete_by"`
	EnterpriseID         *model.OrderBy `json:"enterprise_id"`
	EnterpriseTrainingID *model.OrderBy `json:"enterprise_training_id"`
	ID                   *model.OrderBy `json:"id"`
	IsDelete             *model.OrderBy `json:"is_delete"`
	IsReceived           *model.OrderBy `json:"is_received"`
	MaterialID           *model.OrderBy `json:"material_id"`
	UpdateAt             *model.OrderBy `json:"update_at"`
	UpdateBy             *model.OrderBy `json:"update_by"`
}

type EnterpriseTrainingPkColumnsInput struct {
	ID int64 `json:"id"`
}

type EnterpriseTrainingSetInput struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	EnterpriseID         *string    `json:"enterprise_id"`
	EnterpriseTrainingID *string    `json:"enterprise_training_id"`
	ID                   *int64     `json:"id"`
	IsDelete             *bool      `json:"is_delete"`
	IsReceived           *bool      `json:"is_received"`
	MaterialID           *string    `json:"material_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

type EnterpriseTrainingStddevFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingStddevPopFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingStddevSampFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingSumFields struct {
	ID *int64 `json:"id"`
}

type EnterpriseTrainingSumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingVarPopFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingVarSampFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type EnterpriseTrainingVarianceFields struct {
	ID *float64 `json:"id"`
}

type EnterpriseTrainingVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type GovernmentManager struct {
	AllDriverCount *int64     `json:"all_driver_count"`
	AreaID         *string    `json:"area_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Deadline       *time.Time `json:"deadline"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	GovID          *string    `json:"gov_id"`
	ID             int64      `json:"id"`
	IsDelete       *bool      `json:"is_delete"`
	IsReceived     *bool      `json:"is_received"`
	ManageID       *string    `json:"manage_id"`
	MaterialID     *string    `json:"material_id"`
	Note           *string    `json:"note"`
	StartTime      *time.Time `json:"start_time"`
	TrainedDrivers *int64     `json:"trained_drivers"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
}

type GovernmentManagerAggregate struct {
	Aggregate *GovernmentManagerAggregateFields `json:"aggregate"`
	Nodes     []*GovernmentManager              `json:"nodes"`
}

type GovernmentManagerAggregateFields struct {
	Avg        *GovernmentManagerAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *GovernmentManagerMaxFields        `json:"max"`
	Min        *GovernmentManagerMinFields        `json:"min"`
	Stddev     *GovernmentManagerStddevFields     `json:"stddev"`
	StddevPop  *GovernmentManagerStddevPopFields  `json:"stddev_pop"`
	StddevSamp *GovernmentManagerStddevSampFields `json:"stddev_samp"`
	Sum        *GovernmentManagerSumFields        `json:"sum"`
	VarPop     *GovernmentManagerVarPopFields     `json:"var_pop"`
	VarSamp    *GovernmentManagerVarSampFields    `json:"var_samp"`
	Variance   *GovernmentManagerVarianceFields   `json:"variance"`
}

type GovernmentManagerAggregateOrderBy struct {
	Avg        *GovernmentManagerAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                      `json:"count"`
	Max        *GovernmentManagerMaxOrderBy        `json:"max"`
	Min        *GovernmentManagerMinOrderBy        `json:"min"`
	Stddev     *GovernmentManagerStddevOrderBy     `json:"stddev"`
	StddevPop  *GovernmentManagerStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *GovernmentManagerStddevSampOrderBy `json:"stddev_samp"`
	Sum        *GovernmentManagerSumOrderBy        `json:"sum"`
	VarPop     *GovernmentManagerVarPopOrderBy     `json:"var_pop"`
	VarSamp    *GovernmentManagerVarSampOrderBy    `json:"var_samp"`
	Variance   *GovernmentManagerVarianceOrderBy   `json:"variance"`
}

type GovernmentManagerArrRelInsertInput struct {
	Data       []*GovernmentManagerInsertInput `json:"data"`
	OnConflict *GovernmentManagerOnConflict    `json:"on_conflict"`
}

type GovernmentManagerAvgFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerAvgOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerBoolExp struct {
	And            []*GovernmentManagerBoolExp     `json:"_and"`
	Not            *GovernmentManagerBoolExp       `json:"_not"`
	Or             []*GovernmentManagerBoolExp     `json:"_or"`
	AllDriverCount *model.BigintComparisonExp      `json:"all_driver_count"`
	AreaID         *model.StringComparisonExp      `json:"area_id"`
	CreateAt       *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy       *model.StringComparisonExp      `json:"create_by"`
	Deadline       *model.TimestamptzComparisonExp `json:"deadline"`
	DeleteAt       *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy       *model.StringComparisonExp      `json:"delete_by"`
	EnterpriseID   *model.StringComparisonExp      `json:"enterprise_id"`
	GovID          *model.StringComparisonExp      `json:"gov_id"`
	ID             *model.BigintComparisonExp      `json:"id"`
	IsDelete       *model.BooleanComparisonExp     `json:"is_delete"`
	IsReceived     *model.BooleanComparisonExp     `json:"is_received"`
	ManageID       *model.StringComparisonExp      `json:"manage_id"`
	MaterialID     *model.StringComparisonExp      `json:"material_id"`
	Note           *model.StringComparisonExp      `json:"note"`
	StartTime      *model.TimestamptzComparisonExp `json:"start_time"`
	TrainedDrivers *model.BigintComparisonExp      `json:"trained_drivers"`
	UpdateAt       *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy       *model.StringComparisonExp      `json:"update_by"`
}

type GovernmentManagerIncInput struct {
	AllDriverCount *int64 `json:"all_driver_count"`
	ID             *int64 `json:"id"`
	TrainedDrivers *int64 `json:"trained_drivers"`
}

type GovernmentManagerInsertInput struct {
	AllDriverCount *int64     `json:"all_driver_count"`
	AreaID         *string    `json:"area_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Deadline       *time.Time `json:"deadline"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	GovID          *string    `json:"gov_id"`
	ID             *int64     `json:"id"`
	IsDelete       *bool      `json:"is_delete"`
	IsReceived     *bool      `json:"is_received"`
	ManageID       *string    `json:"manage_id"`
	MaterialID     *string    `json:"material_id"`
	Note           *string    `json:"note"`
	StartTime      *time.Time `json:"start_time"`
	TrainedDrivers *int64     `json:"trained_drivers"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
}

type GovernmentManagerMaxFields struct {
	AllDriverCount *int64     `json:"all_driver_count"`
	AreaID         *string    `json:"area_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Deadline       *time.Time `json:"deadline"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	GovID          *string    `json:"gov_id"`
	ID             *int64     `json:"id"`
	ManageID       *string    `json:"manage_id"`
	MaterialID     *string    `json:"material_id"`
	Note           *string    `json:"note"`
	StartTime      *time.Time `json:"start_time"`
	TrainedDrivers *int64     `json:"trained_drivers"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
}

type GovernmentManagerMaxOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	AreaID         *model.OrderBy `json:"area_id"`
	CreateAt       *model.OrderBy `json:"create_at"`
	CreateBy       *model.OrderBy `json:"create_by"`
	Deadline       *model.OrderBy `json:"deadline"`
	DeleteAt       *model.OrderBy `json:"delete_at"`
	DeleteBy       *model.OrderBy `json:"delete_by"`
	EnterpriseID   *model.OrderBy `json:"enterprise_id"`
	GovID          *model.OrderBy `json:"gov_id"`
	ID             *model.OrderBy `json:"id"`
	ManageID       *model.OrderBy `json:"manage_id"`
	MaterialID     *model.OrderBy `json:"material_id"`
	Note           *model.OrderBy `json:"note"`
	StartTime      *model.OrderBy `json:"start_time"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
	UpdateAt       *model.OrderBy `json:"update_at"`
	UpdateBy       *model.OrderBy `json:"update_by"`
}

type GovernmentManagerMinFields struct {
	AllDriverCount *int64     `json:"all_driver_count"`
	AreaID         *string    `json:"area_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Deadline       *time.Time `json:"deadline"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	GovID          *string    `json:"gov_id"`
	ID             *int64     `json:"id"`
	ManageID       *string    `json:"manage_id"`
	MaterialID     *string    `json:"material_id"`
	Note           *string    `json:"note"`
	StartTime      *time.Time `json:"start_time"`
	TrainedDrivers *int64     `json:"trained_drivers"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
}

type GovernmentManagerMinOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	AreaID         *model.OrderBy `json:"area_id"`
	CreateAt       *model.OrderBy `json:"create_at"`
	CreateBy       *model.OrderBy `json:"create_by"`
	Deadline       *model.OrderBy `json:"deadline"`
	DeleteAt       *model.OrderBy `json:"delete_at"`
	DeleteBy       *model.OrderBy `json:"delete_by"`
	EnterpriseID   *model.OrderBy `json:"enterprise_id"`
	GovID          *model.OrderBy `json:"gov_id"`
	ID             *model.OrderBy `json:"id"`
	ManageID       *model.OrderBy `json:"manage_id"`
	MaterialID     *model.OrderBy `json:"material_id"`
	Note           *model.OrderBy `json:"note"`
	StartTime      *model.OrderBy `json:"start_time"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
	UpdateAt       *model.OrderBy `json:"update_at"`
	UpdateBy       *model.OrderBy `json:"update_by"`
}

type GovernmentManagerMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*GovernmentManager `json:"returning"`
}

type GovernmentManagerObjRelInsertInput struct {
	Data       *GovernmentManagerInsertInput `json:"data"`
	OnConflict *GovernmentManagerOnConflict  `json:"on_conflict"`
}

type GovernmentManagerOnConflict struct {
	Constraint    GovernmentManagerConstraint     `json:"constraint"`
	UpdateColumns []GovernmentManagerUpdateColumn `json:"update_columns"`
	Where         *GovernmentManagerBoolExp       `json:"where"`
}

type GovernmentManagerOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	AreaID         *model.OrderBy `json:"area_id"`
	CreateAt       *model.OrderBy `json:"create_at"`
	CreateBy       *model.OrderBy `json:"create_by"`
	Deadline       *model.OrderBy `json:"deadline"`
	DeleteAt       *model.OrderBy `json:"delete_at"`
	DeleteBy       *model.OrderBy `json:"delete_by"`
	EnterpriseID   *model.OrderBy `json:"enterprise_id"`
	GovID          *model.OrderBy `json:"gov_id"`
	ID             *model.OrderBy `json:"id"`
	IsDelete       *model.OrderBy `json:"is_delete"`
	IsReceived     *model.OrderBy `json:"is_received"`
	ManageID       *model.OrderBy `json:"manage_id"`
	MaterialID     *model.OrderBy `json:"material_id"`
	Note           *model.OrderBy `json:"note"`
	StartTime      *model.OrderBy `json:"start_time"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
	UpdateAt       *model.OrderBy `json:"update_at"`
	UpdateBy       *model.OrderBy `json:"update_by"`
}

type GovernmentManagerPkColumnsInput struct {
	ID int64 `json:"id"`
}

type GovernmentManagerSetInput struct {
	AllDriverCount *int64     `json:"all_driver_count"`
	AreaID         *string    `json:"area_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Deadline       *time.Time `json:"deadline"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	GovID          *string    `json:"gov_id"`
	ID             *int64     `json:"id"`
	IsDelete       *bool      `json:"is_delete"`
	IsReceived     *bool      `json:"is_received"`
	ManageID       *string    `json:"manage_id"`
	MaterialID     *string    `json:"material_id"`
	Note           *string    `json:"note"`
	StartTime      *time.Time `json:"start_time"`
	TrainedDrivers *int64     `json:"trained_drivers"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
}

type GovernmentManagerStddevFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerStddevOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerStddevPopFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerStddevPopOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerStddevSampFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerStddevSampOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerSumFields struct {
	AllDriverCount *int64 `json:"all_driver_count"`
	ID             *int64 `json:"id"`
	TrainedDrivers *int64 `json:"trained_drivers"`
}

type GovernmentManagerSumOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerVarPopFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerVarPopOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerVarSampFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerVarSampOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type GovernmentManagerVarianceFields struct {
	AllDriverCount *float64 `json:"all_driver_count"`
	ID             *float64 `json:"id"`
	TrainedDrivers *float64 `json:"trained_drivers"`
}

type GovernmentManagerVarianceOrderBy struct {
	AllDriverCount *model.OrderBy `json:"all_driver_count"`
	ID             *model.OrderBy `json:"id"`
	TrainedDrivers *model.OrderBy `json:"trained_drivers"`
}

type NumericComparisonExp struct {
	Eq     *float64  `json:"_eq"`
	Gt     *float64  `json:"_gt"`
	Gte    *float64  `json:"_gte"`
	In     []float64 `json:"_in"`
	IsNull *bool     `json:"_is_null"`
	Lt     *float64  `json:"_lt"`
	Lte    *float64  `json:"_lte"`
	Neq    *float64  `json:"_neq"`
	Nin    []float64 `json:"_nin"`
}

type ScoreLog struct {
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	ID               int64      `json:"id"`
	IDNumber         *string    `json:"id_number"`
	Name             *string    `json:"name"`
	ScoreLogID       *string    `json:"score_log_id"`
	TrainingPrograms *string    `json:"training_programs"`
	TrainingScore    *int64     `json:"training_score"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
}

type ScoreLogAggregate struct {
	Aggregate *ScoreLogAggregateFields `json:"aggregate"`
	Nodes     []*ScoreLog              `json:"nodes"`
}

type ScoreLogAggregateFields struct {
	Avg        *ScoreLogAvgFields        `json:"avg"`
	Count      *int                      `json:"count"`
	Max        *ScoreLogMaxFields        `json:"max"`
	Min        *ScoreLogMinFields        `json:"min"`
	Stddev     *ScoreLogStddevFields     `json:"stddev"`
	StddevPop  *ScoreLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ScoreLogStddevSampFields `json:"stddev_samp"`
	Sum        *ScoreLogSumFields        `json:"sum"`
	VarPop     *ScoreLogVarPopFields     `json:"var_pop"`
	VarSamp    *ScoreLogVarSampFields    `json:"var_samp"`
	Variance   *ScoreLogVarianceFields   `json:"variance"`
}

type ScoreLogAggregateOrderBy struct {
	Avg        *ScoreLogAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy             `json:"count"`
	Max        *ScoreLogMaxOrderBy        `json:"max"`
	Min        *ScoreLogMinOrderBy        `json:"min"`
	Stddev     *ScoreLogStddevOrderBy     `json:"stddev"`
	StddevPop  *ScoreLogStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *ScoreLogStddevSampOrderBy `json:"stddev_samp"`
	Sum        *ScoreLogSumOrderBy        `json:"sum"`
	VarPop     *ScoreLogVarPopOrderBy     `json:"var_pop"`
	VarSamp    *ScoreLogVarSampOrderBy    `json:"var_samp"`
	Variance   *ScoreLogVarianceOrderBy   `json:"variance"`
}

type ScoreLogArrRelInsertInput struct {
	Data       []*ScoreLogInsertInput `json:"data"`
	OnConflict *ScoreLogOnConflict    `json:"on_conflict"`
}

type ScoreLogAvgFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogAvgOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogBoolExp struct {
	And              []*ScoreLogBoolExp              `json:"_and"`
	Not              *ScoreLogBoolExp                `json:"_not"`
	Or               []*ScoreLogBoolExp              `json:"_or"`
	CreateAt         *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy         *model.StringComparisonExp      `json:"create_by"`
	ID               *model.BigintComparisonExp      `json:"id"`
	IDNumber         *model.StringComparisonExp      `json:"id_number"`
	Name             *model.StringComparisonExp      `json:"name"`
	ScoreLogID       *model.StringComparisonExp      `json:"score_log_id"`
	TrainingPrograms *model.StringComparisonExp      `json:"training_programs"`
	TrainingScore    *model.BigintComparisonExp      `json:"training_score"`
	UpdateAt         *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy         *model.StringComparisonExp      `json:"update_by"`
}

type ScoreLogIncInput struct {
	ID            *int64 `json:"id"`
	TrainingScore *int64 `json:"training_score"`
}

type ScoreLogInsertInput struct {
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	ID               *int64     `json:"id"`
	IDNumber         *string    `json:"id_number"`
	Name             *string    `json:"name"`
	ScoreLogID       *string    `json:"score_log_id"`
	TrainingPrograms *string    `json:"training_programs"`
	TrainingScore    *int64     `json:"training_score"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
}

type ScoreLogMaxFields struct {
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	ID               *int64     `json:"id"`
	IDNumber         *string    `json:"id_number"`
	Name             *string    `json:"name"`
	ScoreLogID       *string    `json:"score_log_id"`
	TrainingPrograms *string    `json:"training_programs"`
	TrainingScore    *int64     `json:"training_score"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
}

type ScoreLogMaxOrderBy struct {
	CreateAt         *model.OrderBy `json:"create_at"`
	CreateBy         *model.OrderBy `json:"create_by"`
	ID               *model.OrderBy `json:"id"`
	IDNumber         *model.OrderBy `json:"id_number"`
	Name             *model.OrderBy `json:"name"`
	ScoreLogID       *model.OrderBy `json:"score_log_id"`
	TrainingPrograms *model.OrderBy `json:"training_programs"`
	TrainingScore    *model.OrderBy `json:"training_score"`
	UpdateAt         *model.OrderBy `json:"update_at"`
	UpdateBy         *model.OrderBy `json:"update_by"`
}

type ScoreLogMinFields struct {
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	ID               *int64     `json:"id"`
	IDNumber         *string    `json:"id_number"`
	Name             *string    `json:"name"`
	ScoreLogID       *string    `json:"score_log_id"`
	TrainingPrograms *string    `json:"training_programs"`
	TrainingScore    *int64     `json:"training_score"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
}

type ScoreLogMinOrderBy struct {
	CreateAt         *model.OrderBy `json:"create_at"`
	CreateBy         *model.OrderBy `json:"create_by"`
	ID               *model.OrderBy `json:"id"`
	IDNumber         *model.OrderBy `json:"id_number"`
	Name             *model.OrderBy `json:"name"`
	ScoreLogID       *model.OrderBy `json:"score_log_id"`
	TrainingPrograms *model.OrderBy `json:"training_programs"`
	TrainingScore    *model.OrderBy `json:"training_score"`
	UpdateAt         *model.OrderBy `json:"update_at"`
	UpdateBy         *model.OrderBy `json:"update_by"`
}

type ScoreLogMutationResponse struct {
	AffectedRows int         `json:"affected_rows"`
	Returning    []*ScoreLog `json:"returning"`
}

type ScoreLogObjRelInsertInput struct {
	Data       *ScoreLogInsertInput `json:"data"`
	OnConflict *ScoreLogOnConflict  `json:"on_conflict"`
}

type ScoreLogOnConflict struct {
	Constraint    ScoreLogConstraint     `json:"constraint"`
	UpdateColumns []ScoreLogUpdateColumn `json:"update_columns"`
	Where         *ScoreLogBoolExp       `json:"where"`
}

type ScoreLogOrderBy struct {
	CreateAt         *model.OrderBy `json:"create_at"`
	CreateBy         *model.OrderBy `json:"create_by"`
	ID               *model.OrderBy `json:"id"`
	IDNumber         *model.OrderBy `json:"id_number"`
	Name             *model.OrderBy `json:"name"`
	ScoreLogID       *model.OrderBy `json:"score_log_id"`
	TrainingPrograms *model.OrderBy `json:"training_programs"`
	TrainingScore    *model.OrderBy `json:"training_score"`
	UpdateAt         *model.OrderBy `json:"update_at"`
	UpdateBy         *model.OrderBy `json:"update_by"`
}

type ScoreLogPkColumnsInput struct {
	ID int64 `json:"id"`
}

type ScoreLogSetInput struct {
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	ID               *int64     `json:"id"`
	IDNumber         *string    `json:"id_number"`
	Name             *string    `json:"name"`
	ScoreLogID       *string    `json:"score_log_id"`
	TrainingPrograms *string    `json:"training_programs"`
	TrainingScore    *int64     `json:"training_score"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
}

type ScoreLogStddevFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogStddevOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogStddevPopFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogStddevPopOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogStddevSampFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogStddevSampOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogSumFields struct {
	ID            *int64 `json:"id"`
	TrainingScore *int64 `json:"training_score"`
}

type ScoreLogSumOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogVarPopFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogVarPopOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogVarSampFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogVarSampOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type ScoreLogVarianceFields struct {
	ID            *float64 `json:"id"`
	TrainingScore *float64 `json:"training_score"`
}

type ScoreLogVarianceOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	TrainingScore *model.OrderBy `json:"training_score"`
}

type TrainingMaterial struct {
	Contents        *string    `json:"contents"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              int64      `json:"id"`
	IsDelete        *bool      `json:"is_delete"`
	MaterialAddress *string    `json:"material_address"`
	MaterialID      *string    `json:"material_id"`
	Title           *string    `json:"title"`
	Type            *string    `json:"type"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
}

type TrainingMaterialAggregate struct {
	Aggregate *TrainingMaterialAggregateFields `json:"aggregate"`
	Nodes     []*TrainingMaterial              `json:"nodes"`
}

type TrainingMaterialAggregateFields struct {
	Avg        *TrainingMaterialAvgFields        `json:"avg"`
	Count      *int                              `json:"count"`
	Max        *TrainingMaterialMaxFields        `json:"max"`
	Min        *TrainingMaterialMinFields        `json:"min"`
	Stddev     *TrainingMaterialStddevFields     `json:"stddev"`
	StddevPop  *TrainingMaterialStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TrainingMaterialStddevSampFields `json:"stddev_samp"`
	Sum        *TrainingMaterialSumFields        `json:"sum"`
	VarPop     *TrainingMaterialVarPopFields     `json:"var_pop"`
	VarSamp    *TrainingMaterialVarSampFields    `json:"var_samp"`
	Variance   *TrainingMaterialVarianceFields   `json:"variance"`
}

type TrainingMaterialAggregateOrderBy struct {
	Avg        *TrainingMaterialAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy                     `json:"count"`
	Max        *TrainingMaterialMaxOrderBy        `json:"max"`
	Min        *TrainingMaterialMinOrderBy        `json:"min"`
	Stddev     *TrainingMaterialStddevOrderBy     `json:"stddev"`
	StddevPop  *TrainingMaterialStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *TrainingMaterialStddevSampOrderBy `json:"stddev_samp"`
	Sum        *TrainingMaterialSumOrderBy        `json:"sum"`
	VarPop     *TrainingMaterialVarPopOrderBy     `json:"var_pop"`
	VarSamp    *TrainingMaterialVarSampOrderBy    `json:"var_samp"`
	Variance   *TrainingMaterialVarianceOrderBy   `json:"variance"`
}

type TrainingMaterialArrRelInsertInput struct {
	Data       []*TrainingMaterialInsertInput `json:"data"`
	OnConflict *TrainingMaterialOnConflict    `json:"on_conflict"`
}

type TrainingMaterialAvgFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialBoolExp struct {
	And             []*TrainingMaterialBoolExp      `json:"_and"`
	Not             *TrainingMaterialBoolExp        `json:"_not"`
	Or              []*TrainingMaterialBoolExp      `json:"_or"`
	Contents        *model.StringComparisonExp      `json:"contents"`
	CreateAt        *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy        *model.StringComparisonExp      `json:"create_by"`
	DeleteAt        *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy        *model.StringComparisonExp      `json:"delete_by"`
	ID              *model.BigintComparisonExp      `json:"id"`
	IsDelete        *model.BooleanComparisonExp     `json:"is_delete"`
	MaterialAddress *model.StringComparisonExp      `json:"material_address"`
	MaterialID      *model.StringComparisonExp      `json:"material_id"`
	Title           *model.StringComparisonExp      `json:"title"`
	Type            *model.StringComparisonExp      `json:"type"`
	UpdateAt        *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy        *model.StringComparisonExp      `json:"update_by"`
}

type TrainingMaterialIncInput struct {
	ID *int64 `json:"id"`
}

type TrainingMaterialInsertInput struct {
	Contents        *string    `json:"contents"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	IsDelete        *bool      `json:"is_delete"`
	MaterialAddress *string    `json:"material_address"`
	MaterialID      *string    `json:"material_id"`
	Title           *string    `json:"title"`
	Type            *string    `json:"type"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
}

type TrainingMaterialMaxFields struct {
	Contents        *string    `json:"contents"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	MaterialAddress *string    `json:"material_address"`
	MaterialID      *string    `json:"material_id"`
	Title           *string    `json:"title"`
	Type            *string    `json:"type"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
}

type TrainingMaterialMaxOrderBy struct {
	Contents        *model.OrderBy `json:"contents"`
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	ID              *model.OrderBy `json:"id"`
	MaterialAddress *model.OrderBy `json:"material_address"`
	MaterialID      *model.OrderBy `json:"material_id"`
	Title           *model.OrderBy `json:"title"`
	Type            *model.OrderBy `json:"type"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
}

type TrainingMaterialMinFields struct {
	Contents        *string    `json:"contents"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	MaterialAddress *string    `json:"material_address"`
	MaterialID      *string    `json:"material_id"`
	Title           *string    `json:"title"`
	Type            *string    `json:"type"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
}

type TrainingMaterialMinOrderBy struct {
	Contents        *model.OrderBy `json:"contents"`
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	ID              *model.OrderBy `json:"id"`
	MaterialAddress *model.OrderBy `json:"material_address"`
	MaterialID      *model.OrderBy `json:"material_id"`
	Title           *model.OrderBy `json:"title"`
	Type            *model.OrderBy `json:"type"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
}

type TrainingMaterialMutationResponse struct {
	AffectedRows int                 `json:"affected_rows"`
	Returning    []*TrainingMaterial `json:"returning"`
}

type TrainingMaterialObjRelInsertInput struct {
	Data       *TrainingMaterialInsertInput `json:"data"`
	OnConflict *TrainingMaterialOnConflict  `json:"on_conflict"`
}

type TrainingMaterialOnConflict struct {
	Constraint    TrainingMaterialConstraint     `json:"constraint"`
	UpdateColumns []TrainingMaterialUpdateColumn `json:"update_columns"`
	Where         *TrainingMaterialBoolExp       `json:"where"`
}

type TrainingMaterialOrderBy struct {
	Contents        *model.OrderBy `json:"contents"`
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	ID              *model.OrderBy `json:"id"`
	IsDelete        *model.OrderBy `json:"is_delete"`
	MaterialAddress *model.OrderBy `json:"material_address"`
	MaterialID      *model.OrderBy `json:"material_id"`
	Title           *model.OrderBy `json:"title"`
	Type            *model.OrderBy `json:"type"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
}

type TrainingMaterialPkColumnsInput struct {
	ID int64 `json:"id"`
}

type TrainingMaterialSetInput struct {
	Contents        *string    `json:"contents"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	ID              *int64     `json:"id"`
	IsDelete        *bool      `json:"is_delete"`
	MaterialAddress *string    `json:"material_address"`
	MaterialID      *string    `json:"material_id"`
	Title           *string    `json:"title"`
	Type            *string    `json:"type"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
}

type TrainingMaterialStddevFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialStddevPopFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialStddevSampFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialSumFields struct {
	ID *int64 `json:"id"`
}

type TrainingMaterialSumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialVarPopFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialVarSampFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type TrainingMaterialVarianceFields struct {
	ID *float64 `json:"id"`
}

type TrainingMaterialVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type AnswerLogConstraint string

const (
	AnswerLogConstraintAnswerLogPkey AnswerLogConstraint = "answer_log_pkey"
)

var AllAnswerLogConstraint = []AnswerLogConstraint{
	AnswerLogConstraintAnswerLogPkey,
}

func (e AnswerLogConstraint) IsValid() bool {
	switch e {
	case AnswerLogConstraintAnswerLogPkey:
		return true
	}
	return false
}

func (e AnswerLogConstraint) String() string {
	return string(e)
}

func (e *AnswerLogConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnswerLogConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid answer_log_constraint", str)
	}
	return nil
}

func (e AnswerLogConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AnswerLogSelectColumn string

const (
	AnswerLogSelectColumnAnswer      AnswerLogSelectColumn = "answer"
	AnswerLogSelectColumnAnswerLogID AnswerLogSelectColumn = "answer_log_id"
	AnswerLogSelectColumnCreateAt    AnswerLogSelectColumn = "create_at"
	AnswerLogSelectColumnCreateBy    AnswerLogSelectColumn = "create_by"
	AnswerLogSelectColumnDriverID    AnswerLogSelectColumn = "driver_id"
	AnswerLogSelectColumnID          AnswerLogSelectColumn = "id"
	AnswerLogSelectColumnMaterialID  AnswerLogSelectColumn = "material_id"
	AnswerLogSelectColumnUpdateAt    AnswerLogSelectColumn = "update_at"
	AnswerLogSelectColumnUpdateBy    AnswerLogSelectColumn = "update_by"
)

var AllAnswerLogSelectColumn = []AnswerLogSelectColumn{
	AnswerLogSelectColumnAnswer,
	AnswerLogSelectColumnAnswerLogID,
	AnswerLogSelectColumnCreateAt,
	AnswerLogSelectColumnCreateBy,
	AnswerLogSelectColumnDriverID,
	AnswerLogSelectColumnID,
	AnswerLogSelectColumnMaterialID,
	AnswerLogSelectColumnUpdateAt,
	AnswerLogSelectColumnUpdateBy,
}

func (e AnswerLogSelectColumn) IsValid() bool {
	switch e {
	case AnswerLogSelectColumnAnswer, AnswerLogSelectColumnAnswerLogID, AnswerLogSelectColumnCreateAt, AnswerLogSelectColumnCreateBy, AnswerLogSelectColumnDriverID, AnswerLogSelectColumnID, AnswerLogSelectColumnMaterialID, AnswerLogSelectColumnUpdateAt, AnswerLogSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e AnswerLogSelectColumn) String() string {
	return string(e)
}

func (e *AnswerLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnswerLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid answer_log_select_column", str)
	}
	return nil
}

func (e AnswerLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AnswerLogUpdateColumn string

const (
	AnswerLogUpdateColumnAnswer      AnswerLogUpdateColumn = "answer"
	AnswerLogUpdateColumnAnswerLogID AnswerLogUpdateColumn = "answer_log_id"
	AnswerLogUpdateColumnCreateAt    AnswerLogUpdateColumn = "create_at"
	AnswerLogUpdateColumnCreateBy    AnswerLogUpdateColumn = "create_by"
	AnswerLogUpdateColumnDriverID    AnswerLogUpdateColumn = "driver_id"
	AnswerLogUpdateColumnID          AnswerLogUpdateColumn = "id"
	AnswerLogUpdateColumnMaterialID  AnswerLogUpdateColumn = "material_id"
	AnswerLogUpdateColumnUpdateAt    AnswerLogUpdateColumn = "update_at"
	AnswerLogUpdateColumnUpdateBy    AnswerLogUpdateColumn = "update_by"
)

var AllAnswerLogUpdateColumn = []AnswerLogUpdateColumn{
	AnswerLogUpdateColumnAnswer,
	AnswerLogUpdateColumnAnswerLogID,
	AnswerLogUpdateColumnCreateAt,
	AnswerLogUpdateColumnCreateBy,
	AnswerLogUpdateColumnDriverID,
	AnswerLogUpdateColumnID,
	AnswerLogUpdateColumnMaterialID,
	AnswerLogUpdateColumnUpdateAt,
	AnswerLogUpdateColumnUpdateBy,
}

func (e AnswerLogUpdateColumn) IsValid() bool {
	switch e {
	case AnswerLogUpdateColumnAnswer, AnswerLogUpdateColumnAnswerLogID, AnswerLogUpdateColumnCreateAt, AnswerLogUpdateColumnCreateBy, AnswerLogUpdateColumnDriverID, AnswerLogUpdateColumnID, AnswerLogUpdateColumnMaterialID, AnswerLogUpdateColumnUpdateAt, AnswerLogUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e AnswerLogUpdateColumn) String() string {
	return string(e)
}

func (e *AnswerLogUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnswerLogUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid answer_log_update_column", str)
	}
	return nil
}

func (e AnswerLogUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DriverStudyDetailsConstraint string

const (
	DriverStudyDetailsConstraintDriverStudyDetailsPkey DriverStudyDetailsConstraint = "driver_study_details_pkey"
)

var AllDriverStudyDetailsConstraint = []DriverStudyDetailsConstraint{
	DriverStudyDetailsConstraintDriverStudyDetailsPkey,
}

func (e DriverStudyDetailsConstraint) IsValid() bool {
	switch e {
	case DriverStudyDetailsConstraintDriverStudyDetailsPkey:
		return true
	}
	return false
}

func (e DriverStudyDetailsConstraint) String() string {
	return string(e)
}

func (e *DriverStudyDetailsConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverStudyDetailsConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid driver_study_details_constraint", str)
	}
	return nil
}

func (e DriverStudyDetailsConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DriverStudyDetailsSelectColumn string

const (
	DriverStudyDetailsSelectColumnCreateBy            DriverStudyDetailsSelectColumn = "create_by"
	DriverStudyDetailsSelectColumnCreateTime          DriverStudyDetailsSelectColumn = "create_time"
	DriverStudyDetailsSelectColumnDriverID            DriverStudyDetailsSelectColumn = "driver_id"
	DriverStudyDetailsSelectColumnDriverTrainingID    DriverStudyDetailsSelectColumn = "driver_training_id"
	DriverStudyDetailsSelectColumnEnterpriseID        DriverStudyDetailsSelectColumn = "enterprise_id"
	DriverStudyDetailsSelectColumnID                  DriverStudyDetailsSelectColumn = "id"
	DriverStudyDetailsSelectColumnIsTrainingCompleted DriverStudyDetailsSelectColumn = "is_training_completed"
	DriverStudyDetailsSelectColumnMaterialID          DriverStudyDetailsSelectColumn = "material_id"
	DriverStudyDetailsSelectColumnScore               DriverStudyDetailsSelectColumn = "score"
	DriverStudyDetailsSelectColumnTrainingTime        DriverStudyDetailsSelectColumn = "training_time"
)

var AllDriverStudyDetailsSelectColumn = []DriverStudyDetailsSelectColumn{
	DriverStudyDetailsSelectColumnCreateBy,
	DriverStudyDetailsSelectColumnCreateTime,
	DriverStudyDetailsSelectColumnDriverID,
	DriverStudyDetailsSelectColumnDriverTrainingID,
	DriverStudyDetailsSelectColumnEnterpriseID,
	DriverStudyDetailsSelectColumnID,
	DriverStudyDetailsSelectColumnIsTrainingCompleted,
	DriverStudyDetailsSelectColumnMaterialID,
	DriverStudyDetailsSelectColumnScore,
	DriverStudyDetailsSelectColumnTrainingTime,
}

func (e DriverStudyDetailsSelectColumn) IsValid() bool {
	switch e {
	case DriverStudyDetailsSelectColumnCreateBy, DriverStudyDetailsSelectColumnCreateTime, DriverStudyDetailsSelectColumnDriverID, DriverStudyDetailsSelectColumnDriverTrainingID, DriverStudyDetailsSelectColumnEnterpriseID, DriverStudyDetailsSelectColumnID, DriverStudyDetailsSelectColumnIsTrainingCompleted, DriverStudyDetailsSelectColumnMaterialID, DriverStudyDetailsSelectColumnScore, DriverStudyDetailsSelectColumnTrainingTime:
		return true
	}
	return false
}

func (e DriverStudyDetailsSelectColumn) String() string {
	return string(e)
}

func (e *DriverStudyDetailsSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverStudyDetailsSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid driver_study_details_select_column", str)
	}
	return nil
}

func (e DriverStudyDetailsSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DriverStudyDetailsUpdateColumn string

const (
	DriverStudyDetailsUpdateColumnCreateBy            DriverStudyDetailsUpdateColumn = "create_by"
	DriverStudyDetailsUpdateColumnCreateTime          DriverStudyDetailsUpdateColumn = "create_time"
	DriverStudyDetailsUpdateColumnDriverID            DriverStudyDetailsUpdateColumn = "driver_id"
	DriverStudyDetailsUpdateColumnDriverTrainingID    DriverStudyDetailsUpdateColumn = "driver_training_id"
	DriverStudyDetailsUpdateColumnEnterpriseID        DriverStudyDetailsUpdateColumn = "enterprise_id"
	DriverStudyDetailsUpdateColumnID                  DriverStudyDetailsUpdateColumn = "id"
	DriverStudyDetailsUpdateColumnIsTrainingCompleted DriverStudyDetailsUpdateColumn = "is_training_completed"
	DriverStudyDetailsUpdateColumnMaterialID          DriverStudyDetailsUpdateColumn = "material_id"
	DriverStudyDetailsUpdateColumnScore               DriverStudyDetailsUpdateColumn = "score"
	DriverStudyDetailsUpdateColumnTrainingTime        DriverStudyDetailsUpdateColumn = "training_time"
)

var AllDriverStudyDetailsUpdateColumn = []DriverStudyDetailsUpdateColumn{
	DriverStudyDetailsUpdateColumnCreateBy,
	DriverStudyDetailsUpdateColumnCreateTime,
	DriverStudyDetailsUpdateColumnDriverID,
	DriverStudyDetailsUpdateColumnDriverTrainingID,
	DriverStudyDetailsUpdateColumnEnterpriseID,
	DriverStudyDetailsUpdateColumnID,
	DriverStudyDetailsUpdateColumnIsTrainingCompleted,
	DriverStudyDetailsUpdateColumnMaterialID,
	DriverStudyDetailsUpdateColumnScore,
	DriverStudyDetailsUpdateColumnTrainingTime,
}

func (e DriverStudyDetailsUpdateColumn) IsValid() bool {
	switch e {
	case DriverStudyDetailsUpdateColumnCreateBy, DriverStudyDetailsUpdateColumnCreateTime, DriverStudyDetailsUpdateColumnDriverID, DriverStudyDetailsUpdateColumnDriverTrainingID, DriverStudyDetailsUpdateColumnEnterpriseID, DriverStudyDetailsUpdateColumnID, DriverStudyDetailsUpdateColumnIsTrainingCompleted, DriverStudyDetailsUpdateColumnMaterialID, DriverStudyDetailsUpdateColumnScore, DriverStudyDetailsUpdateColumnTrainingTime:
		return true
	}
	return false
}

func (e DriverStudyDetailsUpdateColumn) String() string {
	return string(e)
}

func (e *DriverStudyDetailsUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverStudyDetailsUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid driver_study_details_update_column", str)
	}
	return nil
}

func (e DriverStudyDetailsUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseTrainingConstraint string

const (
	EnterpriseTrainingConstraintEnterpriseTrainingPkey EnterpriseTrainingConstraint = "enterprise_training_pkey"
)

var AllEnterpriseTrainingConstraint = []EnterpriseTrainingConstraint{
	EnterpriseTrainingConstraintEnterpriseTrainingPkey,
}

func (e EnterpriseTrainingConstraint) IsValid() bool {
	switch e {
	case EnterpriseTrainingConstraintEnterpriseTrainingPkey:
		return true
	}
	return false
}

func (e EnterpriseTrainingConstraint) String() string {
	return string(e)
}

func (e *EnterpriseTrainingConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseTrainingConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_training_constraint", str)
	}
	return nil
}

func (e EnterpriseTrainingConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseTrainingSelectColumn string

const (
	EnterpriseTrainingSelectColumnCreateAt             EnterpriseTrainingSelectColumn = "create_at"
	EnterpriseTrainingSelectColumnCreateBy             EnterpriseTrainingSelectColumn = "create_by"
	EnterpriseTrainingSelectColumnDeleteAt             EnterpriseTrainingSelectColumn = "delete_at"
	EnterpriseTrainingSelectColumnDeleteBy             EnterpriseTrainingSelectColumn = "delete_by"
	EnterpriseTrainingSelectColumnEnterpriseID         EnterpriseTrainingSelectColumn = "enterprise_id"
	EnterpriseTrainingSelectColumnEnterpriseTrainingID EnterpriseTrainingSelectColumn = "enterprise_training_id"
	EnterpriseTrainingSelectColumnID                   EnterpriseTrainingSelectColumn = "id"
	EnterpriseTrainingSelectColumnIsDelete             EnterpriseTrainingSelectColumn = "is_delete"
	EnterpriseTrainingSelectColumnIsReceived           EnterpriseTrainingSelectColumn = "is_received"
	EnterpriseTrainingSelectColumnMaterialID           EnterpriseTrainingSelectColumn = "material_id"
	EnterpriseTrainingSelectColumnUpdateAt             EnterpriseTrainingSelectColumn = "update_at"
	EnterpriseTrainingSelectColumnUpdateBy             EnterpriseTrainingSelectColumn = "update_by"
)

var AllEnterpriseTrainingSelectColumn = []EnterpriseTrainingSelectColumn{
	EnterpriseTrainingSelectColumnCreateAt,
	EnterpriseTrainingSelectColumnCreateBy,
	EnterpriseTrainingSelectColumnDeleteAt,
	EnterpriseTrainingSelectColumnDeleteBy,
	EnterpriseTrainingSelectColumnEnterpriseID,
	EnterpriseTrainingSelectColumnEnterpriseTrainingID,
	EnterpriseTrainingSelectColumnID,
	EnterpriseTrainingSelectColumnIsDelete,
	EnterpriseTrainingSelectColumnIsReceived,
	EnterpriseTrainingSelectColumnMaterialID,
	EnterpriseTrainingSelectColumnUpdateAt,
	EnterpriseTrainingSelectColumnUpdateBy,
}

func (e EnterpriseTrainingSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseTrainingSelectColumnCreateAt, EnterpriseTrainingSelectColumnCreateBy, EnterpriseTrainingSelectColumnDeleteAt, EnterpriseTrainingSelectColumnDeleteBy, EnterpriseTrainingSelectColumnEnterpriseID, EnterpriseTrainingSelectColumnEnterpriseTrainingID, EnterpriseTrainingSelectColumnID, EnterpriseTrainingSelectColumnIsDelete, EnterpriseTrainingSelectColumnIsReceived, EnterpriseTrainingSelectColumnMaterialID, EnterpriseTrainingSelectColumnUpdateAt, EnterpriseTrainingSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e EnterpriseTrainingSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseTrainingSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseTrainingSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_training_select_column", str)
	}
	return nil
}

func (e EnterpriseTrainingSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseTrainingUpdateColumn string

const (
	EnterpriseTrainingUpdateColumnCreateAt             EnterpriseTrainingUpdateColumn = "create_at"
	EnterpriseTrainingUpdateColumnCreateBy             EnterpriseTrainingUpdateColumn = "create_by"
	EnterpriseTrainingUpdateColumnDeleteAt             EnterpriseTrainingUpdateColumn = "delete_at"
	EnterpriseTrainingUpdateColumnDeleteBy             EnterpriseTrainingUpdateColumn = "delete_by"
	EnterpriseTrainingUpdateColumnEnterpriseID         EnterpriseTrainingUpdateColumn = "enterprise_id"
	EnterpriseTrainingUpdateColumnEnterpriseTrainingID EnterpriseTrainingUpdateColumn = "enterprise_training_id"
	EnterpriseTrainingUpdateColumnID                   EnterpriseTrainingUpdateColumn = "id"
	EnterpriseTrainingUpdateColumnIsDelete             EnterpriseTrainingUpdateColumn = "is_delete"
	EnterpriseTrainingUpdateColumnIsReceived           EnterpriseTrainingUpdateColumn = "is_received"
	EnterpriseTrainingUpdateColumnMaterialID           EnterpriseTrainingUpdateColumn = "material_id"
	EnterpriseTrainingUpdateColumnUpdateAt             EnterpriseTrainingUpdateColumn = "update_at"
	EnterpriseTrainingUpdateColumnUpdateBy             EnterpriseTrainingUpdateColumn = "update_by"
)

var AllEnterpriseTrainingUpdateColumn = []EnterpriseTrainingUpdateColumn{
	EnterpriseTrainingUpdateColumnCreateAt,
	EnterpriseTrainingUpdateColumnCreateBy,
	EnterpriseTrainingUpdateColumnDeleteAt,
	EnterpriseTrainingUpdateColumnDeleteBy,
	EnterpriseTrainingUpdateColumnEnterpriseID,
	EnterpriseTrainingUpdateColumnEnterpriseTrainingID,
	EnterpriseTrainingUpdateColumnID,
	EnterpriseTrainingUpdateColumnIsDelete,
	EnterpriseTrainingUpdateColumnIsReceived,
	EnterpriseTrainingUpdateColumnMaterialID,
	EnterpriseTrainingUpdateColumnUpdateAt,
	EnterpriseTrainingUpdateColumnUpdateBy,
}

func (e EnterpriseTrainingUpdateColumn) IsValid() bool {
	switch e {
	case EnterpriseTrainingUpdateColumnCreateAt, EnterpriseTrainingUpdateColumnCreateBy, EnterpriseTrainingUpdateColumnDeleteAt, EnterpriseTrainingUpdateColumnDeleteBy, EnterpriseTrainingUpdateColumnEnterpriseID, EnterpriseTrainingUpdateColumnEnterpriseTrainingID, EnterpriseTrainingUpdateColumnID, EnterpriseTrainingUpdateColumnIsDelete, EnterpriseTrainingUpdateColumnIsReceived, EnterpriseTrainingUpdateColumnMaterialID, EnterpriseTrainingUpdateColumnUpdateAt, EnterpriseTrainingUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e EnterpriseTrainingUpdateColumn) String() string {
	return string(e)
}

func (e *EnterpriseTrainingUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseTrainingUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_training_update_column", str)
	}
	return nil
}

func (e EnterpriseTrainingUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GovernmentManagerConstraint string

const (
	GovernmentManagerConstraintGovernmentManagerPkey GovernmentManagerConstraint = "government_manager_pkey"
)

var AllGovernmentManagerConstraint = []GovernmentManagerConstraint{
	GovernmentManagerConstraintGovernmentManagerPkey,
}

func (e GovernmentManagerConstraint) IsValid() bool {
	switch e {
	case GovernmentManagerConstraintGovernmentManagerPkey:
		return true
	}
	return false
}

func (e GovernmentManagerConstraint) String() string {
	return string(e)
}

func (e *GovernmentManagerConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GovernmentManagerConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid government_manager_constraint", str)
	}
	return nil
}

func (e GovernmentManagerConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GovernmentManagerSelectColumn string

const (
	GovernmentManagerSelectColumnAllDriverCount GovernmentManagerSelectColumn = "all_driver_count"
	GovernmentManagerSelectColumnAreaID         GovernmentManagerSelectColumn = "area_id"
	GovernmentManagerSelectColumnCreateAt       GovernmentManagerSelectColumn = "create_at"
	GovernmentManagerSelectColumnCreateBy       GovernmentManagerSelectColumn = "create_by"
	GovernmentManagerSelectColumnDeadline       GovernmentManagerSelectColumn = "deadline"
	GovernmentManagerSelectColumnDeleteAt       GovernmentManagerSelectColumn = "delete_at"
	GovernmentManagerSelectColumnDeleteBy       GovernmentManagerSelectColumn = "delete_by"
	GovernmentManagerSelectColumnEnterpriseID   GovernmentManagerSelectColumn = "enterprise_id"
	GovernmentManagerSelectColumnGovID          GovernmentManagerSelectColumn = "gov_id"
	GovernmentManagerSelectColumnID             GovernmentManagerSelectColumn = "id"
	GovernmentManagerSelectColumnIsDelete       GovernmentManagerSelectColumn = "is_delete"
	GovernmentManagerSelectColumnIsReceived     GovernmentManagerSelectColumn = "is_received"
	GovernmentManagerSelectColumnManageID       GovernmentManagerSelectColumn = "manage_id"
	GovernmentManagerSelectColumnMaterialID     GovernmentManagerSelectColumn = "material_id"
	GovernmentManagerSelectColumnNote           GovernmentManagerSelectColumn = "note"
	GovernmentManagerSelectColumnStartTime      GovernmentManagerSelectColumn = "start_time"
	GovernmentManagerSelectColumnTrainedDrivers GovernmentManagerSelectColumn = "trained_drivers"
	GovernmentManagerSelectColumnUpdateAt       GovernmentManagerSelectColumn = "update_at"
	GovernmentManagerSelectColumnUpdateBy       GovernmentManagerSelectColumn = "update_by"
)

var AllGovernmentManagerSelectColumn = []GovernmentManagerSelectColumn{
	GovernmentManagerSelectColumnAllDriverCount,
	GovernmentManagerSelectColumnAreaID,
	GovernmentManagerSelectColumnCreateAt,
	GovernmentManagerSelectColumnCreateBy,
	GovernmentManagerSelectColumnDeadline,
	GovernmentManagerSelectColumnDeleteAt,
	GovernmentManagerSelectColumnDeleteBy,
	GovernmentManagerSelectColumnEnterpriseID,
	GovernmentManagerSelectColumnGovID,
	GovernmentManagerSelectColumnID,
	GovernmentManagerSelectColumnIsDelete,
	GovernmentManagerSelectColumnIsReceived,
	GovernmentManagerSelectColumnManageID,
	GovernmentManagerSelectColumnMaterialID,
	GovernmentManagerSelectColumnNote,
	GovernmentManagerSelectColumnStartTime,
	GovernmentManagerSelectColumnTrainedDrivers,
	GovernmentManagerSelectColumnUpdateAt,
	GovernmentManagerSelectColumnUpdateBy,
}

func (e GovernmentManagerSelectColumn) IsValid() bool {
	switch e {
	case GovernmentManagerSelectColumnAllDriverCount, GovernmentManagerSelectColumnAreaID, GovernmentManagerSelectColumnCreateAt, GovernmentManagerSelectColumnCreateBy, GovernmentManagerSelectColumnDeadline, GovernmentManagerSelectColumnDeleteAt, GovernmentManagerSelectColumnDeleteBy, GovernmentManagerSelectColumnEnterpriseID, GovernmentManagerSelectColumnGovID, GovernmentManagerSelectColumnID, GovernmentManagerSelectColumnIsDelete, GovernmentManagerSelectColumnIsReceived, GovernmentManagerSelectColumnManageID, GovernmentManagerSelectColumnMaterialID, GovernmentManagerSelectColumnNote, GovernmentManagerSelectColumnStartTime, GovernmentManagerSelectColumnTrainedDrivers, GovernmentManagerSelectColumnUpdateAt, GovernmentManagerSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e GovernmentManagerSelectColumn) String() string {
	return string(e)
}

func (e *GovernmentManagerSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GovernmentManagerSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid government_manager_select_column", str)
	}
	return nil
}

func (e GovernmentManagerSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GovernmentManagerUpdateColumn string

const (
	GovernmentManagerUpdateColumnAllDriverCount GovernmentManagerUpdateColumn = "all_driver_count"
	GovernmentManagerUpdateColumnAreaID         GovernmentManagerUpdateColumn = "area_id"
	GovernmentManagerUpdateColumnCreateAt       GovernmentManagerUpdateColumn = "create_at"
	GovernmentManagerUpdateColumnCreateBy       GovernmentManagerUpdateColumn = "create_by"
	GovernmentManagerUpdateColumnDeadline       GovernmentManagerUpdateColumn = "deadline"
	GovernmentManagerUpdateColumnDeleteAt       GovernmentManagerUpdateColumn = "delete_at"
	GovernmentManagerUpdateColumnDeleteBy       GovernmentManagerUpdateColumn = "delete_by"
	GovernmentManagerUpdateColumnEnterpriseID   GovernmentManagerUpdateColumn = "enterprise_id"
	GovernmentManagerUpdateColumnGovID          GovernmentManagerUpdateColumn = "gov_id"
	GovernmentManagerUpdateColumnID             GovernmentManagerUpdateColumn = "id"
	GovernmentManagerUpdateColumnIsDelete       GovernmentManagerUpdateColumn = "is_delete"
	GovernmentManagerUpdateColumnIsReceived     GovernmentManagerUpdateColumn = "is_received"
	GovernmentManagerUpdateColumnManageID       GovernmentManagerUpdateColumn = "manage_id"
	GovernmentManagerUpdateColumnMaterialID     GovernmentManagerUpdateColumn = "material_id"
	GovernmentManagerUpdateColumnNote           GovernmentManagerUpdateColumn = "note"
	GovernmentManagerUpdateColumnStartTime      GovernmentManagerUpdateColumn = "start_time"
	GovernmentManagerUpdateColumnTrainedDrivers GovernmentManagerUpdateColumn = "trained_drivers"
	GovernmentManagerUpdateColumnUpdateAt       GovernmentManagerUpdateColumn = "update_at"
	GovernmentManagerUpdateColumnUpdateBy       GovernmentManagerUpdateColumn = "update_by"
)

var AllGovernmentManagerUpdateColumn = []GovernmentManagerUpdateColumn{
	GovernmentManagerUpdateColumnAllDriverCount,
	GovernmentManagerUpdateColumnAreaID,
	GovernmentManagerUpdateColumnCreateAt,
	GovernmentManagerUpdateColumnCreateBy,
	GovernmentManagerUpdateColumnDeadline,
	GovernmentManagerUpdateColumnDeleteAt,
	GovernmentManagerUpdateColumnDeleteBy,
	GovernmentManagerUpdateColumnEnterpriseID,
	GovernmentManagerUpdateColumnGovID,
	GovernmentManagerUpdateColumnID,
	GovernmentManagerUpdateColumnIsDelete,
	GovernmentManagerUpdateColumnIsReceived,
	GovernmentManagerUpdateColumnManageID,
	GovernmentManagerUpdateColumnMaterialID,
	GovernmentManagerUpdateColumnNote,
	GovernmentManagerUpdateColumnStartTime,
	GovernmentManagerUpdateColumnTrainedDrivers,
	GovernmentManagerUpdateColumnUpdateAt,
	GovernmentManagerUpdateColumnUpdateBy,
}

func (e GovernmentManagerUpdateColumn) IsValid() bool {
	switch e {
	case GovernmentManagerUpdateColumnAllDriverCount, GovernmentManagerUpdateColumnAreaID, GovernmentManagerUpdateColumnCreateAt, GovernmentManagerUpdateColumnCreateBy, GovernmentManagerUpdateColumnDeadline, GovernmentManagerUpdateColumnDeleteAt, GovernmentManagerUpdateColumnDeleteBy, GovernmentManagerUpdateColumnEnterpriseID, GovernmentManagerUpdateColumnGovID, GovernmentManagerUpdateColumnID, GovernmentManagerUpdateColumnIsDelete, GovernmentManagerUpdateColumnIsReceived, GovernmentManagerUpdateColumnManageID, GovernmentManagerUpdateColumnMaterialID, GovernmentManagerUpdateColumnNote, GovernmentManagerUpdateColumnStartTime, GovernmentManagerUpdateColumnTrainedDrivers, GovernmentManagerUpdateColumnUpdateAt, GovernmentManagerUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e GovernmentManagerUpdateColumn) String() string {
	return string(e)
}

func (e *GovernmentManagerUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GovernmentManagerUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid government_manager_update_column", str)
	}
	return nil
}

func (e GovernmentManagerUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScoreLogConstraint string

const (
	ScoreLogConstraintScoreLogPkey ScoreLogConstraint = "score_log_pkey"
)

var AllScoreLogConstraint = []ScoreLogConstraint{
	ScoreLogConstraintScoreLogPkey,
}

func (e ScoreLogConstraint) IsValid() bool {
	switch e {
	case ScoreLogConstraintScoreLogPkey:
		return true
	}
	return false
}

func (e ScoreLogConstraint) String() string {
	return string(e)
}

func (e *ScoreLogConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScoreLogConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid score_log_constraint", str)
	}
	return nil
}

func (e ScoreLogConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScoreLogSelectColumn string

const (
	ScoreLogSelectColumnCreateAt         ScoreLogSelectColumn = "create_at"
	ScoreLogSelectColumnCreateBy         ScoreLogSelectColumn = "create_by"
	ScoreLogSelectColumnID               ScoreLogSelectColumn = "id"
	ScoreLogSelectColumnIDNumber         ScoreLogSelectColumn = "id_number"
	ScoreLogSelectColumnName             ScoreLogSelectColumn = "name"
	ScoreLogSelectColumnScoreLogID       ScoreLogSelectColumn = "score_log_id"
	ScoreLogSelectColumnTrainingPrograms ScoreLogSelectColumn = "training_programs"
	ScoreLogSelectColumnTrainingScore    ScoreLogSelectColumn = "training_score"
	ScoreLogSelectColumnUpdateAt         ScoreLogSelectColumn = "update_at"
	ScoreLogSelectColumnUpdateBy         ScoreLogSelectColumn = "update_by"
)

var AllScoreLogSelectColumn = []ScoreLogSelectColumn{
	ScoreLogSelectColumnCreateAt,
	ScoreLogSelectColumnCreateBy,
	ScoreLogSelectColumnID,
	ScoreLogSelectColumnIDNumber,
	ScoreLogSelectColumnName,
	ScoreLogSelectColumnScoreLogID,
	ScoreLogSelectColumnTrainingPrograms,
	ScoreLogSelectColumnTrainingScore,
	ScoreLogSelectColumnUpdateAt,
	ScoreLogSelectColumnUpdateBy,
}

func (e ScoreLogSelectColumn) IsValid() bool {
	switch e {
	case ScoreLogSelectColumnCreateAt, ScoreLogSelectColumnCreateBy, ScoreLogSelectColumnID, ScoreLogSelectColumnIDNumber, ScoreLogSelectColumnName, ScoreLogSelectColumnScoreLogID, ScoreLogSelectColumnTrainingPrograms, ScoreLogSelectColumnTrainingScore, ScoreLogSelectColumnUpdateAt, ScoreLogSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e ScoreLogSelectColumn) String() string {
	return string(e)
}

func (e *ScoreLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScoreLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid score_log_select_column", str)
	}
	return nil
}

func (e ScoreLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScoreLogUpdateColumn string

const (
	ScoreLogUpdateColumnCreateAt         ScoreLogUpdateColumn = "create_at"
	ScoreLogUpdateColumnCreateBy         ScoreLogUpdateColumn = "create_by"
	ScoreLogUpdateColumnID               ScoreLogUpdateColumn = "id"
	ScoreLogUpdateColumnIDNumber         ScoreLogUpdateColumn = "id_number"
	ScoreLogUpdateColumnName             ScoreLogUpdateColumn = "name"
	ScoreLogUpdateColumnScoreLogID       ScoreLogUpdateColumn = "score_log_id"
	ScoreLogUpdateColumnTrainingPrograms ScoreLogUpdateColumn = "training_programs"
	ScoreLogUpdateColumnTrainingScore    ScoreLogUpdateColumn = "training_score"
	ScoreLogUpdateColumnUpdateAt         ScoreLogUpdateColumn = "update_at"
	ScoreLogUpdateColumnUpdateBy         ScoreLogUpdateColumn = "update_by"
)

var AllScoreLogUpdateColumn = []ScoreLogUpdateColumn{
	ScoreLogUpdateColumnCreateAt,
	ScoreLogUpdateColumnCreateBy,
	ScoreLogUpdateColumnID,
	ScoreLogUpdateColumnIDNumber,
	ScoreLogUpdateColumnName,
	ScoreLogUpdateColumnScoreLogID,
	ScoreLogUpdateColumnTrainingPrograms,
	ScoreLogUpdateColumnTrainingScore,
	ScoreLogUpdateColumnUpdateAt,
	ScoreLogUpdateColumnUpdateBy,
}

func (e ScoreLogUpdateColumn) IsValid() bool {
	switch e {
	case ScoreLogUpdateColumnCreateAt, ScoreLogUpdateColumnCreateBy, ScoreLogUpdateColumnID, ScoreLogUpdateColumnIDNumber, ScoreLogUpdateColumnName, ScoreLogUpdateColumnScoreLogID, ScoreLogUpdateColumnTrainingPrograms, ScoreLogUpdateColumnTrainingScore, ScoreLogUpdateColumnUpdateAt, ScoreLogUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e ScoreLogUpdateColumn) String() string {
	return string(e)
}

func (e *ScoreLogUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScoreLogUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid score_log_update_column", str)
	}
	return nil
}

func (e ScoreLogUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingMaterialConstraint string

const (
	TrainingMaterialConstraintTrainingMaterialPkey TrainingMaterialConstraint = "training_material_pkey"
)

var AllTrainingMaterialConstraint = []TrainingMaterialConstraint{
	TrainingMaterialConstraintTrainingMaterialPkey,
}

func (e TrainingMaterialConstraint) IsValid() bool {
	switch e {
	case TrainingMaterialConstraintTrainingMaterialPkey:
		return true
	}
	return false
}

func (e TrainingMaterialConstraint) String() string {
	return string(e)
}

func (e *TrainingMaterialConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingMaterialConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid training_material_constraint", str)
	}
	return nil
}

func (e TrainingMaterialConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingMaterialSelectColumn string

const (
	TrainingMaterialSelectColumnContents        TrainingMaterialSelectColumn = "contents"
	TrainingMaterialSelectColumnCreateAt        TrainingMaterialSelectColumn = "create_at"
	TrainingMaterialSelectColumnCreateBy        TrainingMaterialSelectColumn = "create_by"
	TrainingMaterialSelectColumnDeleteAt        TrainingMaterialSelectColumn = "delete_at"
	TrainingMaterialSelectColumnDeleteBy        TrainingMaterialSelectColumn = "delete_by"
	TrainingMaterialSelectColumnID              TrainingMaterialSelectColumn = "id"
	TrainingMaterialSelectColumnIsDelete        TrainingMaterialSelectColumn = "is_delete"
	TrainingMaterialSelectColumnMaterialAddress TrainingMaterialSelectColumn = "material_address"
	TrainingMaterialSelectColumnMaterialID      TrainingMaterialSelectColumn = "material_id"
	TrainingMaterialSelectColumnTitle           TrainingMaterialSelectColumn = "title"
	TrainingMaterialSelectColumnType            TrainingMaterialSelectColumn = "type"
	TrainingMaterialSelectColumnUpdateAt        TrainingMaterialSelectColumn = "update_at"
	TrainingMaterialSelectColumnUpdateBy        TrainingMaterialSelectColumn = "update_by"
)

var AllTrainingMaterialSelectColumn = []TrainingMaterialSelectColumn{
	TrainingMaterialSelectColumnContents,
	TrainingMaterialSelectColumnCreateAt,
	TrainingMaterialSelectColumnCreateBy,
	TrainingMaterialSelectColumnDeleteAt,
	TrainingMaterialSelectColumnDeleteBy,
	TrainingMaterialSelectColumnID,
	TrainingMaterialSelectColumnIsDelete,
	TrainingMaterialSelectColumnMaterialAddress,
	TrainingMaterialSelectColumnMaterialID,
	TrainingMaterialSelectColumnTitle,
	TrainingMaterialSelectColumnType,
	TrainingMaterialSelectColumnUpdateAt,
	TrainingMaterialSelectColumnUpdateBy,
}

func (e TrainingMaterialSelectColumn) IsValid() bool {
	switch e {
	case TrainingMaterialSelectColumnContents, TrainingMaterialSelectColumnCreateAt, TrainingMaterialSelectColumnCreateBy, TrainingMaterialSelectColumnDeleteAt, TrainingMaterialSelectColumnDeleteBy, TrainingMaterialSelectColumnID, TrainingMaterialSelectColumnIsDelete, TrainingMaterialSelectColumnMaterialAddress, TrainingMaterialSelectColumnMaterialID, TrainingMaterialSelectColumnTitle, TrainingMaterialSelectColumnType, TrainingMaterialSelectColumnUpdateAt, TrainingMaterialSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e TrainingMaterialSelectColumn) String() string {
	return string(e)
}

func (e *TrainingMaterialSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingMaterialSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid training_material_select_column", str)
	}
	return nil
}

func (e TrainingMaterialSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrainingMaterialUpdateColumn string

const (
	TrainingMaterialUpdateColumnContents        TrainingMaterialUpdateColumn = "contents"
	TrainingMaterialUpdateColumnCreateAt        TrainingMaterialUpdateColumn = "create_at"
	TrainingMaterialUpdateColumnCreateBy        TrainingMaterialUpdateColumn = "create_by"
	TrainingMaterialUpdateColumnDeleteAt        TrainingMaterialUpdateColumn = "delete_at"
	TrainingMaterialUpdateColumnDeleteBy        TrainingMaterialUpdateColumn = "delete_by"
	TrainingMaterialUpdateColumnID              TrainingMaterialUpdateColumn = "id"
	TrainingMaterialUpdateColumnIsDelete        TrainingMaterialUpdateColumn = "is_delete"
	TrainingMaterialUpdateColumnMaterialAddress TrainingMaterialUpdateColumn = "material_address"
	TrainingMaterialUpdateColumnMaterialID      TrainingMaterialUpdateColumn = "material_id"
	TrainingMaterialUpdateColumnTitle           TrainingMaterialUpdateColumn = "title"
	TrainingMaterialUpdateColumnType            TrainingMaterialUpdateColumn = "type"
	TrainingMaterialUpdateColumnUpdateAt        TrainingMaterialUpdateColumn = "update_at"
	TrainingMaterialUpdateColumnUpdateBy        TrainingMaterialUpdateColumn = "update_by"
)

var AllTrainingMaterialUpdateColumn = []TrainingMaterialUpdateColumn{
	TrainingMaterialUpdateColumnContents,
	TrainingMaterialUpdateColumnCreateAt,
	TrainingMaterialUpdateColumnCreateBy,
	TrainingMaterialUpdateColumnDeleteAt,
	TrainingMaterialUpdateColumnDeleteBy,
	TrainingMaterialUpdateColumnID,
	TrainingMaterialUpdateColumnIsDelete,
	TrainingMaterialUpdateColumnMaterialAddress,
	TrainingMaterialUpdateColumnMaterialID,
	TrainingMaterialUpdateColumnTitle,
	TrainingMaterialUpdateColumnType,
	TrainingMaterialUpdateColumnUpdateAt,
	TrainingMaterialUpdateColumnUpdateBy,
}

func (e TrainingMaterialUpdateColumn) IsValid() bool {
	switch e {
	case TrainingMaterialUpdateColumnContents, TrainingMaterialUpdateColumnCreateAt, TrainingMaterialUpdateColumnCreateBy, TrainingMaterialUpdateColumnDeleteAt, TrainingMaterialUpdateColumnDeleteBy, TrainingMaterialUpdateColumnID, TrainingMaterialUpdateColumnIsDelete, TrainingMaterialUpdateColumnMaterialAddress, TrainingMaterialUpdateColumnMaterialID, TrainingMaterialUpdateColumnTitle, TrainingMaterialUpdateColumnType, TrainingMaterialUpdateColumnUpdateAt, TrainingMaterialUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e TrainingMaterialUpdateColumn) String() string {
	return string(e)
}

func (e *TrainingMaterialUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrainingMaterialUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid training_material_update_column", str)
	}
	return nil
}

func (e TrainingMaterialUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
