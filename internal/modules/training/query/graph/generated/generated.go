// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/training/query/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		AnswerLog                   func(childComplexity int, distinctOn []model.AnswerLogSelectColumn, limit *int, offset *int, orderBy []*model.AnswerLogOrderBy, where *model.AnswerLogBoolExp) int
		AnswerLogAggregate          func(childComplexity int, distinctOn []model.AnswerLogSelectColumn, limit *int, offset *int, orderBy []*model.AnswerLogOrderBy, where *model.AnswerLogBoolExp) int
		AnswerLogByPk               func(childComplexity int, id int64) int
		DriverStudyDetails          func(childComplexity int, distinctOn []model.DriverStudyDetailsSelectColumn, limit *int, offset *int, orderBy []*model.DriverStudyDetailsOrderBy, where *model.DriverStudyDetailsBoolExp) int
		DriverStudyDetailsAggregate func(childComplexity int, distinctOn []model.DriverStudyDetailsSelectColumn, limit *int, offset *int, orderBy []*model.DriverStudyDetailsOrderBy, where *model.DriverStudyDetailsBoolExp) int
		DriverStudyDetailsByPk      func(childComplexity int, id int64) int
		EnterpriseTraining          func(childComplexity int, distinctOn []model.EnterpriseTrainingSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseTrainingOrderBy, where *model.EnterpriseTrainingBoolExp) int
		EnterpriseTrainingAggregate func(childComplexity int, distinctOn []model.EnterpriseTrainingSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseTrainingOrderBy, where *model.EnterpriseTrainingBoolExp) int
		EnterpriseTrainingByPk      func(childComplexity int, id int64) int
		GovernmentManager           func(childComplexity int, distinctOn []model.GovernmentManagerSelectColumn, limit *int, offset *int, orderBy []*model.GovernmentManagerOrderBy, where *model.GovernmentManagerBoolExp) int
		GovernmentManagerAggregate  func(childComplexity int, distinctOn []model.GovernmentManagerSelectColumn, limit *int, offset *int, orderBy []*model.GovernmentManagerOrderBy, where *model.GovernmentManagerBoolExp) int
		GovernmentManagerByPk       func(childComplexity int, id int64) int
		ScoreLog                    func(childComplexity int, distinctOn []model.ScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.ScoreLogOrderBy, where *model.ScoreLogBoolExp) int
		ScoreLogAggregate           func(childComplexity int, distinctOn []model.ScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.ScoreLogOrderBy, where *model.ScoreLogBoolExp) int
		ScoreLogByPk                func(childComplexity int, id int64) int
		TrainingMaterial            func(childComplexity int, distinctOn []model.TrainingMaterialSelectColumn, limit *int, offset *int, orderBy []*model.TrainingMaterialOrderBy, where *model.TrainingMaterialBoolExp) int
		TrainingMaterialAggregate   func(childComplexity int, distinctOn []model.TrainingMaterialSelectColumn, limit *int, offset *int, orderBy []*model.TrainingMaterialOrderBy, where *model.TrainingMaterialBoolExp) int
		TrainingMaterialByPk        func(childComplexity int, id int64) int
	}

	AnswerLog struct {
		Answer      func(childComplexity int) int
		AnswerLogID func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		CreateBy    func(childComplexity int) int
		DriverID    func(childComplexity int) int
		ID          func(childComplexity int) int
		MaterialID  func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
	}

	AnswerLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	AnswerLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.AnswerLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AnswerLogAvgFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogMaxFields struct {
		Answer      func(childComplexity int) int
		AnswerLogID func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		CreateBy    func(childComplexity int) int
		DriverID    func(childComplexity int) int
		ID          func(childComplexity int) int
		MaterialID  func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
	}

	AnswerLogMinFields struct {
		Answer      func(childComplexity int) int
		AnswerLogID func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		CreateBy    func(childComplexity int) int
		DriverID    func(childComplexity int) int
		ID          func(childComplexity int) int
		MaterialID  func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
	}

	AnswerLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AnswerLogStddevFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogStddevPopFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogStddevSampFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogSumFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogVarPopFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogVarSampFields struct {
		ID func(childComplexity int) int
	}

	AnswerLogVarianceFields struct {
		ID func(childComplexity int) int
	}

	DriverStudyDetails struct {
		CreateBy            func(childComplexity int) int
		CreateTime          func(childComplexity int) int
		DriverID            func(childComplexity int) int
		DriverTrainingID    func(childComplexity int) int
		EnterpriseID        func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsTrainingCompleted func(childComplexity int) int
		MaterialID          func(childComplexity int) int
		Score               func(childComplexity int) int
		TrainingTime        func(childComplexity int) int
	}

	DriverStudyDetailsAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DriverStudyDetailsAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DriverStudyDetailsSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverStudyDetailsAvgFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsMaxFields struct {
		CreateBy         func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DriverTrainingID func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		ID               func(childComplexity int) int
		MaterialID       func(childComplexity int) int
		Score            func(childComplexity int) int
		TrainingTime     func(childComplexity int) int
	}

	DriverStudyDetailsMinFields struct {
		CreateBy         func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		DriverID         func(childComplexity int) int
		DriverTrainingID func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		ID               func(childComplexity int) int
		MaterialID       func(childComplexity int) int
		Score            func(childComplexity int) int
		TrainingTime     func(childComplexity int) int
	}

	DriverStudyDetailsMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverStudyDetailsStddevFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsStddevPopFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsStddevSampFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsSumFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsVarPopFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsVarSampFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	DriverStudyDetailsVarianceFields struct {
		ID           func(childComplexity int) int
		MaterialID   func(childComplexity int) int
		Score        func(childComplexity int) int
		TrainingTime func(childComplexity int) int
	}

	EnterpriseTraining struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		EnterpriseTrainingID func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		IsReceived           func(childComplexity int) int
		MaterialID           func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	EnterpriseTrainingAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	EnterpriseTrainingAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.EnterpriseTrainingSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseTrainingAvgFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingMaxFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		EnterpriseTrainingID func(childComplexity int) int
		ID                   func(childComplexity int) int
		MaterialID           func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	EnterpriseTrainingMinFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		EnterpriseTrainingID func(childComplexity int) int
		ID                   func(childComplexity int) int
		MaterialID           func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	EnterpriseTrainingMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseTrainingStddevFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingStddevPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingStddevSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingSumFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingVarPopFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingVarSampFields struct {
		ID func(childComplexity int) int
	}

	EnterpriseTrainingVarianceFields struct {
		ID func(childComplexity int) int
	}

	GovernmentManager struct {
		AllDriverCount func(childComplexity int) int
		AreaID         func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		Deadline       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		GovID          func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		IsReceived     func(childComplexity int) int
		ManageID       func(childComplexity int) int
		MaterialID     func(childComplexity int) int
		Note           func(childComplexity int) int
		StartTime      func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	GovernmentManagerAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	GovernmentManagerAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.GovernmentManagerSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	GovernmentManagerAvgFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerMaxFields struct {
		AllDriverCount func(childComplexity int) int
		AreaID         func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		Deadline       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		GovID          func(childComplexity int) int
		ID             func(childComplexity int) int
		ManageID       func(childComplexity int) int
		MaterialID     func(childComplexity int) int
		Note           func(childComplexity int) int
		StartTime      func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	GovernmentManagerMinFields struct {
		AllDriverCount func(childComplexity int) int
		AreaID         func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		Deadline       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		GovID          func(childComplexity int) int
		ID             func(childComplexity int) int
		ManageID       func(childComplexity int) int
		MaterialID     func(childComplexity int) int
		Note           func(childComplexity int) int
		StartTime      func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	GovernmentManagerMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	GovernmentManagerStddevFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerStddevPopFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerStddevSampFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerSumFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerVarPopFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerVarSampFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	GovernmentManagerVarianceFields struct {
		AllDriverCount func(childComplexity int) int
		ID             func(childComplexity int) int
		TrainedDrivers func(childComplexity int) int
	}

	ScoreLog struct {
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		ID               func(childComplexity int) int
		IDNumber         func(childComplexity int) int
		Name             func(childComplexity int) int
		ScoreLogID       func(childComplexity int) int
		TrainingPrograms func(childComplexity int) int
		TrainingScore    func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	ScoreLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	ScoreLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.ScoreLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ScoreLogAvgFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogMaxFields struct {
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		ID               func(childComplexity int) int
		IDNumber         func(childComplexity int) int
		Name             func(childComplexity int) int
		ScoreLogID       func(childComplexity int) int
		TrainingPrograms func(childComplexity int) int
		TrainingScore    func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	ScoreLogMinFields struct {
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		ID               func(childComplexity int) int
		IDNumber         func(childComplexity int) int
		Name             func(childComplexity int) int
		ScoreLogID       func(childComplexity int) int
		TrainingPrograms func(childComplexity int) int
		TrainingScore    func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	ScoreLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ScoreLogStddevFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogStddevPopFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogStddevSampFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogSumFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogVarPopFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogVarSampFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	ScoreLogVarianceFields struct {
		ID            func(childComplexity int) int
		TrainingScore func(childComplexity int) int
	}

	TrainingMaterial struct {
		Contents        func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		MaterialAddress func(childComplexity int) int
		MaterialID      func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	TrainingMaterialAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	TrainingMaterialAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.TrainingMaterialSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	TrainingMaterialAvgFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialMaxFields struct {
		Contents        func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ID              func(childComplexity int) int
		MaterialAddress func(childComplexity int) int
		MaterialID      func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	TrainingMaterialMinFields struct {
		Contents        func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ID              func(childComplexity int) int
		MaterialAddress func(childComplexity int) int
		MaterialID      func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	TrainingMaterialMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	TrainingMaterialStddevFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialStddevPopFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialStddevSampFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialSumFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialVarPopFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialVarSampFields struct {
		ID func(childComplexity int) int
	}

	TrainingMaterialVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type QueryResolver interface {
	AnswerLog(ctx context.Context, distinctOn []model.AnswerLogSelectColumn, limit *int, offset *int, orderBy []*model.AnswerLogOrderBy, where *model.AnswerLogBoolExp) ([]*model.AnswerLog, error)
	AnswerLogAggregate(ctx context.Context, distinctOn []model.AnswerLogSelectColumn, limit *int, offset *int, orderBy []*model.AnswerLogOrderBy, where *model.AnswerLogBoolExp) (*model.AnswerLogAggregate, error)
	AnswerLogByPk(ctx context.Context, id int64) (*model.AnswerLog, error)
	DriverStudyDetails(ctx context.Context, distinctOn []model.DriverStudyDetailsSelectColumn, limit *int, offset *int, orderBy []*model.DriverStudyDetailsOrderBy, where *model.DriverStudyDetailsBoolExp) ([]*model.DriverStudyDetails, error)
	DriverStudyDetailsAggregate(ctx context.Context, distinctOn []model.DriverStudyDetailsSelectColumn, limit *int, offset *int, orderBy []*model.DriverStudyDetailsOrderBy, where *model.DriverStudyDetailsBoolExp) (*model.DriverStudyDetailsAggregate, error)
	DriverStudyDetailsByPk(ctx context.Context, id int64) (*model.DriverStudyDetails, error)
	EnterpriseTraining(ctx context.Context, distinctOn []model.EnterpriseTrainingSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseTrainingOrderBy, where *model.EnterpriseTrainingBoolExp) ([]*model.EnterpriseTraining, error)
	EnterpriseTrainingAggregate(ctx context.Context, distinctOn []model.EnterpriseTrainingSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseTrainingOrderBy, where *model.EnterpriseTrainingBoolExp) (*model.EnterpriseTrainingAggregate, error)
	EnterpriseTrainingByPk(ctx context.Context, id int64) (*model.EnterpriseTraining, error)
	GovernmentManager(ctx context.Context, distinctOn []model.GovernmentManagerSelectColumn, limit *int, offset *int, orderBy []*model.GovernmentManagerOrderBy, where *model.GovernmentManagerBoolExp) ([]*model.GovernmentManager, error)
	GovernmentManagerAggregate(ctx context.Context, distinctOn []model.GovernmentManagerSelectColumn, limit *int, offset *int, orderBy []*model.GovernmentManagerOrderBy, where *model.GovernmentManagerBoolExp) (*model.GovernmentManagerAggregate, error)
	GovernmentManagerByPk(ctx context.Context, id int64) (*model.GovernmentManager, error)
	ScoreLog(ctx context.Context, distinctOn []model.ScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.ScoreLogOrderBy, where *model.ScoreLogBoolExp) ([]*model.ScoreLog, error)
	ScoreLogAggregate(ctx context.Context, distinctOn []model.ScoreLogSelectColumn, limit *int, offset *int, orderBy []*model.ScoreLogOrderBy, where *model.ScoreLogBoolExp) (*model.ScoreLogAggregate, error)
	ScoreLogByPk(ctx context.Context, id int64) (*model.ScoreLog, error)
	TrainingMaterial(ctx context.Context, distinctOn []model.TrainingMaterialSelectColumn, limit *int, offset *int, orderBy []*model.TrainingMaterialOrderBy, where *model.TrainingMaterialBoolExp) ([]*model.TrainingMaterial, error)
	TrainingMaterialAggregate(ctx context.Context, distinctOn []model.TrainingMaterialSelectColumn, limit *int, offset *int, orderBy []*model.TrainingMaterialOrderBy, where *model.TrainingMaterialBoolExp) (*model.TrainingMaterialAggregate, error)
	TrainingMaterialByPk(ctx context.Context, id int64) (*model.TrainingMaterial, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.answer_log":
		if e.complexity.Query.AnswerLog == nil {
			break
		}

		args, err := ec.field_Query_answer_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AnswerLog(childComplexity, args["distinct_on"].([]model.AnswerLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AnswerLogOrderBy), args["where"].(*model.AnswerLogBoolExp)), true

	case "Query.answer_log_aggregate":
		if e.complexity.Query.AnswerLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_answer_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AnswerLogAggregate(childComplexity, args["distinct_on"].([]model.AnswerLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AnswerLogOrderBy), args["where"].(*model.AnswerLogBoolExp)), true

	case "Query.answer_log_by_pk":
		if e.complexity.Query.AnswerLogByPk == nil {
			break
		}

		args, err := ec.field_Query_answer_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AnswerLogByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_study_details":
		if e.complexity.Query.DriverStudyDetails == nil {
			break
		}

		args, err := ec.field_Query_driver_study_details_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverStudyDetails(childComplexity, args["distinct_on"].([]model.DriverStudyDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverStudyDetailsOrderBy), args["where"].(*model.DriverStudyDetailsBoolExp)), true

	case "Query.driver_study_details_aggregate":
		if e.complexity.Query.DriverStudyDetailsAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_study_details_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverStudyDetailsAggregate(childComplexity, args["distinct_on"].([]model.DriverStudyDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverStudyDetailsOrderBy), args["where"].(*model.DriverStudyDetailsBoolExp)), true

	case "Query.driver_study_details_by_pk":
		if e.complexity.Query.DriverStudyDetailsByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_study_details_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverStudyDetailsByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_training":
		if e.complexity.Query.EnterpriseTraining == nil {
			break
		}

		args, err := ec.field_Query_enterprise_training_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseTraining(childComplexity, args["distinct_on"].([]model.EnterpriseTrainingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseTrainingOrderBy), args["where"].(*model.EnterpriseTrainingBoolExp)), true

	case "Query.enterprise_training_aggregate":
		if e.complexity.Query.EnterpriseTrainingAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_training_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseTrainingAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseTrainingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseTrainingOrderBy), args["where"].(*model.EnterpriseTrainingBoolExp)), true

	case "Query.enterprise_training_by_pk":
		if e.complexity.Query.EnterpriseTrainingByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_training_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseTrainingByPk(childComplexity, args["id"].(int64)), true

	case "Query.government_manager":
		if e.complexity.Query.GovernmentManager == nil {
			break
		}

		args, err := ec.field_Query_government_manager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GovernmentManager(childComplexity, args["distinct_on"].([]model.GovernmentManagerSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.GovernmentManagerOrderBy), args["where"].(*model.GovernmentManagerBoolExp)), true

	case "Query.government_manager_aggregate":
		if e.complexity.Query.GovernmentManagerAggregate == nil {
			break
		}

		args, err := ec.field_Query_government_manager_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GovernmentManagerAggregate(childComplexity, args["distinct_on"].([]model.GovernmentManagerSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.GovernmentManagerOrderBy), args["where"].(*model.GovernmentManagerBoolExp)), true

	case "Query.government_manager_by_pk":
		if e.complexity.Query.GovernmentManagerByPk == nil {
			break
		}

		args, err := ec.field_Query_government_manager_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GovernmentManagerByPk(childComplexity, args["id"].(int64)), true

	case "Query.score_log":
		if e.complexity.Query.ScoreLog == nil {
			break
		}

		args, err := ec.field_Query_score_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScoreLog(childComplexity, args["distinct_on"].([]model.ScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ScoreLogOrderBy), args["where"].(*model.ScoreLogBoolExp)), true

	case "Query.score_log_aggregate":
		if e.complexity.Query.ScoreLogAggregate == nil {
			break
		}

		args, err := ec.field_Query_score_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScoreLogAggregate(childComplexity, args["distinct_on"].([]model.ScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ScoreLogOrderBy), args["where"].(*model.ScoreLogBoolExp)), true

	case "Query.score_log_by_pk":
		if e.complexity.Query.ScoreLogByPk == nil {
			break
		}

		args, err := ec.field_Query_score_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScoreLogByPk(childComplexity, args["id"].(int64)), true

	case "Query.training_material":
		if e.complexity.Query.TrainingMaterial == nil {
			break
		}

		args, err := ec.field_Query_training_material_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingMaterial(childComplexity, args["distinct_on"].([]model.TrainingMaterialSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.TrainingMaterialOrderBy), args["where"].(*model.TrainingMaterialBoolExp)), true

	case "Query.training_material_aggregate":
		if e.complexity.Query.TrainingMaterialAggregate == nil {
			break
		}

		args, err := ec.field_Query_training_material_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingMaterialAggregate(childComplexity, args["distinct_on"].([]model.TrainingMaterialSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.TrainingMaterialOrderBy), args["where"].(*model.TrainingMaterialBoolExp)), true

	case "Query.training_material_by_pk":
		if e.complexity.Query.TrainingMaterialByPk == nil {
			break
		}

		args, err := ec.field_Query_training_material_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrainingMaterialByPk(childComplexity, args["id"].(int64)), true

	case "answer_log.answer":
		if e.complexity.AnswerLog.Answer == nil {
			break
		}

		return e.complexity.AnswerLog.Answer(childComplexity), true

	case "answer_log.answer_log_id":
		if e.complexity.AnswerLog.AnswerLogID == nil {
			break
		}

		return e.complexity.AnswerLog.AnswerLogID(childComplexity), true

	case "answer_log.create_at":
		if e.complexity.AnswerLog.CreateAt == nil {
			break
		}

		return e.complexity.AnswerLog.CreateAt(childComplexity), true

	case "answer_log.create_by":
		if e.complexity.AnswerLog.CreateBy == nil {
			break
		}

		return e.complexity.AnswerLog.CreateBy(childComplexity), true

	case "answer_log.driver_id":
		if e.complexity.AnswerLog.DriverID == nil {
			break
		}

		return e.complexity.AnswerLog.DriverID(childComplexity), true

	case "answer_log.id":
		if e.complexity.AnswerLog.ID == nil {
			break
		}

		return e.complexity.AnswerLog.ID(childComplexity), true

	case "answer_log.material_id":
		if e.complexity.AnswerLog.MaterialID == nil {
			break
		}

		return e.complexity.AnswerLog.MaterialID(childComplexity), true

	case "answer_log.update_at":
		if e.complexity.AnswerLog.UpdateAt == nil {
			break
		}

		return e.complexity.AnswerLog.UpdateAt(childComplexity), true

	case "answer_log.update_by":
		if e.complexity.AnswerLog.UpdateBy == nil {
			break
		}

		return e.complexity.AnswerLog.UpdateBy(childComplexity), true

	case "answer_log_aggregate.aggregate":
		if e.complexity.AnswerLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AnswerLogAggregate.Aggregate(childComplexity), true

	case "answer_log_aggregate.nodes":
		if e.complexity.AnswerLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.AnswerLogAggregate.Nodes(childComplexity), true

	case "answer_log_aggregate_fields.avg":
		if e.complexity.AnswerLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.Avg(childComplexity), true

	case "answer_log_aggregate_fields.count":
		if e.complexity.AnswerLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_answer_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AnswerLogAggregateFields.Count(childComplexity, args["columns"].([]model.AnswerLogSelectColumn), args["distinct"].(*bool)), true

	case "answer_log_aggregate_fields.max":
		if e.complexity.AnswerLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.Max(childComplexity), true

	case "answer_log_aggregate_fields.min":
		if e.complexity.AnswerLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.Min(childComplexity), true

	case "answer_log_aggregate_fields.stddev":
		if e.complexity.AnswerLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.Stddev(childComplexity), true

	case "answer_log_aggregate_fields.stddev_pop":
		if e.complexity.AnswerLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.StddevPop(childComplexity), true

	case "answer_log_aggregate_fields.stddev_samp":
		if e.complexity.AnswerLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.StddevSamp(childComplexity), true

	case "answer_log_aggregate_fields.sum":
		if e.complexity.AnswerLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.Sum(childComplexity), true

	case "answer_log_aggregate_fields.var_pop":
		if e.complexity.AnswerLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.VarPop(childComplexity), true

	case "answer_log_aggregate_fields.var_samp":
		if e.complexity.AnswerLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.VarSamp(childComplexity), true

	case "answer_log_aggregate_fields.variance":
		if e.complexity.AnswerLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AnswerLogAggregateFields.Variance(childComplexity), true

	case "answer_log_avg_fields.id":
		if e.complexity.AnswerLogAvgFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogAvgFields.ID(childComplexity), true

	case "answer_log_max_fields.answer":
		if e.complexity.AnswerLogMaxFields.Answer == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.Answer(childComplexity), true

	case "answer_log_max_fields.answer_log_id":
		if e.complexity.AnswerLogMaxFields.AnswerLogID == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.AnswerLogID(childComplexity), true

	case "answer_log_max_fields.create_at":
		if e.complexity.AnswerLogMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.CreateAt(childComplexity), true

	case "answer_log_max_fields.create_by":
		if e.complexity.AnswerLogMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.CreateBy(childComplexity), true

	case "answer_log_max_fields.driver_id":
		if e.complexity.AnswerLogMaxFields.DriverID == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.DriverID(childComplexity), true

	case "answer_log_max_fields.id":
		if e.complexity.AnswerLogMaxFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.ID(childComplexity), true

	case "answer_log_max_fields.material_id":
		if e.complexity.AnswerLogMaxFields.MaterialID == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.MaterialID(childComplexity), true

	case "answer_log_max_fields.update_at":
		if e.complexity.AnswerLogMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.UpdateAt(childComplexity), true

	case "answer_log_max_fields.update_by":
		if e.complexity.AnswerLogMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.AnswerLogMaxFields.UpdateBy(childComplexity), true

	case "answer_log_min_fields.answer":
		if e.complexity.AnswerLogMinFields.Answer == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.Answer(childComplexity), true

	case "answer_log_min_fields.answer_log_id":
		if e.complexity.AnswerLogMinFields.AnswerLogID == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.AnswerLogID(childComplexity), true

	case "answer_log_min_fields.create_at":
		if e.complexity.AnswerLogMinFields.CreateAt == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.CreateAt(childComplexity), true

	case "answer_log_min_fields.create_by":
		if e.complexity.AnswerLogMinFields.CreateBy == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.CreateBy(childComplexity), true

	case "answer_log_min_fields.driver_id":
		if e.complexity.AnswerLogMinFields.DriverID == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.DriverID(childComplexity), true

	case "answer_log_min_fields.id":
		if e.complexity.AnswerLogMinFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.ID(childComplexity), true

	case "answer_log_min_fields.material_id":
		if e.complexity.AnswerLogMinFields.MaterialID == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.MaterialID(childComplexity), true

	case "answer_log_min_fields.update_at":
		if e.complexity.AnswerLogMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.UpdateAt(childComplexity), true

	case "answer_log_min_fields.update_by":
		if e.complexity.AnswerLogMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.AnswerLogMinFields.UpdateBy(childComplexity), true

	case "answer_log_mutation_response.affected_rows":
		if e.complexity.AnswerLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AnswerLogMutationResponse.AffectedRows(childComplexity), true

	case "answer_log_mutation_response.returning":
		if e.complexity.AnswerLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AnswerLogMutationResponse.Returning(childComplexity), true

	case "answer_log_stddev_fields.id":
		if e.complexity.AnswerLogStddevFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogStddevFields.ID(childComplexity), true

	case "answer_log_stddev_pop_fields.id":
		if e.complexity.AnswerLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogStddevPopFields.ID(childComplexity), true

	case "answer_log_stddev_samp_fields.id":
		if e.complexity.AnswerLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogStddevSampFields.ID(childComplexity), true

	case "answer_log_sum_fields.id":
		if e.complexity.AnswerLogSumFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogSumFields.ID(childComplexity), true

	case "answer_log_var_pop_fields.id":
		if e.complexity.AnswerLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogVarPopFields.ID(childComplexity), true

	case "answer_log_var_samp_fields.id":
		if e.complexity.AnswerLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogVarSampFields.ID(childComplexity), true

	case "answer_log_variance_fields.id":
		if e.complexity.AnswerLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.AnswerLogVarianceFields.ID(childComplexity), true

	case "driver_study_details.create_by":
		if e.complexity.DriverStudyDetails.CreateBy == nil {
			break
		}

		return e.complexity.DriverStudyDetails.CreateBy(childComplexity), true

	case "driver_study_details.create_time":
		if e.complexity.DriverStudyDetails.CreateTime == nil {
			break
		}

		return e.complexity.DriverStudyDetails.CreateTime(childComplexity), true

	case "driver_study_details.driver_id":
		if e.complexity.DriverStudyDetails.DriverID == nil {
			break
		}

		return e.complexity.DriverStudyDetails.DriverID(childComplexity), true

	case "driver_study_details.driver_training_id":
		if e.complexity.DriverStudyDetails.DriverTrainingID == nil {
			break
		}

		return e.complexity.DriverStudyDetails.DriverTrainingID(childComplexity), true

	case "driver_study_details.enterprise_id":
		if e.complexity.DriverStudyDetails.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverStudyDetails.EnterpriseID(childComplexity), true

	case "driver_study_details.id":
		if e.complexity.DriverStudyDetails.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetails.ID(childComplexity), true

	case "driver_study_details.is_training_completed":
		if e.complexity.DriverStudyDetails.IsTrainingCompleted == nil {
			break
		}

		return e.complexity.DriverStudyDetails.IsTrainingCompleted(childComplexity), true

	case "driver_study_details.material_id":
		if e.complexity.DriverStudyDetails.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetails.MaterialID(childComplexity), true

	case "driver_study_details.score":
		if e.complexity.DriverStudyDetails.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetails.Score(childComplexity), true

	case "driver_study_details.training_time":
		if e.complexity.DriverStudyDetails.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetails.TrainingTime(childComplexity), true

	case "driver_study_details_aggregate.aggregate":
		if e.complexity.DriverStudyDetailsAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregate.Aggregate(childComplexity), true

	case "driver_study_details_aggregate.nodes":
		if e.complexity.DriverStudyDetailsAggregate.Nodes == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregate.Nodes(childComplexity), true

	case "driver_study_details_aggregate_fields.avg":
		if e.complexity.DriverStudyDetailsAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Avg(childComplexity), true

	case "driver_study_details_aggregate_fields.count":
		if e.complexity.DriverStudyDetailsAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_driver_study_details_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Count(childComplexity, args["columns"].([]model.DriverStudyDetailsSelectColumn), args["distinct"].(*bool)), true

	case "driver_study_details_aggregate_fields.max":
		if e.complexity.DriverStudyDetailsAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Max(childComplexity), true

	case "driver_study_details_aggregate_fields.min":
		if e.complexity.DriverStudyDetailsAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Min(childComplexity), true

	case "driver_study_details_aggregate_fields.stddev":
		if e.complexity.DriverStudyDetailsAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Stddev(childComplexity), true

	case "driver_study_details_aggregate_fields.stddev_pop":
		if e.complexity.DriverStudyDetailsAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.StddevPop(childComplexity), true

	case "driver_study_details_aggregate_fields.stddev_samp":
		if e.complexity.DriverStudyDetailsAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.StddevSamp(childComplexity), true

	case "driver_study_details_aggregate_fields.sum":
		if e.complexity.DriverStudyDetailsAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Sum(childComplexity), true

	case "driver_study_details_aggregate_fields.var_pop":
		if e.complexity.DriverStudyDetailsAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.VarPop(childComplexity), true

	case "driver_study_details_aggregate_fields.var_samp":
		if e.complexity.DriverStudyDetailsAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.VarSamp(childComplexity), true

	case "driver_study_details_aggregate_fields.variance":
		if e.complexity.DriverStudyDetailsAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAggregateFields.Variance(childComplexity), true

	case "driver_study_details_avg_fields.id":
		if e.complexity.DriverStudyDetailsAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAvgFields.ID(childComplexity), true

	case "driver_study_details_avg_fields.material_id":
		if e.complexity.DriverStudyDetailsAvgFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAvgFields.MaterialID(childComplexity), true

	case "driver_study_details_avg_fields.score":
		if e.complexity.DriverStudyDetailsAvgFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAvgFields.Score(childComplexity), true

	case "driver_study_details_avg_fields.training_time":
		if e.complexity.DriverStudyDetailsAvgFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsAvgFields.TrainingTime(childComplexity), true

	case "driver_study_details_max_fields.create_by":
		if e.complexity.DriverStudyDetailsMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.CreateBy(childComplexity), true

	case "driver_study_details_max_fields.create_time":
		if e.complexity.DriverStudyDetailsMaxFields.CreateTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.CreateTime(childComplexity), true

	case "driver_study_details_max_fields.driver_id":
		if e.complexity.DriverStudyDetailsMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.DriverID(childComplexity), true

	case "driver_study_details_max_fields.driver_training_id":
		if e.complexity.DriverStudyDetailsMaxFields.DriverTrainingID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.DriverTrainingID(childComplexity), true

	case "driver_study_details_max_fields.enterprise_id":
		if e.complexity.DriverStudyDetailsMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.EnterpriseID(childComplexity), true

	case "driver_study_details_max_fields.id":
		if e.complexity.DriverStudyDetailsMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.ID(childComplexity), true

	case "driver_study_details_max_fields.material_id":
		if e.complexity.DriverStudyDetailsMaxFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.MaterialID(childComplexity), true

	case "driver_study_details_max_fields.score":
		if e.complexity.DriverStudyDetailsMaxFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.Score(childComplexity), true

	case "driver_study_details_max_fields.training_time":
		if e.complexity.DriverStudyDetailsMaxFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMaxFields.TrainingTime(childComplexity), true

	case "driver_study_details_min_fields.create_by":
		if e.complexity.DriverStudyDetailsMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.CreateBy(childComplexity), true

	case "driver_study_details_min_fields.create_time":
		if e.complexity.DriverStudyDetailsMinFields.CreateTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.CreateTime(childComplexity), true

	case "driver_study_details_min_fields.driver_id":
		if e.complexity.DriverStudyDetailsMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.DriverID(childComplexity), true

	case "driver_study_details_min_fields.driver_training_id":
		if e.complexity.DriverStudyDetailsMinFields.DriverTrainingID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.DriverTrainingID(childComplexity), true

	case "driver_study_details_min_fields.enterprise_id":
		if e.complexity.DriverStudyDetailsMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.EnterpriseID(childComplexity), true

	case "driver_study_details_min_fields.id":
		if e.complexity.DriverStudyDetailsMinFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.ID(childComplexity), true

	case "driver_study_details_min_fields.material_id":
		if e.complexity.DriverStudyDetailsMinFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.MaterialID(childComplexity), true

	case "driver_study_details_min_fields.score":
		if e.complexity.DriverStudyDetailsMinFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.Score(childComplexity), true

	case "driver_study_details_min_fields.training_time":
		if e.complexity.DriverStudyDetailsMinFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMinFields.TrainingTime(childComplexity), true

	case "driver_study_details_mutation_response.affected_rows":
		if e.complexity.DriverStudyDetailsMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMutationResponse.AffectedRows(childComplexity), true

	case "driver_study_details_mutation_response.returning":
		if e.complexity.DriverStudyDetailsMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverStudyDetailsMutationResponse.Returning(childComplexity), true

	case "driver_study_details_stddev_fields.id":
		if e.complexity.DriverStudyDetailsStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevFields.ID(childComplexity), true

	case "driver_study_details_stddev_fields.material_id":
		if e.complexity.DriverStudyDetailsStddevFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevFields.MaterialID(childComplexity), true

	case "driver_study_details_stddev_fields.score":
		if e.complexity.DriverStudyDetailsStddevFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevFields.Score(childComplexity), true

	case "driver_study_details_stddev_fields.training_time":
		if e.complexity.DriverStudyDetailsStddevFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevFields.TrainingTime(childComplexity), true

	case "driver_study_details_stddev_pop_fields.id":
		if e.complexity.DriverStudyDetailsStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevPopFields.ID(childComplexity), true

	case "driver_study_details_stddev_pop_fields.material_id":
		if e.complexity.DriverStudyDetailsStddevPopFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevPopFields.MaterialID(childComplexity), true

	case "driver_study_details_stddev_pop_fields.score":
		if e.complexity.DriverStudyDetailsStddevPopFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevPopFields.Score(childComplexity), true

	case "driver_study_details_stddev_pop_fields.training_time":
		if e.complexity.DriverStudyDetailsStddevPopFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevPopFields.TrainingTime(childComplexity), true

	case "driver_study_details_stddev_samp_fields.id":
		if e.complexity.DriverStudyDetailsStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevSampFields.ID(childComplexity), true

	case "driver_study_details_stddev_samp_fields.material_id":
		if e.complexity.DriverStudyDetailsStddevSampFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevSampFields.MaterialID(childComplexity), true

	case "driver_study_details_stddev_samp_fields.score":
		if e.complexity.DriverStudyDetailsStddevSampFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevSampFields.Score(childComplexity), true

	case "driver_study_details_stddev_samp_fields.training_time":
		if e.complexity.DriverStudyDetailsStddevSampFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsStddevSampFields.TrainingTime(childComplexity), true

	case "driver_study_details_sum_fields.id":
		if e.complexity.DriverStudyDetailsSumFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsSumFields.ID(childComplexity), true

	case "driver_study_details_sum_fields.material_id":
		if e.complexity.DriverStudyDetailsSumFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsSumFields.MaterialID(childComplexity), true

	case "driver_study_details_sum_fields.score":
		if e.complexity.DriverStudyDetailsSumFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsSumFields.Score(childComplexity), true

	case "driver_study_details_sum_fields.training_time":
		if e.complexity.DriverStudyDetailsSumFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsSumFields.TrainingTime(childComplexity), true

	case "driver_study_details_var_pop_fields.id":
		if e.complexity.DriverStudyDetailsVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarPopFields.ID(childComplexity), true

	case "driver_study_details_var_pop_fields.material_id":
		if e.complexity.DriverStudyDetailsVarPopFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarPopFields.MaterialID(childComplexity), true

	case "driver_study_details_var_pop_fields.score":
		if e.complexity.DriverStudyDetailsVarPopFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarPopFields.Score(childComplexity), true

	case "driver_study_details_var_pop_fields.training_time":
		if e.complexity.DriverStudyDetailsVarPopFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarPopFields.TrainingTime(childComplexity), true

	case "driver_study_details_var_samp_fields.id":
		if e.complexity.DriverStudyDetailsVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarSampFields.ID(childComplexity), true

	case "driver_study_details_var_samp_fields.material_id":
		if e.complexity.DriverStudyDetailsVarSampFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarSampFields.MaterialID(childComplexity), true

	case "driver_study_details_var_samp_fields.score":
		if e.complexity.DriverStudyDetailsVarSampFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarSampFields.Score(childComplexity), true

	case "driver_study_details_var_samp_fields.training_time":
		if e.complexity.DriverStudyDetailsVarSampFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarSampFields.TrainingTime(childComplexity), true

	case "driver_study_details_variance_fields.id":
		if e.complexity.DriverStudyDetailsVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarianceFields.ID(childComplexity), true

	case "driver_study_details_variance_fields.material_id":
		if e.complexity.DriverStudyDetailsVarianceFields.MaterialID == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarianceFields.MaterialID(childComplexity), true

	case "driver_study_details_variance_fields.score":
		if e.complexity.DriverStudyDetailsVarianceFields.Score == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarianceFields.Score(childComplexity), true

	case "driver_study_details_variance_fields.training_time":
		if e.complexity.DriverStudyDetailsVarianceFields.TrainingTime == nil {
			break
		}

		return e.complexity.DriverStudyDetailsVarianceFields.TrainingTime(childComplexity), true

	case "enterprise_training.create_at":
		if e.complexity.EnterpriseTraining.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseTraining.CreateAt(childComplexity), true

	case "enterprise_training.create_by":
		if e.complexity.EnterpriseTraining.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseTraining.CreateBy(childComplexity), true

	case "enterprise_training.delete_at":
		if e.complexity.EnterpriseTraining.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseTraining.DeleteAt(childComplexity), true

	case "enterprise_training.delete_by":
		if e.complexity.EnterpriseTraining.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseTraining.DeleteBy(childComplexity), true

	case "enterprise_training.enterprise_id":
		if e.complexity.EnterpriseTraining.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseTraining.EnterpriseID(childComplexity), true

	case "enterprise_training.enterprise_training_id":
		if e.complexity.EnterpriseTraining.EnterpriseTrainingID == nil {
			break
		}

		return e.complexity.EnterpriseTraining.EnterpriseTrainingID(childComplexity), true

	case "enterprise_training.id":
		if e.complexity.EnterpriseTraining.ID == nil {
			break
		}

		return e.complexity.EnterpriseTraining.ID(childComplexity), true

	case "enterprise_training.is_delete":
		if e.complexity.EnterpriseTraining.IsDelete == nil {
			break
		}

		return e.complexity.EnterpriseTraining.IsDelete(childComplexity), true

	case "enterprise_training.is_received":
		if e.complexity.EnterpriseTraining.IsReceived == nil {
			break
		}

		return e.complexity.EnterpriseTraining.IsReceived(childComplexity), true

	case "enterprise_training.material_id":
		if e.complexity.EnterpriseTraining.MaterialID == nil {
			break
		}

		return e.complexity.EnterpriseTraining.MaterialID(childComplexity), true

	case "enterprise_training.update_at":
		if e.complexity.EnterpriseTraining.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseTraining.UpdateAt(childComplexity), true

	case "enterprise_training.update_by":
		if e.complexity.EnterpriseTraining.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseTraining.UpdateBy(childComplexity), true

	case "enterprise_training_aggregate.aggregate":
		if e.complexity.EnterpriseTrainingAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregate.Aggregate(childComplexity), true

	case "enterprise_training_aggregate.nodes":
		if e.complexity.EnterpriseTrainingAggregate.Nodes == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregate.Nodes(childComplexity), true

	case "enterprise_training_aggregate_fields.avg":
		if e.complexity.EnterpriseTrainingAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Avg(childComplexity), true

	case "enterprise_training_aggregate_fields.count":
		if e.complexity.EnterpriseTrainingAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_enterprise_training_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Count(childComplexity, args["columns"].([]model.EnterpriseTrainingSelectColumn), args["distinct"].(*bool)), true

	case "enterprise_training_aggregate_fields.max":
		if e.complexity.EnterpriseTrainingAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Max(childComplexity), true

	case "enterprise_training_aggregate_fields.min":
		if e.complexity.EnterpriseTrainingAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Min(childComplexity), true

	case "enterprise_training_aggregate_fields.stddev":
		if e.complexity.EnterpriseTrainingAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Stddev(childComplexity), true

	case "enterprise_training_aggregate_fields.stddev_pop":
		if e.complexity.EnterpriseTrainingAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.StddevPop(childComplexity), true

	case "enterprise_training_aggregate_fields.stddev_samp":
		if e.complexity.EnterpriseTrainingAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.StddevSamp(childComplexity), true

	case "enterprise_training_aggregate_fields.sum":
		if e.complexity.EnterpriseTrainingAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Sum(childComplexity), true

	case "enterprise_training_aggregate_fields.var_pop":
		if e.complexity.EnterpriseTrainingAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.VarPop(childComplexity), true

	case "enterprise_training_aggregate_fields.var_samp":
		if e.complexity.EnterpriseTrainingAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.VarSamp(childComplexity), true

	case "enterprise_training_aggregate_fields.variance":
		if e.complexity.EnterpriseTrainingAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAggregateFields.Variance(childComplexity), true

	case "enterprise_training_avg_fields.id":
		if e.complexity.EnterpriseTrainingAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingAvgFields.ID(childComplexity), true

	case "enterprise_training_max_fields.create_at":
		if e.complexity.EnterpriseTrainingMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.CreateAt(childComplexity), true

	case "enterprise_training_max_fields.create_by":
		if e.complexity.EnterpriseTrainingMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.CreateBy(childComplexity), true

	case "enterprise_training_max_fields.delete_at":
		if e.complexity.EnterpriseTrainingMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.DeleteAt(childComplexity), true

	case "enterprise_training_max_fields.delete_by":
		if e.complexity.EnterpriseTrainingMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.DeleteBy(childComplexity), true

	case "enterprise_training_max_fields.enterprise_id":
		if e.complexity.EnterpriseTrainingMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.EnterpriseID(childComplexity), true

	case "enterprise_training_max_fields.enterprise_training_id":
		if e.complexity.EnterpriseTrainingMaxFields.EnterpriseTrainingID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.EnterpriseTrainingID(childComplexity), true

	case "enterprise_training_max_fields.id":
		if e.complexity.EnterpriseTrainingMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.ID(childComplexity), true

	case "enterprise_training_max_fields.material_id":
		if e.complexity.EnterpriseTrainingMaxFields.MaterialID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.MaterialID(childComplexity), true

	case "enterprise_training_max_fields.update_at":
		if e.complexity.EnterpriseTrainingMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.UpdateAt(childComplexity), true

	case "enterprise_training_max_fields.update_by":
		if e.complexity.EnterpriseTrainingMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMaxFields.UpdateBy(childComplexity), true

	case "enterprise_training_min_fields.create_at":
		if e.complexity.EnterpriseTrainingMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.CreateAt(childComplexity), true

	case "enterprise_training_min_fields.create_by":
		if e.complexity.EnterpriseTrainingMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.CreateBy(childComplexity), true

	case "enterprise_training_min_fields.delete_at":
		if e.complexity.EnterpriseTrainingMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.DeleteAt(childComplexity), true

	case "enterprise_training_min_fields.delete_by":
		if e.complexity.EnterpriseTrainingMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.DeleteBy(childComplexity), true

	case "enterprise_training_min_fields.enterprise_id":
		if e.complexity.EnterpriseTrainingMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.EnterpriseID(childComplexity), true

	case "enterprise_training_min_fields.enterprise_training_id":
		if e.complexity.EnterpriseTrainingMinFields.EnterpriseTrainingID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.EnterpriseTrainingID(childComplexity), true

	case "enterprise_training_min_fields.id":
		if e.complexity.EnterpriseTrainingMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.ID(childComplexity), true

	case "enterprise_training_min_fields.material_id":
		if e.complexity.EnterpriseTrainingMinFields.MaterialID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.MaterialID(childComplexity), true

	case "enterprise_training_min_fields.update_at":
		if e.complexity.EnterpriseTrainingMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.UpdateAt(childComplexity), true

	case "enterprise_training_min_fields.update_by":
		if e.complexity.EnterpriseTrainingMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMinFields.UpdateBy(childComplexity), true

	case "enterprise_training_mutation_response.affected_rows":
		if e.complexity.EnterpriseTrainingMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMutationResponse.AffectedRows(childComplexity), true

	case "enterprise_training_mutation_response.returning":
		if e.complexity.EnterpriseTrainingMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseTrainingMutationResponse.Returning(childComplexity), true

	case "enterprise_training_stddev_fields.id":
		if e.complexity.EnterpriseTrainingStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingStddevFields.ID(childComplexity), true

	case "enterprise_training_stddev_pop_fields.id":
		if e.complexity.EnterpriseTrainingStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingStddevPopFields.ID(childComplexity), true

	case "enterprise_training_stddev_samp_fields.id":
		if e.complexity.EnterpriseTrainingStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingStddevSampFields.ID(childComplexity), true

	case "enterprise_training_sum_fields.id":
		if e.complexity.EnterpriseTrainingSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingSumFields.ID(childComplexity), true

	case "enterprise_training_var_pop_fields.id":
		if e.complexity.EnterpriseTrainingVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingVarPopFields.ID(childComplexity), true

	case "enterprise_training_var_samp_fields.id":
		if e.complexity.EnterpriseTrainingVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingVarSampFields.ID(childComplexity), true

	case "enterprise_training_variance_fields.id":
		if e.complexity.EnterpriseTrainingVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseTrainingVarianceFields.ID(childComplexity), true

	case "government_manager.all_driver_count":
		if e.complexity.GovernmentManager.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManager.AllDriverCount(childComplexity), true

	case "government_manager.area_id":
		if e.complexity.GovernmentManager.AreaID == nil {
			break
		}

		return e.complexity.GovernmentManager.AreaID(childComplexity), true

	case "government_manager.create_at":
		if e.complexity.GovernmentManager.CreateAt == nil {
			break
		}

		return e.complexity.GovernmentManager.CreateAt(childComplexity), true

	case "government_manager.create_by":
		if e.complexity.GovernmentManager.CreateBy == nil {
			break
		}

		return e.complexity.GovernmentManager.CreateBy(childComplexity), true

	case "government_manager.deadline":
		if e.complexity.GovernmentManager.Deadline == nil {
			break
		}

		return e.complexity.GovernmentManager.Deadline(childComplexity), true

	case "government_manager.delete_at":
		if e.complexity.GovernmentManager.DeleteAt == nil {
			break
		}

		return e.complexity.GovernmentManager.DeleteAt(childComplexity), true

	case "government_manager.delete_by":
		if e.complexity.GovernmentManager.DeleteBy == nil {
			break
		}

		return e.complexity.GovernmentManager.DeleteBy(childComplexity), true

	case "government_manager.enterprise_id":
		if e.complexity.GovernmentManager.EnterpriseID == nil {
			break
		}

		return e.complexity.GovernmentManager.EnterpriseID(childComplexity), true

	case "government_manager.gov_id":
		if e.complexity.GovernmentManager.GovID == nil {
			break
		}

		return e.complexity.GovernmentManager.GovID(childComplexity), true

	case "government_manager.id":
		if e.complexity.GovernmentManager.ID == nil {
			break
		}

		return e.complexity.GovernmentManager.ID(childComplexity), true

	case "government_manager.is_delete":
		if e.complexity.GovernmentManager.IsDelete == nil {
			break
		}

		return e.complexity.GovernmentManager.IsDelete(childComplexity), true

	case "government_manager.is_received":
		if e.complexity.GovernmentManager.IsReceived == nil {
			break
		}

		return e.complexity.GovernmentManager.IsReceived(childComplexity), true

	case "government_manager.manage_id":
		if e.complexity.GovernmentManager.ManageID == nil {
			break
		}

		return e.complexity.GovernmentManager.ManageID(childComplexity), true

	case "government_manager.material_id":
		if e.complexity.GovernmentManager.MaterialID == nil {
			break
		}

		return e.complexity.GovernmentManager.MaterialID(childComplexity), true

	case "government_manager.note":
		if e.complexity.GovernmentManager.Note == nil {
			break
		}

		return e.complexity.GovernmentManager.Note(childComplexity), true

	case "government_manager.start_time":
		if e.complexity.GovernmentManager.StartTime == nil {
			break
		}

		return e.complexity.GovernmentManager.StartTime(childComplexity), true

	case "government_manager.trained_drivers":
		if e.complexity.GovernmentManager.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManager.TrainedDrivers(childComplexity), true

	case "government_manager.update_at":
		if e.complexity.GovernmentManager.UpdateAt == nil {
			break
		}

		return e.complexity.GovernmentManager.UpdateAt(childComplexity), true

	case "government_manager.update_by":
		if e.complexity.GovernmentManager.UpdateBy == nil {
			break
		}

		return e.complexity.GovernmentManager.UpdateBy(childComplexity), true

	case "government_manager_aggregate.aggregate":
		if e.complexity.GovernmentManagerAggregate.Aggregate == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregate.Aggregate(childComplexity), true

	case "government_manager_aggregate.nodes":
		if e.complexity.GovernmentManagerAggregate.Nodes == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregate.Nodes(childComplexity), true

	case "government_manager_aggregate_fields.avg":
		if e.complexity.GovernmentManagerAggregateFields.Avg == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.Avg(childComplexity), true

	case "government_manager_aggregate_fields.count":
		if e.complexity.GovernmentManagerAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_government_manager_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.GovernmentManagerAggregateFields.Count(childComplexity, args["columns"].([]model.GovernmentManagerSelectColumn), args["distinct"].(*bool)), true

	case "government_manager_aggregate_fields.max":
		if e.complexity.GovernmentManagerAggregateFields.Max == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.Max(childComplexity), true

	case "government_manager_aggregate_fields.min":
		if e.complexity.GovernmentManagerAggregateFields.Min == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.Min(childComplexity), true

	case "government_manager_aggregate_fields.stddev":
		if e.complexity.GovernmentManagerAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.Stddev(childComplexity), true

	case "government_manager_aggregate_fields.stddev_pop":
		if e.complexity.GovernmentManagerAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.StddevPop(childComplexity), true

	case "government_manager_aggregate_fields.stddev_samp":
		if e.complexity.GovernmentManagerAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.StddevSamp(childComplexity), true

	case "government_manager_aggregate_fields.sum":
		if e.complexity.GovernmentManagerAggregateFields.Sum == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.Sum(childComplexity), true

	case "government_manager_aggregate_fields.var_pop":
		if e.complexity.GovernmentManagerAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.VarPop(childComplexity), true

	case "government_manager_aggregate_fields.var_samp":
		if e.complexity.GovernmentManagerAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.VarSamp(childComplexity), true

	case "government_manager_aggregate_fields.variance":
		if e.complexity.GovernmentManagerAggregateFields.Variance == nil {
			break
		}

		return e.complexity.GovernmentManagerAggregateFields.Variance(childComplexity), true

	case "government_manager_avg_fields.all_driver_count":
		if e.complexity.GovernmentManagerAvgFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerAvgFields.AllDriverCount(childComplexity), true

	case "government_manager_avg_fields.id":
		if e.complexity.GovernmentManagerAvgFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerAvgFields.ID(childComplexity), true

	case "government_manager_avg_fields.trained_drivers":
		if e.complexity.GovernmentManagerAvgFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerAvgFields.TrainedDrivers(childComplexity), true

	case "government_manager_max_fields.all_driver_count":
		if e.complexity.GovernmentManagerMaxFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.AllDriverCount(childComplexity), true

	case "government_manager_max_fields.area_id":
		if e.complexity.GovernmentManagerMaxFields.AreaID == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.AreaID(childComplexity), true

	case "government_manager_max_fields.create_at":
		if e.complexity.GovernmentManagerMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.CreateAt(childComplexity), true

	case "government_manager_max_fields.create_by":
		if e.complexity.GovernmentManagerMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.CreateBy(childComplexity), true

	case "government_manager_max_fields.deadline":
		if e.complexity.GovernmentManagerMaxFields.Deadline == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.Deadline(childComplexity), true

	case "government_manager_max_fields.delete_at":
		if e.complexity.GovernmentManagerMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.DeleteAt(childComplexity), true

	case "government_manager_max_fields.delete_by":
		if e.complexity.GovernmentManagerMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.DeleteBy(childComplexity), true

	case "government_manager_max_fields.enterprise_id":
		if e.complexity.GovernmentManagerMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.EnterpriseID(childComplexity), true

	case "government_manager_max_fields.gov_id":
		if e.complexity.GovernmentManagerMaxFields.GovID == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.GovID(childComplexity), true

	case "government_manager_max_fields.id":
		if e.complexity.GovernmentManagerMaxFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.ID(childComplexity), true

	case "government_manager_max_fields.manage_id":
		if e.complexity.GovernmentManagerMaxFields.ManageID == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.ManageID(childComplexity), true

	case "government_manager_max_fields.material_id":
		if e.complexity.GovernmentManagerMaxFields.MaterialID == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.MaterialID(childComplexity), true

	case "government_manager_max_fields.note":
		if e.complexity.GovernmentManagerMaxFields.Note == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.Note(childComplexity), true

	case "government_manager_max_fields.start_time":
		if e.complexity.GovernmentManagerMaxFields.StartTime == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.StartTime(childComplexity), true

	case "government_manager_max_fields.trained_drivers":
		if e.complexity.GovernmentManagerMaxFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.TrainedDrivers(childComplexity), true

	case "government_manager_max_fields.update_at":
		if e.complexity.GovernmentManagerMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.UpdateAt(childComplexity), true

	case "government_manager_max_fields.update_by":
		if e.complexity.GovernmentManagerMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.GovernmentManagerMaxFields.UpdateBy(childComplexity), true

	case "government_manager_min_fields.all_driver_count":
		if e.complexity.GovernmentManagerMinFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.AllDriverCount(childComplexity), true

	case "government_manager_min_fields.area_id":
		if e.complexity.GovernmentManagerMinFields.AreaID == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.AreaID(childComplexity), true

	case "government_manager_min_fields.create_at":
		if e.complexity.GovernmentManagerMinFields.CreateAt == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.CreateAt(childComplexity), true

	case "government_manager_min_fields.create_by":
		if e.complexity.GovernmentManagerMinFields.CreateBy == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.CreateBy(childComplexity), true

	case "government_manager_min_fields.deadline":
		if e.complexity.GovernmentManagerMinFields.Deadline == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.Deadline(childComplexity), true

	case "government_manager_min_fields.delete_at":
		if e.complexity.GovernmentManagerMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.DeleteAt(childComplexity), true

	case "government_manager_min_fields.delete_by":
		if e.complexity.GovernmentManagerMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.DeleteBy(childComplexity), true

	case "government_manager_min_fields.enterprise_id":
		if e.complexity.GovernmentManagerMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.EnterpriseID(childComplexity), true

	case "government_manager_min_fields.gov_id":
		if e.complexity.GovernmentManagerMinFields.GovID == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.GovID(childComplexity), true

	case "government_manager_min_fields.id":
		if e.complexity.GovernmentManagerMinFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.ID(childComplexity), true

	case "government_manager_min_fields.manage_id":
		if e.complexity.GovernmentManagerMinFields.ManageID == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.ManageID(childComplexity), true

	case "government_manager_min_fields.material_id":
		if e.complexity.GovernmentManagerMinFields.MaterialID == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.MaterialID(childComplexity), true

	case "government_manager_min_fields.note":
		if e.complexity.GovernmentManagerMinFields.Note == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.Note(childComplexity), true

	case "government_manager_min_fields.start_time":
		if e.complexity.GovernmentManagerMinFields.StartTime == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.StartTime(childComplexity), true

	case "government_manager_min_fields.trained_drivers":
		if e.complexity.GovernmentManagerMinFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.TrainedDrivers(childComplexity), true

	case "government_manager_min_fields.update_at":
		if e.complexity.GovernmentManagerMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.UpdateAt(childComplexity), true

	case "government_manager_min_fields.update_by":
		if e.complexity.GovernmentManagerMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.GovernmentManagerMinFields.UpdateBy(childComplexity), true

	case "government_manager_mutation_response.affected_rows":
		if e.complexity.GovernmentManagerMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.GovernmentManagerMutationResponse.AffectedRows(childComplexity), true

	case "government_manager_mutation_response.returning":
		if e.complexity.GovernmentManagerMutationResponse.Returning == nil {
			break
		}

		return e.complexity.GovernmentManagerMutationResponse.Returning(childComplexity), true

	case "government_manager_stddev_fields.all_driver_count":
		if e.complexity.GovernmentManagerStddevFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevFields.AllDriverCount(childComplexity), true

	case "government_manager_stddev_fields.id":
		if e.complexity.GovernmentManagerStddevFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevFields.ID(childComplexity), true

	case "government_manager_stddev_fields.trained_drivers":
		if e.complexity.GovernmentManagerStddevFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevFields.TrainedDrivers(childComplexity), true

	case "government_manager_stddev_pop_fields.all_driver_count":
		if e.complexity.GovernmentManagerStddevPopFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevPopFields.AllDriverCount(childComplexity), true

	case "government_manager_stddev_pop_fields.id":
		if e.complexity.GovernmentManagerStddevPopFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevPopFields.ID(childComplexity), true

	case "government_manager_stddev_pop_fields.trained_drivers":
		if e.complexity.GovernmentManagerStddevPopFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevPopFields.TrainedDrivers(childComplexity), true

	case "government_manager_stddev_samp_fields.all_driver_count":
		if e.complexity.GovernmentManagerStddevSampFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevSampFields.AllDriverCount(childComplexity), true

	case "government_manager_stddev_samp_fields.id":
		if e.complexity.GovernmentManagerStddevSampFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevSampFields.ID(childComplexity), true

	case "government_manager_stddev_samp_fields.trained_drivers":
		if e.complexity.GovernmentManagerStddevSampFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerStddevSampFields.TrainedDrivers(childComplexity), true

	case "government_manager_sum_fields.all_driver_count":
		if e.complexity.GovernmentManagerSumFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerSumFields.AllDriverCount(childComplexity), true

	case "government_manager_sum_fields.id":
		if e.complexity.GovernmentManagerSumFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerSumFields.ID(childComplexity), true

	case "government_manager_sum_fields.trained_drivers":
		if e.complexity.GovernmentManagerSumFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerSumFields.TrainedDrivers(childComplexity), true

	case "government_manager_var_pop_fields.all_driver_count":
		if e.complexity.GovernmentManagerVarPopFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerVarPopFields.AllDriverCount(childComplexity), true

	case "government_manager_var_pop_fields.id":
		if e.complexity.GovernmentManagerVarPopFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerVarPopFields.ID(childComplexity), true

	case "government_manager_var_pop_fields.trained_drivers":
		if e.complexity.GovernmentManagerVarPopFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerVarPopFields.TrainedDrivers(childComplexity), true

	case "government_manager_var_samp_fields.all_driver_count":
		if e.complexity.GovernmentManagerVarSampFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerVarSampFields.AllDriverCount(childComplexity), true

	case "government_manager_var_samp_fields.id":
		if e.complexity.GovernmentManagerVarSampFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerVarSampFields.ID(childComplexity), true

	case "government_manager_var_samp_fields.trained_drivers":
		if e.complexity.GovernmentManagerVarSampFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerVarSampFields.TrainedDrivers(childComplexity), true

	case "government_manager_variance_fields.all_driver_count":
		if e.complexity.GovernmentManagerVarianceFields.AllDriverCount == nil {
			break
		}

		return e.complexity.GovernmentManagerVarianceFields.AllDriverCount(childComplexity), true

	case "government_manager_variance_fields.id":
		if e.complexity.GovernmentManagerVarianceFields.ID == nil {
			break
		}

		return e.complexity.GovernmentManagerVarianceFields.ID(childComplexity), true

	case "government_manager_variance_fields.trained_drivers":
		if e.complexity.GovernmentManagerVarianceFields.TrainedDrivers == nil {
			break
		}

		return e.complexity.GovernmentManagerVarianceFields.TrainedDrivers(childComplexity), true

	case "score_log.create_at":
		if e.complexity.ScoreLog.CreateAt == nil {
			break
		}

		return e.complexity.ScoreLog.CreateAt(childComplexity), true

	case "score_log.create_by":
		if e.complexity.ScoreLog.CreateBy == nil {
			break
		}

		return e.complexity.ScoreLog.CreateBy(childComplexity), true

	case "score_log.id":
		if e.complexity.ScoreLog.ID == nil {
			break
		}

		return e.complexity.ScoreLog.ID(childComplexity), true

	case "score_log.id_number":
		if e.complexity.ScoreLog.IDNumber == nil {
			break
		}

		return e.complexity.ScoreLog.IDNumber(childComplexity), true

	case "score_log.name":
		if e.complexity.ScoreLog.Name == nil {
			break
		}

		return e.complexity.ScoreLog.Name(childComplexity), true

	case "score_log.score_log_id":
		if e.complexity.ScoreLog.ScoreLogID == nil {
			break
		}

		return e.complexity.ScoreLog.ScoreLogID(childComplexity), true

	case "score_log.training_programs":
		if e.complexity.ScoreLog.TrainingPrograms == nil {
			break
		}

		return e.complexity.ScoreLog.TrainingPrograms(childComplexity), true

	case "score_log.training_score":
		if e.complexity.ScoreLog.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLog.TrainingScore(childComplexity), true

	case "score_log.update_at":
		if e.complexity.ScoreLog.UpdateAt == nil {
			break
		}

		return e.complexity.ScoreLog.UpdateAt(childComplexity), true

	case "score_log.update_by":
		if e.complexity.ScoreLog.UpdateBy == nil {
			break
		}

		return e.complexity.ScoreLog.UpdateBy(childComplexity), true

	case "score_log_aggregate.aggregate":
		if e.complexity.ScoreLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ScoreLogAggregate.Aggregate(childComplexity), true

	case "score_log_aggregate.nodes":
		if e.complexity.ScoreLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.ScoreLogAggregate.Nodes(childComplexity), true

	case "score_log_aggregate_fields.avg":
		if e.complexity.ScoreLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.Avg(childComplexity), true

	case "score_log_aggregate_fields.count":
		if e.complexity.ScoreLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_score_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ScoreLogAggregateFields.Count(childComplexity, args["columns"].([]model.ScoreLogSelectColumn), args["distinct"].(*bool)), true

	case "score_log_aggregate_fields.max":
		if e.complexity.ScoreLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.Max(childComplexity), true

	case "score_log_aggregate_fields.min":
		if e.complexity.ScoreLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.Min(childComplexity), true

	case "score_log_aggregate_fields.stddev":
		if e.complexity.ScoreLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.Stddev(childComplexity), true

	case "score_log_aggregate_fields.stddev_pop":
		if e.complexity.ScoreLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.StddevPop(childComplexity), true

	case "score_log_aggregate_fields.stddev_samp":
		if e.complexity.ScoreLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.StddevSamp(childComplexity), true

	case "score_log_aggregate_fields.sum":
		if e.complexity.ScoreLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.Sum(childComplexity), true

	case "score_log_aggregate_fields.var_pop":
		if e.complexity.ScoreLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.VarPop(childComplexity), true

	case "score_log_aggregate_fields.var_samp":
		if e.complexity.ScoreLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.VarSamp(childComplexity), true

	case "score_log_aggregate_fields.variance":
		if e.complexity.ScoreLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ScoreLogAggregateFields.Variance(childComplexity), true

	case "score_log_avg_fields.id":
		if e.complexity.ScoreLogAvgFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogAvgFields.ID(childComplexity), true

	case "score_log_avg_fields.training_score":
		if e.complexity.ScoreLogAvgFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogAvgFields.TrainingScore(childComplexity), true

	case "score_log_max_fields.create_at":
		if e.complexity.ScoreLogMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.CreateAt(childComplexity), true

	case "score_log_max_fields.create_by":
		if e.complexity.ScoreLogMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.CreateBy(childComplexity), true

	case "score_log_max_fields.id":
		if e.complexity.ScoreLogMaxFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.ID(childComplexity), true

	case "score_log_max_fields.id_number":
		if e.complexity.ScoreLogMaxFields.IDNumber == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.IDNumber(childComplexity), true

	case "score_log_max_fields.name":
		if e.complexity.ScoreLogMaxFields.Name == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.Name(childComplexity), true

	case "score_log_max_fields.score_log_id":
		if e.complexity.ScoreLogMaxFields.ScoreLogID == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.ScoreLogID(childComplexity), true

	case "score_log_max_fields.training_programs":
		if e.complexity.ScoreLogMaxFields.TrainingPrograms == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.TrainingPrograms(childComplexity), true

	case "score_log_max_fields.training_score":
		if e.complexity.ScoreLogMaxFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.TrainingScore(childComplexity), true

	case "score_log_max_fields.update_at":
		if e.complexity.ScoreLogMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.UpdateAt(childComplexity), true

	case "score_log_max_fields.update_by":
		if e.complexity.ScoreLogMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.ScoreLogMaxFields.UpdateBy(childComplexity), true

	case "score_log_min_fields.create_at":
		if e.complexity.ScoreLogMinFields.CreateAt == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.CreateAt(childComplexity), true

	case "score_log_min_fields.create_by":
		if e.complexity.ScoreLogMinFields.CreateBy == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.CreateBy(childComplexity), true

	case "score_log_min_fields.id":
		if e.complexity.ScoreLogMinFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.ID(childComplexity), true

	case "score_log_min_fields.id_number":
		if e.complexity.ScoreLogMinFields.IDNumber == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.IDNumber(childComplexity), true

	case "score_log_min_fields.name":
		if e.complexity.ScoreLogMinFields.Name == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.Name(childComplexity), true

	case "score_log_min_fields.score_log_id":
		if e.complexity.ScoreLogMinFields.ScoreLogID == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.ScoreLogID(childComplexity), true

	case "score_log_min_fields.training_programs":
		if e.complexity.ScoreLogMinFields.TrainingPrograms == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.TrainingPrograms(childComplexity), true

	case "score_log_min_fields.training_score":
		if e.complexity.ScoreLogMinFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.TrainingScore(childComplexity), true

	case "score_log_min_fields.update_at":
		if e.complexity.ScoreLogMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.UpdateAt(childComplexity), true

	case "score_log_min_fields.update_by":
		if e.complexity.ScoreLogMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.ScoreLogMinFields.UpdateBy(childComplexity), true

	case "score_log_mutation_response.affected_rows":
		if e.complexity.ScoreLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ScoreLogMutationResponse.AffectedRows(childComplexity), true

	case "score_log_mutation_response.returning":
		if e.complexity.ScoreLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ScoreLogMutationResponse.Returning(childComplexity), true

	case "score_log_stddev_fields.id":
		if e.complexity.ScoreLogStddevFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogStddevFields.ID(childComplexity), true

	case "score_log_stddev_fields.training_score":
		if e.complexity.ScoreLogStddevFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogStddevFields.TrainingScore(childComplexity), true

	case "score_log_stddev_pop_fields.id":
		if e.complexity.ScoreLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogStddevPopFields.ID(childComplexity), true

	case "score_log_stddev_pop_fields.training_score":
		if e.complexity.ScoreLogStddevPopFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogStddevPopFields.TrainingScore(childComplexity), true

	case "score_log_stddev_samp_fields.id":
		if e.complexity.ScoreLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogStddevSampFields.ID(childComplexity), true

	case "score_log_stddev_samp_fields.training_score":
		if e.complexity.ScoreLogStddevSampFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogStddevSampFields.TrainingScore(childComplexity), true

	case "score_log_sum_fields.id":
		if e.complexity.ScoreLogSumFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogSumFields.ID(childComplexity), true

	case "score_log_sum_fields.training_score":
		if e.complexity.ScoreLogSumFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogSumFields.TrainingScore(childComplexity), true

	case "score_log_var_pop_fields.id":
		if e.complexity.ScoreLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogVarPopFields.ID(childComplexity), true

	case "score_log_var_pop_fields.training_score":
		if e.complexity.ScoreLogVarPopFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogVarPopFields.TrainingScore(childComplexity), true

	case "score_log_var_samp_fields.id":
		if e.complexity.ScoreLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogVarSampFields.ID(childComplexity), true

	case "score_log_var_samp_fields.training_score":
		if e.complexity.ScoreLogVarSampFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogVarSampFields.TrainingScore(childComplexity), true

	case "score_log_variance_fields.id":
		if e.complexity.ScoreLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.ScoreLogVarianceFields.ID(childComplexity), true

	case "score_log_variance_fields.training_score":
		if e.complexity.ScoreLogVarianceFields.TrainingScore == nil {
			break
		}

		return e.complexity.ScoreLogVarianceFields.TrainingScore(childComplexity), true

	case "training_material.contents":
		if e.complexity.TrainingMaterial.Contents == nil {
			break
		}

		return e.complexity.TrainingMaterial.Contents(childComplexity), true

	case "training_material.create_at":
		if e.complexity.TrainingMaterial.CreateAt == nil {
			break
		}

		return e.complexity.TrainingMaterial.CreateAt(childComplexity), true

	case "training_material.create_by":
		if e.complexity.TrainingMaterial.CreateBy == nil {
			break
		}

		return e.complexity.TrainingMaterial.CreateBy(childComplexity), true

	case "training_material.delete_at":
		if e.complexity.TrainingMaterial.DeleteAt == nil {
			break
		}

		return e.complexity.TrainingMaterial.DeleteAt(childComplexity), true

	case "training_material.delete_by":
		if e.complexity.TrainingMaterial.DeleteBy == nil {
			break
		}

		return e.complexity.TrainingMaterial.DeleteBy(childComplexity), true

	case "training_material.id":
		if e.complexity.TrainingMaterial.ID == nil {
			break
		}

		return e.complexity.TrainingMaterial.ID(childComplexity), true

	case "training_material.is_delete":
		if e.complexity.TrainingMaterial.IsDelete == nil {
			break
		}

		return e.complexity.TrainingMaterial.IsDelete(childComplexity), true

	case "training_material.material_address":
		if e.complexity.TrainingMaterial.MaterialAddress == nil {
			break
		}

		return e.complexity.TrainingMaterial.MaterialAddress(childComplexity), true

	case "training_material.material_id":
		if e.complexity.TrainingMaterial.MaterialID == nil {
			break
		}

		return e.complexity.TrainingMaterial.MaterialID(childComplexity), true

	case "training_material.title":
		if e.complexity.TrainingMaterial.Title == nil {
			break
		}

		return e.complexity.TrainingMaterial.Title(childComplexity), true

	case "training_material.type":
		if e.complexity.TrainingMaterial.Type == nil {
			break
		}

		return e.complexity.TrainingMaterial.Type(childComplexity), true

	case "training_material.update_at":
		if e.complexity.TrainingMaterial.UpdateAt == nil {
			break
		}

		return e.complexity.TrainingMaterial.UpdateAt(childComplexity), true

	case "training_material.update_by":
		if e.complexity.TrainingMaterial.UpdateBy == nil {
			break
		}

		return e.complexity.TrainingMaterial.UpdateBy(childComplexity), true

	case "training_material_aggregate.aggregate":
		if e.complexity.TrainingMaterialAggregate.Aggregate == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregate.Aggregate(childComplexity), true

	case "training_material_aggregate.nodes":
		if e.complexity.TrainingMaterialAggregate.Nodes == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregate.Nodes(childComplexity), true

	case "training_material_aggregate_fields.avg":
		if e.complexity.TrainingMaterialAggregateFields.Avg == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.Avg(childComplexity), true

	case "training_material_aggregate_fields.count":
		if e.complexity.TrainingMaterialAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_training_material_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrainingMaterialAggregateFields.Count(childComplexity, args["columns"].([]model.TrainingMaterialSelectColumn), args["distinct"].(*bool)), true

	case "training_material_aggregate_fields.max":
		if e.complexity.TrainingMaterialAggregateFields.Max == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.Max(childComplexity), true

	case "training_material_aggregate_fields.min":
		if e.complexity.TrainingMaterialAggregateFields.Min == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.Min(childComplexity), true

	case "training_material_aggregate_fields.stddev":
		if e.complexity.TrainingMaterialAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.Stddev(childComplexity), true

	case "training_material_aggregate_fields.stddev_pop":
		if e.complexity.TrainingMaterialAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.StddevPop(childComplexity), true

	case "training_material_aggregate_fields.stddev_samp":
		if e.complexity.TrainingMaterialAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.StddevSamp(childComplexity), true

	case "training_material_aggregate_fields.sum":
		if e.complexity.TrainingMaterialAggregateFields.Sum == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.Sum(childComplexity), true

	case "training_material_aggregate_fields.var_pop":
		if e.complexity.TrainingMaterialAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.VarPop(childComplexity), true

	case "training_material_aggregate_fields.var_samp":
		if e.complexity.TrainingMaterialAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.VarSamp(childComplexity), true

	case "training_material_aggregate_fields.variance":
		if e.complexity.TrainingMaterialAggregateFields.Variance == nil {
			break
		}

		return e.complexity.TrainingMaterialAggregateFields.Variance(childComplexity), true

	case "training_material_avg_fields.id":
		if e.complexity.TrainingMaterialAvgFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialAvgFields.ID(childComplexity), true

	case "training_material_max_fields.contents":
		if e.complexity.TrainingMaterialMaxFields.Contents == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.Contents(childComplexity), true

	case "training_material_max_fields.create_at":
		if e.complexity.TrainingMaterialMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.CreateAt(childComplexity), true

	case "training_material_max_fields.create_by":
		if e.complexity.TrainingMaterialMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.CreateBy(childComplexity), true

	case "training_material_max_fields.delete_at":
		if e.complexity.TrainingMaterialMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.DeleteAt(childComplexity), true

	case "training_material_max_fields.delete_by":
		if e.complexity.TrainingMaterialMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.DeleteBy(childComplexity), true

	case "training_material_max_fields.id":
		if e.complexity.TrainingMaterialMaxFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.ID(childComplexity), true

	case "training_material_max_fields.material_address":
		if e.complexity.TrainingMaterialMaxFields.MaterialAddress == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.MaterialAddress(childComplexity), true

	case "training_material_max_fields.material_id":
		if e.complexity.TrainingMaterialMaxFields.MaterialID == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.MaterialID(childComplexity), true

	case "training_material_max_fields.title":
		if e.complexity.TrainingMaterialMaxFields.Title == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.Title(childComplexity), true

	case "training_material_max_fields.type":
		if e.complexity.TrainingMaterialMaxFields.Type == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.Type(childComplexity), true

	case "training_material_max_fields.update_at":
		if e.complexity.TrainingMaterialMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.UpdateAt(childComplexity), true

	case "training_material_max_fields.update_by":
		if e.complexity.TrainingMaterialMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.TrainingMaterialMaxFields.UpdateBy(childComplexity), true

	case "training_material_min_fields.contents":
		if e.complexity.TrainingMaterialMinFields.Contents == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.Contents(childComplexity), true

	case "training_material_min_fields.create_at":
		if e.complexity.TrainingMaterialMinFields.CreateAt == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.CreateAt(childComplexity), true

	case "training_material_min_fields.create_by":
		if e.complexity.TrainingMaterialMinFields.CreateBy == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.CreateBy(childComplexity), true

	case "training_material_min_fields.delete_at":
		if e.complexity.TrainingMaterialMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.DeleteAt(childComplexity), true

	case "training_material_min_fields.delete_by":
		if e.complexity.TrainingMaterialMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.DeleteBy(childComplexity), true

	case "training_material_min_fields.id":
		if e.complexity.TrainingMaterialMinFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.ID(childComplexity), true

	case "training_material_min_fields.material_address":
		if e.complexity.TrainingMaterialMinFields.MaterialAddress == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.MaterialAddress(childComplexity), true

	case "training_material_min_fields.material_id":
		if e.complexity.TrainingMaterialMinFields.MaterialID == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.MaterialID(childComplexity), true

	case "training_material_min_fields.title":
		if e.complexity.TrainingMaterialMinFields.Title == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.Title(childComplexity), true

	case "training_material_min_fields.type":
		if e.complexity.TrainingMaterialMinFields.Type == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.Type(childComplexity), true

	case "training_material_min_fields.update_at":
		if e.complexity.TrainingMaterialMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.UpdateAt(childComplexity), true

	case "training_material_min_fields.update_by":
		if e.complexity.TrainingMaterialMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.TrainingMaterialMinFields.UpdateBy(childComplexity), true

	case "training_material_mutation_response.affected_rows":
		if e.complexity.TrainingMaterialMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.TrainingMaterialMutationResponse.AffectedRows(childComplexity), true

	case "training_material_mutation_response.returning":
		if e.complexity.TrainingMaterialMutationResponse.Returning == nil {
			break
		}

		return e.complexity.TrainingMaterialMutationResponse.Returning(childComplexity), true

	case "training_material_stddev_fields.id":
		if e.complexity.TrainingMaterialStddevFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialStddevFields.ID(childComplexity), true

	case "training_material_stddev_pop_fields.id":
		if e.complexity.TrainingMaterialStddevPopFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialStddevPopFields.ID(childComplexity), true

	case "training_material_stddev_samp_fields.id":
		if e.complexity.TrainingMaterialStddevSampFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialStddevSampFields.ID(childComplexity), true

	case "training_material_sum_fields.id":
		if e.complexity.TrainingMaterialSumFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialSumFields.ID(childComplexity), true

	case "training_material_var_pop_fields.id":
		if e.complexity.TrainingMaterialVarPopFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialVarPopFields.ID(childComplexity), true

	case "training_material_var_samp_fields.id":
		if e.complexity.TrainingMaterialVarSampFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialVarSampFields.ID(childComplexity), true

	case "training_material_variance_fields.id":
		if e.complexity.TrainingMaterialVarianceFields.ID == nil {
			break
		}

		return e.complexity.TrainingMaterialVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/comparison.graphqls", Input: `scalar timestamptz
scalar numeric
scalar bigint
scalar _jsonb

# An object with globally unique ID
interface Node {
    # A globally unique identifier
    id: ID!
}

type PageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}


"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


# expression to compare columns of type numeric. All fields are combined with logical 'AND'.
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}



"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}


"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_study_detail.graphqls", Input: `# columns and relationships of "driver_study_details"
type driver_study_details {
    create_by: String
    create_time: timestamptz
    driver_id: String
    driver_training_id: String
    enterprise_id: String
    id: bigint!
    is_training_completed: Boolean
    material_id: bigint
    score: bigint
    training_time: numeric
}

# aggregated selection of "driver_study_details"
type driver_study_details_aggregate {
    aggregate: driver_study_details_aggregate_fields
    nodes: [driver_study_details!]!
}

# aggregate fields of "driver_study_details"
type driver_study_details_aggregate_fields {
    avg: driver_study_details_avg_fields
    count(columns: [driver_study_details_select_column!], distinct: Boolean): Int
    max: driver_study_details_max_fields
    min: driver_study_details_min_fields
    stddev: driver_study_details_stddev_fields
    stddev_pop: driver_study_details_stddev_pop_fields
    stddev_samp: driver_study_details_stddev_samp_fields
    sum: driver_study_details_sum_fields
    var_pop: driver_study_details_var_pop_fields
    var_samp: driver_study_details_var_samp_fields
    variance: driver_study_details_variance_fields
}

# order by aggregate values of table "driver_study_details"
input driver_study_details_aggregate_order_by {
    avg: driver_study_details_avg_order_by
    count: order_by
    max: driver_study_details_max_order_by
    min: driver_study_details_min_order_by
    stddev: driver_study_details_stddev_order_by
    stddev_pop: driver_study_details_stddev_pop_order_by
    stddev_samp: driver_study_details_stddev_samp_order_by
    sum: driver_study_details_sum_order_by
    var_pop: driver_study_details_var_pop_order_by
    var_samp: driver_study_details_var_samp_order_by
    variance: driver_study_details_variance_order_by
}

# input type for inserting array relation for remote table "driver_study_details"
input driver_study_details_arr_rel_insert_input {
    data: [driver_study_details_insert_input!]!
    on_conflict: driver_study_details_on_conflict
}

# aggregate avg on columns
type driver_study_details_avg_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by avg() on columns of table "driver_study_details"
input driver_study_details_avg_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# Boolean expression to filter rows from the table "driver_study_details". All fields are combined with a logical 'AND'.
input driver_study_details_bool_exp {
    _and: [driver_study_details_bool_exp]
    _not: driver_study_details_bool_exp
    _or: [driver_study_details_bool_exp]
    create_by: String_comparison_exp
    create_time: timestamptz_comparison_exp
    driver_id: String_comparison_exp
    driver_training_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    id: bigint_comparison_exp
    is_training_completed: Boolean_comparison_exp
    material_id: bigint_comparison_exp
    score: bigint_comparison_exp
    training_time: numeric_comparison_exp
}

# unique or primary key constraints on table "driver_study_details"
enum driver_study_details_constraint {
    # unique or primary key constraint
    driver_study_details_pkey
}

# input type for incrementing integer column in table "driver_study_details"
input driver_study_details_inc_input {
    id: bigint
    material_id: bigint
    score: bigint
    training_time: numeric
}

# input type for inserting data into table "driver_study_details"
input driver_study_details_insert_input {
    create_by: String
    create_time: timestamptz
    driver_id: String
    driver_training_id: String
    enterprise_id: String
    id: bigint
    is_training_completed: Boolean
    material_id: bigint
    score: bigint
    training_time: numeric
}

# aggregate max on columns
type driver_study_details_max_fields {
    create_by: String
    create_time: timestamptz
    driver_id: String
    driver_training_id: String
    enterprise_id: String
    id: bigint
    material_id: bigint
    score: bigint
    training_time: numeric
}

# order by max() on columns of table "driver_study_details"
input driver_study_details_max_order_by {
    create_by: order_by
    create_time: order_by
    driver_id: order_by
    driver_training_id: order_by
    enterprise_id: order_by
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# aggregate min on columns
type driver_study_details_min_fields {
    create_by: String
    create_time: timestamptz
    driver_id: String
    driver_training_id: String
    enterprise_id: String
    id: bigint
    material_id: bigint
    score: bigint
    training_time: numeric
}

# order by min() on columns of table "driver_study_details"
input driver_study_details_min_order_by {
    create_by: order_by
    create_time: order_by
    driver_id: order_by
    driver_training_id: order_by
    enterprise_id: order_by
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# response of any mutation on the table "driver_study_details"
type driver_study_details_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [driver_study_details!]!
}

# input type for inserting object relation for remote table "driver_study_details"
input driver_study_details_obj_rel_insert_input {
    data: driver_study_details_insert_input!
    on_conflict: driver_study_details_on_conflict
}

# on conflict condition type for table "driver_study_details"
input driver_study_details_on_conflict {
    constraint: driver_study_details_constraint!
    update_columns: [driver_study_details_update_column!]!
    where: driver_study_details_bool_exp
}

# ordering options when selecting data from "driver_study_details"
input driver_study_details_order_by {
    create_by: order_by
    create_time: order_by
    driver_id: order_by
    driver_training_id: order_by
    enterprise_id: order_by
    id: order_by
    is_training_completed: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# primary key columns input for table: "driver_study_details"
input driver_study_details_pk_columns_input {
    id: bigint!
}

# select columns of table "driver_study_details"
enum driver_study_details_select_column {
    # column name
    create_by
    # column name
    create_time
    # column name
    driver_id
    # column name
    driver_training_id
    # column name
    enterprise_id
    # column name
    id
    # column name
    is_training_completed
    # column name
    material_id
    # column name
    score
    # column name
    training_time
}

# input type for updating data in table "driver_study_details"
input driver_study_details_set_input {
    create_by: String
    create_time: timestamptz
    driver_id: String
    driver_training_id: String
    enterprise_id: String
    id: bigint
    is_training_completed: Boolean
    material_id: bigint
    score: bigint
    training_time: numeric
}

# aggregate stddev on columns
type driver_study_details_stddev_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by stddev() on columns of table "driver_study_details"
input driver_study_details_stddev_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# aggregate stddev_pop on columns
type driver_study_details_stddev_pop_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by stddev_pop() on columns of table "driver_study_details"
input driver_study_details_stddev_pop_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# aggregate stddev_samp on columns
type driver_study_details_stddev_samp_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by stddev_samp() on columns of table "driver_study_details"
input driver_study_details_stddev_samp_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# aggregate sum on columns
type driver_study_details_sum_fields {
    id: bigint
    material_id: bigint
    score: bigint
    training_time: numeric
}

# order by sum() on columns of table "driver_study_details"
input driver_study_details_sum_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# update columns of table "driver_study_details"
enum driver_study_details_update_column {
    # column name
    create_by
    # column name
    create_time
    # column name
    driver_id
    # column name
    driver_training_id
    # column name
    enterprise_id
    # column name
    id
    # column name
    is_training_completed
    # column name
    material_id
    # column name
    score
    # column name
    training_time
}

# aggregate var_pop on columns
type driver_study_details_var_pop_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by var_pop() on columns of table "driver_study_details"
input driver_study_details_var_pop_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# aggregate var_samp on columns
type driver_study_details_var_samp_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by var_samp() on columns of table "driver_study_details"
input driver_study_details_var_samp_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}

# aggregate variance on columns
type driver_study_details_variance_fields {
    id: Float
    material_id: Float
    score: Float
    training_time: Float
}

# order by variance() on columns of table "driver_study_details"
input driver_study_details_variance_order_by {
    id: order_by
    material_id: order_by
    score: order_by
    training_time: order_by
}`, BuiltIn: false},
	{Name: "graph/graphqls/education_training.graphqls", Input: `# columns and relationships of "answer_log"
type answer_log {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint!
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "answer_log"
type answer_log_aggregate {
    aggregate: answer_log_aggregate_fields
    nodes: [answer_log!]!
}

# aggregate fields of "answer_log"
type answer_log_aggregate_fields {
    avg: answer_log_avg_fields
    count(columns: [answer_log_select_column!], distinct: Boolean): Int
    max: answer_log_max_fields
    min: answer_log_min_fields
    stddev: answer_log_stddev_fields
    stddev_pop: answer_log_stddev_pop_fields
    stddev_samp: answer_log_stddev_samp_fields
    sum: answer_log_sum_fields
    var_pop: answer_log_var_pop_fields
    var_samp: answer_log_var_samp_fields
    variance: answer_log_variance_fields
}

# order by aggregate values of table "answer_log"
input answer_log_aggregate_order_by {
    avg: answer_log_avg_order_by
    count: order_by
    max: answer_log_max_order_by
    min: answer_log_min_order_by
    stddev: answer_log_stddev_order_by
    stddev_pop: answer_log_stddev_pop_order_by
    stddev_samp: answer_log_stddev_samp_order_by
    sum: answer_log_sum_order_by
    var_pop: answer_log_var_pop_order_by
    var_samp: answer_log_var_samp_order_by
    variance: answer_log_variance_order_by
}

# input type for inserting array relation for remote table "answer_log"
input answer_log_arr_rel_insert_input {
    data: [answer_log_insert_input!]!
    on_conflict: answer_log_on_conflict
}

# aggregate avg on columns
type answer_log_avg_fields {
    id: Float
}

# order by avg() on columns of table "answer_log"
input answer_log_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "answer_log". All fields are combined with a logical 'AND'.
input answer_log_bool_exp {
    _and: [answer_log_bool_exp]
    _not: answer_log_bool_exp
    _or: [answer_log_bool_exp]
    answer: String_comparison_exp
    answer_log_id: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    driver_id: String_comparison_exp
    id: bigint_comparison_exp
    material_id: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "answer_log"
enum answer_log_constraint {
    # unique or primary key constraint
    answer_log_pkey
}

# input type for incrementing integer column in table "answer_log"
input answer_log_inc_input {
    id: bigint
}

# input type for inserting data into table "answer_log"
input answer_log_insert_input {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type answer_log_max_fields {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "answer_log"
input answer_log_max_order_by {
    answer: order_by
    answer_log_id: order_by
    create_at: order_by
    create_by: order_by
    driver_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type answer_log_min_fields {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "answer_log"
input answer_log_min_order_by {
    answer: order_by
    answer_log_id: order_by
    create_at: order_by
    create_by: order_by
    driver_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "answer_log"
type answer_log_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [answer_log!]!
}

# input type for inserting object relation for remote table "answer_log"
input answer_log_obj_rel_insert_input {
    data: answer_log_insert_input!
    on_conflict: answer_log_on_conflict
}

# on conflict condition type for table "answer_log"
input answer_log_on_conflict {
    constraint: answer_log_constraint!
    update_columns: [answer_log_update_column!]!
    where: answer_log_bool_exp
}

# ordering options when selecting data from "answer_log"
input answer_log_order_by {
    answer: order_by
    answer_log_id: order_by
    create_at: order_by
    create_by: order_by
    driver_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "answer_log"
input answer_log_pk_columns_input {
    id: bigint!
}

# select columns of table "answer_log"
enum answer_log_select_column {
    # column name
    answer
    # column name
    answer_log_id
    # column name
    create_at
    # column name
    create_by
    # column name
    driver_id
    # column name
    id
    # column name
    material_id
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "answer_log"
input answer_log_set_input {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type answer_log_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "answer_log"
input answer_log_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type answer_log_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "answer_log"
input answer_log_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type answer_log_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "answer_log"
input answer_log_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type answer_log_sum_fields {
    id: bigint
}

# order by sum() on columns of table "answer_log"
input answer_log_sum_order_by {
    id: order_by
}

# update columns of table "answer_log"
enum answer_log_update_column {
    # column name
    answer
    # column name
    answer_log_id
    # column name
    create_at
    # column name
    create_by
    # column name
    driver_id
    # column name
    id
    # column name
    material_id
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type answer_log_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "answer_log"
input answer_log_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type answer_log_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "answer_log"
input answer_log_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type answer_log_variance_fields {
    id: Float
}

# order by variance() on columns of table "answer_log"
input answer_log_variance_order_by {
    id: order_by
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterpris_training.graphqls", Input: `# columns and relationships of "enterprise_training"
type enterprise_training {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    enterprise_training_id: String
    id: bigint!
    is_delete: Boolean
    is_received: Boolean
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "enterprise_training"
type enterprise_training_aggregate {
    aggregate: enterprise_training_aggregate_fields
    nodes: [enterprise_training!]!
}

# aggregate fields of "enterprise_training"
type enterprise_training_aggregate_fields {
    avg: enterprise_training_avg_fields
    count(columns: [enterprise_training_select_column!], distinct: Boolean): Int
    max: enterprise_training_max_fields
    min: enterprise_training_min_fields
    stddev: enterprise_training_stddev_fields
    stddev_pop: enterprise_training_stddev_pop_fields
    stddev_samp: enterprise_training_stddev_samp_fields
    sum: enterprise_training_sum_fields
    var_pop: enterprise_training_var_pop_fields
    var_samp: enterprise_training_var_samp_fields
    variance: enterprise_training_variance_fields
}

# order by aggregate values of table "enterprise_training"
input enterprise_training_aggregate_order_by {
    avg: enterprise_training_avg_order_by
    count: order_by
    max: enterprise_training_max_order_by
    min: enterprise_training_min_order_by
    stddev: enterprise_training_stddev_order_by
    stddev_pop: enterprise_training_stddev_pop_order_by
    stddev_samp: enterprise_training_stddev_samp_order_by
    sum: enterprise_training_sum_order_by
    var_pop: enterprise_training_var_pop_order_by
    var_samp: enterprise_training_var_samp_order_by
    variance: enterprise_training_variance_order_by
}

# input type for inserting array relation for remote table "enterprise_training"
input enterprise_training_arr_rel_insert_input {
    data: [enterprise_training_insert_input!]!
    on_conflict: enterprise_training_on_conflict
}

# aggregate avg on columns
type enterprise_training_avg_fields {
    id: Float
}

# order by avg() on columns of table "enterprise_training"
input enterprise_training_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "enterprise_training". All fields are combined with a logical 'AND'.
input enterprise_training_bool_exp {
    _and: [enterprise_training_bool_exp]
    _not: enterprise_training_bool_exp
    _or: [enterprise_training_bool_exp]
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    enterprise_id: String_comparison_exp
    enterprise_training_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    is_received: Boolean_comparison_exp
    material_id: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "enterprise_training"
enum enterprise_training_constraint {
    # unique or primary key constraint
    enterprise_training_pkey
}

# input type for incrementing integer column in table "enterprise_training"
input enterprise_training_inc_input {
    id: bigint
}

# input type for inserting data into table "enterprise_training"
input enterprise_training_insert_input {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    enterprise_training_id: String
    id: bigint
    is_delete: Boolean
    is_received: Boolean
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type enterprise_training_max_fields {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    enterprise_training_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "enterprise_training"
input enterprise_training_max_order_by {
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    enterprise_id: order_by
    enterprise_training_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type enterprise_training_min_fields {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    enterprise_training_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "enterprise_training"
input enterprise_training_min_order_by {
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    enterprise_id: order_by
    enterprise_training_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "enterprise_training"
type enterprise_training_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [enterprise_training!]!
}

# input type for inserting object relation for remote table "enterprise_training"
input enterprise_training_obj_rel_insert_input {
    data: enterprise_training_insert_input!
    on_conflict: enterprise_training_on_conflict
}

# on conflict condition type for table "enterprise_training"
input enterprise_training_on_conflict {
    constraint: enterprise_training_constraint!
    update_columns: [enterprise_training_update_column!]!
    where: enterprise_training_bool_exp
}

# ordering options when selecting data from "enterprise_training"
input enterprise_training_order_by {
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    enterprise_id: order_by
    enterprise_training_id: order_by
    id: order_by
    is_delete: order_by
    is_received: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "enterprise_training"
input enterprise_training_pk_columns_input {
    id: bigint!
}

# select columns of table "enterprise_training"
enum enterprise_training_select_column {
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    enterprise_id
    # column name
    enterprise_training_id
    # column name
    id
    # column name
    is_delete
    # column name
    is_received
    # column name
    material_id
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "enterprise_training"
input enterprise_training_set_input {
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    enterprise_training_id: String
    id: bigint
    is_delete: Boolean
    is_received: Boolean
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type enterprise_training_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "enterprise_training"
input enterprise_training_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type enterprise_training_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "enterprise_training"
input enterprise_training_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type enterprise_training_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "enterprise_training"
input enterprise_training_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type enterprise_training_sum_fields {
    id: bigint
}

# order by sum() on columns of table "enterprise_training"
input enterprise_training_sum_order_by {
    id: order_by
}

# update columns of table "enterprise_training"
enum enterprise_training_update_column {
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    enterprise_id
    # column name
    enterprise_training_id
    # column name
    id
    # column name
    is_delete
    # column name
    is_received
    # column name
    material_id
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type enterprise_training_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "enterprise_training"
input enterprise_training_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type enterprise_training_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "enterprise_training"
input enterprise_training_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type enterprise_training_variance_fields {
    id: Float
}

# order by variance() on columns of table "enterprise_training"
input enterprise_training_variance_order_by {
    id: order_by
}`, BuiltIn: false},
	{Name: "graph/graphqls/goverment_manager.graphqls", Input: `# columns and relationships of "government_manager"
type government_manager {
    all_driver_count: bigint
    area_id: String
    create_at: timestamptz
    create_by: String
    deadline: timestamptz
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    gov_id: String
    id: bigint!
    is_delete: Boolean
    is_received: Boolean
    manage_id: String
    material_id: String
    note: String
    start_time: timestamptz
    trained_drivers: bigint
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "government_manager"
type government_manager_aggregate {
    aggregate: government_manager_aggregate_fields
    nodes: [government_manager!]!
}

# aggregate fields of "government_manager"
type government_manager_aggregate_fields {
    avg: government_manager_avg_fields
    count(columns: [government_manager_select_column!], distinct: Boolean): Int
    max: government_manager_max_fields
    min: government_manager_min_fields
    stddev: government_manager_stddev_fields
    stddev_pop: government_manager_stddev_pop_fields
    stddev_samp: government_manager_stddev_samp_fields
    sum: government_manager_sum_fields
    var_pop: government_manager_var_pop_fields
    var_samp: government_manager_var_samp_fields
    variance: government_manager_variance_fields
}

# order by aggregate values of table "government_manager"
input government_manager_aggregate_order_by {
    avg: government_manager_avg_order_by
    count: order_by
    max: government_manager_max_order_by
    min: government_manager_min_order_by
    stddev: government_manager_stddev_order_by
    stddev_pop: government_manager_stddev_pop_order_by
    stddev_samp: government_manager_stddev_samp_order_by
    sum: government_manager_sum_order_by
    var_pop: government_manager_var_pop_order_by
    var_samp: government_manager_var_samp_order_by
    variance: government_manager_variance_order_by
}

# input type for inserting array relation for remote table "government_manager"
input government_manager_arr_rel_insert_input {
    data: [government_manager_insert_input!]!
    on_conflict: government_manager_on_conflict
}

# aggregate avg on columns
type government_manager_avg_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by avg() on columns of table "government_manager"
input government_manager_avg_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# Boolean expression to filter rows from the table "government_manager". All fields are combined with a logical 'AND'.
input government_manager_bool_exp {
    _and: [government_manager_bool_exp]
    _not: government_manager_bool_exp
    _or: [government_manager_bool_exp]
    all_driver_count: bigint_comparison_exp
    area_id: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    deadline: timestamptz_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    enterprise_id: String_comparison_exp
    gov_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    is_received: Boolean_comparison_exp
    manage_id: String_comparison_exp
    material_id: String_comparison_exp
    note: String_comparison_exp
    start_time: timestamptz_comparison_exp
    trained_drivers: bigint_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "government_manager"
enum government_manager_constraint {
    # unique or primary key constraint
    government_manager_pkey
}

# input type for incrementing integer column in table "government_manager"
input government_manager_inc_input {
    all_driver_count: bigint
    id: bigint
    trained_drivers: bigint
}

# input type for inserting data into table "government_manager"
input government_manager_insert_input {
    all_driver_count: bigint
    area_id: String
    create_at: timestamptz
    create_by: String
    deadline: timestamptz
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    gov_id: String
    id: bigint
    is_delete: Boolean
    is_received: Boolean
    manage_id: String
    material_id: String
    note: String
    start_time: timestamptz
    trained_drivers: bigint
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type government_manager_max_fields {
    all_driver_count: bigint
    area_id: String
    create_at: timestamptz
    create_by: String
    deadline: timestamptz
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    gov_id: String
    id: bigint
    manage_id: String
    material_id: String
    note: String
    start_time: timestamptz
    trained_drivers: bigint
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "government_manager"
input government_manager_max_order_by {
    all_driver_count: order_by
    area_id: order_by
    create_at: order_by
    create_by: order_by
    deadline: order_by
    delete_at: order_by
    delete_by: order_by
    enterprise_id: order_by
    gov_id: order_by
    id: order_by
    manage_id: order_by
    material_id: order_by
    note: order_by
    start_time: order_by
    trained_drivers: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type government_manager_min_fields {
    all_driver_count: bigint
    area_id: String
    create_at: timestamptz
    create_by: String
    deadline: timestamptz
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    gov_id: String
    id: bigint
    manage_id: String
    material_id: String
    note: String
    start_time: timestamptz
    trained_drivers: bigint
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "government_manager"
input government_manager_min_order_by {
    all_driver_count: order_by
    area_id: order_by
    create_at: order_by
    create_by: order_by
    deadline: order_by
    delete_at: order_by
    delete_by: order_by
    enterprise_id: order_by
    gov_id: order_by
    id: order_by
    manage_id: order_by
    material_id: order_by
    note: order_by
    start_time: order_by
    trained_drivers: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "government_manager"
type government_manager_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [government_manager!]!
}

# input type for inserting object relation for remote table "government_manager"
input government_manager_obj_rel_insert_input {
    data: government_manager_insert_input!
    on_conflict: government_manager_on_conflict
}

# on conflict condition type for table "government_manager"
input government_manager_on_conflict {
    constraint: government_manager_constraint!
    update_columns: [government_manager_update_column!]!
    where: government_manager_bool_exp
}

# ordering options when selecting data from "government_manager"
input government_manager_order_by {
    all_driver_count: order_by
    area_id: order_by
    create_at: order_by
    create_by: order_by
    deadline: order_by
    delete_at: order_by
    delete_by: order_by
    enterprise_id: order_by
    gov_id: order_by
    id: order_by
    is_delete: order_by
    is_received: order_by
    manage_id: order_by
    material_id: order_by
    note: order_by
    start_time: order_by
    trained_drivers: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "government_manager"
input government_manager_pk_columns_input {
    id: bigint!
}

# select columns of table "government_manager"
enum government_manager_select_column {
    # column name
    all_driver_count
    # column name
    area_id
    # column name
    create_at
    # column name
    create_by
    # column name
    deadline
    # column name
    delete_at
    # column name
    delete_by
    # column name
    enterprise_id
    # column name
    gov_id
    # column name
    id
    # column name
    is_delete
    # column name
    is_received
    # column name
    manage_id
    # column name
    material_id
    # column name
    note
    # column name
    start_time
    # column name
    trained_drivers
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "government_manager"
input government_manager_set_input {
    all_driver_count: bigint
    area_id: String
    create_at: timestamptz
    create_by: String
    deadline: timestamptz
    delete_at: timestamptz
    delete_by: String
    enterprise_id: String
    gov_id: String
    id: bigint
    is_delete: Boolean
    is_received: Boolean
    manage_id: String
    material_id: String
    note: String
    start_time: timestamptz
    trained_drivers: bigint
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type government_manager_stddev_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by stddev() on columns of table "government_manager"
input government_manager_stddev_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# aggregate stddev_pop on columns
type government_manager_stddev_pop_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by stddev_pop() on columns of table "government_manager"
input government_manager_stddev_pop_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# aggregate stddev_samp on columns
type government_manager_stddev_samp_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by stddev_samp() on columns of table "government_manager"
input government_manager_stddev_samp_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# aggregate sum on columns
type government_manager_sum_fields {
    all_driver_count: bigint
    id: bigint
    trained_drivers: bigint
}

# order by sum() on columns of table "government_manager"
input government_manager_sum_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# update columns of table "government_manager"
enum government_manager_update_column {
    # column name
    all_driver_count
    # column name
    area_id
    # column name
    create_at
    # column name
    create_by
    # column name
    deadline
    # column name
    delete_at
    # column name
    delete_by
    # column name
    enterprise_id
    # column name
    gov_id
    # column name
    id
    # column name
    is_delete
    # column name
    is_received
    # column name
    manage_id
    # column name
    material_id
    # column name
    note
    # column name
    start_time
    # column name
    trained_drivers
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type government_manager_var_pop_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by var_pop() on columns of table "government_manager"
input government_manager_var_pop_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# aggregate var_samp on columns
type government_manager_var_samp_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by var_samp() on columns of table "government_manager"
input government_manager_var_samp_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}

# aggregate variance on columns
type government_manager_variance_fields {
    all_driver_count: Float
    id: Float
    trained_drivers: Float
}

# order by variance() on columns of table "government_manager"
input government_manager_variance_order_by {
    all_driver_count: order_by
    id: order_by
    trained_drivers: order_by
}`, BuiltIn: false},
	{Name: "graph/graphqls/query.graphqls", Input: `schema {
    query: Query
}

type Query {
    # fetch data from the table: "answer_log"
    answer_log(
        # distinct select on columns
        distinct_on: [answer_log_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [answer_log_order_by!]
        # filter the rows returned
        where: answer_log_bool_exp
    ): [answer_log!]!
    # fetch aggregated fields from the table: "answer_log"
    answer_log_aggregate(
        # distinct select on columns
        distinct_on: [answer_log_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [answer_log_order_by!]
        # filter the rows returned
        where: answer_log_bool_exp
    ): answer_log_aggregate!
    # fetch data from the table: "answer_log" using primary key columns
    answer_log_by_pk(id: bigint!): answer_log
    # fetch data from the table: "driver_study_details"
    driver_study_details(
        # distinct select on columns
        distinct_on: [driver_study_details_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [driver_study_details_order_by!]
        # filter the rows returned
        where: driver_study_details_bool_exp
    ): [driver_study_details!]!
    # fetch aggregated fields from the table: "driver_study_details"
    driver_study_details_aggregate(
        # distinct select on columns
        distinct_on: [driver_study_details_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [driver_study_details_order_by!]
        # filter the rows returned
        where: driver_study_details_bool_exp
    ): driver_study_details_aggregate!
    # fetch data from the table: "driver_study_details" using primary key columns
    driver_study_details_by_pk(id: bigint!): driver_study_details
    # fetch data from the table: "enterprise_training"
    enterprise_training(
        # distinct select on columns
        distinct_on: [enterprise_training_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [enterprise_training_order_by!]
        # filter the rows returned
        where: enterprise_training_bool_exp
    ): [enterprise_training!]!
    # fetch aggregated fields from the table: "enterprise_training"
    enterprise_training_aggregate(
        # distinct select on columns
        distinct_on: [enterprise_training_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [enterprise_training_order_by!]
        # filter the rows returned
        where: enterprise_training_bool_exp
    ): enterprise_training_aggregate!
    # fetch data from the table: "enterprise_training" using primary key columns
    enterprise_training_by_pk(id: bigint!): enterprise_training
    # fetch data from the table: "government_manager"
    government_manager(
        # distinct select on columns
        distinct_on: [government_manager_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [government_manager_order_by!]
        # filter the rows returned
        where: government_manager_bool_exp
    ): [government_manager!]!
    # fetch aggregated fields from the table: "government_manager"
    government_manager_aggregate(
        # distinct select on columns
        distinct_on: [government_manager_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [government_manager_order_by!]
        # filter the rows returned
        where: government_manager_bool_exp
    ): government_manager_aggregate!
    # fetch data from the table: "government_manager" using primary key columns
    government_manager_by_pk(id: bigint!): government_manager

    # fetch data from the table: "score_log"
    score_log(
        # distinct select on columns
        distinct_on: [score_log_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [score_log_order_by!]
        # filter the rows returned
        where: score_log_bool_exp
    ): [score_log!]!
    # fetch aggregated fields from the table: "score_log"
    score_log_aggregate(
        # distinct select on columns
        distinct_on: [score_log_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [score_log_order_by!]
        # filter the rows returned
        where: score_log_bool_exp
    ): score_log_aggregate!
    # fetch data from the table: "score_log" using primary key columns
    score_log_by_pk(id: bigint!): score_log
    # fetch data from the table: "training_material"
    training_material(
        # distinct select on columns
        distinct_on: [training_material_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [training_material_order_by!]
        # filter the rows returned
        where: training_material_bool_exp
    ): [training_material!]!
    # fetch aggregated fields from the table: "training_material"
    training_material_aggregate(
        # distinct select on columns
        distinct_on: [training_material_select_column!]
        # limit the number of rows returned
        limit: Int
        # skip the first n rows. Use only with order_by
        offset: Int
        # sort the rows by one or more columns
        order_by: [training_material_order_by!]
        # filter the rows returned
        where: training_material_bool_exp
    ): training_material_aggregate!
    # fetch data from the table: "training_material" using primary key columns
    training_material_by_pk(id: bigint!): training_material
}`, BuiltIn: false},
	{Name: "graph/graphqls/score_log.graphqls", Input: `# columns and relationships of "score_log"
type score_log {
    create_at: timestamptz
    create_by: String
    id: bigint!
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "score_log"
type score_log_aggregate {
    aggregate: score_log_aggregate_fields
    nodes: [score_log!]!
}

# aggregate fields of "score_log"
type score_log_aggregate_fields {
    avg: score_log_avg_fields
    count(columns: [score_log_select_column!], distinct: Boolean): Int
    max: score_log_max_fields
    min: score_log_min_fields
    stddev: score_log_stddev_fields
    stddev_pop: score_log_stddev_pop_fields
    stddev_samp: score_log_stddev_samp_fields
    sum: score_log_sum_fields
    var_pop: score_log_var_pop_fields
    var_samp: score_log_var_samp_fields
    variance: score_log_variance_fields
}

# order by aggregate values of table "score_log"
input score_log_aggregate_order_by {
    avg: score_log_avg_order_by
    count: order_by
    max: score_log_max_order_by
    min: score_log_min_order_by
    stddev: score_log_stddev_order_by
    stddev_pop: score_log_stddev_pop_order_by
    stddev_samp: score_log_stddev_samp_order_by
    sum: score_log_sum_order_by
    var_pop: score_log_var_pop_order_by
    var_samp: score_log_var_samp_order_by
    variance: score_log_variance_order_by
}

# input type for inserting array relation for remote table "score_log"
input score_log_arr_rel_insert_input {
    data: [score_log_insert_input!]!
    on_conflict: score_log_on_conflict
}

# aggregate avg on columns
type score_log_avg_fields {
    id: Float
    training_score: Float
}

# order by avg() on columns of table "score_log"
input score_log_avg_order_by {
    id: order_by
    training_score: order_by
}

# Boolean expression to filter rows from the table "score_log". All fields are combined with a logical 'AND'.
input score_log_bool_exp {
    _and: [score_log_bool_exp]
    _not: score_log_bool_exp
    _or: [score_log_bool_exp]
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    id: bigint_comparison_exp
    id_number: String_comparison_exp
    name: String_comparison_exp
    score_log_id: String_comparison_exp
    training_programs: String_comparison_exp
    training_score: bigint_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "score_log"
enum score_log_constraint {
    # unique or primary key constraint
    score_log_pkey
}

# input type for incrementing integer column in table "score_log"
input score_log_inc_input {
    id: bigint
    training_score: bigint
}

# input type for inserting data into table "score_log"
input score_log_insert_input {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type score_log_max_fields {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "score_log"
input score_log_max_order_by {
    create_at: order_by
    create_by: order_by
    id: order_by
    id_number: order_by
    name: order_by
    score_log_id: order_by
    training_programs: order_by
    training_score: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type score_log_min_fields {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "score_log"
input score_log_min_order_by {
    create_at: order_by
    create_by: order_by
    id: order_by
    id_number: order_by
    name: order_by
    score_log_id: order_by
    training_programs: order_by
    training_score: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "score_log"
type score_log_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [score_log!]!
}

# input type for inserting object relation for remote table "score_log"
input score_log_obj_rel_insert_input {
    data: score_log_insert_input!
    on_conflict: score_log_on_conflict
}

# on conflict condition type for table "score_log"
input score_log_on_conflict {
    constraint: score_log_constraint!
    update_columns: [score_log_update_column!]!
    where: score_log_bool_exp
}

# ordering options when selecting data from "score_log"
input score_log_order_by {
    create_at: order_by
    create_by: order_by
    id: order_by
    id_number: order_by
    name: order_by
    score_log_id: order_by
    training_programs: order_by
    training_score: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "score_log"
input score_log_pk_columns_input {
    id: bigint!
}

# select columns of table "score_log"
enum score_log_select_column {
    # column name
    create_at
    # column name
    create_by
    # column name
    id
    # column name
    id_number
    # column name
    name
    # column name
    score_log_id
    # column name
    training_programs
    # column name
    training_score
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "score_log"
input score_log_set_input {
    create_at: timestamptz
    create_by: String
    id: bigint
    id_number: String
    name: String
    score_log_id: String
    training_programs: String
    training_score: bigint
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type score_log_stddev_fields {
    id: Float
    training_score: Float
}

# order by stddev() on columns of table "score_log"
input score_log_stddev_order_by {
    id: order_by
    training_score: order_by
}

# aggregate stddev_pop on columns
type score_log_stddev_pop_fields {
    id: Float
    training_score: Float
}

# order by stddev_pop() on columns of table "score_log"
input score_log_stddev_pop_order_by {
    id: order_by
    training_score: order_by
}

# aggregate stddev_samp on columns
type score_log_stddev_samp_fields {
    id: Float
    training_score: Float
}

# order by stddev_samp() on columns of table "score_log"
input score_log_stddev_samp_order_by {
    id: order_by
    training_score: order_by
}

# aggregate sum on columns
type score_log_sum_fields {
    id: bigint
    training_score: bigint
}

# order by sum() on columns of table "score_log"
input score_log_sum_order_by {
    id: order_by
    training_score: order_by
}

# update columns of table "score_log"
enum score_log_update_column {
    # column name
    create_at
    # column name
    create_by
    # column name
    id
    # column name
    id_number
    # column name
    name
    # column name
    score_log_id
    # column name
    training_programs
    # column name
    training_score
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type score_log_var_pop_fields {
    id: Float
    training_score: Float
}

# order by var_pop() on columns of table "score_log"
input score_log_var_pop_order_by {
    id: order_by
    training_score: order_by
}

# aggregate var_samp on columns
type score_log_var_samp_fields {
    id: Float
    training_score: Float
}

# order by var_samp() on columns of table "score_log"
input score_log_var_samp_order_by {
    id: order_by
    training_score: order_by
}

# aggregate variance on columns
type score_log_variance_fields {
    id: Float
    training_score: Float
}

# order by variance() on columns of table "score_log"
input score_log_variance_order_by {
    id: order_by
    training_score: order_by
}`, BuiltIn: false},
	{Name: "graph/graphqls/training_material.graphqls", Input: `# columns and relationships of "training_material"
type training_material {
    contents: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint!
    is_delete: Boolean
    material_address: String
    material_id: String
    title: String
    type: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "training_material"
type training_material_aggregate {
    aggregate: training_material_aggregate_fields
    nodes: [training_material!]!
}

# aggregate fields of "training_material"
type training_material_aggregate_fields {
    avg: training_material_avg_fields
    count(columns: [training_material_select_column!], distinct: Boolean): Int
    max: training_material_max_fields
    min: training_material_min_fields
    stddev: training_material_stddev_fields
    stddev_pop: training_material_stddev_pop_fields
    stddev_samp: training_material_stddev_samp_fields
    sum: training_material_sum_fields
    var_pop: training_material_var_pop_fields
    var_samp: training_material_var_samp_fields
    variance: training_material_variance_fields
}

# order by aggregate values of table "training_material"
input training_material_aggregate_order_by {
    avg: training_material_avg_order_by
    count: order_by
    max: training_material_max_order_by
    min: training_material_min_order_by
    stddev: training_material_stddev_order_by
    stddev_pop: training_material_stddev_pop_order_by
    stddev_samp: training_material_stddev_samp_order_by
    sum: training_material_sum_order_by
    var_pop: training_material_var_pop_order_by
    var_samp: training_material_var_samp_order_by
    variance: training_material_variance_order_by
}

# input type for inserting array relation for remote table "training_material"
input training_material_arr_rel_insert_input {
    data: [training_material_insert_input!]!
    on_conflict: training_material_on_conflict
}

# aggregate avg on columns
type training_material_avg_fields {
    id: Float
}

# order by avg() on columns of table "training_material"
input training_material_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "training_material". All fields are combined with a logical 'AND'.
input training_material_bool_exp {
    _and: [training_material_bool_exp]
    _not: training_material_bool_exp
    _or: [training_material_bool_exp]
    contents: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    material_address: String_comparison_exp
    material_id: String_comparison_exp
    title: String_comparison_exp
    type: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "training_material"
enum training_material_constraint {
    # unique or primary key constraint
    training_material_pkey
}

# input type for incrementing integer column in table "training_material"
input training_material_inc_input {
    id: bigint
}

# input type for inserting data into table "training_material"
input training_material_insert_input {
    contents: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    is_delete: Boolean
    material_address: String
    material_id: String
    title: String
    type: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type training_material_max_fields {
    contents: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    material_address: String
    material_id: String
    title: String
    type: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "training_material"
input training_material_max_order_by {
    contents: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    material_address: order_by
    material_id: order_by
    title: order_by
    type: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type training_material_min_fields {
    contents: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    material_address: String
    material_id: String
    title: String
    type: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "training_material"
input training_material_min_order_by {
    contents: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    material_address: order_by
    material_id: order_by
    title: order_by
    type: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "training_material"
type training_material_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [training_material!]!
}

# input type for inserting object relation for remote table "training_material"
input training_material_obj_rel_insert_input {
    data: training_material_insert_input!
    on_conflict: training_material_on_conflict
}

# on conflict condition type for table "training_material"
input training_material_on_conflict {
    constraint: training_material_constraint!
    update_columns: [training_material_update_column!]!
    where: training_material_bool_exp
}

# ordering options when selecting data from "training_material"
input training_material_order_by {
    contents: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    is_delete: order_by
    material_address: order_by
    material_id: order_by
    title: order_by
    type: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "training_material"
input training_material_pk_columns_input {
    id: bigint!
}

# select columns of table "training_material"
enum training_material_select_column {
    # column name
    contents
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    id
    # column name
    is_delete
    # column name
    material_address
    # column name
    material_id
    # column name
    title
    # column name
    type
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "training_material"
input training_material_set_input {
    contents: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    is_delete: Boolean
    material_address: String
    material_id: String
    title: String
    type: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type training_material_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "training_material"
input training_material_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type training_material_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "training_material"
input training_material_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type training_material_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "training_material"
input training_material_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type training_material_sum_fields {
    id: bigint
}

# order by sum() on columns of table "training_material"
input training_material_sum_order_by {
    id: order_by
}

# update columns of table "training_material"
enum training_material_update_column {
    # column name
    contents
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    id
    # column name
    is_delete
    # column name
    material_address
    # column name
    material_id
    # column name
    title
    # column name
    type
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type training_material_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "training_material"
input training_material_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type training_material_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "training_material"
input training_material_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type training_material_variance_fields {
    id: Float
}

# order by variance() on columns of table "training_material"
input training_material_variance_order_by {
    id: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_answer_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AnswerLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOanswer_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AnswerLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOanswer_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AnswerLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOanswer_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_answer_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AnswerLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOanswer_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AnswerLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOanswer_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AnswerLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOanswer_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_answer_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_study_details_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverStudyDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_study_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverStudyDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_study_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverStudyDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_study_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_study_details_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverStudyDetailsSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriver_study_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverStudyDetailsOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriver_study_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverStudyDetailsBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriver_study_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_study_details_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_training_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseTrainingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_training_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseTrainingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_training_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseTrainingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_training_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_training_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseTrainingSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_training_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseTrainingOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_training_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseTrainingBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_training_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_training_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_government_manager_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.GovernmentManagerSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOgovernment_manager_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.GovernmentManagerOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOgovernment_manager_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.GovernmentManagerBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOgovernment_manager_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_government_manager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.GovernmentManagerSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOgovernment_manager_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.GovernmentManagerOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOgovernment_manager_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.GovernmentManagerBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOgovernment_manager_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_government_manager_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_score_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ScoreLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOscore_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ScoreLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOscore_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ScoreLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOscore_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_score_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ScoreLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOscore_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ScoreLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOscore_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ScoreLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOscore_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_score_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_training_material_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.TrainingMaterialSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOtraining_material_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.TrainingMaterialOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOtraining_material_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.TrainingMaterialBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOtraining_material_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_training_material_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.TrainingMaterialSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOtraining_material_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.TrainingMaterialOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOtraining_material_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.TrainingMaterialBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOtraining_material_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_training_material_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_answer_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AnswerLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOanswer_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_driver_study_details_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverStudyDetailsSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdriver_study_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_enterprise_training_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseTrainingSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOenterprise_training_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_government_manager_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.GovernmentManagerSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOgovernment_manager_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_score_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ScoreLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOscore_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_training_material_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.TrainingMaterialSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOtraining_material_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_answer_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_answer_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AnswerLog(rctx, args["distinct_on"].([]model.AnswerLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AnswerLogOrderBy), args["where"].(*model.AnswerLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AnswerLog)
	fc.Result = res
	return ec.marshalNanswer_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_answer_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_answer_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AnswerLogAggregate(rctx, args["distinct_on"].([]model.AnswerLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AnswerLogOrderBy), args["where"].(*model.AnswerLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogAggregate)
	fc.Result = res
	return ec.marshalNanswer_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_answer_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_answer_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AnswerLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLog)
	fc.Result = res
	return ec.marshalOanswer_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_study_details(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_study_details_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverStudyDetails(rctx, args["distinct_on"].([]model.DriverStudyDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverStudyDetailsOrderBy), args["where"].(*model.DriverStudyDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverStudyDetails)
	fc.Result = res
	return ec.marshalNdriver_study_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_study_details_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_study_details_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverStudyDetailsAggregate(rctx, args["distinct_on"].([]model.DriverStudyDetailsSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverStudyDetailsOrderBy), args["where"].(*model.DriverStudyDetailsBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsAggregate)
	fc.Result = res
	return ec.marshalNdriver_study_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_study_details_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_study_details_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverStudyDetailsByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetails)
	fc.Result = res
	return ec.marshalOdriver_study_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_training(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_training_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseTraining(rctx, args["distinct_on"].([]model.EnterpriseTrainingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseTrainingOrderBy), args["where"].(*model.EnterpriseTrainingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseTraining)
	fc.Result = res
	return ec.marshalNenterprise_training2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_training_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_training_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseTrainingAggregate(rctx, args["distinct_on"].([]model.EnterpriseTrainingSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseTrainingOrderBy), args["where"].(*model.EnterpriseTrainingBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingAggregate)
	fc.Result = res
	return ec.marshalNenterprise_training_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_training_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_training_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseTrainingByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTraining)
	fc.Result = res
	return ec.marshalOenterprise_training2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTraining(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_government_manager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_government_manager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GovernmentManager(rctx, args["distinct_on"].([]model.GovernmentManagerSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.GovernmentManagerOrderBy), args["where"].(*model.GovernmentManagerBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GovernmentManager)
	fc.Result = res
	return ec.marshalNgovernment_manager2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_government_manager_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_government_manager_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GovernmentManagerAggregate(rctx, args["distinct_on"].([]model.GovernmentManagerSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.GovernmentManagerOrderBy), args["where"].(*model.GovernmentManagerBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerAggregate)
	fc.Result = res
	return ec.marshalNgovernment_manager_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_government_manager_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_government_manager_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GovernmentManagerByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManager)
	fc.Result = res
	return ec.marshalOgovernment_manager2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManager(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_score_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_score_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScoreLog(rctx, args["distinct_on"].([]model.ScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ScoreLogOrderBy), args["where"].(*model.ScoreLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ScoreLog)
	fc.Result = res
	return ec.marshalNscore_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_score_log_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_score_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScoreLogAggregate(rctx, args["distinct_on"].([]model.ScoreLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ScoreLogOrderBy), args["where"].(*model.ScoreLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogAggregate)
	fc.Result = res
	return ec.marshalNscore_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_score_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_score_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScoreLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLog)
	fc.Result = res
	return ec.marshalOscore_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_training_material(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_training_material_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingMaterial(rctx, args["distinct_on"].([]model.TrainingMaterialSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.TrainingMaterialOrderBy), args["where"].(*model.TrainingMaterialBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TrainingMaterial)
	fc.Result = res
	return ec.marshalNtraining_material2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_training_material_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_training_material_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingMaterialAggregate(rctx, args["distinct_on"].([]model.TrainingMaterialSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.TrainingMaterialOrderBy), args["where"].(*model.TrainingMaterialBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialAggregate)
	fc.Result = res
	return ec.marshalNtraining_material_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_training_material_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_training_material_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrainingMaterialByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterial)
	fc.Result = res
	return ec.marshalOtraining_material2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_answer(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_answer_log_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_create_at(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_create_by(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_material_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_update_at(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_update_by(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogAggregateFields)
	fc.Result = res
	return ec.marshalOanswer_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AnswerLog)
	fc.Result = res
	return ec.marshalNanswer_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogAvgFields)
	fc.Result = res
	return ec.marshalOanswer_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_answer_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogMaxFields)
	fc.Result = res
	return ec.marshalOanswer_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogMinFields)
	fc.Result = res
	return ec.marshalOanswer_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogStddevFields)
	fc.Result = res
	return ec.marshalOanswer_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogStddevPopFields)
	fc.Result = res
	return ec.marshalOanswer_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogStddevSampFields)
	fc.Result = res
	return ec.marshalOanswer_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogSumFields)
	fc.Result = res
	return ec.marshalOanswer_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogVarPopFields)
	fc.Result = res
	return ec.marshalOanswer_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogVarSampFields)
	fc.Result = res
	return ec.marshalOanswer_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AnswerLogVarianceFields)
	fc.Result = res
	return ec.marshalOanswer_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_answer(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_answer_log_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_answer(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_answer_log_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AnswerLog)
	fc.Result = res
	return ec.marshalNanswer_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _answer_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "answer_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_create_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_driver_training_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverTrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_is_training_completed(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTrainingCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsAggregateFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverStudyDetails)
	fc.Result = res
	return ec.marshalNdriver_study_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsAvgFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_driver_study_details_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsMaxFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsMinFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsStddevFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsStddevPopFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsStddevSampFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsSumFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsVarPopFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsVarSampFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStudyDetailsVarianceFields)
	fc.Result = res
	return ec.marshalOdriver_study_details_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_avg_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_avg_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_avg_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_create_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_driver_training_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverTrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_max_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_create_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_driver_training_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverTrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_min_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverStudyDetails)
	fc.Result = res
	return ec.marshalNdriver_study_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_pop_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_pop_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_pop_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_samp_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_samp_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_stddev_samp_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_sum_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_sum_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_sum_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_pop_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_pop_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_pop_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_samp_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_samp_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_var_samp_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_variance_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_variance_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driver_study_details_variance_fields_training_time(ctx context.Context, field graphql.CollectedField, obj *model.DriverStudyDetailsVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driver_study_details_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_enterprise_training_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseTrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_is_received(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReceived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_material_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTraining) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingAggregateFields)
	fc.Result = res
	return ec.marshalOenterprise_training_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseTraining)
	fc.Result = res
	return ec.marshalNenterprise_training2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingAvgFields)
	fc.Result = res
	return ec.marshalOenterprise_training_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_enterprise_training_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingMaxFields)
	fc.Result = res
	return ec.marshalOenterprise_training_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingMinFields)
	fc.Result = res
	return ec.marshalOenterprise_training_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingStddevFields)
	fc.Result = res
	return ec.marshalOenterprise_training_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingStddevPopFields)
	fc.Result = res
	return ec.marshalOenterprise_training_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingStddevSampFields)
	fc.Result = res
	return ec.marshalOenterprise_training_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingSumFields)
	fc.Result = res
	return ec.marshalOenterprise_training_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingVarPopFields)
	fc.Result = res
	return ec.marshalOenterprise_training_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingVarSampFields)
	fc.Result = res
	return ec.marshalOenterprise_training_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseTrainingVarianceFields)
	fc.Result = res
	return ec.marshalOenterprise_training_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_enterprise_training_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseTrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_enterprise_training_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseTrainingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseTraining)
	fc.Result = res
	return ec.marshalNenterprise_training2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_training_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseTrainingVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_training_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_area_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_create_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_create_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_deadline(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_gov_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GovID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_is_received(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReceived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_manage_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_material_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_note(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_start_time(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_update_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_update_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManager) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerAggregateFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GovernmentManager)
	fc.Result = res
	return ec.marshalNgovernment_manager2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerAvgFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_government_manager_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerMaxFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerMinFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerStddevFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerStddevPopFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerStddevSampFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerSumFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerVarPopFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerVarSampFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GovernmentManagerVarianceFields)
	fc.Result = res
	return ec.marshalOgovernment_manager_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_avg_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_avg_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_deadline(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_gov_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GovID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_manage_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_note(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_deadline(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deadline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_gov_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GovID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_manage_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_note(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GovernmentManager)
	fc.Result = res
	return ec.marshalNgovernment_manager2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_pop_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_pop_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_samp_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_stddev_samp_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_sum_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_sum_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_var_pop_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_var_pop_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_var_samp_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_var_samp_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_variance_fields_all_driver_count(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllDriverCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _government_manager_variance_fields_trained_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GovernmentManagerVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "government_manager_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainedDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_id_number(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_name(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_score_log_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_training_programs(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingPrograms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogAggregateFields)
	fc.Result = res
	return ec.marshalOscore_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ScoreLog)
	fc.Result = res
	return ec.marshalNscore_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogAvgFields)
	fc.Result = res
	return ec.marshalOscore_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_score_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogMaxFields)
	fc.Result = res
	return ec.marshalOscore_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogMinFields)
	fc.Result = res
	return ec.marshalOscore_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogStddevFields)
	fc.Result = res
	return ec.marshalOscore_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogStddevPopFields)
	fc.Result = res
	return ec.marshalOscore_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogStddevSampFields)
	fc.Result = res
	return ec.marshalOscore_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogSumFields)
	fc.Result = res
	return ec.marshalOscore_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogVarPopFields)
	fc.Result = res
	return ec.marshalOscore_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogVarSampFields)
	fc.Result = res
	return ec.marshalOscore_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ScoreLogVarianceFields)
	fc.Result = res
	return ec.marshalOscore_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_avg_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_name(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_score_log_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_training_programs(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingPrograms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_name(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_score_log_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_training_programs(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingPrograms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ScoreLog)
	fc.Result = res
	return ec.marshalNscore_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_stddev_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_stddev_pop_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_stddev_samp_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_sum_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_var_pop_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_var_samp_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _score_log_variance_fields_training_score(ctx context.Context, field graphql.CollectedField, obj *model.ScoreLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "score_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrainingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_contents(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_create_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_create_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_material_address(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_material_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_title(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_type(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_update_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_update_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialAggregateFields)
	fc.Result = res
	return ec.marshalOtraining_material_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TrainingMaterial)
	fc.Result = res
	return ec.marshalNtraining_material2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialAvgFields)
	fc.Result = res
	return ec.marshalOtraining_material_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_training_material_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialMaxFields)
	fc.Result = res
	return ec.marshalOtraining_material_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialMinFields)
	fc.Result = res
	return ec.marshalOtraining_material_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialStddevFields)
	fc.Result = res
	return ec.marshalOtraining_material_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialStddevPopFields)
	fc.Result = res
	return ec.marshalOtraining_material_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialStddevSampFields)
	fc.Result = res
	return ec.marshalOtraining_material_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialSumFields)
	fc.Result = res
	return ec.marshalOtraining_material_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialVarPopFields)
	fc.Result = res
	return ec.marshalOtraining_material_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialVarSampFields)
	fc.Result = res
	return ec.marshalOtraining_material_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrainingMaterialVarianceFields)
	fc.Result = res
	return ec.marshalOtraining_material_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_contents(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_material_address(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_title(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_type(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_contents(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_material_address(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_material_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaterialID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_title(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_type(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TrainingMaterial)
	fc.Result = res
	return ec.marshalNtraining_material2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _training_material_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.TrainingMaterialVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "training_material_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.AnswerLogAggregateOrderBy, error) {
	var it model.AnswerLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOanswer_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOanswer_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOanswer_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOanswer_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOanswer_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOanswer_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOanswer_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOanswer_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOanswer_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOanswer_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.AnswerLogArrRelInsertInput, error) {
	var it model.AnswerLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNanswer_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOanswer_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_avg_order_by(ctx context.Context, obj interface{}) (model.AnswerLogAvgOrderBy, error) {
	var it model.AnswerLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_bool_exp(ctx context.Context, obj interface{}) (model.AnswerLogBoolExp, error) {
	var it model.AnswerLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOanswer_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOanswer_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOanswer_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer_log_id"))
			it.AnswerLogID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_inc_input(ctx context.Context, obj interface{}) (model.AnswerLogIncInput, error) {
	var it model.AnswerLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_insert_input(ctx context.Context, obj interface{}) (model.AnswerLogInsertInput, error) {
	var it model.AnswerLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer_log_id"))
			it.AnswerLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_max_order_by(ctx context.Context, obj interface{}) (model.AnswerLogMaxOrderBy, error) {
	var it model.AnswerLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer_log_id"))
			it.AnswerLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_min_order_by(ctx context.Context, obj interface{}) (model.AnswerLogMinOrderBy, error) {
	var it model.AnswerLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer_log_id"))
			it.AnswerLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.AnswerLogObjRelInsertInput, error) {
	var it model.AnswerLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNanswer_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOanswer_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_on_conflict(ctx context.Context, obj interface{}) (model.AnswerLogOnConflict, error) {
	var it model.AnswerLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNanswer_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNanswer_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOanswer_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_order_by(ctx context.Context, obj interface{}) (model.AnswerLogOrderBy, error) {
	var it model.AnswerLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer_log_id"))
			it.AnswerLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_pk_columns_input(ctx context.Context, obj interface{}) (model.AnswerLogPkColumnsInput, error) {
	var it model.AnswerLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_set_input(ctx context.Context, obj interface{}) (model.AnswerLogSetInput, error) {
	var it model.AnswerLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer_log_id"))
			it.AnswerLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_stddev_order_by(ctx context.Context, obj interface{}) (model.AnswerLogStddevOrderBy, error) {
	var it model.AnswerLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.AnswerLogStddevPopOrderBy, error) {
	var it model.AnswerLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.AnswerLogStddevSampOrderBy, error) {
	var it model.AnswerLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_sum_order_by(ctx context.Context, obj interface{}) (model.AnswerLogSumOrderBy, error) {
	var it model.AnswerLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.AnswerLogVarPopOrderBy, error) {
	var it model.AnswerLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.AnswerLogVarSampOrderBy, error) {
	var it model.AnswerLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputanswer_log_variance_order_by(ctx context.Context, obj interface{}) (model.AnswerLogVarianceOrderBy, error) {
	var it model.AnswerLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_aggregate_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsAggregateOrderBy, error) {
	var it model.DriverStudyDetailsAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdriver_study_details_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdriver_study_details_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdriver_study_details_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdriver_study_details_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdriver_study_details_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdriver_study_details_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdriver_study_details_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdriver_study_details_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdriver_study_details_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdriver_study_details_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverStudyDetailsArrRelInsertInput, error) {
	var it model.DriverStudyDetailsArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_study_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_study_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_avg_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsAvgOrderBy, error) {
	var it model.DriverStudyDetailsAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_bool_exp(ctx context.Context, obj interface{}) (model.DriverStudyDetailsBoolExp, error) {
	var it model.DriverStudyDetailsBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdriver_study_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdriver_study_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdriver_study_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_time"))
			it.CreateTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_training_id"))
			it.DriverTrainingID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_training_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_training_completed"))
			it.IsTrainingCompleted, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_inc_input(ctx context.Context, obj interface{}) (model.DriverStudyDetailsIncInput, error) {
	var it model.DriverStudyDetailsIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_insert_input(ctx context.Context, obj interface{}) (model.DriverStudyDetailsInsertInput, error) {
	var it model.DriverStudyDetailsInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_time"))
			it.CreateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_training_id"))
			it.DriverTrainingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_training_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_training_completed"))
			it.IsTrainingCompleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_max_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsMaxOrderBy, error) {
	var it model.DriverStudyDetailsMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_time"))
			it.CreateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_training_id"))
			it.DriverTrainingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_min_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsMinOrderBy, error) {
	var it model.DriverStudyDetailsMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_time"))
			it.CreateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_training_id"))
			it.DriverTrainingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DriverStudyDetailsObjRelInsertInput, error) {
	var it model.DriverStudyDetailsObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriver_study_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriver_study_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_on_conflict(ctx context.Context, obj interface{}) (model.DriverStudyDetailsOnConflict, error) {
	var it model.DriverStudyDetailsOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdriver_study_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdriver_study_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdriver_study_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsOrderBy, error) {
	var it model.DriverStudyDetailsOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_time"))
			it.CreateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_training_id"))
			it.DriverTrainingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_training_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_training_completed"))
			it.IsTrainingCompleted, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_pk_columns_input(ctx context.Context, obj interface{}) (model.DriverStudyDetailsPkColumnsInput, error) {
	var it model.DriverStudyDetailsPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_set_input(ctx context.Context, obj interface{}) (model.DriverStudyDetailsSetInput, error) {
	var it model.DriverStudyDetailsSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_time"))
			it.CreateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_training_id"))
			it.DriverTrainingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_training_completed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_training_completed"))
			it.IsTrainingCompleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_stddev_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsStddevOrderBy, error) {
	var it model.DriverStudyDetailsStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsStddevPopOrderBy, error) {
	var it model.DriverStudyDetailsStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsStddevSampOrderBy, error) {
	var it model.DriverStudyDetailsStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_sum_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsSumOrderBy, error) {
	var it model.DriverStudyDetailsSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_var_pop_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsVarPopOrderBy, error) {
	var it model.DriverStudyDetailsVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_var_samp_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsVarSampOrderBy, error) {
	var it model.DriverStudyDetailsVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriver_study_details_variance_order_by(ctx context.Context, obj interface{}) (model.DriverStudyDetailsVarianceOrderBy, error) {
	var it model.DriverStudyDetailsVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_time"))
			it.TrainingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_aggregate_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingAggregateOrderBy, error) {
	var it model.EnterpriseTrainingAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOenterprise_training_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOenterprise_training_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOenterprise_training_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOenterprise_training_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOenterprise_training_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOenterprise_training_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOenterprise_training_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOenterprise_training_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOenterprise_training_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOenterprise_training_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseTrainingArrRelInsertInput, error) {
	var it model.EnterpriseTrainingArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_training_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_training_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_avg_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingAvgOrderBy, error) {
	var it model.EnterpriseTrainingAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_bool_exp(ctx context.Context, obj interface{}) (model.EnterpriseTrainingBoolExp, error) {
	var it model.EnterpriseTrainingBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOenterprise_training_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOenterprise_training_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOenterprise_training_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_training_id"))
			it.EnterpriseTrainingID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_inc_input(ctx context.Context, obj interface{}) (model.EnterpriseTrainingIncInput, error) {
	var it model.EnterpriseTrainingIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseTrainingInsertInput, error) {
	var it model.EnterpriseTrainingInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_training_id"))
			it.EnterpriseTrainingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_max_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingMaxOrderBy, error) {
	var it model.EnterpriseTrainingMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_training_id"))
			it.EnterpriseTrainingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_min_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingMinOrderBy, error) {
	var it model.EnterpriseTrainingMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_training_id"))
			it.EnterpriseTrainingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseTrainingObjRelInsertInput, error) {
	var it model.EnterpriseTrainingObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_training_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_training_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_on_conflict(ctx context.Context, obj interface{}) (model.EnterpriseTrainingOnConflict, error) {
	var it model.EnterpriseTrainingOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNenterprise_training_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNenterprise_training_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOenterprise_training_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingOrderBy, error) {
	var it model.EnterpriseTrainingOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_training_id"))
			it.EnterpriseTrainingID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_pk_columns_input(ctx context.Context, obj interface{}) (model.EnterpriseTrainingPkColumnsInput, error) {
	var it model.EnterpriseTrainingPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_set_input(ctx context.Context, obj interface{}) (model.EnterpriseTrainingSetInput, error) {
	var it model.EnterpriseTrainingSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_training_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_training_id"))
			it.EnterpriseTrainingID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_stddev_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingStddevOrderBy, error) {
	var it model.EnterpriseTrainingStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingStddevPopOrderBy, error) {
	var it model.EnterpriseTrainingStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingStddevSampOrderBy, error) {
	var it model.EnterpriseTrainingStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_sum_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingSumOrderBy, error) {
	var it model.EnterpriseTrainingSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_var_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingVarPopOrderBy, error) {
	var it model.EnterpriseTrainingVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_var_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingVarSampOrderBy, error) {
	var it model.EnterpriseTrainingVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_training_variance_order_by(ctx context.Context, obj interface{}) (model.EnterpriseTrainingVarianceOrderBy, error) {
	var it model.EnterpriseTrainingVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_aggregate_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerAggregateOrderBy, error) {
	var it model.GovernmentManagerAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOgovernment_manager_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOgovernment_manager_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOgovernment_manager_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOgovernment_manager_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOgovernment_manager_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOgovernment_manager_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOgovernment_manager_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOgovernment_manager_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOgovernment_manager_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOgovernment_manager_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.GovernmentManagerArrRelInsertInput, error) {
	var it model.GovernmentManagerArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNgovernment_manager_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOgovernment_manager_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_avg_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerAvgOrderBy, error) {
	var it model.GovernmentManagerAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_bool_exp(ctx context.Context, obj interface{}) (model.GovernmentManagerBoolExp, error) {
	var it model.GovernmentManagerBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOgovernment_manager_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOgovernment_manager_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOgovernment_manager_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deadline"))
			it.Deadline, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gov_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gov_id"))
			it.GovID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "manage_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manage_id"))
			it.ManageID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_inc_input(ctx context.Context, obj interface{}) (model.GovernmentManagerIncInput, error) {
	var it model.GovernmentManagerIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_insert_input(ctx context.Context, obj interface{}) (model.GovernmentManagerInsertInput, error) {
	var it model.GovernmentManagerInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deadline"))
			it.Deadline, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gov_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gov_id"))
			it.GovID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "manage_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manage_id"))
			it.ManageID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_max_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerMaxOrderBy, error) {
	var it model.GovernmentManagerMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deadline"))
			it.Deadline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gov_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gov_id"))
			it.GovID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "manage_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manage_id"))
			it.ManageID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_min_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerMinOrderBy, error) {
	var it model.GovernmentManagerMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deadline"))
			it.Deadline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gov_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gov_id"))
			it.GovID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "manage_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manage_id"))
			it.ManageID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.GovernmentManagerObjRelInsertInput, error) {
	var it model.GovernmentManagerObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNgovernment_manager_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOgovernment_manager_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_on_conflict(ctx context.Context, obj interface{}) (model.GovernmentManagerOnConflict, error) {
	var it model.GovernmentManagerOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNgovernment_manager_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNgovernment_manager_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOgovernment_manager_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerOrderBy, error) {
	var it model.GovernmentManagerOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deadline"))
			it.Deadline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gov_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gov_id"))
			it.GovID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "manage_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manage_id"))
			it.ManageID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_pk_columns_input(ctx context.Context, obj interface{}) (model.GovernmentManagerPkColumnsInput, error) {
	var it model.GovernmentManagerPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_set_input(ctx context.Context, obj interface{}) (model.GovernmentManagerSetInput, error) {
	var it model.GovernmentManagerSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deadline":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deadline"))
			it.Deadline, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gov_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gov_id"))
			it.GovID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_received":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_received"))
			it.IsReceived, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "manage_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manage_id"))
			it.ManageID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_stddev_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerStddevOrderBy, error) {
	var it model.GovernmentManagerStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerStddevPopOrderBy, error) {
	var it model.GovernmentManagerStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerStddevSampOrderBy, error) {
	var it model.GovernmentManagerStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_sum_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerSumOrderBy, error) {
	var it model.GovernmentManagerSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_var_pop_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerVarPopOrderBy, error) {
	var it model.GovernmentManagerVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_var_samp_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerVarSampOrderBy, error) {
	var it model.GovernmentManagerVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgovernment_manager_variance_order_by(ctx context.Context, obj interface{}) (model.GovernmentManagerVarianceOrderBy, error) {
	var it model.GovernmentManagerVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "all_driver_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all_driver_count"))
			it.AllDriverCount, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trained_drivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trained_drivers"))
			it.TrainedDrivers, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model.NumericComparisonExp, error) {
	var it model.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.ScoreLogAggregateOrderBy, error) {
	var it model.ScoreLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOscore_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOscore_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOscore_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOscore_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOscore_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOscore_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOscore_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOscore_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOscore_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOscore_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.ScoreLogArrRelInsertInput, error) {
	var it model.ScoreLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNscore_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOscore_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_avg_order_by(ctx context.Context, obj interface{}) (model.ScoreLogAvgOrderBy, error) {
	var it model.ScoreLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_bool_exp(ctx context.Context, obj interface{}) (model.ScoreLogBoolExp, error) {
	var it model.ScoreLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOscore_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOscore_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOscore_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_log_id"))
			it.ScoreLogID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_programs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_programs"))
			it.TrainingPrograms, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_inc_input(ctx context.Context, obj interface{}) (model.ScoreLogIncInput, error) {
	var it model.ScoreLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_insert_input(ctx context.Context, obj interface{}) (model.ScoreLogInsertInput, error) {
	var it model.ScoreLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_log_id"))
			it.ScoreLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_programs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_programs"))
			it.TrainingPrograms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_max_order_by(ctx context.Context, obj interface{}) (model.ScoreLogMaxOrderBy, error) {
	var it model.ScoreLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_log_id"))
			it.ScoreLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_programs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_programs"))
			it.TrainingPrograms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_min_order_by(ctx context.Context, obj interface{}) (model.ScoreLogMinOrderBy, error) {
	var it model.ScoreLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_log_id"))
			it.ScoreLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_programs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_programs"))
			it.TrainingPrograms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.ScoreLogObjRelInsertInput, error) {
	var it model.ScoreLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNscore_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOscore_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_on_conflict(ctx context.Context, obj interface{}) (model.ScoreLogOnConflict, error) {
	var it model.ScoreLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNscore_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNscore_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOscore_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_order_by(ctx context.Context, obj interface{}) (model.ScoreLogOrderBy, error) {
	var it model.ScoreLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_log_id"))
			it.ScoreLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_programs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_programs"))
			it.TrainingPrograms, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_pk_columns_input(ctx context.Context, obj interface{}) (model.ScoreLogPkColumnsInput, error) {
	var it model.ScoreLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_set_input(ctx context.Context, obj interface{}) (model.ScoreLogSetInput, error) {
	var it model.ScoreLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_log_id"))
			it.ScoreLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_programs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_programs"))
			it.TrainingPrograms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_stddev_order_by(ctx context.Context, obj interface{}) (model.ScoreLogStddevOrderBy, error) {
	var it model.ScoreLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.ScoreLogStddevPopOrderBy, error) {
	var it model.ScoreLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.ScoreLogStddevSampOrderBy, error) {
	var it model.ScoreLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_sum_order_by(ctx context.Context, obj interface{}) (model.ScoreLogSumOrderBy, error) {
	var it model.ScoreLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.ScoreLogVarPopOrderBy, error) {
	var it model.ScoreLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.ScoreLogVarSampOrderBy, error) {
	var it model.ScoreLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputscore_log_variance_order_by(ctx context.Context, obj interface{}) (model.ScoreLogVarianceOrderBy, error) {
	var it model.ScoreLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "training_score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("training_score"))
			it.TrainingScore, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_aggregate_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialAggregateOrderBy, error) {
	var it model.TrainingMaterialAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOtraining_material_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOtraining_material_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOtraining_material_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOtraining_material_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOtraining_material_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOtraining_material_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOtraining_material_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOtraining_material_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOtraining_material_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOtraining_material_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.TrainingMaterialArrRelInsertInput, error) {
	var it model.TrainingMaterialArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNtraining_material_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOtraining_material_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_avg_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialAvgOrderBy, error) {
	var it model.TrainingMaterialAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_bool_exp(ctx context.Context, obj interface{}) (model.TrainingMaterialBoolExp, error) {
	var it model.TrainingMaterialBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOtraining_material_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOtraining_material_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOtraining_material_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_address"))
			it.MaterialAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_inc_input(ctx context.Context, obj interface{}) (model.TrainingMaterialIncInput, error) {
	var it model.TrainingMaterialIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_insert_input(ctx context.Context, obj interface{}) (model.TrainingMaterialInsertInput, error) {
	var it model.TrainingMaterialInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_address"))
			it.MaterialAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_max_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialMaxOrderBy, error) {
	var it model.TrainingMaterialMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_address"))
			it.MaterialAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_min_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialMinOrderBy, error) {
	var it model.TrainingMaterialMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_address"))
			it.MaterialAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.TrainingMaterialObjRelInsertInput, error) {
	var it model.TrainingMaterialObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNtraining_material_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOtraining_material_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_on_conflict(ctx context.Context, obj interface{}) (model.TrainingMaterialOnConflict, error) {
	var it model.TrainingMaterialOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNtraining_material_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNtraining_material_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOtraining_material_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialOrderBy, error) {
	var it model.TrainingMaterialOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_address"))
			it.MaterialAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_pk_columns_input(ctx context.Context, obj interface{}) (model.TrainingMaterialPkColumnsInput, error) {
	var it model.TrainingMaterialPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_set_input(ctx context.Context, obj interface{}) (model.TrainingMaterialSetInput, error) {
	var it model.TrainingMaterialSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contents"))
			it.Contents, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_address"))
			it.MaterialAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "material_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("material_id"))
			it.MaterialID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_stddev_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialStddevOrderBy, error) {
	var it model.TrainingMaterialStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialStddevPopOrderBy, error) {
	var it model.TrainingMaterialStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialStddevSampOrderBy, error) {
	var it model.TrainingMaterialStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_sum_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialSumOrderBy, error) {
	var it model.TrainingMaterialSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_var_pop_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialVarPopOrderBy, error) {
	var it model.TrainingMaterialVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_var_samp_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialVarSampOrderBy, error) {
	var it model.TrainingMaterialVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtraining_material_variance_order_by(ctx context.Context, obj interface{}) (model.TrainingMaterialVarianceOrderBy, error) {
	var it model.TrainingMaterialVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "answer_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_answer_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "answer_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_answer_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "answer_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_answer_log_by_pk(ctx, field)
				return res
			})
		case "driver_study_details":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_study_details(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_study_details_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_study_details_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_study_details_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_study_details_by_pk(ctx, field)
				return res
			})
		case "enterprise_training":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_training(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_training_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_training_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_training_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_training_by_pk(ctx, field)
				return res
			})
		case "government_manager":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_government_manager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "government_manager_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_government_manager_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "government_manager_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_government_manager_by_pk(ctx, field)
				return res
			})
		case "score_log":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_score_log(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "score_log_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_score_log_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "score_log_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_score_log_by_pk(ctx, field)
				return res
			})
		case "training_material":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_training_material(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "training_material_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_training_material_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "training_material_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_training_material_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_logImplementors = []string{"answer_log"}

func (ec *executionContext) _answer_log(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log")
		case "answer":
			out.Values[i] = ec._answer_log_answer(ctx, field, obj)
		case "answer_log_id":
			out.Values[i] = ec._answer_log_answer_log_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._answer_log_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._answer_log_create_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._answer_log_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._answer_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "material_id":
			out.Values[i] = ec._answer_log_material_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._answer_log_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._answer_log_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_aggregateImplementors = []string{"answer_log_aggregate"}

func (ec *executionContext) _answer_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._answer_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._answer_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_aggregate_fieldsImplementors = []string{"answer_log_aggregate_fields"}

func (ec *executionContext) _answer_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._answer_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._answer_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._answer_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._answer_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._answer_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._answer_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._answer_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._answer_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._answer_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._answer_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._answer_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_avg_fieldsImplementors = []string{"answer_log_avg_fields"}

func (ec *executionContext) _answer_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_avg_fields")
		case "id":
			out.Values[i] = ec._answer_log_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_max_fieldsImplementors = []string{"answer_log_max_fields"}

func (ec *executionContext) _answer_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_max_fields")
		case "answer":
			out.Values[i] = ec._answer_log_max_fields_answer(ctx, field, obj)
		case "answer_log_id":
			out.Values[i] = ec._answer_log_max_fields_answer_log_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._answer_log_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._answer_log_max_fields_create_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._answer_log_max_fields_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._answer_log_max_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._answer_log_max_fields_material_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._answer_log_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._answer_log_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_min_fieldsImplementors = []string{"answer_log_min_fields"}

func (ec *executionContext) _answer_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_min_fields")
		case "answer":
			out.Values[i] = ec._answer_log_min_fields_answer(ctx, field, obj)
		case "answer_log_id":
			out.Values[i] = ec._answer_log_min_fields_answer_log_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._answer_log_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._answer_log_min_fields_create_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._answer_log_min_fields_driver_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._answer_log_min_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._answer_log_min_fields_material_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._answer_log_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._answer_log_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_mutation_responseImplementors = []string{"answer_log_mutation_response"}

func (ec *executionContext) _answer_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._answer_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._answer_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_stddev_fieldsImplementors = []string{"answer_log_stddev_fields"}

func (ec *executionContext) _answer_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_stddev_fields")
		case "id":
			out.Values[i] = ec._answer_log_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_stddev_pop_fieldsImplementors = []string{"answer_log_stddev_pop_fields"}

func (ec *executionContext) _answer_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._answer_log_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_stddev_samp_fieldsImplementors = []string{"answer_log_stddev_samp_fields"}

func (ec *executionContext) _answer_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._answer_log_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_sum_fieldsImplementors = []string{"answer_log_sum_fields"}

func (ec *executionContext) _answer_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_sum_fields")
		case "id":
			out.Values[i] = ec._answer_log_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_var_pop_fieldsImplementors = []string{"answer_log_var_pop_fields"}

func (ec *executionContext) _answer_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_var_pop_fields")
		case "id":
			out.Values[i] = ec._answer_log_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_var_samp_fieldsImplementors = []string{"answer_log_var_samp_fields"}

func (ec *executionContext) _answer_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_var_samp_fields")
		case "id":
			out.Values[i] = ec._answer_log_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answer_log_variance_fieldsImplementors = []string{"answer_log_variance_fields"}

func (ec *executionContext) _answer_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answer_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("answer_log_variance_fields")
		case "id":
			out.Values[i] = ec._answer_log_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_detailsImplementors = []string{"driver_study_details"}

func (ec *executionContext) _driver_study_details(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_detailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details")
		case "create_by":
			out.Values[i] = ec._driver_study_details_create_by(ctx, field, obj)
		case "create_time":
			out.Values[i] = ec._driver_study_details_create_time(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_study_details_driver_id(ctx, field, obj)
		case "driver_training_id":
			out.Values[i] = ec._driver_study_details_driver_training_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_study_details_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_study_details_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_training_completed":
			out.Values[i] = ec._driver_study_details_is_training_completed(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_aggregateImplementors = []string{"driver_study_details_aggregate"}

func (ec *executionContext) _driver_study_details_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_aggregate")
		case "aggregate":
			out.Values[i] = ec._driver_study_details_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._driver_study_details_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_aggregate_fieldsImplementors = []string{"driver_study_details_aggregate_fields"}

func (ec *executionContext) _driver_study_details_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_aggregate_fields")
		case "avg":
			out.Values[i] = ec._driver_study_details_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._driver_study_details_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._driver_study_details_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._driver_study_details_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._driver_study_details_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._driver_study_details_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._driver_study_details_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._driver_study_details_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._driver_study_details_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._driver_study_details_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._driver_study_details_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_avg_fieldsImplementors = []string{"driver_study_details_avg_fields"}

func (ec *executionContext) _driver_study_details_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_avg_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_avg_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_avg_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_avg_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_avg_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_max_fieldsImplementors = []string{"driver_study_details_max_fields"}

func (ec *executionContext) _driver_study_details_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_max_fields")
		case "create_by":
			out.Values[i] = ec._driver_study_details_max_fields_create_by(ctx, field, obj)
		case "create_time":
			out.Values[i] = ec._driver_study_details_max_fields_create_time(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_study_details_max_fields_driver_id(ctx, field, obj)
		case "driver_training_id":
			out.Values[i] = ec._driver_study_details_max_fields_driver_training_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_study_details_max_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_study_details_max_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_max_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_max_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_max_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_min_fieldsImplementors = []string{"driver_study_details_min_fields"}

func (ec *executionContext) _driver_study_details_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_min_fields")
		case "create_by":
			out.Values[i] = ec._driver_study_details_min_fields_create_by(ctx, field, obj)
		case "create_time":
			out.Values[i] = ec._driver_study_details_min_fields_create_time(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driver_study_details_min_fields_driver_id(ctx, field, obj)
		case "driver_training_id":
			out.Values[i] = ec._driver_study_details_min_fields_driver_training_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._driver_study_details_min_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driver_study_details_min_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_min_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_min_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_min_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_mutation_responseImplementors = []string{"driver_study_details_mutation_response"}

func (ec *executionContext) _driver_study_details_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._driver_study_details_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._driver_study_details_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_stddev_fieldsImplementors = []string{"driver_study_details_stddev_fields"}

func (ec *executionContext) _driver_study_details_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_stddev_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_stddev_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_stddev_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_stddev_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_stddev_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_stddev_pop_fieldsImplementors = []string{"driver_study_details_stddev_pop_fields"}

func (ec *executionContext) _driver_study_details_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_stddev_pop_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_stddev_pop_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_stddev_pop_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_stddev_pop_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_stddev_samp_fieldsImplementors = []string{"driver_study_details_stddev_samp_fields"}

func (ec *executionContext) _driver_study_details_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_stddev_samp_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_stddev_samp_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_stddev_samp_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_stddev_samp_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_sum_fieldsImplementors = []string{"driver_study_details_sum_fields"}

func (ec *executionContext) _driver_study_details_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_sum_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_sum_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_sum_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_sum_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_sum_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_var_pop_fieldsImplementors = []string{"driver_study_details_var_pop_fields"}

func (ec *executionContext) _driver_study_details_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_var_pop_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_var_pop_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_var_pop_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_var_pop_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_var_pop_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_var_samp_fieldsImplementors = []string{"driver_study_details_var_samp_fields"}

func (ec *executionContext) _driver_study_details_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_var_samp_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_var_samp_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_var_samp_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_var_samp_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_var_samp_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driver_study_details_variance_fieldsImplementors = []string{"driver_study_details_variance_fields"}

func (ec *executionContext) _driver_study_details_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStudyDetailsVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driver_study_details_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driver_study_details_variance_fields")
		case "id":
			out.Values[i] = ec._driver_study_details_variance_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._driver_study_details_variance_fields_material_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._driver_study_details_variance_fields_score(ctx, field, obj)
		case "training_time":
			out.Values[i] = ec._driver_study_details_variance_fields_training_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_trainingImplementors = []string{"enterprise_training"}

func (ec *executionContext) _enterprise_training(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTraining) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_trainingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training")
		case "create_at":
			out.Values[i] = ec._enterprise_training_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._enterprise_training_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._enterprise_training_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._enterprise_training_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_training_enterprise_id(ctx, field, obj)
		case "enterprise_training_id":
			out.Values[i] = ec._enterprise_training_enterprise_training_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_training_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._enterprise_training_is_delete(ctx, field, obj)
		case "is_received":
			out.Values[i] = ec._enterprise_training_is_received(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._enterprise_training_material_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._enterprise_training_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._enterprise_training_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_aggregateImplementors = []string{"enterprise_training_aggregate"}

func (ec *executionContext) _enterprise_training_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_aggregate")
		case "aggregate":
			out.Values[i] = ec._enterprise_training_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._enterprise_training_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_aggregate_fieldsImplementors = []string{"enterprise_training_aggregate_fields"}

func (ec *executionContext) _enterprise_training_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_aggregate_fields")
		case "avg":
			out.Values[i] = ec._enterprise_training_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._enterprise_training_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._enterprise_training_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._enterprise_training_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._enterprise_training_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._enterprise_training_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._enterprise_training_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._enterprise_training_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._enterprise_training_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._enterprise_training_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._enterprise_training_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_avg_fieldsImplementors = []string{"enterprise_training_avg_fields"}

func (ec *executionContext) _enterprise_training_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_avg_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_max_fieldsImplementors = []string{"enterprise_training_max_fields"}

func (ec *executionContext) _enterprise_training_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_max_fields")
		case "create_at":
			out.Values[i] = ec._enterprise_training_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._enterprise_training_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._enterprise_training_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._enterprise_training_max_fields_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_training_max_fields_enterprise_id(ctx, field, obj)
		case "enterprise_training_id":
			out.Values[i] = ec._enterprise_training_max_fields_enterprise_training_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_training_max_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._enterprise_training_max_fields_material_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._enterprise_training_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._enterprise_training_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_min_fieldsImplementors = []string{"enterprise_training_min_fields"}

func (ec *executionContext) _enterprise_training_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_min_fields")
		case "create_at":
			out.Values[i] = ec._enterprise_training_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._enterprise_training_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._enterprise_training_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._enterprise_training_min_fields_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_training_min_fields_enterprise_id(ctx, field, obj)
		case "enterprise_training_id":
			out.Values[i] = ec._enterprise_training_min_fields_enterprise_training_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_training_min_fields_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._enterprise_training_min_fields_material_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._enterprise_training_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._enterprise_training_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_mutation_responseImplementors = []string{"enterprise_training_mutation_response"}

func (ec *executionContext) _enterprise_training_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._enterprise_training_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._enterprise_training_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_stddev_fieldsImplementors = []string{"enterprise_training_stddev_fields"}

func (ec *executionContext) _enterprise_training_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_stddev_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_stddev_pop_fieldsImplementors = []string{"enterprise_training_stddev_pop_fields"}

func (ec *executionContext) _enterprise_training_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_stddev_samp_fieldsImplementors = []string{"enterprise_training_stddev_samp_fields"}

func (ec *executionContext) _enterprise_training_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_sum_fieldsImplementors = []string{"enterprise_training_sum_fields"}

func (ec *executionContext) _enterprise_training_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_sum_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_var_pop_fieldsImplementors = []string{"enterprise_training_var_pop_fields"}

func (ec *executionContext) _enterprise_training_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_var_pop_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_var_samp_fieldsImplementors = []string{"enterprise_training_var_samp_fields"}

func (ec *executionContext) _enterprise_training_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_var_samp_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_training_variance_fieldsImplementors = []string{"enterprise_training_variance_fields"}

func (ec *executionContext) _enterprise_training_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseTrainingVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_training_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_training_variance_fields")
		case "id":
			out.Values[i] = ec._enterprise_training_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_managerImplementors = []string{"government_manager"}

func (ec *executionContext) _government_manager(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManager) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_managerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_all_driver_count(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._government_manager_area_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._government_manager_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._government_manager_create_by(ctx, field, obj)
		case "deadline":
			out.Values[i] = ec._government_manager_deadline(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._government_manager_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._government_manager_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._government_manager_enterprise_id(ctx, field, obj)
		case "gov_id":
			out.Values[i] = ec._government_manager_gov_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._government_manager_is_delete(ctx, field, obj)
		case "is_received":
			out.Values[i] = ec._government_manager_is_received(ctx, field, obj)
		case "manage_id":
			out.Values[i] = ec._government_manager_manage_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._government_manager_material_id(ctx, field, obj)
		case "note":
			out.Values[i] = ec._government_manager_note(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._government_manager_start_time(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_trained_drivers(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._government_manager_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._government_manager_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_aggregateImplementors = []string{"government_manager_aggregate"}

func (ec *executionContext) _government_manager_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_aggregate")
		case "aggregate":
			out.Values[i] = ec._government_manager_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._government_manager_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_aggregate_fieldsImplementors = []string{"government_manager_aggregate_fields"}

func (ec *executionContext) _government_manager_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_aggregate_fields")
		case "avg":
			out.Values[i] = ec._government_manager_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._government_manager_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._government_manager_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._government_manager_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._government_manager_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._government_manager_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._government_manager_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._government_manager_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._government_manager_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._government_manager_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._government_manager_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_avg_fieldsImplementors = []string{"government_manager_avg_fields"}

func (ec *executionContext) _government_manager_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_avg_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_avg_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_avg_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_avg_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_max_fieldsImplementors = []string{"government_manager_max_fields"}

func (ec *executionContext) _government_manager_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_max_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_max_fields_all_driver_count(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._government_manager_max_fields_area_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._government_manager_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._government_manager_max_fields_create_by(ctx, field, obj)
		case "deadline":
			out.Values[i] = ec._government_manager_max_fields_deadline(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._government_manager_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._government_manager_max_fields_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._government_manager_max_fields_enterprise_id(ctx, field, obj)
		case "gov_id":
			out.Values[i] = ec._government_manager_max_fields_gov_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_max_fields_id(ctx, field, obj)
		case "manage_id":
			out.Values[i] = ec._government_manager_max_fields_manage_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._government_manager_max_fields_material_id(ctx, field, obj)
		case "note":
			out.Values[i] = ec._government_manager_max_fields_note(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._government_manager_max_fields_start_time(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_max_fields_trained_drivers(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._government_manager_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._government_manager_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_min_fieldsImplementors = []string{"government_manager_min_fields"}

func (ec *executionContext) _government_manager_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_min_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_min_fields_all_driver_count(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._government_manager_min_fields_area_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._government_manager_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._government_manager_min_fields_create_by(ctx, field, obj)
		case "deadline":
			out.Values[i] = ec._government_manager_min_fields_deadline(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._government_manager_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._government_manager_min_fields_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._government_manager_min_fields_enterprise_id(ctx, field, obj)
		case "gov_id":
			out.Values[i] = ec._government_manager_min_fields_gov_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_min_fields_id(ctx, field, obj)
		case "manage_id":
			out.Values[i] = ec._government_manager_min_fields_manage_id(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._government_manager_min_fields_material_id(ctx, field, obj)
		case "note":
			out.Values[i] = ec._government_manager_min_fields_note(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._government_manager_min_fields_start_time(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_min_fields_trained_drivers(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._government_manager_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._government_manager_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_mutation_responseImplementors = []string{"government_manager_mutation_response"}

func (ec *executionContext) _government_manager_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._government_manager_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._government_manager_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_stddev_fieldsImplementors = []string{"government_manager_stddev_fields"}

func (ec *executionContext) _government_manager_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_stddev_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_stddev_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_stddev_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_stddev_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_stddev_pop_fieldsImplementors = []string{"government_manager_stddev_pop_fields"}

func (ec *executionContext) _government_manager_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_stddev_pop_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_stddev_pop_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_stddev_pop_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_stddev_pop_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_stddev_samp_fieldsImplementors = []string{"government_manager_stddev_samp_fields"}

func (ec *executionContext) _government_manager_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_stddev_samp_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_stddev_samp_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_stddev_samp_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_stddev_samp_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_sum_fieldsImplementors = []string{"government_manager_sum_fields"}

func (ec *executionContext) _government_manager_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_sum_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_sum_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_sum_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_sum_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_var_pop_fieldsImplementors = []string{"government_manager_var_pop_fields"}

func (ec *executionContext) _government_manager_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_var_pop_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_var_pop_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_var_pop_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_var_pop_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_var_samp_fieldsImplementors = []string{"government_manager_var_samp_fields"}

func (ec *executionContext) _government_manager_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_var_samp_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_var_samp_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_var_samp_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_var_samp_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var government_manager_variance_fieldsImplementors = []string{"government_manager_variance_fields"}

func (ec *executionContext) _government_manager_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.GovernmentManagerVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, government_manager_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("government_manager_variance_fields")
		case "all_driver_count":
			out.Values[i] = ec._government_manager_variance_fields_all_driver_count(ctx, field, obj)
		case "id":
			out.Values[i] = ec._government_manager_variance_fields_id(ctx, field, obj)
		case "trained_drivers":
			out.Values[i] = ec._government_manager_variance_fields_trained_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_logImplementors = []string{"score_log"}

func (ec *executionContext) _score_log(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log")
		case "create_at":
			out.Values[i] = ec._score_log_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._score_log_create_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._score_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_number":
			out.Values[i] = ec._score_log_id_number(ctx, field, obj)
		case "name":
			out.Values[i] = ec._score_log_name(ctx, field, obj)
		case "score_log_id":
			out.Values[i] = ec._score_log_score_log_id(ctx, field, obj)
		case "training_programs":
			out.Values[i] = ec._score_log_training_programs(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_training_score(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._score_log_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._score_log_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_aggregateImplementors = []string{"score_log_aggregate"}

func (ec *executionContext) _score_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._score_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._score_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_aggregate_fieldsImplementors = []string{"score_log_aggregate_fields"}

func (ec *executionContext) _score_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._score_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._score_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._score_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._score_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._score_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._score_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._score_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._score_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._score_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._score_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._score_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_avg_fieldsImplementors = []string{"score_log_avg_fields"}

func (ec *executionContext) _score_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_avg_fields")
		case "id":
			out.Values[i] = ec._score_log_avg_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_avg_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_max_fieldsImplementors = []string{"score_log_max_fields"}

func (ec *executionContext) _score_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_max_fields")
		case "create_at":
			out.Values[i] = ec._score_log_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._score_log_max_fields_create_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._score_log_max_fields_id(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._score_log_max_fields_id_number(ctx, field, obj)
		case "name":
			out.Values[i] = ec._score_log_max_fields_name(ctx, field, obj)
		case "score_log_id":
			out.Values[i] = ec._score_log_max_fields_score_log_id(ctx, field, obj)
		case "training_programs":
			out.Values[i] = ec._score_log_max_fields_training_programs(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_max_fields_training_score(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._score_log_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._score_log_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_min_fieldsImplementors = []string{"score_log_min_fields"}

func (ec *executionContext) _score_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_min_fields")
		case "create_at":
			out.Values[i] = ec._score_log_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._score_log_min_fields_create_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._score_log_min_fields_id(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._score_log_min_fields_id_number(ctx, field, obj)
		case "name":
			out.Values[i] = ec._score_log_min_fields_name(ctx, field, obj)
		case "score_log_id":
			out.Values[i] = ec._score_log_min_fields_score_log_id(ctx, field, obj)
		case "training_programs":
			out.Values[i] = ec._score_log_min_fields_training_programs(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_min_fields_training_score(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._score_log_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._score_log_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_mutation_responseImplementors = []string{"score_log_mutation_response"}

func (ec *executionContext) _score_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._score_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._score_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_stddev_fieldsImplementors = []string{"score_log_stddev_fields"}

func (ec *executionContext) _score_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_stddev_fields")
		case "id":
			out.Values[i] = ec._score_log_stddev_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_stddev_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_stddev_pop_fieldsImplementors = []string{"score_log_stddev_pop_fields"}

func (ec *executionContext) _score_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._score_log_stddev_pop_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_stddev_pop_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_stddev_samp_fieldsImplementors = []string{"score_log_stddev_samp_fields"}

func (ec *executionContext) _score_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._score_log_stddev_samp_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_stddev_samp_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_sum_fieldsImplementors = []string{"score_log_sum_fields"}

func (ec *executionContext) _score_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_sum_fields")
		case "id":
			out.Values[i] = ec._score_log_sum_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_sum_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_var_pop_fieldsImplementors = []string{"score_log_var_pop_fields"}

func (ec *executionContext) _score_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_var_pop_fields")
		case "id":
			out.Values[i] = ec._score_log_var_pop_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_var_pop_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_var_samp_fieldsImplementors = []string{"score_log_var_samp_fields"}

func (ec *executionContext) _score_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_var_samp_fields")
		case "id":
			out.Values[i] = ec._score_log_var_samp_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_var_samp_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var score_log_variance_fieldsImplementors = []string{"score_log_variance_fields"}

func (ec *executionContext) _score_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, score_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("score_log_variance_fields")
		case "id":
			out.Values[i] = ec._score_log_variance_fields_id(ctx, field, obj)
		case "training_score":
			out.Values[i] = ec._score_log_variance_fields_training_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_materialImplementors = []string{"training_material"}

func (ec *executionContext) _training_material(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_materialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material")
		case "contents":
			out.Values[i] = ec._training_material_contents(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._training_material_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._training_material_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._training_material_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._training_material_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._training_material_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._training_material_is_delete(ctx, field, obj)
		case "material_address":
			out.Values[i] = ec._training_material_material_address(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._training_material_material_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._training_material_title(ctx, field, obj)
		case "type":
			out.Values[i] = ec._training_material_type(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._training_material_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._training_material_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_aggregateImplementors = []string{"training_material_aggregate"}

func (ec *executionContext) _training_material_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_aggregate")
		case "aggregate":
			out.Values[i] = ec._training_material_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._training_material_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_aggregate_fieldsImplementors = []string{"training_material_aggregate_fields"}

func (ec *executionContext) _training_material_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_aggregate_fields")
		case "avg":
			out.Values[i] = ec._training_material_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._training_material_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._training_material_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._training_material_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._training_material_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._training_material_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._training_material_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._training_material_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._training_material_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._training_material_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._training_material_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_avg_fieldsImplementors = []string{"training_material_avg_fields"}

func (ec *executionContext) _training_material_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_avg_fields")
		case "id":
			out.Values[i] = ec._training_material_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_max_fieldsImplementors = []string{"training_material_max_fields"}

func (ec *executionContext) _training_material_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_max_fields")
		case "contents":
			out.Values[i] = ec._training_material_max_fields_contents(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._training_material_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._training_material_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._training_material_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._training_material_max_fields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._training_material_max_fields_id(ctx, field, obj)
		case "material_address":
			out.Values[i] = ec._training_material_max_fields_material_address(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._training_material_max_fields_material_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._training_material_max_fields_title(ctx, field, obj)
		case "type":
			out.Values[i] = ec._training_material_max_fields_type(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._training_material_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._training_material_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_min_fieldsImplementors = []string{"training_material_min_fields"}

func (ec *executionContext) _training_material_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_min_fields")
		case "contents":
			out.Values[i] = ec._training_material_min_fields_contents(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._training_material_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._training_material_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._training_material_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._training_material_min_fields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._training_material_min_fields_id(ctx, field, obj)
		case "material_address":
			out.Values[i] = ec._training_material_min_fields_material_address(ctx, field, obj)
		case "material_id":
			out.Values[i] = ec._training_material_min_fields_material_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._training_material_min_fields_title(ctx, field, obj)
		case "type":
			out.Values[i] = ec._training_material_min_fields_type(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._training_material_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._training_material_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_mutation_responseImplementors = []string{"training_material_mutation_response"}

func (ec *executionContext) _training_material_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._training_material_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._training_material_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_stddev_fieldsImplementors = []string{"training_material_stddev_fields"}

func (ec *executionContext) _training_material_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_stddev_fields")
		case "id":
			out.Values[i] = ec._training_material_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_stddev_pop_fieldsImplementors = []string{"training_material_stddev_pop_fields"}

func (ec *executionContext) _training_material_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._training_material_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_stddev_samp_fieldsImplementors = []string{"training_material_stddev_samp_fields"}

func (ec *executionContext) _training_material_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._training_material_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_sum_fieldsImplementors = []string{"training_material_sum_fields"}

func (ec *executionContext) _training_material_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_sum_fields")
		case "id":
			out.Values[i] = ec._training_material_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_var_pop_fieldsImplementors = []string{"training_material_var_pop_fields"}

func (ec *executionContext) _training_material_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_var_pop_fields")
		case "id":
			out.Values[i] = ec._training_material_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_var_samp_fieldsImplementors = []string{"training_material_var_samp_fields"}

func (ec *executionContext) _training_material_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_var_samp_fields")
		case "id":
			out.Values[i] = ec._training_material_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var training_material_variance_fieldsImplementors = []string{"training_material_variance_fields"}

func (ec *executionContext) _training_material_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.TrainingMaterialVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, training_material_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("training_material_variance_fields")
		case "id":
			out.Values[i] = ec._training_material_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNanswer_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AnswerLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNanswer_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNanswer_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLog(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._answer_log(ctx, sel, v)
}

func (ec *executionContext) marshalNanswer_log_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.AnswerLogAggregate) graphql.Marshaler {
	return ec._answer_log_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNanswer_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._answer_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNanswer_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogConstraint(ctx context.Context, v interface{}) (model.AnswerLogConstraint, error) {
	var res model.AnswerLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNanswer_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.AnswerLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNanswer_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AnswerLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AnswerLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNanswer_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNanswer_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogInsertInput(ctx context.Context, v interface{}) (*model.AnswerLogInsertInput, error) {
	res, err := ec.unmarshalInputanswer_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNanswer_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogOrderBy, error) {
	res, err := ec.unmarshalInputanswer_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNanswer_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumn(ctx context.Context, v interface{}) (model.AnswerLogSelectColumn, error) {
	var res model.AnswerLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNanswer_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AnswerLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNanswer_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumn(ctx context.Context, v interface{}) (model.AnswerLogUpdateColumn, error) {
	var res model.AnswerLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNanswer_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.AnswerLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNanswer_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.AnswerLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AnswerLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNanswer_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNanswer_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AnswerLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNanswer_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdriver_study_details2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverStudyDetails) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_study_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriver_study_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetails(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_study_details(ctx, sel, v)
}

func (ec *executionContext) marshalNdriver_study_details_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverStudyDetailsAggregate) graphql.Marshaler {
	return ec._driver_study_details_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdriver_study_details_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driver_study_details_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdriver_study_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsConstraint(ctx context.Context, v interface{}) (model.DriverStudyDetailsConstraint, error) {
	var res model.DriverStudyDetailsConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_study_details_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsConstraint(ctx context.Context, sel ast.SelectionSet, v model.DriverStudyDetailsConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_study_details_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverStudyDetailsInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverStudyDetailsInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_study_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdriver_study_details_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsInsertInput(ctx context.Context, v interface{}) (*model.DriverStudyDetailsInsertInput, error) {
	res, err := ec.unmarshalInputdriver_study_details_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_study_details_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsOrderBy, error) {
	res, err := ec.unmarshalInputdriver_study_details_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriver_study_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumn(ctx context.Context, v interface{}) (model.DriverStudyDetailsSelectColumn, error) {
	var res model.DriverStudyDetailsSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_study_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverStudyDetailsSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_study_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumn(ctx context.Context, v interface{}) (model.DriverStudyDetailsUpdateColumn, error) {
	var res model.DriverStudyDetailsUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriver_study_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverStudyDetailsUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriver_study_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverStudyDetailsUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverStudyDetailsUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_study_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdriver_study_details_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverStudyDetailsUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_study_details_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise_training2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.EnterpriseTraining) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_training2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTraining(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise_training2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTraining(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTraining) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_training(ctx, sel, v)
}

func (ec *executionContext) marshalNenterprise_training_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseTrainingAggregate) graphql.Marshaler {
	return ec._enterprise_training_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNenterprise_training_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_training_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNenterprise_training_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingConstraint(ctx context.Context, v interface{}) (model.EnterpriseTrainingConstraint, error) {
	var res model.EnterpriseTrainingConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_training_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingConstraint(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseTrainingConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_training_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseTrainingInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseTrainingInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_training_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNenterprise_training_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseTrainingInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_training_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_training_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingOrderBy, error) {
	res, err := ec.unmarshalInputenterprise_training_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_training_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseTrainingSelectColumn, error) {
	var res model.EnterpriseTrainingSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_training_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseTrainingSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_training_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumn(ctx context.Context, v interface{}) (model.EnterpriseTrainingUpdateColumn, error) {
	var res model.EnterpriseTrainingUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_training_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseTrainingUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_training_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseTrainingUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseTrainingUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_training_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNenterprise_training_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseTrainingUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_training_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNgovernment_manager2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GovernmentManager) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNgovernment_manager2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManager(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNgovernment_manager2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManager(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManager) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._government_manager(ctx, sel, v)
}

func (ec *executionContext) marshalNgovernment_manager_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAggregate(ctx context.Context, sel ast.SelectionSet, v model.GovernmentManagerAggregate) graphql.Marshaler {
	return ec._government_manager_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNgovernment_manager_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAggregate(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._government_manager_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNgovernment_manager_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerConstraint(ctx context.Context, v interface{}) (model.GovernmentManagerConstraint, error) {
	var res model.GovernmentManagerConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNgovernment_manager_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerConstraint(ctx context.Context, sel ast.SelectionSet, v model.GovernmentManagerConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNgovernment_manager_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.GovernmentManagerInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.GovernmentManagerInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNgovernment_manager_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNgovernment_manager_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerInsertInput(ctx context.Context, v interface{}) (*model.GovernmentManagerInsertInput, error) {
	res, err := ec.unmarshalInputgovernment_manager_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNgovernment_manager_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerOrderBy, error) {
	res, err := ec.unmarshalInputgovernment_manager_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNgovernment_manager_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumn(ctx context.Context, v interface{}) (model.GovernmentManagerSelectColumn, error) {
	var res model.GovernmentManagerSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNgovernment_manager_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.GovernmentManagerSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNgovernment_manager_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumn(ctx context.Context, v interface{}) (model.GovernmentManagerUpdateColumn, error) {
	var res model.GovernmentManagerUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNgovernment_manager_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.GovernmentManagerUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNgovernment_manager_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.GovernmentManagerUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.GovernmentManagerUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNgovernment_manager_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNgovernment_manager_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GovernmentManagerUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNgovernment_manager_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNscore_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ScoreLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNscore_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNscore_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLog(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._score_log(ctx, sel, v)
}

func (ec *executionContext) marshalNscore_log_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAggregate(ctx context.Context, sel ast.SelectionSet, v model.ScoreLogAggregate) graphql.Marshaler {
	return ec._score_log_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNscore_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._score_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNscore_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogConstraint(ctx context.Context, v interface{}) (model.ScoreLogConstraint, error) {
	var res model.ScoreLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNscore_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.ScoreLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNscore_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ScoreLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ScoreLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNscore_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNscore_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogInsertInput(ctx context.Context, v interface{}) (*model.ScoreLogInsertInput, error) {
	res, err := ec.unmarshalInputscore_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNscore_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogOrderBy, error) {
	res, err := ec.unmarshalInputscore_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNscore_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumn(ctx context.Context, v interface{}) (model.ScoreLogSelectColumn, error) {
	var res model.ScoreLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNscore_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ScoreLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNscore_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumn(ctx context.Context, v interface{}) (model.ScoreLogUpdateColumn, error) {
	var res model.ScoreLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNscore_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.ScoreLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNscore_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.ScoreLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ScoreLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNscore_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNscore_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ScoreLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNscore_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNtraining_material2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TrainingMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNtraining_material2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNtraining_material2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterial(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._training_material(ctx, sel, v)
}

func (ec *executionContext) marshalNtraining_material_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAggregate(ctx context.Context, sel ast.SelectionSet, v model.TrainingMaterialAggregate) graphql.Marshaler {
	return ec._training_material_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNtraining_material_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAggregate(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._training_material_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNtraining_material_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialConstraint(ctx context.Context, v interface{}) (model.TrainingMaterialConstraint, error) {
	var res model.TrainingMaterialConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtraining_material_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialConstraint(ctx context.Context, sel ast.SelectionSet, v model.TrainingMaterialConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNtraining_material_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.TrainingMaterialInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.TrainingMaterialInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtraining_material_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNtraining_material_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialInsertInput(ctx context.Context, v interface{}) (*model.TrainingMaterialInsertInput, error) {
	res, err := ec.unmarshalInputtraining_material_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNtraining_material_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialOrderBy, error) {
	res, err := ec.unmarshalInputtraining_material_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNtraining_material_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumn(ctx context.Context, v interface{}) (model.TrainingMaterialSelectColumn, error) {
	var res model.TrainingMaterialSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtraining_material_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.TrainingMaterialSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNtraining_material_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumn(ctx context.Context, v interface{}) (model.TrainingMaterialUpdateColumn, error) {
	var res model.TrainingMaterialUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtraining_material_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.TrainingMaterialUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNtraining_material_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.TrainingMaterialUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.TrainingMaterialUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtraining_material_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNtraining_material_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.TrainingMaterialUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNtraining_material_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model1.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOanswer_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLog(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log(ctx, sel, v)
}

func (ec *executionContext) marshalOanswer_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOanswer_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogAvgOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOanswer_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx context.Context, v interface{}) ([]*model.AnswerLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AnswerLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOanswer_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOanswer_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogBoolExp(ctx context.Context, v interface{}) (*model.AnswerLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMaxOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogMinOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOanswer_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOnConflict(ctx context.Context, v interface{}) (*model.AnswerLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOanswer_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AnswerLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AnswerLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNanswer_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOanswer_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AnswerLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AnswerLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNanswer_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOanswer_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AnswerLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNanswer_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOanswer_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogSumOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOanswer_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AnswerLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._answer_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOanswer_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐAnswerLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.AnswerLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputanswer_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetails(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_study_details_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdriver_study_details_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsAvgOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_study_details_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx context.Context, v interface{}) ([]*model.DriverStudyDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverStudyDetailsBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdriver_study_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_study_details_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsBoolExp(ctx context.Context, v interface{}) (*model.DriverStudyDetailsBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMaxOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsMinOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_study_details_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOnConflict(ctx context.Context, v interface{}) (*model.DriverStudyDetailsOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriver_study_details_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverStudyDetailsOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverStudyDetailsOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_study_details_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriver_study_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverStudyDetailsSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverStudyDetailsSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriver_study_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdriver_study_details_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverStudyDetailsSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriver_study_details_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOdriver_study_details_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsSumOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarPopOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarSampOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriver_study_details_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverStudyDetailsVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driver_study_details_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriver_study_details_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐDriverStudyDetailsVarianceOrderBy(ctx context.Context, v interface{}) (*model.DriverStudyDetailsVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriver_study_details_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTraining(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTraining) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_training_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_training_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingAvgOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_training_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseTrainingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseTrainingBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOenterprise_training_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_training_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseTrainingBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMaxOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingMinOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_training_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOnConflict(ctx context.Context, v interface{}) (*model.EnterpriseTrainingOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_training_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseTrainingOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseTrainingOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_training_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_training_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseTrainingSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseTrainingSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_training_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOenterprise_training_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseTrainingSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_training_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOenterprise_training_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingStddevSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingSumOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_training_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseTrainingVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_training_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_training_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐEnterpriseTrainingVarianceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseTrainingVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_training_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManager(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManager) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager(ctx, sel, v)
}

func (ec *executionContext) marshalOgovernment_manager_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOgovernment_manager_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerAvgOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOgovernment_manager_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx context.Context, v interface{}) ([]*model.GovernmentManagerBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.GovernmentManagerBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOgovernment_manager_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOgovernment_manager_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerBoolExp(ctx context.Context, v interface{}) (*model.GovernmentManagerBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMaxOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMinFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerMinOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOgovernment_manager_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOnConflict(ctx context.Context, v interface{}) (*model.GovernmentManagerOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOgovernment_manager_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOrderByᚄ(ctx context.Context, v interface{}) ([]*model.GovernmentManagerOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.GovernmentManagerOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNgovernment_manager_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOgovernment_manager_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.GovernmentManagerSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.GovernmentManagerSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNgovernment_manager_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOgovernment_manager_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GovernmentManagerSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNgovernment_manager_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOgovernment_manager_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevPopOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerStddevSampOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSumFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerSumOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarPopOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarSampOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgovernment_manager_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.GovernmentManagerVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._government_manager_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOgovernment_manager_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐGovernmentManagerVarianceOrderBy(ctx context.Context, v interface{}) (*model.GovernmentManagerVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputgovernment_manager_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOscore_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLog(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log(ctx, sel, v)
}

func (ec *executionContext) marshalOscore_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOscore_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogAvgOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOscore_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx context.Context, v interface{}) ([]*model.ScoreLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ScoreLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOscore_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOscore_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogBoolExp(ctx context.Context, v interface{}) (*model.ScoreLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMaxOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogMinOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOscore_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOnConflict(ctx context.Context, v interface{}) (*model.ScoreLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOscore_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ScoreLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ScoreLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNscore_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOscore_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ScoreLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ScoreLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNscore_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOscore_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ScoreLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNscore_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOscore_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogSumOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOscore_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ScoreLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._score_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOscore_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐScoreLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.ScoreLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputscore_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterial(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material(ctx, sel, v)
}

func (ec *executionContext) marshalOtraining_material_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOtraining_material_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialAvgOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtraining_material_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx context.Context, v interface{}) ([]*model.TrainingMaterialBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.TrainingMaterialBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOtraining_material_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOtraining_material_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialBoolExp(ctx context.Context, v interface{}) (*model.TrainingMaterialBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMaxOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMinFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialMinOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtraining_material_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOnConflict(ctx context.Context, v interface{}) (*model.TrainingMaterialOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtraining_material_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOrderByᚄ(ctx context.Context, v interface{}) ([]*model.TrainingMaterialOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.TrainingMaterialOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtraining_material_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOtraining_material_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.TrainingMaterialSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.TrainingMaterialSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtraining_material_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtraining_material_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.TrainingMaterialSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNtraining_material_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOtraining_material_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevPopOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialStddevSampOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSumFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialSumOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarPopOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarSampOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtraining_material_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.TrainingMaterialVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._training_material_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtraining_material_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋtrainingᚋqueryᚋgraphᚋmodelᚐTrainingMaterialVarianceOrderBy(ctx context.Context, v interface{}) (*model.TrainingMaterialVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtraining_material_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
