# columns and relationships of "answer_log"
type answer_log implements Node {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: ID!
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "answer_log"
type answer_log_aggregate {
    aggregate: answer_log_aggregate_fields
    nodes: [answer_log!]!
}

# aggregate fields of "answer_log"
type answer_log_aggregate_fields {
    avg: answer_log_avg_fields
    count(columns: [answer_log_select_column!], distinct: Boolean): Int
    max: answer_log_max_fields
    min: answer_log_min_fields
    stddev: answer_log_stddev_fields
    stddev_pop: answer_log_stddev_pop_fields
    stddev_samp: answer_log_stddev_samp_fields
    sum: answer_log_sum_fields
    var_pop: answer_log_var_pop_fields
    var_samp: answer_log_var_samp_fields
    variance: answer_log_variance_fields
}

# order by aggregate values of table "answer_log"
input answer_log_aggregate_order_by {
    avg: answer_log_avg_order_by
    count: order_by
    max: answer_log_max_order_by
    min: answer_log_min_order_by
    stddev: answer_log_stddev_order_by
    stddev_pop: answer_log_stddev_pop_order_by
    stddev_samp: answer_log_stddev_samp_order_by
    sum: answer_log_sum_order_by
    var_pop: answer_log_var_pop_order_by
    var_samp: answer_log_var_samp_order_by
    variance: answer_log_variance_order_by
}

# input type for inserting array relation for remote table "answer_log"
input answer_log_arr_rel_insert_input {
    data: [answer_log_insert_input!]!
    on_conflict: answer_log_on_conflict
}

# aggregate avg on columns
type answer_log_avg_fields {
    id: Float
}

# order by avg() on columns of table "answer_log"
input answer_log_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "answer_log". All fields are combined with a logical 'AND'.
input answer_log_bool_exp {
    _and: [answer_log_bool_exp]
    _not: answer_log_bool_exp
    _or: [answer_log_bool_exp]
    answer: String_comparison_exp
    answer_log_id: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    driver_id: String_comparison_exp
    id: bigint_comparison_exp
    material_id: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "answer_log"
enum answer_log_constraint {
    # unique or primary key constraint
    answer_log_pkey
}

# input type for incrementing integer column in table "answer_log"
input answer_log_inc_input {
    id: bigint
}

# input type for inserting data into table "answer_log"
input answer_log_insert_input {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type answer_log_max_fields {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "answer_log"
input answer_log_max_order_by {
    answer: order_by
    answer_log_id: order_by
    create_at: order_by
    create_by: order_by
    driver_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type answer_log_min_fields {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "answer_log"
input answer_log_min_order_by {
    answer: order_by
    answer_log_id: order_by
    create_at: order_by
    create_by: order_by
    driver_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "answer_log"
type answer_log_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [answer_log!]!
}

# input type for inserting object relation for remote table "answer_log"
input answer_log_obj_rel_insert_input {
    data: answer_log_insert_input!
    on_conflict: answer_log_on_conflict
}

# on conflict condition type for table "answer_log"
input answer_log_on_conflict {
    constraint: answer_log_constraint!
    update_columns: [answer_log_update_column!]!
    where: answer_log_bool_exp
}

# ordering options when selecting data from "answer_log"
input answer_log_order_by {
    answer: order_by
    answer_log_id: order_by
    create_at: order_by
    create_by: order_by
    driver_id: order_by
    id: order_by
    material_id: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "answer_log"
input answer_log_pk_columns_input {
    id: bigint!
}

# select columns of table "answer_log"
enum answer_log_select_column {
    # column name
    answer
    # column name
    answer_log_id
    # column name
    create_at
    # column name
    create_by
    # column name
    driver_id
    # column name
    id
    # column name
    material_id
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "answer_log"
input answer_log_set_input {
    answer: String
    answer_log_id: String
    create_at: timestamptz
    create_by: String
    driver_id: String
    id: bigint
    material_id: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type answer_log_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "answer_log"
input answer_log_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type answer_log_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "answer_log"
input answer_log_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type answer_log_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "answer_log"
input answer_log_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type answer_log_sum_fields {
    id: bigint
}

# order by sum() on columns of table "answer_log"
input answer_log_sum_order_by {
    id: order_by
}

# update columns of table "answer_log"
enum answer_log_update_column {
    # column name
    answer
    # column name
    answer_log_id
    # column name
    create_at
    # column name
    create_by
    # column name
    driver_id
    # column name
    id
    # column name
    material_id
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type answer_log_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "answer_log"
input answer_log_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type answer_log_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "answer_log"
input answer_log_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type answer_log_variance_fields {
    id: Float
}

# order by variance() on columns of table "answer_log"
input answer_log_variance_order_by {
    id: order_by
}

# A Relay Connection object on "answer_log"
type answer_logConnection {
    edges: [answer_logEdge!]!
    pageInfo: PageInfo!
}

type answer_logEdge {
    cursor: String!
    node: answer_log!
}