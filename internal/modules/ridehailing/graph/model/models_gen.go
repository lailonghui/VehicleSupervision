// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/ridehailing/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "ride_hailing_driver"
type RideHailingDriverAggregate struct {
	Aggregate *RideHailingDriverAggregateFields `json:"aggregate"`
}

// aggregate fields of "ride_hailing_driver"
type RideHailingDriverAggregateFields struct {
	Avg        *RideHailingDriverAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *RideHailingDriverMaxFields        `json:"max"`
	Min        *RideHailingDriverMinFields        `json:"min"`
	Stddev     *RideHailingDriverStddevFields     `json:"stddev"`
	StddevPop  *RideHailingDriverStddevPopFields  `json:"stddev_pop"`
	StddevSamp *RideHailingDriverStddevSampFields `json:"stddev_samp"`
	Sum        *RideHailingDriverSumFields        `json:"sum"`
	VarPop     *RideHailingDriverVarPopFields     `json:"var_pop"`
	VarSamp    *RideHailingDriverVarSampFields    `json:"var_samp"`
	Variance   *RideHailingDriverVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ride_hailing_driver"
type RideHailingDriverAvgFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ride_hailing_driver'.
type RideHailingDriverBoolExp struct {
	And                       []*RideHailingDriverBoolExp     `json:"_and"`
	Not                       *RideHailingDriverBoolExp       `json:"_not"`
	Or                        []*RideHailingDriverBoolExp     `json:"_or"`
	ID                        *model.BigintComparisonExp      `json:"id"`
	RideHailingDriverID       *model.StringComparisonExp      `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *model.StringComparisonExp      `json:"ride_hailing_driver_verify_id"`
	DriverName                *model.StringComparisonExp      `json:"driver_name"`
	PhoneNumber               *model.StringComparisonExp      `json:"phone_number"`
	IDNumber                  *model.StringComparisonExp      `json:"id_number"`
	Sex                       *model.IntComparisonExp         `json:"sex"`
	Birthday                  *model.TimestamptzComparisonExp `json:"birthday"`
	Nation                    *model.StringComparisonExp      `json:"nation"`
	SignGov                   *model.StringComparisonExp      `json:"sign_gov"`
	IDAddress                 *model.StringComparisonExp      `json:"id_address"`
	StartValidDate            *model.TimestamptzComparisonExp `json:"start_valid_date"`
	EndValidDate              *model.TimestamptzComparisonExp `json:"end_valid_date"`
	IdcardPhoto               *model.StringComparisonExp      `json:"idcard_photo"`
	QuasiDrivingModels        *model.IntComparisonExp         `json:"quasi_driving_models"`
	DriverSchoolID            *model.StringComparisonExp      `json:"driver_school_id"`
	FirstTimeReceivedDate     *model.TimestamptzComparisonExp `json:"first_time_received_date"`
	SignnaturePhoto           *model.StringComparisonExp      `json:"signnature_photo"`
	HandleIDPhoto             *model.StringComparisonExp      `json:"handle_id_photo"`
	CurrentAddress            *model.StringComparisonExp      `json:"current_address"`
	QualificationNumber       *model.StringComparisonExp      `json:"qualification_number"`
	IsFormerDriver            *model.BooleanComparisonExp     `json:"is_former_driver"`
	CheckStation              *model.IntComparisonExp         `json:"check_station"`
	UpdateTimeIn              *model.TimestamptzComparisonExp `json:"update_time_in"`
	CreateAt                  *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                  *model.StringComparisonExp      `json:"create_by"`
	UpdateAt                  *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                  *model.StringComparisonExp      `json:"update_by"`
	OperatorID                *model.StringComparisonExp      `json:"operator_id"`
	Remarks                   *model.StringComparisonExp      `json:"remarks"`
	IsDelete                  *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "ride_hailing_driver"
type RideHailingDriverIncInput struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// input type for inserting data into table "ride_hailing_driver"
type RideHailingDriverInsertInput struct {
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	DriverName                *string    `json:"driver_name"`
	PhoneNumber               *string    `json:"phone_number"`
	IDNumber                  *string    `json:"id_number"`
	Sex                       *int       `json:"sex"`
	Birthday                  *time.Time `json:"birthday"`
	Nation                    *string    `json:"nation"`
	SignGov                   *string    `json:"sign_gov"`
	IDAddress                 *string    `json:"id_address"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	CurrentAddress            *string    `json:"current_address"`
	QualificationNumber       *string    `json:"qualification_number"`
	IsFormerDriver            *bool      `json:"is_former_driver"`
	CheckStation              *int       `json:"check_station"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	OperatorID                *string    `json:"operator_id"`
	Remarks                   *string    `json:"remarks"`
	IsDelete                  bool       `json:"is_delete"`
}

// aggregate max on columns of table "ride_hailing_driver"
type RideHailingDriverMaxFields struct {
	ID                        *int64     `json:"id"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	DriverName                *string    `json:"driver_name"`
	PhoneNumber               *string    `json:"phone_number"`
	IDNumber                  *string    `json:"id_number"`
	Sex                       *int       `json:"sex"`
	Birthday                  *time.Time `json:"birthday"`
	Nation                    *string    `json:"nation"`
	SignGov                   *string    `json:"sign_gov"`
	IDAddress                 *string    `json:"id_address"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	CurrentAddress            *string    `json:"current_address"`
	QualificationNumber       *string    `json:"qualification_number"`
	IsFormerDriver            *bool      `json:"is_former_driver"`
	CheckStation              *int       `json:"check_station"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	OperatorID                *string    `json:"operator_id"`
	Remarks                   *string    `json:"remarks"`
	IsDelete                  *bool      `json:"is_delete"`
}

// aggregate min on columns of table "ride_hailing_driver"
type RideHailingDriverMinFields struct {
	ID                        *int64     `json:"id"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	DriverName                *string    `json:"driver_name"`
	PhoneNumber               *string    `json:"phone_number"`
	IDNumber                  *string    `json:"id_number"`
	Sex                       *int       `json:"sex"`
	Birthday                  *time.Time `json:"birthday"`
	Nation                    *string    `json:"nation"`
	SignGov                   *string    `json:"sign_gov"`
	IDAddress                 *string    `json:"id_address"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	CurrentAddress            *string    `json:"current_address"`
	QualificationNumber       *string    `json:"qualification_number"`
	IsFormerDriver            *bool      `json:"is_former_driver"`
	CheckStation              *int       `json:"check_station"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	OperatorID                *string    `json:"operator_id"`
	Remarks                   *string    `json:"remarks"`
	IsDelete                  *bool      `json:"is_delete"`
}

// response of any mutation on the table "ride_hailing_driver"
type RideHailingDriverMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.RideHailingDriver `json:"returning"`
}

// ordering options when selecting data from "ride_hailing_driver"
type RideHailingDriverOrderBy struct {
	ID                        *model.OrderBy `json:"id"`
	RideHailingDriverID       *model.OrderBy `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *model.OrderBy `json:"ride_hailing_driver_verify_id"`
	DriverName                *model.OrderBy `json:"driver_name"`
	PhoneNumber               *model.OrderBy `json:"phone_number"`
	IDNumber                  *model.OrderBy `json:"id_number"`
	Sex                       *model.OrderBy `json:"sex"`
	Birthday                  *model.OrderBy `json:"birthday"`
	Nation                    *model.OrderBy `json:"nation"`
	SignGov                   *model.OrderBy `json:"sign_gov"`
	IDAddress                 *model.OrderBy `json:"id_address"`
	StartValidDate            *model.OrderBy `json:"start_valid_date"`
	EndValidDate              *model.OrderBy `json:"end_valid_date"`
	IdcardPhoto               *model.OrderBy `json:"idcard_photo"`
	QuasiDrivingModels        *model.OrderBy `json:"quasi_driving_models"`
	DriverSchoolID            *model.OrderBy `json:"driver_school_id"`
	FirstTimeReceivedDate     *model.OrderBy `json:"first_time_received_date"`
	SignnaturePhoto           *model.OrderBy `json:"signnature_photo"`
	HandleIDPhoto             *model.OrderBy `json:"handle_id_photo"`
	CurrentAddress            *model.OrderBy `json:"current_address"`
	QualificationNumber       *model.OrderBy `json:"qualification_number"`
	IsFormerDriver            *model.OrderBy `json:"is_former_driver"`
	CheckStation              *model.OrderBy `json:"check_station"`
	UpdateTimeIn              *model.OrderBy `json:"update_time_in"`
	CreateAt                  *model.OrderBy `json:"create_at"`
	CreateBy                  *model.OrderBy `json:"create_by"`
	UpdateAt                  *model.OrderBy `json:"update_at"`
	UpdateBy                  *model.OrderBy `json:"update_by"`
	OperatorID                *model.OrderBy `json:"operator_id"`
	Remarks                   *model.OrderBy `json:"remarks"`
	IsDelete                  *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "ride_hailing_driver"
type RideHailingDriverSetInput struct {
	ID                        *int64     `json:"id"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	DriverName                *string    `json:"driver_name"`
	PhoneNumber               *string    `json:"phone_number"`
	IDNumber                  *string    `json:"id_number"`
	Sex                       *int       `json:"sex"`
	Birthday                  *time.Time `json:"birthday"`
	Nation                    *string    `json:"nation"`
	SignGov                   *string    `json:"sign_gov"`
	IDAddress                 *string    `json:"id_address"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	CurrentAddress            *string    `json:"current_address"`
	QualificationNumber       *string    `json:"qualification_number"`
	IsFormerDriver            *bool      `json:"is_former_driver"`
	CheckStation              *int       `json:"check_station"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	OperatorID                *string    `json:"operator_id"`
	Remarks                   *string    `json:"remarks"`
	IsDelete                  *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "ride_hailing_driver"
type RideHailingDriverStddevFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregate stddev_pop on columns of table "ride_hailing_driver"
type RideHailingDriverStddevPopFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregate stddev_samp on columns of table "ride_hailing_driver"
type RideHailingDriverStddevSampFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregate sum on columns of table "ride_hailing_driver"
type RideHailingDriverSumFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregate var_pop on columns of table "ride_hailing_driver"
type RideHailingDriverVarPopFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregate var_samp on columns of table "ride_hailing_driver"
type RideHailingDriverVarSampFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregate variance on columns of table "ride_hailing_driver"
type RideHailingDriverVarianceFields struct {
	ID                 *int64 `json:"id"`
	Sex                *int   `json:"sex"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	CheckStation       *int   `json:"check_station"`
}

// aggregated selection of "ride_hailing_driver_verify"
type RideHailingDriverVerifyAggregate struct {
	Aggregate *RideHailingDriverVerifyAggregateFields `json:"aggregate"`
}

// aggregate fields of "ride_hailing_driver_verify"
type RideHailingDriverVerifyAggregateFields struct {
	Avg        *RideHailingDriverVerifyAvgFields        `json:"avg"`
	Count      *int                                     `json:"count"`
	Max        *RideHailingDriverVerifyMaxFields        `json:"max"`
	Min        *RideHailingDriverVerifyMinFields        `json:"min"`
	Stddev     *RideHailingDriverVerifyStddevFields     `json:"stddev"`
	StddevPop  *RideHailingDriverVerifyStddevPopFields  `json:"stddev_pop"`
	StddevSamp *RideHailingDriverVerifyStddevSampFields `json:"stddev_samp"`
	Sum        *RideHailingDriverVerifySumFields        `json:"sum"`
	VarPop     *RideHailingDriverVerifyVarPopFields     `json:"var_pop"`
	VarSamp    *RideHailingDriverVerifyVarSampFields    `json:"var_samp"`
	Variance   *RideHailingDriverVerifyVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ride_hailing_driver_verify'.
type RideHailingDriverVerifyBoolExp struct {
	And                              []*RideHailingDriverVerifyBoolExp `json:"_and"`
	Not                              *RideHailingDriverVerifyBoolExp   `json:"_not"`
	Or                               []*RideHailingDriverVerifyBoolExp `json:"_or"`
	ID                               *model.BigintComparisonExp        `json:"id"`
	RideHailingDriverVerifyID        *model.StringComparisonExp        `json:"ride_hailing_driver_verify_id"`
	IsViolentCrime                   *model.BooleanComparisonExp       `json:"is_violent_crime"`
	ViolentCrimeRemark               *model.StringComparisonExp        `json:"violent_crime_remark"`
	ViolentCrimeExamineTime          *model.TimestamptzComparisonExp   `json:"violent_crime_examine_time"`
	IsDrugHistory                    *model.BooleanComparisonExp       `json:"is_drug_history"`
	DrugHistoryRemark                *model.StringComparisonExp        `json:"drug_history_remark"`
	DrugHistoryExamineTime           *model.TimestamptzComparisonExp   `json:"drug_history_examine_time"`
	IsThreeYearsDrivingExperience    *model.BooleanComparisonExp       `json:"is_three_years_driving_experience"`
	DrivingExperienceRemark          *model.StringComparisonExp        `json:"driving_experience_remark"`
	DrivingExperienceExamineTime     *model.TimestamptzComparisonExp   `json:"driving_experience_examine_time"`
	IsThreeCycleTwelve               *model.BooleanComparisonExp       `json:"is_three_cycle_twelve"`
	IsTrafficAccidentEscapeRecord    *model.BooleanComparisonExp       `json:"is_traffic_accident_escape_record"`
	TrafficAccidentEscapeRemark      *model.StringComparisonExp        `json:"traffic_accident_escape_remark"`
	TrafficAccidentEscapeExamineTime *model.TimestamptzComparisonExp   `json:"traffic_accident_escape_examine_time"`
	IsDrunkDrugDriving               *model.BooleanComparisonExp       `json:"is_drunk_drug_driving"`
	DrunkDrugDrivingRemark           *model.StringComparisonExp        `json:"drunk_drug_driving_remark"`
	DrunkDrugDrivingExamineTime      *model.TimestamptzComparisonExp   `json:"drunk_drug_driving_examine_time"`
	IsPassDrivingExam                *model.BooleanComparisonExp       `json:"is_pass_driving_exam"`
	DrivingExamTime                  *model.TimestamptzComparisonExp   `json:"driving_exam_time"`
	CreateAt                         *model.TimestamptzComparisonExp   `json:"create_at"`
	CreateBy                         *model.StringComparisonExp        `json:"create_by"`
	UpdateAt                         *model.TimestamptzComparisonExp   `json:"update_at"`
	UpdateBy                         *model.StringComparisonExp        `json:"update_by"`
	DeleteAt                         *model.TimestamptzComparisonExp   `json:"delete_at"`
	DeleteBy                         *model.StringComparisonExp        `json:"delete_by"`
	IsDelete                         *model.StringComparisonExp        `json:"is_delete"`
}

// input type for incrementing integer column in table "ride_hailing_driver_verify"
type RideHailingDriverVerifyIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "ride_hailing_driver_verify"
type RideHailingDriverVerifyInsertInput struct {
	IsViolentCrime                   *bool      `json:"is_violent_crime"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	IsDrugHistory                    *bool      `json:"is_drug_history"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	IsThreeYearsDrivingExperience    *bool      `json:"is_three_years_driving_experience"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	IsThreeCycleTwelve               *bool      `json:"is_three_cycle_twelve"`
	IsTrafficAccidentEscapeRecord    *bool      `json:"is_traffic_accident_escape_record"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	IsDrunkDrugDriving               *bool      `json:"is_drunk_drug_driving"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	IsPassDrivingExam                *bool      `json:"is_pass_driving_exam"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	IsDelete                         string     `json:"is_delete"`
}

// aggregate max on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyMaxFields struct {
	ID                               *int64     `json:"id"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	IsViolentCrime                   *bool      `json:"is_violent_crime"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	IsDrugHistory                    *bool      `json:"is_drug_history"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	IsThreeYearsDrivingExperience    *bool      `json:"is_three_years_driving_experience"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	IsThreeCycleTwelve               *bool      `json:"is_three_cycle_twelve"`
	IsTrafficAccidentEscapeRecord    *bool      `json:"is_traffic_accident_escape_record"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	IsDrunkDrugDriving               *bool      `json:"is_drunk_drug_driving"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	IsPassDrivingExam                *bool      `json:"is_pass_driving_exam"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	IsDelete                         *string    `json:"is_delete"`
}

// aggregate min on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyMinFields struct {
	ID                               *int64     `json:"id"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	IsViolentCrime                   *bool      `json:"is_violent_crime"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	IsDrugHistory                    *bool      `json:"is_drug_history"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	IsThreeYearsDrivingExperience    *bool      `json:"is_three_years_driving_experience"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	IsThreeCycleTwelve               *bool      `json:"is_three_cycle_twelve"`
	IsTrafficAccidentEscapeRecord    *bool      `json:"is_traffic_accident_escape_record"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	IsDrunkDrugDriving               *bool      `json:"is_drunk_drug_driving"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	IsPassDrivingExam                *bool      `json:"is_pass_driving_exam"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	IsDelete                         *string    `json:"is_delete"`
}

// response of any mutation on the table "ride_hailing_driver_verify"
type RideHailingDriverVerifyMutationResponse struct {
	AffectedRows int                               `json:"affected_rows"`
	Returning    []*model1.RideHailingDriverVerify `json:"returning"`
}

// ordering options when selecting data from "ride_hailing_driver_verify"
type RideHailingDriverVerifyOrderBy struct {
	ID                               *model.OrderBy `json:"id"`
	RideHailingDriverVerifyID        *model.OrderBy `json:"ride_hailing_driver_verify_id"`
	IsViolentCrime                   *model.OrderBy `json:"is_violent_crime"`
	ViolentCrimeRemark               *model.OrderBy `json:"violent_crime_remark"`
	ViolentCrimeExamineTime          *model.OrderBy `json:"violent_crime_examine_time"`
	IsDrugHistory                    *model.OrderBy `json:"is_drug_history"`
	DrugHistoryRemark                *model.OrderBy `json:"drug_history_remark"`
	DrugHistoryExamineTime           *model.OrderBy `json:"drug_history_examine_time"`
	IsThreeYearsDrivingExperience    *model.OrderBy `json:"is_three_years_driving_experience"`
	DrivingExperienceRemark          *model.OrderBy `json:"driving_experience_remark"`
	DrivingExperienceExamineTime     *model.OrderBy `json:"driving_experience_examine_time"`
	IsThreeCycleTwelve               *model.OrderBy `json:"is_three_cycle_twelve"`
	IsTrafficAccidentEscapeRecord    *model.OrderBy `json:"is_traffic_accident_escape_record"`
	TrafficAccidentEscapeRemark      *model.OrderBy `json:"traffic_accident_escape_remark"`
	TrafficAccidentEscapeExamineTime *model.OrderBy `json:"traffic_accident_escape_examine_time"`
	IsDrunkDrugDriving               *model.OrderBy `json:"is_drunk_drug_driving"`
	DrunkDrugDrivingRemark           *model.OrderBy `json:"drunk_drug_driving_remark"`
	DrunkDrugDrivingExamineTime      *model.OrderBy `json:"drunk_drug_driving_examine_time"`
	IsPassDrivingExam                *model.OrderBy `json:"is_pass_driving_exam"`
	DrivingExamTime                  *model.OrderBy `json:"driving_exam_time"`
	CreateAt                         *model.OrderBy `json:"create_at"`
	CreateBy                         *model.OrderBy `json:"create_by"`
	UpdateAt                         *model.OrderBy `json:"update_at"`
	UpdateBy                         *model.OrderBy `json:"update_by"`
	DeleteAt                         *model.OrderBy `json:"delete_at"`
	DeleteBy                         *model.OrderBy `json:"delete_by"`
	IsDelete                         *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "ride_hailing_driver_verify"
type RideHailingDriverVerifySetInput struct {
	ID                               *int64     `json:"id"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	IsViolentCrime                   *bool      `json:"is_violent_crime"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	IsDrugHistory                    *bool      `json:"is_drug_history"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	IsThreeYearsDrivingExperience    *bool      `json:"is_three_years_driving_experience"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	IsThreeCycleTwelve               *bool      `json:"is_three_cycle_twelve"`
	IsTrafficAccidentEscapeRecord    *bool      `json:"is_traffic_accident_escape_record"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	IsDrunkDrugDriving               *bool      `json:"is_drunk_drug_driving"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	IsPassDrivingExam                *bool      `json:"is_pass_driving_exam"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	IsDelete                         *string    `json:"is_delete"`
}

// aggregate stddev on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifySumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyVarianceFields struct {
	ID *int64 `json:"id"`
}

// 可选select
type RideHailingDriverSelectColumn string

const (
	// ID
	RideHailingDriverSelectColumnID RideHailingDriverSelectColumn = "id"
	// 网约车驾驶员ID
	RideHailingDriverSelectColumnRideHailingDriverID RideHailingDriverSelectColumn = "ride_hailing_driver_id"
	// 网约车驾驶员审核表ID
	RideHailingDriverSelectColumnRideHailingDriverVerifyID RideHailingDriverSelectColumn = "ride_hailing_driver_verify_id"
	// 驾驶员名称
	RideHailingDriverSelectColumnDriverName RideHailingDriverSelectColumn = "driver_name"
	// 联系电话
	RideHailingDriverSelectColumnPhoneNumber RideHailingDriverSelectColumn = "phone_number"
	// 驾驶员身份证号
	RideHailingDriverSelectColumnIDNumber RideHailingDriverSelectColumn = "id_number"
	// 性别
	RideHailingDriverSelectColumnSex RideHailingDriverSelectColumn = "sex"
	// 出生日期
	RideHailingDriverSelectColumnBirthday RideHailingDriverSelectColumn = "birthday"
	// 民族
	RideHailingDriverSelectColumnNation RideHailingDriverSelectColumn = "nation"
	// 发证机构
	RideHailingDriverSelectColumnSignGov RideHailingDriverSelectColumn = "sign_gov"
	// 身份证住址
	RideHailingDriverSelectColumnIDAddress RideHailingDriverSelectColumn = "id_address"
	// 身份证-有效期起始日期
	RideHailingDriverSelectColumnStartValidDate RideHailingDriverSelectColumn = "start_valid_date"
	// 有效期截止日期
	RideHailingDriverSelectColumnEndValidDate RideHailingDriverSelectColumn = "end_valid_date"
	// 身份证图片
	RideHailingDriverSelectColumnIdcardPhoto RideHailingDriverSelectColumn = "idcard_photo"
	// 准假车型
	RideHailingDriverSelectColumnQuasiDrivingModels RideHailingDriverSelectColumn = "quasi_driving_models"
	// 驾校ID
	RideHailingDriverSelectColumnDriverSchoolID RideHailingDriverSelectColumn = "driver_school_id"
	// 初次领驾驶证日期
	RideHailingDriverSelectColumnFirstTimeReceivedDate RideHailingDriverSelectColumn = "first_time_received_date"
	// 签字的照片
	RideHailingDriverSelectColumnSignnaturePhoto RideHailingDriverSelectColumn = "signnature_photo"
	// 手持身份证照片
	RideHailingDriverSelectColumnHandleIDPhoto RideHailingDriverSelectColumn = "handle_id_photo"
	// 现居住地址
	RideHailingDriverSelectColumnCurrentAddress RideHailingDriverSelectColumn = "current_address"
	// 资格证号
	RideHailingDriverSelectColumnQualificationNumber RideHailingDriverSelectColumn = "qualification_number"
	// 是否旧驾驶员
	RideHailingDriverSelectColumnIsFormerDriver RideHailingDriverSelectColumn = "is_former_driver"
	// 审核状态
	RideHailingDriverSelectColumnCheckStation RideHailingDriverSelectColumn = "check_station"
	// 内网更新时间
	RideHailingDriverSelectColumnUpdateTimeIn RideHailingDriverSelectColumn = "update_time_in"
	// 记录时间
	RideHailingDriverSelectColumnCreateAt RideHailingDriverSelectColumn = "create_at"
	// 记录人员ID
	RideHailingDriverSelectColumnCreateBy RideHailingDriverSelectColumn = "create_by"
	// 更新时间
	RideHailingDriverSelectColumnUpdateAt RideHailingDriverSelectColumn = "update_at"
	// 更新人员id
	RideHailingDriverSelectColumnUpdateBy RideHailingDriverSelectColumn = "update_by"
	// 操作员id
	RideHailingDriverSelectColumnOperatorID RideHailingDriverSelectColumn = "operator_id"
	// 备注
	RideHailingDriverSelectColumnRemarks RideHailingDriverSelectColumn = "remarks"
	// 是否删除
	RideHailingDriverSelectColumnIsDelete RideHailingDriverSelectColumn = "is_delete"
)

var AllRideHailingDriverSelectColumn = []RideHailingDriverSelectColumn{
	RideHailingDriverSelectColumnID,
	RideHailingDriverSelectColumnRideHailingDriverID,
	RideHailingDriverSelectColumnRideHailingDriverVerifyID,
	RideHailingDriverSelectColumnDriverName,
	RideHailingDriverSelectColumnPhoneNumber,
	RideHailingDriverSelectColumnIDNumber,
	RideHailingDriverSelectColumnSex,
	RideHailingDriverSelectColumnBirthday,
	RideHailingDriverSelectColumnNation,
	RideHailingDriverSelectColumnSignGov,
	RideHailingDriverSelectColumnIDAddress,
	RideHailingDriverSelectColumnStartValidDate,
	RideHailingDriverSelectColumnEndValidDate,
	RideHailingDriverSelectColumnIdcardPhoto,
	RideHailingDriverSelectColumnQuasiDrivingModels,
	RideHailingDriverSelectColumnDriverSchoolID,
	RideHailingDriverSelectColumnFirstTimeReceivedDate,
	RideHailingDriverSelectColumnSignnaturePhoto,
	RideHailingDriverSelectColumnHandleIDPhoto,
	RideHailingDriverSelectColumnCurrentAddress,
	RideHailingDriverSelectColumnQualificationNumber,
	RideHailingDriverSelectColumnIsFormerDriver,
	RideHailingDriverSelectColumnCheckStation,
	RideHailingDriverSelectColumnUpdateTimeIn,
	RideHailingDriverSelectColumnCreateAt,
	RideHailingDriverSelectColumnCreateBy,
	RideHailingDriverSelectColumnUpdateAt,
	RideHailingDriverSelectColumnUpdateBy,
	RideHailingDriverSelectColumnOperatorID,
	RideHailingDriverSelectColumnRemarks,
	RideHailingDriverSelectColumnIsDelete,
}

func (e RideHailingDriverSelectColumn) IsValid() bool {
	switch e {
	case RideHailingDriverSelectColumnID, RideHailingDriverSelectColumnRideHailingDriverID, RideHailingDriverSelectColumnRideHailingDriverVerifyID, RideHailingDriverSelectColumnDriverName, RideHailingDriverSelectColumnPhoneNumber, RideHailingDriverSelectColumnIDNumber, RideHailingDriverSelectColumnSex, RideHailingDriverSelectColumnBirthday, RideHailingDriverSelectColumnNation, RideHailingDriverSelectColumnSignGov, RideHailingDriverSelectColumnIDAddress, RideHailingDriverSelectColumnStartValidDate, RideHailingDriverSelectColumnEndValidDate, RideHailingDriverSelectColumnIdcardPhoto, RideHailingDriverSelectColumnQuasiDrivingModels, RideHailingDriverSelectColumnDriverSchoolID, RideHailingDriverSelectColumnFirstTimeReceivedDate, RideHailingDriverSelectColumnSignnaturePhoto, RideHailingDriverSelectColumnHandleIDPhoto, RideHailingDriverSelectColumnCurrentAddress, RideHailingDriverSelectColumnQualificationNumber, RideHailingDriverSelectColumnIsFormerDriver, RideHailingDriverSelectColumnCheckStation, RideHailingDriverSelectColumnUpdateTimeIn, RideHailingDriverSelectColumnCreateAt, RideHailingDriverSelectColumnCreateBy, RideHailingDriverSelectColumnUpdateAt, RideHailingDriverSelectColumnUpdateBy, RideHailingDriverSelectColumnOperatorID, RideHailingDriverSelectColumnRemarks, RideHailingDriverSelectColumnIsDelete:
		return true
	}
	return false
}

func (e RideHailingDriverSelectColumn) String() string {
	return string(e)
}

func (e *RideHailingDriverSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RideHailingDriverSelectColumn", str)
	}
	return nil
}

func (e RideHailingDriverSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type RideHailingDriverVerifySelectColumn string

const (
	// ID
	RideHailingDriverVerifySelectColumnID RideHailingDriverVerifySelectColumn = "id"
	// 审核ID
	RideHailingDriverVerifySelectColumnRideHailingDriverVerifyID RideHailingDriverVerifySelectColumn = "ride_hailing_driver_verify_id"
	// 是否有暴力犯罪记录（刑侦支队）
	RideHailingDriverVerifySelectColumnIsViolentCrime RideHailingDriverVerifySelectColumn = "is_violent_crime"
	// 刑侦支队审核备注
	RideHailingDriverVerifySelectColumnViolentCrimeRemark RideHailingDriverVerifySelectColumn = "violent_crime_remark"
	// 刑侦支队审核时间
	RideHailingDriverVerifySelectColumnViolentCrimeExamineTime RideHailingDriverVerifySelectColumn = "violent_crime_examine_time"
	// 是否有吸毒记录（禁毒支队）
	RideHailingDriverVerifySelectColumnIsDrugHistory RideHailingDriverVerifySelectColumn = "is_drug_history"
	// 禁毒支队审核备注
	RideHailingDriverVerifySelectColumnDrugHistoryRemark RideHailingDriverVerifySelectColumn = "drug_history_remark"
	// 禁毒支队审核时间
	RideHailingDriverVerifySelectColumnDrugHistoryExamineTime RideHailingDriverVerifySelectColumn = "drug_history_examine_time"
	// 是否满足三年驾龄（驾管大队）
	RideHailingDriverVerifySelectColumnIsThreeYearsDrivingExperience RideHailingDriverVerifySelectColumn = "is_three_years_driving_experience"
	// 驾管大队审核备注
	RideHailingDriverVerifySelectColumnDrivingExperienceRemark RideHailingDriverVerifySelectColumn = "driving_experience_remark"
	// 驾管大队审核时间
	RideHailingDriverVerifySelectColumnDrivingExperienceExamineTime RideHailingDriverVerifySelectColumn = "driving_experience_examine_time"
	// 是否最近连续三个记分周期内没有记满12分（驾管大队）
	RideHailingDriverVerifySelectColumnIsThreeCycleTwelve RideHailingDriverVerifySelectColumn = "is_three_cycle_twelve"
	// 是否有交通肇事犯罪记录（事故大队）
	RideHailingDriverVerifySelectColumnIsTrafficAccidentEscapeRecord RideHailingDriverVerifySelectColumn = "is_traffic_accident_escape_record"
	// 事故大队审核备注
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeRemark RideHailingDriverVerifySelectColumn = "traffic_accident_escape_remark"
	// 事故大队审核时间
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeExamineTime RideHailingDriverVerifySelectColumn = "traffic_accident_escape_examine_time"
	// 是否有酒驾毒驾记录(秩序大队)
	RideHailingDriverVerifySelectColumnIsDrunkDrugDriving RideHailingDriverVerifySelectColumn = "is_drunk_drug_driving"
	// 秩序大队审核备注
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingRemark RideHailingDriverVerifySelectColumn = "drunk_drug_driving_remark"
	// 秩序大队审核时间
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingExamineTime RideHailingDriverVerifySelectColumn = "drunk_drug_driving_examine_time"
	// 是否通过考试(交通局审)
	RideHailingDriverVerifySelectColumnIsPassDrivingExam RideHailingDriverVerifySelectColumn = "is_pass_driving_exam"
	// 交通局考试认定时间
	RideHailingDriverVerifySelectColumnDrivingExamTime RideHailingDriverVerifySelectColumn = "driving_exam_time"
	// 创建时间
	RideHailingDriverVerifySelectColumnCreateAt RideHailingDriverVerifySelectColumn = "create_at"
	// 创建人
	RideHailingDriverVerifySelectColumnCreateBy RideHailingDriverVerifySelectColumn = "create_by"
	// 修改时间
	RideHailingDriverVerifySelectColumnUpdateAt RideHailingDriverVerifySelectColumn = "update_at"
	// 修改人
	RideHailingDriverVerifySelectColumnUpdateBy RideHailingDriverVerifySelectColumn = "update_by"
	// 删除时间
	RideHailingDriverVerifySelectColumnDeleteAt RideHailingDriverVerifySelectColumn = "delete_at"
	// 删除人
	RideHailingDriverVerifySelectColumnDeleteBy RideHailingDriverVerifySelectColumn = "delete_by"
	// 是否删除
	RideHailingDriverVerifySelectColumnIsDelete RideHailingDriverVerifySelectColumn = "is_delete"
)

var AllRideHailingDriverVerifySelectColumn = []RideHailingDriverVerifySelectColumn{
	RideHailingDriverVerifySelectColumnID,
	RideHailingDriverVerifySelectColumnRideHailingDriverVerifyID,
	RideHailingDriverVerifySelectColumnIsViolentCrime,
	RideHailingDriverVerifySelectColumnViolentCrimeRemark,
	RideHailingDriverVerifySelectColumnViolentCrimeExamineTime,
	RideHailingDriverVerifySelectColumnIsDrugHistory,
	RideHailingDriverVerifySelectColumnDrugHistoryRemark,
	RideHailingDriverVerifySelectColumnDrugHistoryExamineTime,
	RideHailingDriverVerifySelectColumnIsThreeYearsDrivingExperience,
	RideHailingDriverVerifySelectColumnDrivingExperienceRemark,
	RideHailingDriverVerifySelectColumnDrivingExperienceExamineTime,
	RideHailingDriverVerifySelectColumnIsThreeCycleTwelve,
	RideHailingDriverVerifySelectColumnIsTrafficAccidentEscapeRecord,
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeRemark,
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeExamineTime,
	RideHailingDriverVerifySelectColumnIsDrunkDrugDriving,
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingRemark,
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingExamineTime,
	RideHailingDriverVerifySelectColumnIsPassDrivingExam,
	RideHailingDriverVerifySelectColumnDrivingExamTime,
	RideHailingDriverVerifySelectColumnCreateAt,
	RideHailingDriverVerifySelectColumnCreateBy,
	RideHailingDriverVerifySelectColumnUpdateAt,
	RideHailingDriverVerifySelectColumnUpdateBy,
	RideHailingDriverVerifySelectColumnDeleteAt,
	RideHailingDriverVerifySelectColumnDeleteBy,
	RideHailingDriverVerifySelectColumnIsDelete,
}

func (e RideHailingDriverVerifySelectColumn) IsValid() bool {
	switch e {
	case RideHailingDriverVerifySelectColumnID, RideHailingDriverVerifySelectColumnRideHailingDriverVerifyID, RideHailingDriverVerifySelectColumnIsViolentCrime, RideHailingDriverVerifySelectColumnViolentCrimeRemark, RideHailingDriverVerifySelectColumnViolentCrimeExamineTime, RideHailingDriverVerifySelectColumnIsDrugHistory, RideHailingDriverVerifySelectColumnDrugHistoryRemark, RideHailingDriverVerifySelectColumnDrugHistoryExamineTime, RideHailingDriverVerifySelectColumnIsThreeYearsDrivingExperience, RideHailingDriverVerifySelectColumnDrivingExperienceRemark, RideHailingDriverVerifySelectColumnDrivingExperienceExamineTime, RideHailingDriverVerifySelectColumnIsThreeCycleTwelve, RideHailingDriverVerifySelectColumnIsTrafficAccidentEscapeRecord, RideHailingDriverVerifySelectColumnTrafficAccidentEscapeRemark, RideHailingDriverVerifySelectColumnTrafficAccidentEscapeExamineTime, RideHailingDriverVerifySelectColumnIsDrunkDrugDriving, RideHailingDriverVerifySelectColumnDrunkDrugDrivingRemark, RideHailingDriverVerifySelectColumnDrunkDrugDrivingExamineTime, RideHailingDriverVerifySelectColumnIsPassDrivingExam, RideHailingDriverVerifySelectColumnDrivingExamTime, RideHailingDriverVerifySelectColumnCreateAt, RideHailingDriverVerifySelectColumnCreateBy, RideHailingDriverVerifySelectColumnUpdateAt, RideHailingDriverVerifySelectColumnUpdateBy, RideHailingDriverVerifySelectColumnDeleteAt, RideHailingDriverVerifySelectColumnDeleteBy, RideHailingDriverVerifySelectColumnIsDelete:
		return true
	}
	return false
}

func (e RideHailingDriverVerifySelectColumn) String() string {
	return string(e)
}

func (e *RideHailingDriverVerifySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverVerifySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RideHailingDriverVerifySelectColumn", str)
	}
	return nil
}

func (e RideHailingDriverVerifySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
