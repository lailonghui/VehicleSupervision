// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/internal/modules/ridehailing/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "ride_hailing_driver"
type RideHailingDriverAggregate struct {
	Aggregate *RideHailingDriverAggregateFields `json:"aggregate"`
	Nodes     []*model.RideHailingDriver        `json:"nodes"`
}

// aggregate fields of "ride_hailing_driver"
type RideHailingDriverAggregateFields struct {
	Avg        *RideHailingDriverAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *RideHailingDriverMaxFields        `json:"max"`
	Min        *RideHailingDriverMinFields        `json:"min"`
	Stddev     *RideHailingDriverStddevFields     `json:"stddev"`
	StddevPop  *RideHailingDriverStddevPopFields  `json:"stddev_pop"`
	StddevSamp *RideHailingDriverStddevSampFields `json:"stddev_samp"`
	Sum        *RideHailingDriverSumFields        `json:"sum"`
	VarPop     *RideHailingDriverVarPopFields     `json:"var_pop"`
	VarSamp    *RideHailingDriverVarSampFields    `json:"var_samp"`
	Variance   *RideHailingDriverVarianceFields   `json:"variance"`
}

// order by aggregate values of table "ride_hailing_driver"
type RideHailingDriverAggregateOrderBy struct {
	Avg        *RideHailingDriverAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy                     `json:"count"`
	Max        *RideHailingDriverMaxOrderBy        `json:"max"`
	Min        *RideHailingDriverMinOrderBy        `json:"min"`
	Stddev     *RideHailingDriverStddevOrderBy     `json:"stddev"`
	StddevPop  *RideHailingDriverStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *RideHailingDriverStddevSampOrderBy `json:"stddev_samp"`
	Sum        *RideHailingDriverSumOrderBy        `json:"sum"`
	VarPop     *RideHailingDriverVarPopOrderBy     `json:"var_pop"`
	VarSamp    *RideHailingDriverVarSampOrderBy    `json:"var_samp"`
	Variance   *RideHailingDriverVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "ride_hailing_driver"
type RideHailingDriverArrRelInsertInput struct {
	Data       []*RideHailingDriverInsertInput `json:"data"`
	OnConflict *RideHailingDriverOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type RideHailingDriverAvgFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by avg() on columns of table "ride_hailing_driver"
type RideHailingDriverAvgOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// Boolean expression to filter rows from the table "ride_hailing_driver". All fields are combined with a logical 'AND'.
type RideHailingDriverBoolExp struct {
	And                       []*RideHailingDriverBoolExp      `json:"_and"`
	Not                       *RideHailingDriverBoolExp        `json:"_not"`
	Or                        []*RideHailingDriverBoolExp      `json:"_or"`
	Birthday                  *model1.TimestamptzComparisonExp `json:"birthday"`
	CheckStation              *model1.IntComparisonExp         `json:"check_station"`
	CreateAt                  *model1.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                  *model1.StringComparisonExp      `json:"create_by"`
	CurrentAddress            *model1.StringComparisonExp      `json:"current_address"`
	DriverName                *model1.StringComparisonExp      `json:"driver_name"`
	DriverSchoolID            *model1.StringComparisonExp      `json:"driver_school_id"`
	EndValidDate              *model1.TimestamptzComparisonExp `json:"end_valid_date"`
	FirstTimeReceivedDate     *model1.TimestamptzComparisonExp `json:"first_time_received_date"`
	HandleIDPhoto             *model1.StringComparisonExp      `json:"handle_id_photo"`
	ID                        *model1.BigintComparisonExp      `json:"id"`
	IDAddress                 *model1.StringComparisonExp      `json:"id_address"`
	IDNumber                  *model1.StringComparisonExp      `json:"id_number"`
	IdcardPhoto               *model1.StringComparisonExp      `json:"idcard_photo"`
	IsDelete                  *model1.BooleanComparisonExp     `json:"is_delete"`
	IsFormerDriver            *model1.BooleanComparisonExp     `json:"is_former_driver"`
	Nation                    *model1.StringComparisonExp      `json:"nation"`
	OperatorID                *model1.StringComparisonExp      `json:"operator_id"`
	PhoneNumber               *model1.StringComparisonExp      `json:"phone_number"`
	QualificationNumber       *model1.StringComparisonExp      `json:"qualification_number"`
	QuasiDrivingModels        *model1.IntComparisonExp         `json:"quasi_driving_models"`
	Remarks                   *model1.StringComparisonExp      `json:"remarks"`
	RideHailingDriverID       *model1.StringComparisonExp      `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *model1.StringComparisonExp      `json:"ride_hailing_driver_verify_id"`
	Sex                       *model1.IntComparisonExp         `json:"sex"`
	SignGov                   *model1.StringComparisonExp      `json:"sign_gov"`
	SignnaturePhoto           *model1.StringComparisonExp      `json:"signnature_photo"`
	StartValidDate            *model1.TimestamptzComparisonExp `json:"start_valid_date"`
	UpdateAt                  *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                  *model1.StringComparisonExp      `json:"update_by"`
	UpdateTimeIn              *model1.TimestamptzComparisonExp `json:"update_time_in"`
}

// input type for incrementing integer column in table "ride_hailing_driver"
type RideHailingDriverIncInput struct {
	CheckStation       *int   `json:"check_station"`
	ID                 *int64 `json:"id"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	Sex                *int   `json:"sex"`
}

// input type for inserting data into table "ride_hailing_driver"
type RideHailingDriverInsertInput struct {
	Birthday                  *time.Time `json:"birthday"`
	CheckStation              *int       `json:"check_station"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	CurrentAddress            *string    `json:"current_address"`
	DriverName                *string    `json:"driver_name"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	ID                        *int64     `json:"id"`
	IDAddress                 *string    `json:"id_address"`
	IDNumber                  *string    `json:"id_number"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	IsDelete                  *bool      `json:"is_delete"`
	IsFormerDriver            *bool      `json:"is_former_driver"`
	Nation                    *string    `json:"nation"`
	OperatorID                *string    `json:"operator_id"`
	PhoneNumber               *string    `json:"phone_number"`
	QualificationNumber       *string    `json:"qualification_number"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	Remarks                   *string    `json:"remarks"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	Sex                       *int       `json:"sex"`
	SignGov                   *string    `json:"sign_gov"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
}

// aggregate max on columns
type RideHailingDriverMaxFields struct {
	Birthday                  *time.Time `json:"birthday"`
	CheckStation              *int       `json:"check_station"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	CurrentAddress            *string    `json:"current_address"`
	DriverName                *string    `json:"driver_name"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	ID                        *int64     `json:"id"`
	IDAddress                 *string    `json:"id_address"`
	IDNumber                  *string    `json:"id_number"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	Nation                    *string    `json:"nation"`
	OperatorID                *string    `json:"operator_id"`
	PhoneNumber               *string    `json:"phone_number"`
	QualificationNumber       *string    `json:"qualification_number"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	Remarks                   *string    `json:"remarks"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	Sex                       *int       `json:"sex"`
	SignGov                   *string    `json:"sign_gov"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
}

// order by max() on columns of table "ride_hailing_driver"
type RideHailingDriverMaxOrderBy struct {
	Birthday                  *model1.OrderBy `json:"birthday"`
	CheckStation              *model1.OrderBy `json:"check_station"`
	CreateAt                  *model1.OrderBy `json:"create_at"`
	CreateBy                  *model1.OrderBy `json:"create_by"`
	CurrentAddress            *model1.OrderBy `json:"current_address"`
	DriverName                *model1.OrderBy `json:"driver_name"`
	DriverSchoolID            *model1.OrderBy `json:"driver_school_id"`
	EndValidDate              *model1.OrderBy `json:"end_valid_date"`
	FirstTimeReceivedDate     *model1.OrderBy `json:"first_time_received_date"`
	HandleIDPhoto             *model1.OrderBy `json:"handle_id_photo"`
	ID                        *model1.OrderBy `json:"id"`
	IDAddress                 *model1.OrderBy `json:"id_address"`
	IDNumber                  *model1.OrderBy `json:"id_number"`
	IdcardPhoto               *model1.OrderBy `json:"idcard_photo"`
	Nation                    *model1.OrderBy `json:"nation"`
	OperatorID                *model1.OrderBy `json:"operator_id"`
	PhoneNumber               *model1.OrderBy `json:"phone_number"`
	QualificationNumber       *model1.OrderBy `json:"qualification_number"`
	QuasiDrivingModels        *model1.OrderBy `json:"quasi_driving_models"`
	Remarks                   *model1.OrderBy `json:"remarks"`
	RideHailingDriverID       *model1.OrderBy `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *model1.OrderBy `json:"ride_hailing_driver_verify_id"`
	Sex                       *model1.OrderBy `json:"sex"`
	SignGov                   *model1.OrderBy `json:"sign_gov"`
	SignnaturePhoto           *model1.OrderBy `json:"signnature_photo"`
	StartValidDate            *model1.OrderBy `json:"start_valid_date"`
	UpdateAt                  *model1.OrderBy `json:"update_at"`
	UpdateBy                  *model1.OrderBy `json:"update_by"`
	UpdateTimeIn              *model1.OrderBy `json:"update_time_in"`
}

// aggregate min on columns
type RideHailingDriverMinFields struct {
	Birthday                  *time.Time `json:"birthday"`
	CheckStation              *int       `json:"check_station"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	CurrentAddress            *string    `json:"current_address"`
	DriverName                *string    `json:"driver_name"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	ID                        *int64     `json:"id"`
	IDAddress                 *string    `json:"id_address"`
	IDNumber                  *string    `json:"id_number"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	Nation                    *string    `json:"nation"`
	OperatorID                *string    `json:"operator_id"`
	PhoneNumber               *string    `json:"phone_number"`
	QualificationNumber       *string    `json:"qualification_number"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	Remarks                   *string    `json:"remarks"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	Sex                       *int       `json:"sex"`
	SignGov                   *string    `json:"sign_gov"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
}

// order by min() on columns of table "ride_hailing_driver"
type RideHailingDriverMinOrderBy struct {
	Birthday                  *model1.OrderBy `json:"birthday"`
	CheckStation              *model1.OrderBy `json:"check_station"`
	CreateAt                  *model1.OrderBy `json:"create_at"`
	CreateBy                  *model1.OrderBy `json:"create_by"`
	CurrentAddress            *model1.OrderBy `json:"current_address"`
	DriverName                *model1.OrderBy `json:"driver_name"`
	DriverSchoolID            *model1.OrderBy `json:"driver_school_id"`
	EndValidDate              *model1.OrderBy `json:"end_valid_date"`
	FirstTimeReceivedDate     *model1.OrderBy `json:"first_time_received_date"`
	HandleIDPhoto             *model1.OrderBy `json:"handle_id_photo"`
	ID                        *model1.OrderBy `json:"id"`
	IDAddress                 *model1.OrderBy `json:"id_address"`
	IDNumber                  *model1.OrderBy `json:"id_number"`
	IdcardPhoto               *model1.OrderBy `json:"idcard_photo"`
	Nation                    *model1.OrderBy `json:"nation"`
	OperatorID                *model1.OrderBy `json:"operator_id"`
	PhoneNumber               *model1.OrderBy `json:"phone_number"`
	QualificationNumber       *model1.OrderBy `json:"qualification_number"`
	QuasiDrivingModels        *model1.OrderBy `json:"quasi_driving_models"`
	Remarks                   *model1.OrderBy `json:"remarks"`
	RideHailingDriverID       *model1.OrderBy `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *model1.OrderBy `json:"ride_hailing_driver_verify_id"`
	Sex                       *model1.OrderBy `json:"sex"`
	SignGov                   *model1.OrderBy `json:"sign_gov"`
	SignnaturePhoto           *model1.OrderBy `json:"signnature_photo"`
	StartValidDate            *model1.OrderBy `json:"start_valid_date"`
	UpdateAt                  *model1.OrderBy `json:"update_at"`
	UpdateBy                  *model1.OrderBy `json:"update_by"`
	UpdateTimeIn              *model1.OrderBy `json:"update_time_in"`
}

// response of any mutation on the table "ride_hailing_driver"
type RideHailingDriverMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.RideHailingDriver `json:"returning"`
}

// input type for inserting object relation for remote table "ride_hailing_driver"
type RideHailingDriverObjRelInsertInput struct {
	Data       *RideHailingDriverInsertInput `json:"data"`
	OnConflict *RideHailingDriverOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "ride_hailing_driver"
type RideHailingDriverOnConflict struct {
	Constraint    RideHailingDriverConstraint     `json:"constraint"`
	UpdateColumns []RideHailingDriverUpdateColumn `json:"update_columns"`
	Where         *RideHailingDriverBoolExp       `json:"where"`
}

// ordering options when selecting data from "ride_hailing_driver"
type RideHailingDriverOrderBy struct {
	Birthday                  *model1.OrderBy `json:"birthday"`
	CheckStation              *model1.OrderBy `json:"check_station"`
	CreateAt                  *model1.OrderBy `json:"create_at"`
	CreateBy                  *model1.OrderBy `json:"create_by"`
	CurrentAddress            *model1.OrderBy `json:"current_address"`
	DriverName                *model1.OrderBy `json:"driver_name"`
	DriverSchoolID            *model1.OrderBy `json:"driver_school_id"`
	EndValidDate              *model1.OrderBy `json:"end_valid_date"`
	FirstTimeReceivedDate     *model1.OrderBy `json:"first_time_received_date"`
	HandleIDPhoto             *model1.OrderBy `json:"handle_id_photo"`
	ID                        *model1.OrderBy `json:"id"`
	IDAddress                 *model1.OrderBy `json:"id_address"`
	IDNumber                  *model1.OrderBy `json:"id_number"`
	IdcardPhoto               *model1.OrderBy `json:"idcard_photo"`
	IsDelete                  *model1.OrderBy `json:"is_delete"`
	IsFormerDriver            *model1.OrderBy `json:"is_former_driver"`
	Nation                    *model1.OrderBy `json:"nation"`
	OperatorID                *model1.OrderBy `json:"operator_id"`
	PhoneNumber               *model1.OrderBy `json:"phone_number"`
	QualificationNumber       *model1.OrderBy `json:"qualification_number"`
	QuasiDrivingModels        *model1.OrderBy `json:"quasi_driving_models"`
	Remarks                   *model1.OrderBy `json:"remarks"`
	RideHailingDriverID       *model1.OrderBy `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *model1.OrderBy `json:"ride_hailing_driver_verify_id"`
	Sex                       *model1.OrderBy `json:"sex"`
	SignGov                   *model1.OrderBy `json:"sign_gov"`
	SignnaturePhoto           *model1.OrderBy `json:"signnature_photo"`
	StartValidDate            *model1.OrderBy `json:"start_valid_date"`
	UpdateAt                  *model1.OrderBy `json:"update_at"`
	UpdateBy                  *model1.OrderBy `json:"update_by"`
	UpdateTimeIn              *model1.OrderBy `json:"update_time_in"`
}

// primary key columns input for table: "ride_hailing_driver"
type RideHailingDriverPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "ride_hailing_driver"
type RideHailingDriverSetInput struct {
	Birthday                  *time.Time `json:"birthday"`
	CheckStation              *int       `json:"check_station"`
	CreateAt                  *time.Time `json:"create_at"`
	CreateBy                  *string    `json:"create_by"`
	CurrentAddress            *string    `json:"current_address"`
	DriverName                *string    `json:"driver_name"`
	DriverSchoolID            *string    `json:"driver_school_id"`
	EndValidDate              *time.Time `json:"end_valid_date"`
	FirstTimeReceivedDate     *time.Time `json:"first_time_received_date"`
	HandleIDPhoto             *string    `json:"handle_id_photo"`
	ID                        *int64     `json:"id"`
	IDAddress                 *string    `json:"id_address"`
	IDNumber                  *string    `json:"id_number"`
	IdcardPhoto               *string    `json:"idcard_photo"`
	IsDelete                  *bool      `json:"is_delete"`
	IsFormerDriver            *bool      `json:"is_former_driver"`
	Nation                    *string    `json:"nation"`
	OperatorID                *string    `json:"operator_id"`
	PhoneNumber               *string    `json:"phone_number"`
	QualificationNumber       *string    `json:"qualification_number"`
	QuasiDrivingModels        *int       `json:"quasi_driving_models"`
	Remarks                   *string    `json:"remarks"`
	RideHailingDriverID       *string    `json:"ride_hailing_driver_id"`
	RideHailingDriverVerifyID *string    `json:"ride_hailing_driver_verify_id"`
	Sex                       *int       `json:"sex"`
	SignGov                   *string    `json:"sign_gov"`
	SignnaturePhoto           *string    `json:"signnature_photo"`
	StartValidDate            *time.Time `json:"start_valid_date"`
	UpdateAt                  *time.Time `json:"update_at"`
	UpdateBy                  *string    `json:"update_by"`
	UpdateTimeIn              *time.Time `json:"update_time_in"`
}

// aggregate stddev on columns
type RideHailingDriverStddevFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by stddev() on columns of table "ride_hailing_driver"
type RideHailingDriverStddevOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregate stddev_pop on columns
type RideHailingDriverStddevPopFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by stddev_pop() on columns of table "ride_hailing_driver"
type RideHailingDriverStddevPopOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregate stddev_samp on columns
type RideHailingDriverStddevSampFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by stddev_samp() on columns of table "ride_hailing_driver"
type RideHailingDriverStddevSampOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregate sum on columns
type RideHailingDriverSumFields struct {
	CheckStation       *int   `json:"check_station"`
	ID                 *int64 `json:"id"`
	QuasiDrivingModels *int   `json:"quasi_driving_models"`
	Sex                *int   `json:"sex"`
}

// order by sum() on columns of table "ride_hailing_driver"
type RideHailingDriverSumOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregate var_pop on columns
type RideHailingDriverVarPopFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by var_pop() on columns of table "ride_hailing_driver"
type RideHailingDriverVarPopOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregate var_samp on columns
type RideHailingDriverVarSampFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by var_samp() on columns of table "ride_hailing_driver"
type RideHailingDriverVarSampOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregate variance on columns
type RideHailingDriverVarianceFields struct {
	CheckStation       *float64 `json:"check_station"`
	ID                 *float64 `json:"id"`
	QuasiDrivingModels *float64 `json:"quasi_driving_models"`
	Sex                *float64 `json:"sex"`
}

// order by variance() on columns of table "ride_hailing_driver"
type RideHailingDriverVarianceOrderBy struct {
	CheckStation       *model1.OrderBy `json:"check_station"`
	ID                 *model1.OrderBy `json:"id"`
	QuasiDrivingModels *model1.OrderBy `json:"quasi_driving_models"`
	Sex                *model1.OrderBy `json:"sex"`
}

// aggregated selection of "ride_hailing_driver_verify"
type RideHailingDriverVerifyAggregate struct {
	Aggregate *RideHailingDriverVerifyAggregateFields `json:"aggregate"`
	Nodes     []*model.RideHailingDriverVerify        `json:"nodes"`
}

// aggregate fields of "ride_hailing_driver_verify"
type RideHailingDriverVerifyAggregateFields struct {
	Avg        *RideHailingDriverVerifyAvgFields        `json:"avg"`
	Count      *int                                     `json:"count"`
	Max        *RideHailingDriverVerifyMaxFields        `json:"max"`
	Min        *RideHailingDriverVerifyMinFields        `json:"min"`
	Stddev     *RideHailingDriverVerifyStddevFields     `json:"stddev"`
	StddevPop  *RideHailingDriverVerifyStddevPopFields  `json:"stddev_pop"`
	StddevSamp *RideHailingDriverVerifyStddevSampFields `json:"stddev_samp"`
	Sum        *RideHailingDriverVerifySumFields        `json:"sum"`
	VarPop     *RideHailingDriverVerifyVarPopFields     `json:"var_pop"`
	VarSamp    *RideHailingDriverVerifyVarSampFields    `json:"var_samp"`
	Variance   *RideHailingDriverVerifyVarianceFields   `json:"variance"`
}

// order by aggregate values of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyAggregateOrderBy struct {
	Avg        *RideHailingDriverVerifyAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy                           `json:"count"`
	Max        *RideHailingDriverVerifyMaxOrderBy        `json:"max"`
	Min        *RideHailingDriverVerifyMinOrderBy        `json:"min"`
	Stddev     *RideHailingDriverVerifyStddevOrderBy     `json:"stddev"`
	StddevPop  *RideHailingDriverVerifyStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *RideHailingDriverVerifyStddevSampOrderBy `json:"stddev_samp"`
	Sum        *RideHailingDriverVerifySumOrderBy        `json:"sum"`
	VarPop     *RideHailingDriverVerifyVarPopOrderBy     `json:"var_pop"`
	VarSamp    *RideHailingDriverVerifyVarSampOrderBy    `json:"var_samp"`
	Variance   *RideHailingDriverVerifyVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "ride_hailing_driver_verify"
type RideHailingDriverVerifyArrRelInsertInput struct {
	Data       []*RideHailingDriverVerifyInsertInput `json:"data"`
	OnConflict *RideHailingDriverVerifyOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type RideHailingDriverVerifyAvgFields struct {
	ID *float64 `json:"id"`
}

// order by avg() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyAvgOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// Boolean expression to filter rows from the table "ride_hailing_driver_verify". All fields are combined with a logical 'AND'.
type RideHailingDriverVerifyBoolExp struct {
	And                              []*RideHailingDriverVerifyBoolExp `json:"_and"`
	Not                              *RideHailingDriverVerifyBoolExp   `json:"_not"`
	Or                               []*RideHailingDriverVerifyBoolExp `json:"_or"`
	CreateAt                         *model1.TimestamptzComparisonExp  `json:"create_at"`
	CreateBy                         *model1.StringComparisonExp       `json:"create_by"`
	DeleteAt                         *model1.TimestamptzComparisonExp  `json:"delete_at"`
	DeleteBy                         *model1.StringComparisonExp       `json:"delete_by"`
	DrivingExamTime                  *model1.TimestamptzComparisonExp  `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *model1.TimestamptzComparisonExp  `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *model1.StringComparisonExp       `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *model1.TimestamptzComparisonExp  `json:"drug_history_examine_time"`
	DrugHistoryRemark                *model1.StringComparisonExp       `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *model1.TimestamptzComparisonExp  `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *model1.StringComparisonExp       `json:"drunk_drug_driving_remark"`
	ID                               *model1.BigintComparisonExp       `json:"id"`
	IsDelete                         *model1.BooleanComparisonExp      `json:"is_delete"`
	IsDrugHistory                    *model1.BooleanComparisonExp      `json:"is_drug_history"`
	IsDrunkDrugDriving               *model1.BooleanComparisonExp      `json:"is_drunk_drug_driving"`
	IsPassDrivingExam                *model1.BooleanComparisonExp      `json:"is_pass_driving_exam"`
	IsThreeCycleTwelve               *model1.BooleanComparisonExp      `json:"is_three_cycle_twelve"`
	IsThreeYearsDrivingExperience    *model1.BooleanComparisonExp      `json:"is_three_years_driving_experience"`
	IsTrafficAccidentEscapeRecord    *model1.BooleanComparisonExp      `json:"is_traffic_accident_escape_record"`
	IsViolentCrime                   *model1.BooleanComparisonExp      `json:"is_violent_crime"`
	RideHailingDriverVerifyID        *model1.StringComparisonExp       `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *model1.TimestamptzComparisonExp  `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *model1.StringComparisonExp       `json:"traffic_accident_escape_remark"`
	UpdateAt                         *model1.TimestamptzComparisonExp  `json:"update_at"`
	UpdateBy                         *model1.StringComparisonExp       `json:"update_by"`
	ViolentCrimeExamineTime          *model1.TimestamptzComparisonExp  `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *model1.StringComparisonExp       `json:"violent_crime_remark"`
}

// input type for incrementing integer column in table "ride_hailing_driver_verify"
type RideHailingDriverVerifyIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "ride_hailing_driver_verify"
type RideHailingDriverVerifyInsertInput struct {
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	ID                               *int64     `json:"id"`
	IsDelete                         *bool      `json:"is_delete"`
	IsDrugHistory                    *bool      `json:"is_drug_history"`
	IsDrunkDrugDriving               *bool      `json:"is_drunk_drug_driving"`
	IsPassDrivingExam                *bool      `json:"is_pass_driving_exam"`
	IsThreeCycleTwelve               *bool      `json:"is_three_cycle_twelve"`
	IsThreeYearsDrivingExperience    *bool      `json:"is_three_years_driving_experience"`
	IsTrafficAccidentEscapeRecord    *bool      `json:"is_traffic_accident_escape_record"`
	IsViolentCrime                   *bool      `json:"is_violent_crime"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
}

// aggregate max on columns
type RideHailingDriverVerifyMaxFields struct {
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	ID                               *int64     `json:"id"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
}

// order by max() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyMaxOrderBy struct {
	CreateAt                         *model1.OrderBy `json:"create_at"`
	CreateBy                         *model1.OrderBy `json:"create_by"`
	DeleteAt                         *model1.OrderBy `json:"delete_at"`
	DeleteBy                         *model1.OrderBy `json:"delete_by"`
	DrivingExamTime                  *model1.OrderBy `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *model1.OrderBy `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *model1.OrderBy `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *model1.OrderBy `json:"drug_history_examine_time"`
	DrugHistoryRemark                *model1.OrderBy `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *model1.OrderBy `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *model1.OrderBy `json:"drunk_drug_driving_remark"`
	ID                               *model1.OrderBy `json:"id"`
	RideHailingDriverVerifyID        *model1.OrderBy `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *model1.OrderBy `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *model1.OrderBy `json:"traffic_accident_escape_remark"`
	UpdateAt                         *model1.OrderBy `json:"update_at"`
	UpdateBy                         *model1.OrderBy `json:"update_by"`
	ViolentCrimeExamineTime          *model1.OrderBy `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *model1.OrderBy `json:"violent_crime_remark"`
}

// aggregate min on columns
type RideHailingDriverVerifyMinFields struct {
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	ID                               *int64     `json:"id"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
}

// order by min() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyMinOrderBy struct {
	CreateAt                         *model1.OrderBy `json:"create_at"`
	CreateBy                         *model1.OrderBy `json:"create_by"`
	DeleteAt                         *model1.OrderBy `json:"delete_at"`
	DeleteBy                         *model1.OrderBy `json:"delete_by"`
	DrivingExamTime                  *model1.OrderBy `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *model1.OrderBy `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *model1.OrderBy `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *model1.OrderBy `json:"drug_history_examine_time"`
	DrugHistoryRemark                *model1.OrderBy `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *model1.OrderBy `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *model1.OrderBy `json:"drunk_drug_driving_remark"`
	ID                               *model1.OrderBy `json:"id"`
	RideHailingDriverVerifyID        *model1.OrderBy `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *model1.OrderBy `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *model1.OrderBy `json:"traffic_accident_escape_remark"`
	UpdateAt                         *model1.OrderBy `json:"update_at"`
	UpdateBy                         *model1.OrderBy `json:"update_by"`
	ViolentCrimeExamineTime          *model1.OrderBy `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *model1.OrderBy `json:"violent_crime_remark"`
}

// response of any mutation on the table "ride_hailing_driver_verify"
type RideHailingDriverVerifyMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.RideHailingDriverVerify `json:"returning"`
}

// input type for inserting object relation for remote table "ride_hailing_driver_verify"
type RideHailingDriverVerifyObjRelInsertInput struct {
	Data       *RideHailingDriverVerifyInsertInput `json:"data"`
	OnConflict *RideHailingDriverVerifyOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "ride_hailing_driver_verify"
type RideHailingDriverVerifyOnConflict struct {
	Constraint    RideHailingDriverVerifyConstraint     `json:"constraint"`
	UpdateColumns []RideHailingDriverVerifyUpdateColumn `json:"update_columns"`
	Where         *RideHailingDriverVerifyBoolExp       `json:"where"`
}

// ordering options when selecting data from "ride_hailing_driver_verify"
type RideHailingDriverVerifyOrderBy struct {
	CreateAt                         *model1.OrderBy `json:"create_at"`
	CreateBy                         *model1.OrderBy `json:"create_by"`
	DeleteAt                         *model1.OrderBy `json:"delete_at"`
	DeleteBy                         *model1.OrderBy `json:"delete_by"`
	DrivingExamTime                  *model1.OrderBy `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *model1.OrderBy `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *model1.OrderBy `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *model1.OrderBy `json:"drug_history_examine_time"`
	DrugHistoryRemark                *model1.OrderBy `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *model1.OrderBy `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *model1.OrderBy `json:"drunk_drug_driving_remark"`
	ID                               *model1.OrderBy `json:"id"`
	IsDelete                         *model1.OrderBy `json:"is_delete"`
	IsDrugHistory                    *model1.OrderBy `json:"is_drug_history"`
	IsDrunkDrugDriving               *model1.OrderBy `json:"is_drunk_drug_driving"`
	IsPassDrivingExam                *model1.OrderBy `json:"is_pass_driving_exam"`
	IsThreeCycleTwelve               *model1.OrderBy `json:"is_three_cycle_twelve"`
	IsThreeYearsDrivingExperience    *model1.OrderBy `json:"is_three_years_driving_experience"`
	IsTrafficAccidentEscapeRecord    *model1.OrderBy `json:"is_traffic_accident_escape_record"`
	IsViolentCrime                   *model1.OrderBy `json:"is_violent_crime"`
	RideHailingDriverVerifyID        *model1.OrderBy `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *model1.OrderBy `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *model1.OrderBy `json:"traffic_accident_escape_remark"`
	UpdateAt                         *model1.OrderBy `json:"update_at"`
	UpdateBy                         *model1.OrderBy `json:"update_by"`
	ViolentCrimeExamineTime          *model1.OrderBy `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *model1.OrderBy `json:"violent_crime_remark"`
}

// primary key columns input for table: "ride_hailing_driver_verify"
type RideHailingDriverVerifyPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "ride_hailing_driver_verify"
type RideHailingDriverVerifySetInput struct {
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DrivingExamTime                  *time.Time `json:"driving_exam_time"`
	DrivingExperienceExamineTime     *time.Time `json:"driving_experience_examine_time"`
	DrivingExperienceRemark          *string    `json:"driving_experience_remark"`
	DrugHistoryExamineTime           *time.Time `json:"drug_history_examine_time"`
	DrugHistoryRemark                *string    `json:"drug_history_remark"`
	DrunkDrugDrivingExamineTime      *time.Time `json:"drunk_drug_driving_examine_time"`
	DrunkDrugDrivingRemark           *string    `json:"drunk_drug_driving_remark"`
	ID                               *int64     `json:"id"`
	IsDelete                         *bool      `json:"is_delete"`
	IsDrugHistory                    *bool      `json:"is_drug_history"`
	IsDrunkDrugDriving               *bool      `json:"is_drunk_drug_driving"`
	IsPassDrivingExam                *bool      `json:"is_pass_driving_exam"`
	IsThreeCycleTwelve               *bool      `json:"is_three_cycle_twelve"`
	IsThreeYearsDrivingExperience    *bool      `json:"is_three_years_driving_experience"`
	IsTrafficAccidentEscapeRecord    *bool      `json:"is_traffic_accident_escape_record"`
	IsViolentCrime                   *bool      `json:"is_violent_crime"`
	RideHailingDriverVerifyID        *string    `json:"ride_hailing_driver_verify_id"`
	TrafficAccidentEscapeExamineTime *time.Time `json:"traffic_accident_escape_examine_time"`
	TrafficAccidentEscapeRemark      *string    `json:"traffic_accident_escape_remark"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	ViolentCrimeExamineTime          *time.Time `json:"violent_crime_examine_time"`
	ViolentCrimeRemark               *string    `json:"violent_crime_remark"`
}

// aggregate stddev on columns
type RideHailingDriverVerifyStddevFields struct {
	ID *float64 `json:"id"`
}

// order by stddev() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyStddevOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// aggregate stddev_pop on columns
type RideHailingDriverVerifyStddevPopFields struct {
	ID *float64 `json:"id"`
}

// order by stddev_pop() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyStddevPopOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// aggregate stddev_samp on columns
type RideHailingDriverVerifyStddevSampFields struct {
	ID *float64 `json:"id"`
}

// order by stddev_samp() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyStddevSampOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// aggregate sum on columns
type RideHailingDriverVerifySumFields struct {
	ID *int64 `json:"id"`
}

// order by sum() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifySumOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// aggregate var_pop on columns
type RideHailingDriverVerifyVarPopFields struct {
	ID *float64 `json:"id"`
}

// order by var_pop() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyVarPopOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// aggregate var_samp on columns
type RideHailingDriverVerifyVarSampFields struct {
	ID *float64 `json:"id"`
}

// order by var_samp() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyVarSampOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// aggregate variance on columns
type RideHailingDriverVerifyVarianceFields struct {
	ID *float64 `json:"id"`
}

// order by variance() on columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyVarianceOrderBy struct {
	ID *model1.OrderBy `json:"id"`
}

// unique or primary key constraints on table "ride_hailing_driver"
type RideHailingDriverConstraint string

const (
	// unique or primary key constraint
	RideHailingDriverConstraintRideHailingDriverPkey RideHailingDriverConstraint = "ride_hailing_driver_pkey"
)

var AllRideHailingDriverConstraint = []RideHailingDriverConstraint{
	RideHailingDriverConstraintRideHailingDriverPkey,
}

func (e RideHailingDriverConstraint) IsValid() bool {
	switch e {
	case RideHailingDriverConstraintRideHailingDriverPkey:
		return true
	}
	return false
}

func (e RideHailingDriverConstraint) String() string {
	return string(e)
}

func (e *RideHailingDriverConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ride_hailing_driver_constraint", str)
	}
	return nil
}

func (e RideHailingDriverConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "ride_hailing_driver"
type RideHailingDriverSelectColumn string

const (
	// column name
	RideHailingDriverSelectColumnBirthday RideHailingDriverSelectColumn = "birthday"
	// column name
	RideHailingDriverSelectColumnCheckStation RideHailingDriverSelectColumn = "check_station"
	// column name
	RideHailingDriverSelectColumnCreateAt RideHailingDriverSelectColumn = "create_at"
	// column name
	RideHailingDriverSelectColumnCreateBy RideHailingDriverSelectColumn = "create_by"
	// column name
	RideHailingDriverSelectColumnCurrentAddress RideHailingDriverSelectColumn = "current_address"
	// column name
	RideHailingDriverSelectColumnDriverName RideHailingDriverSelectColumn = "driver_name"
	// column name
	RideHailingDriverSelectColumnDriverSchoolID RideHailingDriverSelectColumn = "driver_school_id"
	// column name
	RideHailingDriverSelectColumnEndValidDate RideHailingDriverSelectColumn = "end_valid_date"
	// column name
	RideHailingDriverSelectColumnFirstTimeReceivedDate RideHailingDriverSelectColumn = "first_time_received_date"
	// column name
	RideHailingDriverSelectColumnHandleIDPhoto RideHailingDriverSelectColumn = "handle_id_photo"
	// column name
	RideHailingDriverSelectColumnID RideHailingDriverSelectColumn = "id"
	// column name
	RideHailingDriverSelectColumnIDAddress RideHailingDriverSelectColumn = "id_address"
	// column name
	RideHailingDriverSelectColumnIDNumber RideHailingDriverSelectColumn = "id_number"
	// column name
	RideHailingDriverSelectColumnIdcardPhoto RideHailingDriverSelectColumn = "idcard_photo"
	// column name
	RideHailingDriverSelectColumnIsDelete RideHailingDriverSelectColumn = "is_delete"
	// column name
	RideHailingDriverSelectColumnIsFormerDriver RideHailingDriverSelectColumn = "is_former_driver"
	// column name
	RideHailingDriverSelectColumnNation RideHailingDriverSelectColumn = "nation"
	// column name
	RideHailingDriverSelectColumnOperatorID RideHailingDriverSelectColumn = "operator_id"
	// column name
	RideHailingDriverSelectColumnPhoneNumber RideHailingDriverSelectColumn = "phone_number"
	// column name
	RideHailingDriverSelectColumnQualificationNumber RideHailingDriverSelectColumn = "qualification_number"
	// column name
	RideHailingDriverSelectColumnQuasiDrivingModels RideHailingDriverSelectColumn = "quasi_driving_models"
	// column name
	RideHailingDriverSelectColumnRemarks RideHailingDriverSelectColumn = "remarks"
	// column name
	RideHailingDriverSelectColumnRideHailingDriverID RideHailingDriverSelectColumn = "ride_hailing_driver_id"
	// column name
	RideHailingDriverSelectColumnRideHailingDriverVerifyID RideHailingDriverSelectColumn = "ride_hailing_driver_verify_id"
	// column name
	RideHailingDriverSelectColumnSex RideHailingDriverSelectColumn = "sex"
	// column name
	RideHailingDriverSelectColumnSignGov RideHailingDriverSelectColumn = "sign_gov"
	// column name
	RideHailingDriverSelectColumnSignnaturePhoto RideHailingDriverSelectColumn = "signnature_photo"
	// column name
	RideHailingDriverSelectColumnStartValidDate RideHailingDriverSelectColumn = "start_valid_date"
	// column name
	RideHailingDriverSelectColumnUpdateAt RideHailingDriverSelectColumn = "update_at"
	// column name
	RideHailingDriverSelectColumnUpdateBy RideHailingDriverSelectColumn = "update_by"
	// column name
	RideHailingDriverSelectColumnUpdateTimeIn RideHailingDriverSelectColumn = "update_time_in"
)

var AllRideHailingDriverSelectColumn = []RideHailingDriverSelectColumn{
	RideHailingDriverSelectColumnBirthday,
	RideHailingDriverSelectColumnCheckStation,
	RideHailingDriverSelectColumnCreateAt,
	RideHailingDriverSelectColumnCreateBy,
	RideHailingDriverSelectColumnCurrentAddress,
	RideHailingDriverSelectColumnDriverName,
	RideHailingDriverSelectColumnDriverSchoolID,
	RideHailingDriverSelectColumnEndValidDate,
	RideHailingDriverSelectColumnFirstTimeReceivedDate,
	RideHailingDriverSelectColumnHandleIDPhoto,
	RideHailingDriverSelectColumnID,
	RideHailingDriverSelectColumnIDAddress,
	RideHailingDriverSelectColumnIDNumber,
	RideHailingDriverSelectColumnIdcardPhoto,
	RideHailingDriverSelectColumnIsDelete,
	RideHailingDriverSelectColumnIsFormerDriver,
	RideHailingDriverSelectColumnNation,
	RideHailingDriverSelectColumnOperatorID,
	RideHailingDriverSelectColumnPhoneNumber,
	RideHailingDriverSelectColumnQualificationNumber,
	RideHailingDriverSelectColumnQuasiDrivingModels,
	RideHailingDriverSelectColumnRemarks,
	RideHailingDriverSelectColumnRideHailingDriverID,
	RideHailingDriverSelectColumnRideHailingDriverVerifyID,
	RideHailingDriverSelectColumnSex,
	RideHailingDriverSelectColumnSignGov,
	RideHailingDriverSelectColumnSignnaturePhoto,
	RideHailingDriverSelectColumnStartValidDate,
	RideHailingDriverSelectColumnUpdateAt,
	RideHailingDriverSelectColumnUpdateBy,
	RideHailingDriverSelectColumnUpdateTimeIn,
}

func (e RideHailingDriverSelectColumn) IsValid() bool {
	switch e {
	case RideHailingDriverSelectColumnBirthday, RideHailingDriverSelectColumnCheckStation, RideHailingDriverSelectColumnCreateAt, RideHailingDriverSelectColumnCreateBy, RideHailingDriverSelectColumnCurrentAddress, RideHailingDriverSelectColumnDriverName, RideHailingDriverSelectColumnDriverSchoolID, RideHailingDriverSelectColumnEndValidDate, RideHailingDriverSelectColumnFirstTimeReceivedDate, RideHailingDriverSelectColumnHandleIDPhoto, RideHailingDriverSelectColumnID, RideHailingDriverSelectColumnIDAddress, RideHailingDriverSelectColumnIDNumber, RideHailingDriverSelectColumnIdcardPhoto, RideHailingDriverSelectColumnIsDelete, RideHailingDriverSelectColumnIsFormerDriver, RideHailingDriverSelectColumnNation, RideHailingDriverSelectColumnOperatorID, RideHailingDriverSelectColumnPhoneNumber, RideHailingDriverSelectColumnQualificationNumber, RideHailingDriverSelectColumnQuasiDrivingModels, RideHailingDriverSelectColumnRemarks, RideHailingDriverSelectColumnRideHailingDriverID, RideHailingDriverSelectColumnRideHailingDriverVerifyID, RideHailingDriverSelectColumnSex, RideHailingDriverSelectColumnSignGov, RideHailingDriverSelectColumnSignnaturePhoto, RideHailingDriverSelectColumnStartValidDate, RideHailingDriverSelectColumnUpdateAt, RideHailingDriverSelectColumnUpdateBy, RideHailingDriverSelectColumnUpdateTimeIn:
		return true
	}
	return false
}

func (e RideHailingDriverSelectColumn) String() string {
	return string(e)
}

func (e *RideHailingDriverSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ride_hailing_driver_select_column", str)
	}
	return nil
}

func (e RideHailingDriverSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "ride_hailing_driver"
type RideHailingDriverUpdateColumn string

const (
	// column name
	RideHailingDriverUpdateColumnBirthday RideHailingDriverUpdateColumn = "birthday"
	// column name
	RideHailingDriverUpdateColumnCheckStation RideHailingDriverUpdateColumn = "check_station"
	// column name
	RideHailingDriverUpdateColumnCreateAt RideHailingDriverUpdateColumn = "create_at"
	// column name
	RideHailingDriverUpdateColumnCreateBy RideHailingDriverUpdateColumn = "create_by"
	// column name
	RideHailingDriverUpdateColumnCurrentAddress RideHailingDriverUpdateColumn = "current_address"
	// column name
	RideHailingDriverUpdateColumnDriverName RideHailingDriverUpdateColumn = "driver_name"
	// column name
	RideHailingDriverUpdateColumnDriverSchoolID RideHailingDriverUpdateColumn = "driver_school_id"
	// column name
	RideHailingDriverUpdateColumnEndValidDate RideHailingDriverUpdateColumn = "end_valid_date"
	// column name
	RideHailingDriverUpdateColumnFirstTimeReceivedDate RideHailingDriverUpdateColumn = "first_time_received_date"
	// column name
	RideHailingDriverUpdateColumnHandleIDPhoto RideHailingDriverUpdateColumn = "handle_id_photo"
	// column name
	RideHailingDriverUpdateColumnID RideHailingDriverUpdateColumn = "id"
	// column name
	RideHailingDriverUpdateColumnIDAddress RideHailingDriverUpdateColumn = "id_address"
	// column name
	RideHailingDriverUpdateColumnIDNumber RideHailingDriverUpdateColumn = "id_number"
	// column name
	RideHailingDriverUpdateColumnIdcardPhoto RideHailingDriverUpdateColumn = "idcard_photo"
	// column name
	RideHailingDriverUpdateColumnIsDelete RideHailingDriverUpdateColumn = "is_delete"
	// column name
	RideHailingDriverUpdateColumnIsFormerDriver RideHailingDriverUpdateColumn = "is_former_driver"
	// column name
	RideHailingDriverUpdateColumnNation RideHailingDriverUpdateColumn = "nation"
	// column name
	RideHailingDriverUpdateColumnOperatorID RideHailingDriverUpdateColumn = "operator_id"
	// column name
	RideHailingDriverUpdateColumnPhoneNumber RideHailingDriverUpdateColumn = "phone_number"
	// column name
	RideHailingDriverUpdateColumnQualificationNumber RideHailingDriverUpdateColumn = "qualification_number"
	// column name
	RideHailingDriverUpdateColumnQuasiDrivingModels RideHailingDriverUpdateColumn = "quasi_driving_models"
	// column name
	RideHailingDriverUpdateColumnRemarks RideHailingDriverUpdateColumn = "remarks"
	// column name
	RideHailingDriverUpdateColumnRideHailingDriverID RideHailingDriverUpdateColumn = "ride_hailing_driver_id"
	// column name
	RideHailingDriverUpdateColumnRideHailingDriverVerifyID RideHailingDriverUpdateColumn = "ride_hailing_driver_verify_id"
	// column name
	RideHailingDriverUpdateColumnSex RideHailingDriverUpdateColumn = "sex"
	// column name
	RideHailingDriverUpdateColumnSignGov RideHailingDriverUpdateColumn = "sign_gov"
	// column name
	RideHailingDriverUpdateColumnSignnaturePhoto RideHailingDriverUpdateColumn = "signnature_photo"
	// column name
	RideHailingDriverUpdateColumnStartValidDate RideHailingDriverUpdateColumn = "start_valid_date"
	// column name
	RideHailingDriverUpdateColumnUpdateAt RideHailingDriverUpdateColumn = "update_at"
	// column name
	RideHailingDriverUpdateColumnUpdateBy RideHailingDriverUpdateColumn = "update_by"
	// column name
	RideHailingDriverUpdateColumnUpdateTimeIn RideHailingDriverUpdateColumn = "update_time_in"
)

var AllRideHailingDriverUpdateColumn = []RideHailingDriverUpdateColumn{
	RideHailingDriverUpdateColumnBirthday,
	RideHailingDriverUpdateColumnCheckStation,
	RideHailingDriverUpdateColumnCreateAt,
	RideHailingDriverUpdateColumnCreateBy,
	RideHailingDriverUpdateColumnCurrentAddress,
	RideHailingDriverUpdateColumnDriverName,
	RideHailingDriverUpdateColumnDriverSchoolID,
	RideHailingDriverUpdateColumnEndValidDate,
	RideHailingDriverUpdateColumnFirstTimeReceivedDate,
	RideHailingDriverUpdateColumnHandleIDPhoto,
	RideHailingDriverUpdateColumnID,
	RideHailingDriverUpdateColumnIDAddress,
	RideHailingDriverUpdateColumnIDNumber,
	RideHailingDriverUpdateColumnIdcardPhoto,
	RideHailingDriverUpdateColumnIsDelete,
	RideHailingDriverUpdateColumnIsFormerDriver,
	RideHailingDriverUpdateColumnNation,
	RideHailingDriverUpdateColumnOperatorID,
	RideHailingDriverUpdateColumnPhoneNumber,
	RideHailingDriverUpdateColumnQualificationNumber,
	RideHailingDriverUpdateColumnQuasiDrivingModels,
	RideHailingDriverUpdateColumnRemarks,
	RideHailingDriverUpdateColumnRideHailingDriverID,
	RideHailingDriverUpdateColumnRideHailingDriverVerifyID,
	RideHailingDriverUpdateColumnSex,
	RideHailingDriverUpdateColumnSignGov,
	RideHailingDriverUpdateColumnSignnaturePhoto,
	RideHailingDriverUpdateColumnStartValidDate,
	RideHailingDriverUpdateColumnUpdateAt,
	RideHailingDriverUpdateColumnUpdateBy,
	RideHailingDriverUpdateColumnUpdateTimeIn,
}

func (e RideHailingDriverUpdateColumn) IsValid() bool {
	switch e {
	case RideHailingDriverUpdateColumnBirthday, RideHailingDriverUpdateColumnCheckStation, RideHailingDriverUpdateColumnCreateAt, RideHailingDriverUpdateColumnCreateBy, RideHailingDriverUpdateColumnCurrentAddress, RideHailingDriverUpdateColumnDriverName, RideHailingDriverUpdateColumnDriverSchoolID, RideHailingDriverUpdateColumnEndValidDate, RideHailingDriverUpdateColumnFirstTimeReceivedDate, RideHailingDriverUpdateColumnHandleIDPhoto, RideHailingDriverUpdateColumnID, RideHailingDriverUpdateColumnIDAddress, RideHailingDriverUpdateColumnIDNumber, RideHailingDriverUpdateColumnIdcardPhoto, RideHailingDriverUpdateColumnIsDelete, RideHailingDriverUpdateColumnIsFormerDriver, RideHailingDriverUpdateColumnNation, RideHailingDriverUpdateColumnOperatorID, RideHailingDriverUpdateColumnPhoneNumber, RideHailingDriverUpdateColumnQualificationNumber, RideHailingDriverUpdateColumnQuasiDrivingModels, RideHailingDriverUpdateColumnRemarks, RideHailingDriverUpdateColumnRideHailingDriverID, RideHailingDriverUpdateColumnRideHailingDriverVerifyID, RideHailingDriverUpdateColumnSex, RideHailingDriverUpdateColumnSignGov, RideHailingDriverUpdateColumnSignnaturePhoto, RideHailingDriverUpdateColumnStartValidDate, RideHailingDriverUpdateColumnUpdateAt, RideHailingDriverUpdateColumnUpdateBy, RideHailingDriverUpdateColumnUpdateTimeIn:
		return true
	}
	return false
}

func (e RideHailingDriverUpdateColumn) String() string {
	return string(e)
}

func (e *RideHailingDriverUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ride_hailing_driver_update_column", str)
	}
	return nil
}

func (e RideHailingDriverUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "ride_hailing_driver_verify"
type RideHailingDriverVerifyConstraint string

const (
	// unique or primary key constraint
	RideHailingDriverVerifyConstraintRideHailingDriverVerifyPkey RideHailingDriverVerifyConstraint = "ride_hailing_driver_verify_pkey"
)

var AllRideHailingDriverVerifyConstraint = []RideHailingDriverVerifyConstraint{
	RideHailingDriverVerifyConstraintRideHailingDriverVerifyPkey,
}

func (e RideHailingDriverVerifyConstraint) IsValid() bool {
	switch e {
	case RideHailingDriverVerifyConstraintRideHailingDriverVerifyPkey:
		return true
	}
	return false
}

func (e RideHailingDriverVerifyConstraint) String() string {
	return string(e)
}

func (e *RideHailingDriverVerifyConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverVerifyConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ride_hailing_driver_verify_constraint", str)
	}
	return nil
}

func (e RideHailingDriverVerifyConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifySelectColumn string

const (
	// column name
	RideHailingDriverVerifySelectColumnCreateAt RideHailingDriverVerifySelectColumn = "create_at"
	// column name
	RideHailingDriverVerifySelectColumnCreateBy RideHailingDriverVerifySelectColumn = "create_by"
	// column name
	RideHailingDriverVerifySelectColumnDeleteAt RideHailingDriverVerifySelectColumn = "delete_at"
	// column name
	RideHailingDriverVerifySelectColumnDeleteBy RideHailingDriverVerifySelectColumn = "delete_by"
	// column name
	RideHailingDriverVerifySelectColumnDrivingExamTime RideHailingDriverVerifySelectColumn = "driving_exam_time"
	// column name
	RideHailingDriverVerifySelectColumnDrivingExperienceExamineTime RideHailingDriverVerifySelectColumn = "driving_experience_examine_time"
	// column name
	RideHailingDriverVerifySelectColumnDrivingExperienceRemark RideHailingDriverVerifySelectColumn = "driving_experience_remark"
	// column name
	RideHailingDriverVerifySelectColumnDrugHistoryExamineTime RideHailingDriverVerifySelectColumn = "drug_history_examine_time"
	// column name
	RideHailingDriverVerifySelectColumnDrugHistoryRemark RideHailingDriverVerifySelectColumn = "drug_history_remark"
	// column name
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingExamineTime RideHailingDriverVerifySelectColumn = "drunk_drug_driving_examine_time"
	// column name
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingRemark RideHailingDriverVerifySelectColumn = "drunk_drug_driving_remark"
	// column name
	RideHailingDriverVerifySelectColumnID RideHailingDriverVerifySelectColumn = "id"
	// column name
	RideHailingDriverVerifySelectColumnIsDelete RideHailingDriverVerifySelectColumn = "is_delete"
	// column name
	RideHailingDriverVerifySelectColumnIsDrugHistory RideHailingDriverVerifySelectColumn = "is_drug_history"
	// column name
	RideHailingDriverVerifySelectColumnIsDrunkDrugDriving RideHailingDriverVerifySelectColumn = "is_drunk_drug_driving"
	// column name
	RideHailingDriverVerifySelectColumnIsPassDrivingExam RideHailingDriverVerifySelectColumn = "is_pass_driving_exam"
	// column name
	RideHailingDriverVerifySelectColumnIsThreeCycleTwelve RideHailingDriverVerifySelectColumn = "is_three_cycle_twelve"
	// column name
	RideHailingDriverVerifySelectColumnIsThreeYearsDrivingExperience RideHailingDriverVerifySelectColumn = "is_three_years_driving_experience"
	// column name
	RideHailingDriverVerifySelectColumnIsTrafficAccidentEscapeRecord RideHailingDriverVerifySelectColumn = "is_traffic_accident_escape_record"
	// column name
	RideHailingDriverVerifySelectColumnIsViolentCrime RideHailingDriverVerifySelectColumn = "is_violent_crime"
	// column name
	RideHailingDriverVerifySelectColumnRideHailingDriverVerifyID RideHailingDriverVerifySelectColumn = "ride_hailing_driver_verify_id"
	// column name
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeExamineTime RideHailingDriverVerifySelectColumn = "traffic_accident_escape_examine_time"
	// column name
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeRemark RideHailingDriverVerifySelectColumn = "traffic_accident_escape_remark"
	// column name
	RideHailingDriverVerifySelectColumnUpdateAt RideHailingDriverVerifySelectColumn = "update_at"
	// column name
	RideHailingDriverVerifySelectColumnUpdateBy RideHailingDriverVerifySelectColumn = "update_by"
	// column name
	RideHailingDriverVerifySelectColumnViolentCrimeExamineTime RideHailingDriverVerifySelectColumn = "violent_crime_examine_time"
	// column name
	RideHailingDriverVerifySelectColumnViolentCrimeRemark RideHailingDriverVerifySelectColumn = "violent_crime_remark"
)

var AllRideHailingDriverVerifySelectColumn = []RideHailingDriverVerifySelectColumn{
	RideHailingDriverVerifySelectColumnCreateAt,
	RideHailingDriverVerifySelectColumnCreateBy,
	RideHailingDriverVerifySelectColumnDeleteAt,
	RideHailingDriverVerifySelectColumnDeleteBy,
	RideHailingDriverVerifySelectColumnDrivingExamTime,
	RideHailingDriverVerifySelectColumnDrivingExperienceExamineTime,
	RideHailingDriverVerifySelectColumnDrivingExperienceRemark,
	RideHailingDriverVerifySelectColumnDrugHistoryExamineTime,
	RideHailingDriverVerifySelectColumnDrugHistoryRemark,
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingExamineTime,
	RideHailingDriverVerifySelectColumnDrunkDrugDrivingRemark,
	RideHailingDriverVerifySelectColumnID,
	RideHailingDriverVerifySelectColumnIsDelete,
	RideHailingDriverVerifySelectColumnIsDrugHistory,
	RideHailingDriverVerifySelectColumnIsDrunkDrugDriving,
	RideHailingDriverVerifySelectColumnIsPassDrivingExam,
	RideHailingDriverVerifySelectColumnIsThreeCycleTwelve,
	RideHailingDriverVerifySelectColumnIsThreeYearsDrivingExperience,
	RideHailingDriverVerifySelectColumnIsTrafficAccidentEscapeRecord,
	RideHailingDriverVerifySelectColumnIsViolentCrime,
	RideHailingDriverVerifySelectColumnRideHailingDriverVerifyID,
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeExamineTime,
	RideHailingDriverVerifySelectColumnTrafficAccidentEscapeRemark,
	RideHailingDriverVerifySelectColumnUpdateAt,
	RideHailingDriverVerifySelectColumnUpdateBy,
	RideHailingDriverVerifySelectColumnViolentCrimeExamineTime,
	RideHailingDriverVerifySelectColumnViolentCrimeRemark,
}

func (e RideHailingDriverVerifySelectColumn) IsValid() bool {
	switch e {
	case RideHailingDriverVerifySelectColumnCreateAt, RideHailingDriverVerifySelectColumnCreateBy, RideHailingDriverVerifySelectColumnDeleteAt, RideHailingDriverVerifySelectColumnDeleteBy, RideHailingDriverVerifySelectColumnDrivingExamTime, RideHailingDriverVerifySelectColumnDrivingExperienceExamineTime, RideHailingDriverVerifySelectColumnDrivingExperienceRemark, RideHailingDriverVerifySelectColumnDrugHistoryExamineTime, RideHailingDriverVerifySelectColumnDrugHistoryRemark, RideHailingDriverVerifySelectColumnDrunkDrugDrivingExamineTime, RideHailingDriverVerifySelectColumnDrunkDrugDrivingRemark, RideHailingDriverVerifySelectColumnID, RideHailingDriverVerifySelectColumnIsDelete, RideHailingDriverVerifySelectColumnIsDrugHistory, RideHailingDriverVerifySelectColumnIsDrunkDrugDriving, RideHailingDriverVerifySelectColumnIsPassDrivingExam, RideHailingDriverVerifySelectColumnIsThreeCycleTwelve, RideHailingDriverVerifySelectColumnIsThreeYearsDrivingExperience, RideHailingDriverVerifySelectColumnIsTrafficAccidentEscapeRecord, RideHailingDriverVerifySelectColumnIsViolentCrime, RideHailingDriverVerifySelectColumnRideHailingDriverVerifyID, RideHailingDriverVerifySelectColumnTrafficAccidentEscapeExamineTime, RideHailingDriverVerifySelectColumnTrafficAccidentEscapeRemark, RideHailingDriverVerifySelectColumnUpdateAt, RideHailingDriverVerifySelectColumnUpdateBy, RideHailingDriverVerifySelectColumnViolentCrimeExamineTime, RideHailingDriverVerifySelectColumnViolentCrimeRemark:
		return true
	}
	return false
}

func (e RideHailingDriverVerifySelectColumn) String() string {
	return string(e)
}

func (e *RideHailingDriverVerifySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverVerifySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ride_hailing_driver_verify_select_column", str)
	}
	return nil
}

func (e RideHailingDriverVerifySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "ride_hailing_driver_verify"
type RideHailingDriverVerifyUpdateColumn string

const (
	// column name
	RideHailingDriverVerifyUpdateColumnCreateAt RideHailingDriverVerifyUpdateColumn = "create_at"
	// column name
	RideHailingDriverVerifyUpdateColumnCreateBy RideHailingDriverVerifyUpdateColumn = "create_by"
	// column name
	RideHailingDriverVerifyUpdateColumnDeleteAt RideHailingDriverVerifyUpdateColumn = "delete_at"
	// column name
	RideHailingDriverVerifyUpdateColumnDeleteBy RideHailingDriverVerifyUpdateColumn = "delete_by"
	// column name
	RideHailingDriverVerifyUpdateColumnDrivingExamTime RideHailingDriverVerifyUpdateColumn = "driving_exam_time"
	// column name
	RideHailingDriverVerifyUpdateColumnDrivingExperienceExamineTime RideHailingDriverVerifyUpdateColumn = "driving_experience_examine_time"
	// column name
	RideHailingDriverVerifyUpdateColumnDrivingExperienceRemark RideHailingDriverVerifyUpdateColumn = "driving_experience_remark"
	// column name
	RideHailingDriverVerifyUpdateColumnDrugHistoryExamineTime RideHailingDriverVerifyUpdateColumn = "drug_history_examine_time"
	// column name
	RideHailingDriverVerifyUpdateColumnDrugHistoryRemark RideHailingDriverVerifyUpdateColumn = "drug_history_remark"
	// column name
	RideHailingDriverVerifyUpdateColumnDrunkDrugDrivingExamineTime RideHailingDriverVerifyUpdateColumn = "drunk_drug_driving_examine_time"
	// column name
	RideHailingDriverVerifyUpdateColumnDrunkDrugDrivingRemark RideHailingDriverVerifyUpdateColumn = "drunk_drug_driving_remark"
	// column name
	RideHailingDriverVerifyUpdateColumnID RideHailingDriverVerifyUpdateColumn = "id"
	// column name
	RideHailingDriverVerifyUpdateColumnIsDelete RideHailingDriverVerifyUpdateColumn = "is_delete"
	// column name
	RideHailingDriverVerifyUpdateColumnIsDrugHistory RideHailingDriverVerifyUpdateColumn = "is_drug_history"
	// column name
	RideHailingDriverVerifyUpdateColumnIsDrunkDrugDriving RideHailingDriverVerifyUpdateColumn = "is_drunk_drug_driving"
	// column name
	RideHailingDriverVerifyUpdateColumnIsPassDrivingExam RideHailingDriverVerifyUpdateColumn = "is_pass_driving_exam"
	// column name
	RideHailingDriverVerifyUpdateColumnIsThreeCycleTwelve RideHailingDriverVerifyUpdateColumn = "is_three_cycle_twelve"
	// column name
	RideHailingDriverVerifyUpdateColumnIsThreeYearsDrivingExperience RideHailingDriverVerifyUpdateColumn = "is_three_years_driving_experience"
	// column name
	RideHailingDriverVerifyUpdateColumnIsTrafficAccidentEscapeRecord RideHailingDriverVerifyUpdateColumn = "is_traffic_accident_escape_record"
	// column name
	RideHailingDriverVerifyUpdateColumnIsViolentCrime RideHailingDriverVerifyUpdateColumn = "is_violent_crime"
	// column name
	RideHailingDriverVerifyUpdateColumnRideHailingDriverVerifyID RideHailingDriverVerifyUpdateColumn = "ride_hailing_driver_verify_id"
	// column name
	RideHailingDriverVerifyUpdateColumnTrafficAccidentEscapeExamineTime RideHailingDriverVerifyUpdateColumn = "traffic_accident_escape_examine_time"
	// column name
	RideHailingDriverVerifyUpdateColumnTrafficAccidentEscapeRemark RideHailingDriverVerifyUpdateColumn = "traffic_accident_escape_remark"
	// column name
	RideHailingDriverVerifyUpdateColumnUpdateAt RideHailingDriverVerifyUpdateColumn = "update_at"
	// column name
	RideHailingDriverVerifyUpdateColumnUpdateBy RideHailingDriverVerifyUpdateColumn = "update_by"
	// column name
	RideHailingDriverVerifyUpdateColumnViolentCrimeExamineTime RideHailingDriverVerifyUpdateColumn = "violent_crime_examine_time"
	// column name
	RideHailingDriverVerifyUpdateColumnViolentCrimeRemark RideHailingDriverVerifyUpdateColumn = "violent_crime_remark"
)

var AllRideHailingDriverVerifyUpdateColumn = []RideHailingDriverVerifyUpdateColumn{
	RideHailingDriverVerifyUpdateColumnCreateAt,
	RideHailingDriverVerifyUpdateColumnCreateBy,
	RideHailingDriverVerifyUpdateColumnDeleteAt,
	RideHailingDriverVerifyUpdateColumnDeleteBy,
	RideHailingDriverVerifyUpdateColumnDrivingExamTime,
	RideHailingDriverVerifyUpdateColumnDrivingExperienceExamineTime,
	RideHailingDriverVerifyUpdateColumnDrivingExperienceRemark,
	RideHailingDriverVerifyUpdateColumnDrugHistoryExamineTime,
	RideHailingDriverVerifyUpdateColumnDrugHistoryRemark,
	RideHailingDriverVerifyUpdateColumnDrunkDrugDrivingExamineTime,
	RideHailingDriverVerifyUpdateColumnDrunkDrugDrivingRemark,
	RideHailingDriverVerifyUpdateColumnID,
	RideHailingDriverVerifyUpdateColumnIsDelete,
	RideHailingDriverVerifyUpdateColumnIsDrugHistory,
	RideHailingDriverVerifyUpdateColumnIsDrunkDrugDriving,
	RideHailingDriverVerifyUpdateColumnIsPassDrivingExam,
	RideHailingDriverVerifyUpdateColumnIsThreeCycleTwelve,
	RideHailingDriverVerifyUpdateColumnIsThreeYearsDrivingExperience,
	RideHailingDriverVerifyUpdateColumnIsTrafficAccidentEscapeRecord,
	RideHailingDriverVerifyUpdateColumnIsViolentCrime,
	RideHailingDriverVerifyUpdateColumnRideHailingDriverVerifyID,
	RideHailingDriverVerifyUpdateColumnTrafficAccidentEscapeExamineTime,
	RideHailingDriverVerifyUpdateColumnTrafficAccidentEscapeRemark,
	RideHailingDriverVerifyUpdateColumnUpdateAt,
	RideHailingDriverVerifyUpdateColumnUpdateBy,
	RideHailingDriverVerifyUpdateColumnViolentCrimeExamineTime,
	RideHailingDriverVerifyUpdateColumnViolentCrimeRemark,
}

func (e RideHailingDriverVerifyUpdateColumn) IsValid() bool {
	switch e {
	case RideHailingDriverVerifyUpdateColumnCreateAt, RideHailingDriverVerifyUpdateColumnCreateBy, RideHailingDriverVerifyUpdateColumnDeleteAt, RideHailingDriverVerifyUpdateColumnDeleteBy, RideHailingDriverVerifyUpdateColumnDrivingExamTime, RideHailingDriverVerifyUpdateColumnDrivingExperienceExamineTime, RideHailingDriverVerifyUpdateColumnDrivingExperienceRemark, RideHailingDriverVerifyUpdateColumnDrugHistoryExamineTime, RideHailingDriverVerifyUpdateColumnDrugHistoryRemark, RideHailingDriverVerifyUpdateColumnDrunkDrugDrivingExamineTime, RideHailingDriverVerifyUpdateColumnDrunkDrugDrivingRemark, RideHailingDriverVerifyUpdateColumnID, RideHailingDriverVerifyUpdateColumnIsDelete, RideHailingDriverVerifyUpdateColumnIsDrugHistory, RideHailingDriverVerifyUpdateColumnIsDrunkDrugDriving, RideHailingDriverVerifyUpdateColumnIsPassDrivingExam, RideHailingDriverVerifyUpdateColumnIsThreeCycleTwelve, RideHailingDriverVerifyUpdateColumnIsThreeYearsDrivingExperience, RideHailingDriverVerifyUpdateColumnIsTrafficAccidentEscapeRecord, RideHailingDriverVerifyUpdateColumnIsViolentCrime, RideHailingDriverVerifyUpdateColumnRideHailingDriverVerifyID, RideHailingDriverVerifyUpdateColumnTrafficAccidentEscapeExamineTime, RideHailingDriverVerifyUpdateColumnTrafficAccidentEscapeRemark, RideHailingDriverVerifyUpdateColumnUpdateAt, RideHailingDriverVerifyUpdateColumnUpdateBy, RideHailingDriverVerifyUpdateColumnViolentCrimeExamineTime, RideHailingDriverVerifyUpdateColumnViolentCrimeRemark:
		return true
	}
	return false
}

func (e RideHailingDriverVerifyUpdateColumn) String() string {
	return string(e)
}

func (e *RideHailingDriverVerifyUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideHailingDriverVerifyUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ride_hailing_driver_verify_update_column", str)
	}
	return nil
}

func (e RideHailingDriverVerifyUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
