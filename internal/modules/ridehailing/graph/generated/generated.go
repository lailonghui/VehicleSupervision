// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/ridehailing/graph/model"
	model1 "VehicleSupervision/internal/modules/ridehailing/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteRideHailingDriver                func(childComplexity int, where model.RideHailingDriverBoolExp) int
		DeleteRideHailingDriverByPk            func(childComplexity int, id int64) int
		DeleteRideHailingDriverByUnionPk       func(childComplexity int, rideHailingDriverID string) int
		DeleteRideHailingDriverVerify          func(childComplexity int, where model.RideHailingDriverVerifyBoolExp) int
		DeleteRideHailingDriverVerifyByPk      func(childComplexity int, id int64) int
		DeleteRideHailingDriverVerifyByUnionPk func(childComplexity int, rideHailingDriverVerifyID string) int
		InsertRideHailingDriver                func(childComplexity int, objects []*model.RideHailingDriverInsertInput) int
		InsertRideHailingDriverOne             func(childComplexity int, objects model.RideHailingDriverInsertInput) int
		InsertRideHailingDriverVerify          func(childComplexity int, objects []*model.RideHailingDriverVerifyInsertInput) int
		InsertRideHailingDriverVerifyOne       func(childComplexity int, objects model.RideHailingDriverVerifyInsertInput) int
		UpdateRideHailingDriver                func(childComplexity int, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, where model.RideHailingDriverBoolExp) int
		UpdateRideHailingDriverByPk            func(childComplexity int, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, id int64) int
		UpdateRideHailingDriverByUnionPk       func(childComplexity int, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, rideHailingDriverID string) int
		UpdateRideHailingDriverVerify          func(childComplexity int, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, where model.RideHailingDriverVerifyBoolExp) int
		UpdateRideHailingDriverVerifyByPk      func(childComplexity int, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, id int64) int
		UpdateRideHailingDriverVerifyByUnionPk func(childComplexity int, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, rideHailingDriverVerifyID string) int
	}

	Query struct {
		RideHailingDriver                func(childComplexity int, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) int
		RideHailingDriverAggregate       func(childComplexity int, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) int
		RideHailingDriverByPk            func(childComplexity int, id int64) int
		RideHailingDriverByUnionPk       func(childComplexity int, rideHailingDriverID string) int
		RideHailingDriverVerify          func(childComplexity int, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) int
		RideHailingDriverVerifyAggregate func(childComplexity int, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) int
		RideHailingDriverVerifyByPk      func(childComplexity int, id int64) int
		RideHailingDriverVerifyByUnionPk func(childComplexity int, rideHailingDriverVerifyID string) int
	}

	RideHailingDriver struct {
		Birthday                  func(childComplexity int) int
		CheckStation              func(childComplexity int) int
		CreateAt                  func(childComplexity int) int
		CreateBy                  func(childComplexity int) int
		CurrentAddress            func(childComplexity int) int
		DriverName                func(childComplexity int) int
		DriverSchoolID            func(childComplexity int) int
		EndValidDate              func(childComplexity int) int
		FirstTimeReceivedDate     func(childComplexity int) int
		HandleIDPhoto             func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDAddress                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdcardPhoto               func(childComplexity int) int
		IsDelete                  func(childComplexity int) int
		IsFormerDriver            func(childComplexity int) int
		Nation                    func(childComplexity int) int
		OperatorID                func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		QualificationNumber       func(childComplexity int) int
		QuasiDrivingModels        func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		RideHailingDriverID       func(childComplexity int) int
		RideHailingDriverVerifyID func(childComplexity int) int
		Sex                       func(childComplexity int) int
		SignGov                   func(childComplexity int) int
		SignnaturePhoto           func(childComplexity int) int
		StartValidDate            func(childComplexity int) int
		UpdateAt                  func(childComplexity int) int
		UpdateBy                  func(childComplexity int) int
		UpdateTimeIn              func(childComplexity int) int
	}

	RideHailingDriverAggregate struct {
		Aggregate func(childComplexity int) int
	}

	RideHailingDriverAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RideHailingDriverAvgFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverMaxFields struct {
		Birthday                  func(childComplexity int) int
		CheckStation              func(childComplexity int) int
		CreateAt                  func(childComplexity int) int
		CreateBy                  func(childComplexity int) int
		CurrentAddress            func(childComplexity int) int
		DriverName                func(childComplexity int) int
		DriverSchoolID            func(childComplexity int) int
		EndValidDate              func(childComplexity int) int
		FirstTimeReceivedDate     func(childComplexity int) int
		HandleIDPhoto             func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDAddress                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdcardPhoto               func(childComplexity int) int
		IsDelete                  func(childComplexity int) int
		IsFormerDriver            func(childComplexity int) int
		Nation                    func(childComplexity int) int
		OperatorID                func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		QualificationNumber       func(childComplexity int) int
		QuasiDrivingModels        func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		RideHailingDriverID       func(childComplexity int) int
		RideHailingDriverVerifyID func(childComplexity int) int
		Sex                       func(childComplexity int) int
		SignGov                   func(childComplexity int) int
		SignnaturePhoto           func(childComplexity int) int
		StartValidDate            func(childComplexity int) int
		UpdateAt                  func(childComplexity int) int
		UpdateBy                  func(childComplexity int) int
		UpdateTimeIn              func(childComplexity int) int
	}

	RideHailingDriverMinFields struct {
		Birthday                  func(childComplexity int) int
		CheckStation              func(childComplexity int) int
		CreateAt                  func(childComplexity int) int
		CreateBy                  func(childComplexity int) int
		CurrentAddress            func(childComplexity int) int
		DriverName                func(childComplexity int) int
		DriverSchoolID            func(childComplexity int) int
		EndValidDate              func(childComplexity int) int
		FirstTimeReceivedDate     func(childComplexity int) int
		HandleIDPhoto             func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDAddress                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdcardPhoto               func(childComplexity int) int
		IsDelete                  func(childComplexity int) int
		IsFormerDriver            func(childComplexity int) int
		Nation                    func(childComplexity int) int
		OperatorID                func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		QualificationNumber       func(childComplexity int) int
		QuasiDrivingModels        func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		RideHailingDriverID       func(childComplexity int) int
		RideHailingDriverVerifyID func(childComplexity int) int
		Sex                       func(childComplexity int) int
		SignGov                   func(childComplexity int) int
		SignnaturePhoto           func(childComplexity int) int
		StartValidDate            func(childComplexity int) int
		UpdateAt                  func(childComplexity int) int
		UpdateBy                  func(childComplexity int) int
		UpdateTimeIn              func(childComplexity int) int
	}

	RideHailingDriverMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RideHailingDriverStddevFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverStddevPopFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverStddevSampFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverSumFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVarPopFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVarSampFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVarianceFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVerify struct {
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DrivingExamTime                  func(childComplexity int) int
		DrivingExperienceExamineTime     func(childComplexity int) int
		DrivingExperienceRemark          func(childComplexity int) int
		DrugHistoryExamineTime           func(childComplexity int) int
		DrugHistoryRemark                func(childComplexity int) int
		DrunkDrugDrivingExamineTime      func(childComplexity int) int
		DrunkDrugDrivingRemark           func(childComplexity int) int
		ID                               func(childComplexity int) int
		IsDelete                         func(childComplexity int) int
		IsDrugHistory                    func(childComplexity int) int
		IsDrunkDrugDriving               func(childComplexity int) int
		IsPassDrivingExam                func(childComplexity int) int
		IsThreeCycleTwelve               func(childComplexity int) int
		IsThreeYearsDrivingExperience    func(childComplexity int) int
		IsTrafficAccidentEscapeRecord    func(childComplexity int) int
		IsViolentCrime                   func(childComplexity int) int
		RideHailingDriverVerifyID        func(childComplexity int) int
		TrafficAccidentEscapeExamineTime func(childComplexity int) int
		TrafficAccidentEscapeRemark      func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		ViolentCrimeExamineTime          func(childComplexity int) int
		ViolentCrimeRemark               func(childComplexity int) int
	}

	RideHailingDriverVerifyAggregate struct {
		Aggregate func(childComplexity int) int
	}

	RideHailingDriverVerifyAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RideHailingDriverVerifyAvgFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyMaxFields struct {
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DrivingExamTime                  func(childComplexity int) int
		DrivingExperienceExamineTime     func(childComplexity int) int
		DrivingExperienceRemark          func(childComplexity int) int
		DrugHistoryExamineTime           func(childComplexity int) int
		DrugHistoryRemark                func(childComplexity int) int
		DrunkDrugDrivingExamineTime      func(childComplexity int) int
		DrunkDrugDrivingRemark           func(childComplexity int) int
		ID                               func(childComplexity int) int
		IsDelete                         func(childComplexity int) int
		IsDrugHistory                    func(childComplexity int) int
		IsDrunkDrugDriving               func(childComplexity int) int
		IsPassDrivingExam                func(childComplexity int) int
		IsThreeCycleTwelve               func(childComplexity int) int
		IsThreeYearsDrivingExperience    func(childComplexity int) int
		IsTrafficAccidentEscapeRecord    func(childComplexity int) int
		IsViolentCrime                   func(childComplexity int) int
		RideHailingDriverVerifyID        func(childComplexity int) int
		TrafficAccidentEscapeExamineTime func(childComplexity int) int
		TrafficAccidentEscapeRemark      func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		ViolentCrimeExamineTime          func(childComplexity int) int
		ViolentCrimeRemark               func(childComplexity int) int
	}

	RideHailingDriverVerifyMinFields struct {
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DrivingExamTime                  func(childComplexity int) int
		DrivingExperienceExamineTime     func(childComplexity int) int
		DrivingExperienceRemark          func(childComplexity int) int
		DrugHistoryExamineTime           func(childComplexity int) int
		DrugHistoryRemark                func(childComplexity int) int
		DrunkDrugDrivingExamineTime      func(childComplexity int) int
		DrunkDrugDrivingRemark           func(childComplexity int) int
		ID                               func(childComplexity int) int
		IsDelete                         func(childComplexity int) int
		IsDrugHistory                    func(childComplexity int) int
		IsDrunkDrugDriving               func(childComplexity int) int
		IsPassDrivingExam                func(childComplexity int) int
		IsThreeCycleTwelve               func(childComplexity int) int
		IsThreeYearsDrivingExperience    func(childComplexity int) int
		IsTrafficAccidentEscapeRecord    func(childComplexity int) int
		IsViolentCrime                   func(childComplexity int) int
		RideHailingDriverVerifyID        func(childComplexity int) int
		TrafficAccidentEscapeExamineTime func(childComplexity int) int
		TrafficAccidentEscapeRemark      func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		ViolentCrimeExamineTime          func(childComplexity int) int
		ViolentCrimeRemark               func(childComplexity int) int
	}

	RideHailingDriverVerifyMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RideHailingDriverVerifyStddevFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyStddevPopFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyStddevSampFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifySumFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyVarPopFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyVarSampFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteRideHailingDriver(ctx context.Context, where model.RideHailingDriverBoolExp) (*model.RideHailingDriverMutationResponse, error)
	DeleteRideHailingDriverByPk(ctx context.Context, id int64) (*model1.RideHailingDriver, error)
	InsertRideHailingDriver(ctx context.Context, objects []*model.RideHailingDriverInsertInput) (*model.RideHailingDriverMutationResponse, error)
	InsertRideHailingDriverOne(ctx context.Context, objects model.RideHailingDriverInsertInput) (*model1.RideHailingDriver, error)
	UpdateRideHailingDriver(ctx context.Context, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, where model.RideHailingDriverBoolExp) (*model.RideHailingDriverMutationResponse, error)
	UpdateRideHailingDriverByPk(ctx context.Context, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, id int64) (*model1.RideHailingDriver, error)
	UpdateRideHailingDriverByUnionPk(ctx context.Context, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, rideHailingDriverID string) (*model1.RideHailingDriver, error)
	DeleteRideHailingDriverByUnionPk(ctx context.Context, rideHailingDriverID string) (*model1.RideHailingDriver, error)
	DeleteRideHailingDriverVerify(ctx context.Context, where model.RideHailingDriverVerifyBoolExp) (*model.RideHailingDriverVerifyMutationResponse, error)
	DeleteRideHailingDriverVerifyByPk(ctx context.Context, id int64) (*model1.RideHailingDriverVerify, error)
	InsertRideHailingDriverVerify(ctx context.Context, objects []*model.RideHailingDriverVerifyInsertInput) (*model.RideHailingDriverVerifyMutationResponse, error)
	InsertRideHailingDriverVerifyOne(ctx context.Context, objects model.RideHailingDriverVerifyInsertInput) (*model1.RideHailingDriverVerify, error)
	UpdateRideHailingDriverVerify(ctx context.Context, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, where model.RideHailingDriverVerifyBoolExp) (*model.RideHailingDriverVerifyMutationResponse, error)
	UpdateRideHailingDriverVerifyByPk(ctx context.Context, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, id int64) (*model1.RideHailingDriverVerify, error)
	UpdateRideHailingDriverVerifyByUnionPk(ctx context.Context, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, rideHailingDriverVerifyID string) (*model1.RideHailingDriverVerify, error)
	DeleteRideHailingDriverVerifyByUnionPk(ctx context.Context, rideHailingDriverVerifyID string) (*model1.RideHailingDriverVerify, error)
}
type QueryResolver interface {
	RideHailingDriver(ctx context.Context, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) ([]*model1.RideHailingDriver, error)
	RideHailingDriverAggregate(ctx context.Context, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) (*model.RideHailingDriverAggregate, error)
	RideHailingDriverByPk(ctx context.Context, id int64) (*model1.RideHailingDriver, error)
	RideHailingDriverByUnionPk(ctx context.Context, rideHailingDriverID string) (*model1.RideHailingDriver, error)
	RideHailingDriverVerify(ctx context.Context, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) ([]*model1.RideHailingDriverVerify, error)
	RideHailingDriverVerifyAggregate(ctx context.Context, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) (*model.RideHailingDriverVerifyAggregate, error)
	RideHailingDriverVerifyByPk(ctx context.Context, id int64) (*model1.RideHailingDriverVerify, error)
	RideHailingDriverVerifyByUnionPk(ctx context.Context, rideHailingDriverVerifyID string) (*model1.RideHailingDriverVerify, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_ride_hailing_driver":
		if e.complexity.Mutation.DeleteRideHailingDriver == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriver(childComplexity, args["where"].(model.RideHailingDriverBoolExp)), true

	case "Mutation.delete_ride_hailing_driver_by_pk":
		if e.complexity.Mutation.DeleteRideHailingDriverByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ride_hailing_driver_by_union_pk":
		if e.complexity.Mutation.DeleteRideHailingDriverByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverByUnionPk(childComplexity, args["ride_hailing_driver_id"].(string)), true

	case "Mutation.delete_ride_hailing_driver_verify":
		if e.complexity.Mutation.DeleteRideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverVerify(childComplexity, args["where"].(model.RideHailingDriverVerifyBoolExp)), true

	case "Mutation.delete_ride_hailing_driver_verify_by_pk":
		if e.complexity.Mutation.DeleteRideHailingDriverVerifyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverVerifyByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ride_hailing_driver_verify_by_union_pk":
		if e.complexity.Mutation.DeleteRideHailingDriverVerifyByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverVerifyByUnionPk(childComplexity, args["ride_hailing_driver_verify_id"].(string)), true

	case "Mutation.insert_ride_hailing_driver":
		if e.complexity.Mutation.InsertRideHailingDriver == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriver(childComplexity, args["objects"].([]*model.RideHailingDriverInsertInput)), true

	case "Mutation.insert_ride_hailing_driver_one":
		if e.complexity.Mutation.InsertRideHailingDriverOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriverOne(childComplexity, args["objects"].(model.RideHailingDriverInsertInput)), true

	case "Mutation.insert_ride_hailing_driver_verify":
		if e.complexity.Mutation.InsertRideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriverVerify(childComplexity, args["objects"].([]*model.RideHailingDriverVerifyInsertInput)), true

	case "Mutation.insert_ride_hailing_driver_verify_one":
		if e.complexity.Mutation.InsertRideHailingDriverVerifyOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriverVerifyOne(childComplexity, args["objects"].(model.RideHailingDriverVerifyInsertInput)), true

	case "Mutation.update_ride_hailing_driver":
		if e.complexity.Mutation.UpdateRideHailingDriver == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriver(childComplexity, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["where"].(model.RideHailingDriverBoolExp)), true

	case "Mutation.update_ride_hailing_driver_by_pk":
		if e.complexity.Mutation.UpdateRideHailingDriverByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverByPk(childComplexity, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["id"].(int64)), true

	case "Mutation.update_ride_hailing_driver_by_union_pk":
		if e.complexity.Mutation.UpdateRideHailingDriverByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverByUnionPk(childComplexity, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["ride_hailing_driver_id"].(string)), true

	case "Mutation.update_ride_hailing_driver_verify":
		if e.complexity.Mutation.UpdateRideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverVerify(childComplexity, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["where"].(model.RideHailingDriverVerifyBoolExp)), true

	case "Mutation.update_ride_hailing_driver_verify_by_pk":
		if e.complexity.Mutation.UpdateRideHailingDriverVerifyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_verify_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverVerifyByPk(childComplexity, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["id"].(int64)), true

	case "Mutation.update_ride_hailing_driver_verify_by_union_pk":
		if e.complexity.Mutation.UpdateRideHailingDriverVerifyByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_verify_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverVerifyByUnionPk(childComplexity, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["ride_hailing_driver_verify_id"].(string)), true

	case "Query.ride_hailing_driver":
		if e.complexity.Query.RideHailingDriver == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriver(childComplexity, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp)), true

	case "Query.ride_hailing_driver_aggregate":
		if e.complexity.Query.RideHailingDriverAggregate == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverAggregate(childComplexity, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp)), true

	case "Query.ride_hailing_driver_by_pk":
		if e.complexity.Query.RideHailingDriverByPk == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverByPk(childComplexity, args["id"].(int64)), true

	case "Query.ride_hailing_driver_by_union_pk":
		if e.complexity.Query.RideHailingDriverByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverByUnionPk(childComplexity, args["ride_hailing_driver_id"].(string)), true

	case "Query.ride_hailing_driver_verify":
		if e.complexity.Query.RideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerify(childComplexity, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp)), true

	case "Query.ride_hailing_driver_verify_aggregate":
		if e.complexity.Query.RideHailingDriverVerifyAggregate == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerifyAggregate(childComplexity, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp)), true

	case "Query.ride_hailing_driver_verify_by_pk":
		if e.complexity.Query.RideHailingDriverVerifyByPk == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerifyByPk(childComplexity, args["id"].(int64)), true

	case "Query.ride_hailing_driver_verify_by_union_pk":
		if e.complexity.Query.RideHailingDriverVerifyByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerifyByUnionPk(childComplexity, args["ride_hailing_driver_verify_id"].(string)), true

	case "RideHailingDriver.birthday":
		if e.complexity.RideHailingDriver.Birthday == nil {
			break
		}

		return e.complexity.RideHailingDriver.Birthday(childComplexity), true

	case "RideHailingDriver.check_station":
		if e.complexity.RideHailingDriver.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriver.CheckStation(childComplexity), true

	case "RideHailingDriver.create_at":
		if e.complexity.RideHailingDriver.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriver.CreateAt(childComplexity), true

	case "RideHailingDriver.create_by":
		if e.complexity.RideHailingDriver.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriver.CreateBy(childComplexity), true

	case "RideHailingDriver.current_address":
		if e.complexity.RideHailingDriver.CurrentAddress == nil {
			break
		}

		return e.complexity.RideHailingDriver.CurrentAddress(childComplexity), true

	case "RideHailingDriver.driver_name":
		if e.complexity.RideHailingDriver.DriverName == nil {
			break
		}

		return e.complexity.RideHailingDriver.DriverName(childComplexity), true

	case "RideHailingDriver.driver_school_id":
		if e.complexity.RideHailingDriver.DriverSchoolID == nil {
			break
		}

		return e.complexity.RideHailingDriver.DriverSchoolID(childComplexity), true

	case "RideHailingDriver.end_valid_date":
		if e.complexity.RideHailingDriver.EndValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriver.EndValidDate(childComplexity), true

	case "RideHailingDriver.first_time_received_date":
		if e.complexity.RideHailingDriver.FirstTimeReceivedDate == nil {
			break
		}

		return e.complexity.RideHailingDriver.FirstTimeReceivedDate(childComplexity), true

	case "RideHailingDriver.handle_id_photo":
		if e.complexity.RideHailingDriver.HandleIDPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriver.HandleIDPhoto(childComplexity), true

	case "RideHailingDriver.id":
		if e.complexity.RideHailingDriver.ID == nil {
			break
		}

		return e.complexity.RideHailingDriver.ID(childComplexity), true

	case "RideHailingDriver.id_address":
		if e.complexity.RideHailingDriver.IDAddress == nil {
			break
		}

		return e.complexity.RideHailingDriver.IDAddress(childComplexity), true

	case "RideHailingDriver.id_number":
		if e.complexity.RideHailingDriver.IDNumber == nil {
			break
		}

		return e.complexity.RideHailingDriver.IDNumber(childComplexity), true

	case "RideHailingDriver.idcard_photo":
		if e.complexity.RideHailingDriver.IdcardPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriver.IdcardPhoto(childComplexity), true

	case "RideHailingDriver.is_delete":
		if e.complexity.RideHailingDriver.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriver.IsDelete(childComplexity), true

	case "RideHailingDriver.is_former_driver":
		if e.complexity.RideHailingDriver.IsFormerDriver == nil {
			break
		}

		return e.complexity.RideHailingDriver.IsFormerDriver(childComplexity), true

	case "RideHailingDriver.nation":
		if e.complexity.RideHailingDriver.Nation == nil {
			break
		}

		return e.complexity.RideHailingDriver.Nation(childComplexity), true

	case "RideHailingDriver.operator_id":
		if e.complexity.RideHailingDriver.OperatorID == nil {
			break
		}

		return e.complexity.RideHailingDriver.OperatorID(childComplexity), true

	case "RideHailingDriver.phone_number":
		if e.complexity.RideHailingDriver.PhoneNumber == nil {
			break
		}

		return e.complexity.RideHailingDriver.PhoneNumber(childComplexity), true

	case "RideHailingDriver.qualification_number":
		if e.complexity.RideHailingDriver.QualificationNumber == nil {
			break
		}

		return e.complexity.RideHailingDriver.QualificationNumber(childComplexity), true

	case "RideHailingDriver.quasi_driving_models":
		if e.complexity.RideHailingDriver.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriver.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriver.remarks":
		if e.complexity.RideHailingDriver.Remarks == nil {
			break
		}

		return e.complexity.RideHailingDriver.Remarks(childComplexity), true

	case "RideHailingDriver.ride_hailing_driver_id":
		if e.complexity.RideHailingDriver.RideHailingDriverID == nil {
			break
		}

		return e.complexity.RideHailingDriver.RideHailingDriverID(childComplexity), true

	case "RideHailingDriver.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriver.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriver.RideHailingDriverVerifyID(childComplexity), true

	case "RideHailingDriver.sex":
		if e.complexity.RideHailingDriver.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriver.Sex(childComplexity), true

	case "RideHailingDriver.sign_gov":
		if e.complexity.RideHailingDriver.SignGov == nil {
			break
		}

		return e.complexity.RideHailingDriver.SignGov(childComplexity), true

	case "RideHailingDriver.signnature_photo":
		if e.complexity.RideHailingDriver.SignnaturePhoto == nil {
			break
		}

		return e.complexity.RideHailingDriver.SignnaturePhoto(childComplexity), true

	case "RideHailingDriver.start_valid_date":
		if e.complexity.RideHailingDriver.StartValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriver.StartValidDate(childComplexity), true

	case "RideHailingDriver.update_at":
		if e.complexity.RideHailingDriver.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriver.UpdateAt(childComplexity), true

	case "RideHailingDriver.update_by":
		if e.complexity.RideHailingDriver.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriver.UpdateBy(childComplexity), true

	case "RideHailingDriver.update_time_in":
		if e.complexity.RideHailingDriver.UpdateTimeIn == nil {
			break
		}

		return e.complexity.RideHailingDriver.UpdateTimeIn(childComplexity), true

	case "RideHailingDriverAggregate.aggregate":
		if e.complexity.RideHailingDriverAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregate.Aggregate(childComplexity), true

	case "RideHailingDriverAggregateFields.avg":
		if e.complexity.RideHailingDriverAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Avg(childComplexity), true

	case "RideHailingDriverAggregateFields.count":
		if e.complexity.RideHailingDriverAggregateFields.Count == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Count(childComplexity), true

	case "RideHailingDriverAggregateFields.max":
		if e.complexity.RideHailingDriverAggregateFields.Max == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Max(childComplexity), true

	case "RideHailingDriverAggregateFields.min":
		if e.complexity.RideHailingDriverAggregateFields.Min == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Min(childComplexity), true

	case "RideHailingDriverAggregateFields.stddev":
		if e.complexity.RideHailingDriverAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Stddev(childComplexity), true

	case "RideHailingDriverAggregateFields.stddev_pop":
		if e.complexity.RideHailingDriverAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.StddevPop(childComplexity), true

	case "RideHailingDriverAggregateFields.stddev_samp":
		if e.complexity.RideHailingDriverAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.StddevSamp(childComplexity), true

	case "RideHailingDriverAggregateFields.sum":
		if e.complexity.RideHailingDriverAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Sum(childComplexity), true

	case "RideHailingDriverAggregateFields.var_pop":
		if e.complexity.RideHailingDriverAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.VarPop(childComplexity), true

	case "RideHailingDriverAggregateFields.var_samp":
		if e.complexity.RideHailingDriverAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.VarSamp(childComplexity), true

	case "RideHailingDriverAggregateFields.variance":
		if e.complexity.RideHailingDriverAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Variance(childComplexity), true

	case "RideHailingDriverAvgFields.check_station":
		if e.complexity.RideHailingDriverAvgFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.CheckStation(childComplexity), true

	case "RideHailingDriverAvgFields.id":
		if e.complexity.RideHailingDriverAvgFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.ID(childComplexity), true

	case "RideHailingDriverAvgFields.quasi_driving_models":
		if e.complexity.RideHailingDriverAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverAvgFields.sex":
		if e.complexity.RideHailingDriverAvgFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.Sex(childComplexity), true

	case "RideHailingDriverMaxFields.birthday":
		if e.complexity.RideHailingDriverMaxFields.Birthday == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Birthday(childComplexity), true

	case "RideHailingDriverMaxFields.check_station":
		if e.complexity.RideHailingDriverMaxFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CheckStation(childComplexity), true

	case "RideHailingDriverMaxFields.create_at":
		if e.complexity.RideHailingDriverMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CreateAt(childComplexity), true

	case "RideHailingDriverMaxFields.create_by":
		if e.complexity.RideHailingDriverMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CreateBy(childComplexity), true

	case "RideHailingDriverMaxFields.current_address":
		if e.complexity.RideHailingDriverMaxFields.CurrentAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CurrentAddress(childComplexity), true

	case "RideHailingDriverMaxFields.driver_name":
		if e.complexity.RideHailingDriverMaxFields.DriverName == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.DriverName(childComplexity), true

	case "RideHailingDriverMaxFields.driver_school_id":
		if e.complexity.RideHailingDriverMaxFields.DriverSchoolID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.DriverSchoolID(childComplexity), true

	case "RideHailingDriverMaxFields.end_valid_date":
		if e.complexity.RideHailingDriverMaxFields.EndValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.EndValidDate(childComplexity), true

	case "RideHailingDriverMaxFields.first_time_received_date":
		if e.complexity.RideHailingDriverMaxFields.FirstTimeReceivedDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.FirstTimeReceivedDate(childComplexity), true

	case "RideHailingDriverMaxFields.handle_id_photo":
		if e.complexity.RideHailingDriverMaxFields.HandleIDPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.HandleIDPhoto(childComplexity), true

	case "RideHailingDriverMaxFields.id":
		if e.complexity.RideHailingDriverMaxFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.ID(childComplexity), true

	case "RideHailingDriverMaxFields.id_address":
		if e.complexity.RideHailingDriverMaxFields.IDAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IDAddress(childComplexity), true

	case "RideHailingDriverMaxFields.id_number":
		if e.complexity.RideHailingDriverMaxFields.IDNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IDNumber(childComplexity), true

	case "RideHailingDriverMaxFields.idcard_photo":
		if e.complexity.RideHailingDriverMaxFields.IdcardPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IdcardPhoto(childComplexity), true

	case "RideHailingDriverMaxFields.is_delete":
		if e.complexity.RideHailingDriverMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IsDelete(childComplexity), true

	case "RideHailingDriverMaxFields.is_former_driver":
		if e.complexity.RideHailingDriverMaxFields.IsFormerDriver == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IsFormerDriver(childComplexity), true

	case "RideHailingDriverMaxFields.nation":
		if e.complexity.RideHailingDriverMaxFields.Nation == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Nation(childComplexity), true

	case "RideHailingDriverMaxFields.operator_id":
		if e.complexity.RideHailingDriverMaxFields.OperatorID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.OperatorID(childComplexity), true

	case "RideHailingDriverMaxFields.phone_number":
		if e.complexity.RideHailingDriverMaxFields.PhoneNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.PhoneNumber(childComplexity), true

	case "RideHailingDriverMaxFields.qualification_number":
		if e.complexity.RideHailingDriverMaxFields.QualificationNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.QualificationNumber(childComplexity), true

	case "RideHailingDriverMaxFields.quasi_driving_models":
		if e.complexity.RideHailingDriverMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverMaxFields.remarks":
		if e.complexity.RideHailingDriverMaxFields.Remarks == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Remarks(childComplexity), true

	case "RideHailingDriverMaxFields.ride_hailing_driver_id":
		if e.complexity.RideHailingDriverMaxFields.RideHailingDriverID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.RideHailingDriverID(childComplexity), true

	case "RideHailingDriverMaxFields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverMaxFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.RideHailingDriverVerifyID(childComplexity), true

	case "RideHailingDriverMaxFields.sex":
		if e.complexity.RideHailingDriverMaxFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Sex(childComplexity), true

	case "RideHailingDriverMaxFields.sign_gov":
		if e.complexity.RideHailingDriverMaxFields.SignGov == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.SignGov(childComplexity), true

	case "RideHailingDriverMaxFields.signnature_photo":
		if e.complexity.RideHailingDriverMaxFields.SignnaturePhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.SignnaturePhoto(childComplexity), true

	case "RideHailingDriverMaxFields.start_valid_date":
		if e.complexity.RideHailingDriverMaxFields.StartValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.StartValidDate(childComplexity), true

	case "RideHailingDriverMaxFields.update_at":
		if e.complexity.RideHailingDriverMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.UpdateAt(childComplexity), true

	case "RideHailingDriverMaxFields.update_by":
		if e.complexity.RideHailingDriverMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.UpdateBy(childComplexity), true

	case "RideHailingDriverMaxFields.update_time_in":
		if e.complexity.RideHailingDriverMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.UpdateTimeIn(childComplexity), true

	case "RideHailingDriverMinFields.birthday":
		if e.complexity.RideHailingDriverMinFields.Birthday == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Birthday(childComplexity), true

	case "RideHailingDriverMinFields.check_station":
		if e.complexity.RideHailingDriverMinFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CheckStation(childComplexity), true

	case "RideHailingDriverMinFields.create_at":
		if e.complexity.RideHailingDriverMinFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CreateAt(childComplexity), true

	case "RideHailingDriverMinFields.create_by":
		if e.complexity.RideHailingDriverMinFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CreateBy(childComplexity), true

	case "RideHailingDriverMinFields.current_address":
		if e.complexity.RideHailingDriverMinFields.CurrentAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CurrentAddress(childComplexity), true

	case "RideHailingDriverMinFields.driver_name":
		if e.complexity.RideHailingDriverMinFields.DriverName == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.DriverName(childComplexity), true

	case "RideHailingDriverMinFields.driver_school_id":
		if e.complexity.RideHailingDriverMinFields.DriverSchoolID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.DriverSchoolID(childComplexity), true

	case "RideHailingDriverMinFields.end_valid_date":
		if e.complexity.RideHailingDriverMinFields.EndValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.EndValidDate(childComplexity), true

	case "RideHailingDriverMinFields.first_time_received_date":
		if e.complexity.RideHailingDriverMinFields.FirstTimeReceivedDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.FirstTimeReceivedDate(childComplexity), true

	case "RideHailingDriverMinFields.handle_id_photo":
		if e.complexity.RideHailingDriverMinFields.HandleIDPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.HandleIDPhoto(childComplexity), true

	case "RideHailingDriverMinFields.id":
		if e.complexity.RideHailingDriverMinFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.ID(childComplexity), true

	case "RideHailingDriverMinFields.id_address":
		if e.complexity.RideHailingDriverMinFields.IDAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IDAddress(childComplexity), true

	case "RideHailingDriverMinFields.id_number":
		if e.complexity.RideHailingDriverMinFields.IDNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IDNumber(childComplexity), true

	case "RideHailingDriverMinFields.idcard_photo":
		if e.complexity.RideHailingDriverMinFields.IdcardPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IdcardPhoto(childComplexity), true

	case "RideHailingDriverMinFields.is_delete":
		if e.complexity.RideHailingDriverMinFields.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IsDelete(childComplexity), true

	case "RideHailingDriverMinFields.is_former_driver":
		if e.complexity.RideHailingDriverMinFields.IsFormerDriver == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IsFormerDriver(childComplexity), true

	case "RideHailingDriverMinFields.nation":
		if e.complexity.RideHailingDriverMinFields.Nation == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Nation(childComplexity), true

	case "RideHailingDriverMinFields.operator_id":
		if e.complexity.RideHailingDriverMinFields.OperatorID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.OperatorID(childComplexity), true

	case "RideHailingDriverMinFields.phone_number":
		if e.complexity.RideHailingDriverMinFields.PhoneNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.PhoneNumber(childComplexity), true

	case "RideHailingDriverMinFields.qualification_number":
		if e.complexity.RideHailingDriverMinFields.QualificationNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.QualificationNumber(childComplexity), true

	case "RideHailingDriverMinFields.quasi_driving_models":
		if e.complexity.RideHailingDriverMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverMinFields.remarks":
		if e.complexity.RideHailingDriverMinFields.Remarks == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Remarks(childComplexity), true

	case "RideHailingDriverMinFields.ride_hailing_driver_id":
		if e.complexity.RideHailingDriverMinFields.RideHailingDriverID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.RideHailingDriverID(childComplexity), true

	case "RideHailingDriverMinFields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverMinFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.RideHailingDriverVerifyID(childComplexity), true

	case "RideHailingDriverMinFields.sex":
		if e.complexity.RideHailingDriverMinFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Sex(childComplexity), true

	case "RideHailingDriverMinFields.sign_gov":
		if e.complexity.RideHailingDriverMinFields.SignGov == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.SignGov(childComplexity), true

	case "RideHailingDriverMinFields.signnature_photo":
		if e.complexity.RideHailingDriverMinFields.SignnaturePhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.SignnaturePhoto(childComplexity), true

	case "RideHailingDriverMinFields.start_valid_date":
		if e.complexity.RideHailingDriverMinFields.StartValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.StartValidDate(childComplexity), true

	case "RideHailingDriverMinFields.update_at":
		if e.complexity.RideHailingDriverMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.UpdateAt(childComplexity), true

	case "RideHailingDriverMinFields.update_by":
		if e.complexity.RideHailingDriverMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.UpdateBy(childComplexity), true

	case "RideHailingDriverMinFields.update_time_in":
		if e.complexity.RideHailingDriverMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.UpdateTimeIn(childComplexity), true

	case "RideHailingDriverMutationResponse.affected_rows":
		if e.complexity.RideHailingDriverMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RideHailingDriverMutationResponse.AffectedRows(childComplexity), true

	case "RideHailingDriverMutationResponse.returning":
		if e.complexity.RideHailingDriverMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RideHailingDriverMutationResponse.Returning(childComplexity), true

	case "RideHailingDriverStddevFields.check_station":
		if e.complexity.RideHailingDriverStddevFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.CheckStation(childComplexity), true

	case "RideHailingDriverStddevFields.id":
		if e.complexity.RideHailingDriverStddevFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.ID(childComplexity), true

	case "RideHailingDriverStddevFields.quasi_driving_models":
		if e.complexity.RideHailingDriverStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverStddevFields.sex":
		if e.complexity.RideHailingDriverStddevFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.Sex(childComplexity), true

	case "RideHailingDriverStddevPopFields.check_station":
		if e.complexity.RideHailingDriverStddevPopFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.CheckStation(childComplexity), true

	case "RideHailingDriverStddevPopFields.id":
		if e.complexity.RideHailingDriverStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.ID(childComplexity), true

	case "RideHailingDriverStddevPopFields.quasi_driving_models":
		if e.complexity.RideHailingDriverStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverStddevPopFields.sex":
		if e.complexity.RideHailingDriverStddevPopFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.Sex(childComplexity), true

	case "RideHailingDriverStddevSampFields.check_station":
		if e.complexity.RideHailingDriverStddevSampFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.CheckStation(childComplexity), true

	case "RideHailingDriverStddevSampFields.id":
		if e.complexity.RideHailingDriverStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.ID(childComplexity), true

	case "RideHailingDriverStddevSampFields.quasi_driving_models":
		if e.complexity.RideHailingDriverStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverStddevSampFields.sex":
		if e.complexity.RideHailingDriverStddevSampFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.Sex(childComplexity), true

	case "RideHailingDriverSumFields.check_station":
		if e.complexity.RideHailingDriverSumFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.CheckStation(childComplexity), true

	case "RideHailingDriverSumFields.id":
		if e.complexity.RideHailingDriverSumFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.ID(childComplexity), true

	case "RideHailingDriverSumFields.quasi_driving_models":
		if e.complexity.RideHailingDriverSumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverSumFields.sex":
		if e.complexity.RideHailingDriverSumFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.Sex(childComplexity), true

	case "RideHailingDriverVarPopFields.check_station":
		if e.complexity.RideHailingDriverVarPopFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.CheckStation(childComplexity), true

	case "RideHailingDriverVarPopFields.id":
		if e.complexity.RideHailingDriverVarPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.ID(childComplexity), true

	case "RideHailingDriverVarPopFields.quasi_driving_models":
		if e.complexity.RideHailingDriverVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverVarPopFields.sex":
		if e.complexity.RideHailingDriverVarPopFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.Sex(childComplexity), true

	case "RideHailingDriverVarSampFields.check_station":
		if e.complexity.RideHailingDriverVarSampFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.CheckStation(childComplexity), true

	case "RideHailingDriverVarSampFields.id":
		if e.complexity.RideHailingDriverVarSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.ID(childComplexity), true

	case "RideHailingDriverVarSampFields.quasi_driving_models":
		if e.complexity.RideHailingDriverVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverVarSampFields.sex":
		if e.complexity.RideHailingDriverVarSampFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.Sex(childComplexity), true

	case "RideHailingDriverVarianceFields.check_station":
		if e.complexity.RideHailingDriverVarianceFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.CheckStation(childComplexity), true

	case "RideHailingDriverVarianceFields.id":
		if e.complexity.RideHailingDriverVarianceFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.ID(childComplexity), true

	case "RideHailingDriverVarianceFields.quasi_driving_models":
		if e.complexity.RideHailingDriverVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.QuasiDrivingModels(childComplexity), true

	case "RideHailingDriverVarianceFields.sex":
		if e.complexity.RideHailingDriverVarianceFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.Sex(childComplexity), true

	case "RideHailingDriverVerify.create_at":
		if e.complexity.RideHailingDriverVerify.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.CreateAt(childComplexity), true

	case "RideHailingDriverVerify.create_by":
		if e.complexity.RideHailingDriverVerify.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.CreateBy(childComplexity), true

	case "RideHailingDriverVerify.delete_at":
		if e.complexity.RideHailingDriverVerify.DeleteAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DeleteAt(childComplexity), true

	case "RideHailingDriverVerify.delete_by":
		if e.complexity.RideHailingDriverVerify.DeleteBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DeleteBy(childComplexity), true

	case "RideHailingDriverVerify.driving_exam_time":
		if e.complexity.RideHailingDriverVerify.DrivingExamTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrivingExamTime(childComplexity), true

	case "RideHailingDriverVerify.driving_experience_examine_time":
		if e.complexity.RideHailingDriverVerify.DrivingExperienceExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrivingExperienceExamineTime(childComplexity), true

	case "RideHailingDriverVerify.driving_experience_remark":
		if e.complexity.RideHailingDriverVerify.DrivingExperienceRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrivingExperienceRemark(childComplexity), true

	case "RideHailingDriverVerify.drug_history_examine_time":
		if e.complexity.RideHailingDriverVerify.DrugHistoryExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrugHistoryExamineTime(childComplexity), true

	case "RideHailingDriverVerify.drug_history_remark":
		if e.complexity.RideHailingDriverVerify.DrugHistoryRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrugHistoryRemark(childComplexity), true

	case "RideHailingDriverVerify.drunk_drug_driving_examine_time":
		if e.complexity.RideHailingDriverVerify.DrunkDrugDrivingExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrunkDrugDrivingExamineTime(childComplexity), true

	case "RideHailingDriverVerify.drunk_drug_driving_remark":
		if e.complexity.RideHailingDriverVerify.DrunkDrugDrivingRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrunkDrugDrivingRemark(childComplexity), true

	case "RideHailingDriverVerify.id":
		if e.complexity.RideHailingDriverVerify.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.ID(childComplexity), true

	case "RideHailingDriverVerify.is_delete":
		if e.complexity.RideHailingDriverVerify.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsDelete(childComplexity), true

	case "RideHailingDriverVerify.is_drug_history":
		if e.complexity.RideHailingDriverVerify.IsDrugHistory == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsDrugHistory(childComplexity), true

	case "RideHailingDriverVerify.is_drunk_drug_driving":
		if e.complexity.RideHailingDriverVerify.IsDrunkDrugDriving == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsDrunkDrugDriving(childComplexity), true

	case "RideHailingDriverVerify.is_pass_driving_exam":
		if e.complexity.RideHailingDriverVerify.IsPassDrivingExam == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsPassDrivingExam(childComplexity), true

	case "RideHailingDriverVerify.is_three_cycle_twelve":
		if e.complexity.RideHailingDriverVerify.IsThreeCycleTwelve == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsThreeCycleTwelve(childComplexity), true

	case "RideHailingDriverVerify.is_three_years_driving_experience":
		if e.complexity.RideHailingDriverVerify.IsThreeYearsDrivingExperience == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsThreeYearsDrivingExperience(childComplexity), true

	case "RideHailingDriverVerify.is_traffic_accident_escape_record":
		if e.complexity.RideHailingDriverVerify.IsTrafficAccidentEscapeRecord == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsTrafficAccidentEscapeRecord(childComplexity), true

	case "RideHailingDriverVerify.is_violent_crime":
		if e.complexity.RideHailingDriverVerify.IsViolentCrime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsViolentCrime(childComplexity), true

	case "RideHailingDriverVerify.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverVerify.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.RideHailingDriverVerifyID(childComplexity), true

	case "RideHailingDriverVerify.traffic_accident_escape_examine_time":
		if e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeExamineTime(childComplexity), true

	case "RideHailingDriverVerify.traffic_accident_escape_remark":
		if e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeRemark(childComplexity), true

	case "RideHailingDriverVerify.update_at":
		if e.complexity.RideHailingDriverVerify.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.UpdateAt(childComplexity), true

	case "RideHailingDriverVerify.update_by":
		if e.complexity.RideHailingDriverVerify.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.UpdateBy(childComplexity), true

	case "RideHailingDriverVerify.violent_crime_examine_time":
		if e.complexity.RideHailingDriverVerify.ViolentCrimeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.ViolentCrimeExamineTime(childComplexity), true

	case "RideHailingDriverVerify.violent_crime_remark":
		if e.complexity.RideHailingDriverVerify.ViolentCrimeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.ViolentCrimeRemark(childComplexity), true

	case "RideHailingDriverVerifyAggregate.aggregate":
		if e.complexity.RideHailingDriverVerifyAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregate.Aggregate(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.avg":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Avg(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.count":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Count == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Count(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.max":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Max == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Max(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.min":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Min == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Min(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.stddev":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Stddev(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.stddev_pop":
		if e.complexity.RideHailingDriverVerifyAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.StddevPop(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.stddev_samp":
		if e.complexity.RideHailingDriverVerifyAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.StddevSamp(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.sum":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Sum(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.var_pop":
		if e.complexity.RideHailingDriverVerifyAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.VarPop(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.var_samp":
		if e.complexity.RideHailingDriverVerifyAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.VarSamp(childComplexity), true

	case "RideHailingDriverVerifyAggregateFields.variance":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Variance(childComplexity), true

	case "RideHailingDriverVerifyAvgFields.id":
		if e.complexity.RideHailingDriverVerifyAvgFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAvgFields.ID(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.create_at":
		if e.complexity.RideHailingDriverVerifyMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.CreateAt(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.create_by":
		if e.complexity.RideHailingDriverVerifyMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.CreateBy(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.delete_at":
		if e.complexity.RideHailingDriverVerifyMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DeleteAt(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.delete_by":
		if e.complexity.RideHailingDriverVerifyMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DeleteBy(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.driving_exam_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrivingExamTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrivingExamTime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.driving_experience_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.driving_experience_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceRemark(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.drug_history_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.drug_history_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryRemark(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.drunk_drug_driving_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.drunk_drug_driving_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingRemark(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.id":
		if e.complexity.RideHailingDriverVerifyMaxFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.ID(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_delete":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsDelete(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_drug_history":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsDrugHistory == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsDrugHistory(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_drunk_drug_driving":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsDrunkDrugDriving == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsDrunkDrugDriving(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_pass_driving_exam":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsPassDrivingExam == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsPassDrivingExam(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_three_cycle_twelve":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsThreeCycleTwelve == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsThreeCycleTwelve(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_three_years_driving_experience":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsThreeYearsDrivingExperience == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsThreeYearsDrivingExperience(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_traffic_accident_escape_record":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsTrafficAccidentEscapeRecord == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsTrafficAccidentEscapeRecord(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.is_violent_crime":
		if e.complexity.RideHailingDriverVerifyMaxFields.IsViolentCrime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.IsViolentCrime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverVerifyMaxFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.RideHailingDriverVerifyID(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.traffic_accident_escape_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.traffic_accident_escape_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeRemark(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.update_at":
		if e.complexity.RideHailingDriverVerifyMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.UpdateAt(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.update_by":
		if e.complexity.RideHailingDriverVerifyMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.UpdateBy(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.violent_crime_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMaxFields.violent_crime_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeRemark(childComplexity), true

	case "RideHailingDriverVerifyMinFields.create_at":
		if e.complexity.RideHailingDriverVerifyMinFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.CreateAt(childComplexity), true

	case "RideHailingDriverVerifyMinFields.create_by":
		if e.complexity.RideHailingDriverVerifyMinFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.CreateBy(childComplexity), true

	case "RideHailingDriverVerifyMinFields.delete_at":
		if e.complexity.RideHailingDriverVerifyMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DeleteAt(childComplexity), true

	case "RideHailingDriverVerifyMinFields.delete_by":
		if e.complexity.RideHailingDriverVerifyMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DeleteBy(childComplexity), true

	case "RideHailingDriverVerifyMinFields.driving_exam_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrivingExamTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrivingExamTime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.driving_experience_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.driving_experience_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceRemark(childComplexity), true

	case "RideHailingDriverVerifyMinFields.drug_history_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.drug_history_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryRemark(childComplexity), true

	case "RideHailingDriverVerifyMinFields.drunk_drug_driving_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.drunk_drug_driving_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingRemark(childComplexity), true

	case "RideHailingDriverVerifyMinFields.id":
		if e.complexity.RideHailingDriverVerifyMinFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.ID(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_delete":
		if e.complexity.RideHailingDriverVerifyMinFields.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsDelete(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_drug_history":
		if e.complexity.RideHailingDriverVerifyMinFields.IsDrugHistory == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsDrugHistory(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_drunk_drug_driving":
		if e.complexity.RideHailingDriverVerifyMinFields.IsDrunkDrugDriving == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsDrunkDrugDriving(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_pass_driving_exam":
		if e.complexity.RideHailingDriverVerifyMinFields.IsPassDrivingExam == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsPassDrivingExam(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_three_cycle_twelve":
		if e.complexity.RideHailingDriverVerifyMinFields.IsThreeCycleTwelve == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsThreeCycleTwelve(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_three_years_driving_experience":
		if e.complexity.RideHailingDriverVerifyMinFields.IsThreeYearsDrivingExperience == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsThreeYearsDrivingExperience(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_traffic_accident_escape_record":
		if e.complexity.RideHailingDriverVerifyMinFields.IsTrafficAccidentEscapeRecord == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsTrafficAccidentEscapeRecord(childComplexity), true

	case "RideHailingDriverVerifyMinFields.is_violent_crime":
		if e.complexity.RideHailingDriverVerifyMinFields.IsViolentCrime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.IsViolentCrime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverVerifyMinFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.RideHailingDriverVerifyID(childComplexity), true

	case "RideHailingDriverVerifyMinFields.traffic_accident_escape_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.traffic_accident_escape_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeRemark(childComplexity), true

	case "RideHailingDriverVerifyMinFields.update_at":
		if e.complexity.RideHailingDriverVerifyMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.UpdateAt(childComplexity), true

	case "RideHailingDriverVerifyMinFields.update_by":
		if e.complexity.RideHailingDriverVerifyMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.UpdateBy(childComplexity), true

	case "RideHailingDriverVerifyMinFields.violent_crime_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeExamineTime(childComplexity), true

	case "RideHailingDriverVerifyMinFields.violent_crime_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeRemark(childComplexity), true

	case "RideHailingDriverVerifyMutationResponse.affected_rows":
		if e.complexity.RideHailingDriverVerifyMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMutationResponse.AffectedRows(childComplexity), true

	case "RideHailingDriverVerifyMutationResponse.returning":
		if e.complexity.RideHailingDriverVerifyMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMutationResponse.Returning(childComplexity), true

	case "RideHailingDriverVerifyStddevFields.id":
		if e.complexity.RideHailingDriverVerifyStddevFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyStddevFields.ID(childComplexity), true

	case "RideHailingDriverVerifyStddevPopFields.id":
		if e.complexity.RideHailingDriverVerifyStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyStddevPopFields.ID(childComplexity), true

	case "RideHailingDriverVerifyStddevSampFields.id":
		if e.complexity.RideHailingDriverVerifyStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyStddevSampFields.ID(childComplexity), true

	case "RideHailingDriverVerifySumFields.id":
		if e.complexity.RideHailingDriverVerifySumFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifySumFields.ID(childComplexity), true

	case "RideHailingDriverVerifyVarPopFields.id":
		if e.complexity.RideHailingDriverVerifyVarPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyVarPopFields.ID(childComplexity), true

	case "RideHailingDriverVerifyVarSampFields.id":
		if e.complexity.RideHailingDriverVerifyVarSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyVarSampFields.ID(childComplexity), true

	case "RideHailingDriverVerifyVarianceFields.id":
		if e.complexity.RideHailingDriverVerifyVarianceFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/ride_hailing_driver.graphqls", Input: `type RideHailingDriver {
	"""
	ID
	"""
	id: Bigint!
	"""
	网约车驾驶员ID
	"""
	ride_hailing_driver_id: String!
	"""
	网约车驾驶员审核表ID
	"""
	ride_hailing_driver_verify_id: String
	"""
	驾驶员名称
	"""
	driver_name: String
	"""
	联系电话
	"""
	phone_number: String
	"""
	驾驶员身份证号
	"""
	id_number: String
	"""
	性别
	"""
	sex: Int
	"""
	出生日期
	"""
	birthday: Timestamptz
	"""
	民族
	"""
	nation: String
	"""
	发证机构
	"""
	sign_gov: String
	"""
	身份证住址
	"""
	id_address: String
	"""
	身份证-有效期起始日期
	"""
	start_valid_date: Timestamptz
	"""
	有效期截止日期
	"""
	end_valid_date: Timestamptz
	"""
	身份证图片
	"""
	idcard_photo: String
	"""
	准假车型
	"""
	quasi_driving_models: Int
	"""
	驾校ID
	"""
	driver_school_id: String
	"""
	初次领驾驶证日期
	"""
	first_time_received_date: Timestamptz
	"""
	签字的照片
	"""
	signnature_photo: String
	"""
	手持身份证照片
	"""
	handle_id_photo: String
	"""
	现居住地址
	"""
	current_address: String
	"""
	资格证号
	"""
	qualification_number: String
	"""
	是否旧驾驶员
	"""
	is_former_driver: Boolean
	"""
	审核状态
	"""
	check_station: Int
	"""
	内网更新时间
	"""
	update_time_in: Timestamptz
	"""
	记录时间
	"""
	create_at: Timestamptz
	"""
	记录人员ID
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人员id
	"""
	update_by: String
	"""
	操作员id
	"""
	operator_id: String
	"""
	备注
	"""
	remarks: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "ride_hailing_driver"
"""
type RideHailingDriverAggregate {
	aggregate: RideHailingDriverAggregateFields
}
"""
aggregate fields of "ride_hailing_driver"
"""
type RideHailingDriverAggregateFields {
	avg: RideHailingDriverAvgFields
	count: Int
	max: RideHailingDriverMaxFields
	min: RideHailingDriverMinFields
	stddev: RideHailingDriverStddevFields
	stddev_pop: RideHailingDriverStddevPopFields
	stddev_samp: RideHailingDriverStddevSampFields
	sum: RideHailingDriverSumFields
	var_pop: RideHailingDriverVarPopFields
	var_samp: RideHailingDriverVarSampFields
	variance: RideHailingDriverVarianceFields
}
"""
aggregate avg on columns of table "ride_hailing_driver"
"""
type RideHailingDriverAvgFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate max on columns of table "ride_hailing_driver"
"""
type RideHailingDriverMaxFields {
	id: Bigint
	ride_hailing_driver_id: String
	ride_hailing_driver_verify_id: String
	driver_name: String
	phone_number: String
	id_number: String
	sex: Int
	birthday: Timestamptz
	nation: String
	sign_gov: String
	id_address: String
	start_valid_date: Timestamptz
	end_valid_date: Timestamptz
	idcard_photo: String
	quasi_driving_models: Int
	driver_school_id: String
	first_time_received_date: Timestamptz
	signnature_photo: String
	handle_id_photo: String
	current_address: String
	qualification_number: String
	is_former_driver: Boolean
	check_station: Int
	update_time_in: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	operator_id: String
	remarks: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ride_hailing_driver"
"""
type RideHailingDriverMinFields {
	id: Bigint
	ride_hailing_driver_id: String
	ride_hailing_driver_verify_id: String
	driver_name: String
	phone_number: String
	id_number: String
	sex: Int
	birthday: Timestamptz
	nation: String
	sign_gov: String
	id_address: String
	start_valid_date: Timestamptz
	end_valid_date: Timestamptz
	idcard_photo: String
	quasi_driving_models: Int
	driver_school_id: String
	first_time_received_date: Timestamptz
	signnature_photo: String
	handle_id_photo: String
	current_address: String
	qualification_number: String
	is_former_driver: Boolean
	check_station: Int
	update_time_in: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	operator_id: String
	remarks: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ride_hailing_driver"
"""
type RideHailingDriverStddevFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate stddev_pop on columns of table "ride_hailing_driver"
"""
type RideHailingDriverStddevPopFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate stddev_samp on columns of table "ride_hailing_driver"
"""
type RideHailingDriverStddevSampFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate sum on columns of table "ride_hailing_driver"
"""
type RideHailingDriverSumFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate var_pop on columns of table "ride_hailing_driver"
"""
type RideHailingDriverVarPopFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate var_samp on columns of table "ride_hailing_driver"
"""
type RideHailingDriverVarSampFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
aggregate variance on columns of table "ride_hailing_driver"
"""
type RideHailingDriverVarianceFields {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
response of any mutation on the table "ride_hailing_driver"
"""
type RideHailingDriverMutationResponse {
	affected_rows: Int!
	returning: [RideHailingDriver!]!
}
"""
ordering options when selecting data from "ride_hailing_driver"
"""
input RideHailingDriverOrderBy {
	id: OrderBy
	ride_hailing_driver_id: OrderBy
	ride_hailing_driver_verify_id: OrderBy
	driver_name: OrderBy
	phone_number: OrderBy
	id_number: OrderBy
	sex: OrderBy
	birthday: OrderBy
	nation: OrderBy
	sign_gov: OrderBy
	id_address: OrderBy
	start_valid_date: OrderBy
	end_valid_date: OrderBy
	idcard_photo: OrderBy
	quasi_driving_models: OrderBy
	driver_school_id: OrderBy
	first_time_received_date: OrderBy
	signnature_photo: OrderBy
	handle_id_photo: OrderBy
	current_address: OrderBy
	qualification_number: OrderBy
	is_former_driver: OrderBy
	check_station: OrderBy
	update_time_in: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	operator_id: OrderBy
	remarks: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ride_hailing_driver'.
"""
input RideHailingDriverBoolExp {
	_and: [RideHailingDriverBoolExp]
	_not: RideHailingDriverBoolExp
	_or: [RideHailingDriverBoolExp]
	id: BigintComparisonExp
	ride_hailing_driver_id: StringComparisonExp
	ride_hailing_driver_verify_id: StringComparisonExp
	driver_name: StringComparisonExp
	phone_number: StringComparisonExp
	id_number: StringComparisonExp
	sex: IntComparisonExp
	birthday: TimestamptzComparisonExp
	nation: StringComparisonExp
	sign_gov: StringComparisonExp
	id_address: StringComparisonExp
	start_valid_date: TimestamptzComparisonExp
	end_valid_date: TimestamptzComparisonExp
	idcard_photo: StringComparisonExp
	quasi_driving_models: IntComparisonExp
	driver_school_id: StringComparisonExp
	first_time_received_date: TimestamptzComparisonExp
	signnature_photo: StringComparisonExp
	handle_id_photo: StringComparisonExp
	current_address: StringComparisonExp
	qualification_number: StringComparisonExp
	is_former_driver: BooleanComparisonExp
	check_station: IntComparisonExp
	update_time_in: TimestamptzComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	operator_id: StringComparisonExp
	remarks: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ride_hailing_driver"
"""
input RideHailingDriverInsertInput {
	ride_hailing_driver_id: String!
	ride_hailing_driver_verify_id: String
	driver_name: String
	phone_number: String
	id_number: String
	sex: Int
	birthday: Timestamptz
	nation: String
	sign_gov: String
	id_address: String
	start_valid_date: Timestamptz
	end_valid_date: Timestamptz
	idcard_photo: String
	quasi_driving_models: Int
	driver_school_id: String
	first_time_received_date: Timestamptz
	signnature_photo: String
	handle_id_photo: String
	current_address: String
	qualification_number: String
	is_former_driver: Boolean
	check_station: Int
	update_time_in: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	operator_id: String
	remarks: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "ride_hailing_driver"
"""
input RideHailingDriverIncInput {
	id: Bigint
	sex: Int
	quasi_driving_models: Int
	check_station: Int
}
"""
input type for updating data in table "ride_hailing_driver"
"""
input RideHailingDriverSetInput {
	id: Bigint
	ride_hailing_driver_id: String
	ride_hailing_driver_verify_id: String
	driver_name: String
	phone_number: String
	id_number: String
	sex: Int
	birthday: Timestamptz
	nation: String
	sign_gov: String
	id_address: String
	start_valid_date: Timestamptz
	end_valid_date: Timestamptz
	idcard_photo: String
	quasi_driving_models: Int
	driver_school_id: String
	first_time_received_date: Timestamptz
	signnature_photo: String
	handle_id_photo: String
	current_address: String
	qualification_number: String
	is_former_driver: Boolean
	check_station: Int
	update_time_in: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	operator_id: String
	remarks: String
	is_delete: Boolean
}
"""
可选select
"""
enum RideHailingDriverSelectColumn {
	"""
	ID
	"""
	id
	"""
	网约车驾驶员ID
	"""
	ride_hailing_driver_id
	"""
	网约车驾驶员审核表ID
	"""
	ride_hailing_driver_verify_id
	"""
	驾驶员名称
	"""
	driver_name
	"""
	联系电话
	"""
	phone_number
	"""
	驾驶员身份证号
	"""
	id_number
	"""
	性别
	"""
	sex
	"""
	出生日期
	"""
	birthday
	"""
	民族
	"""
	nation
	"""
	发证机构
	"""
	sign_gov
	"""
	身份证住址
	"""
	id_address
	"""
	身份证-有效期起始日期
	"""
	start_valid_date
	"""
	有效期截止日期
	"""
	end_valid_date
	"""
	身份证图片
	"""
	idcard_photo
	"""
	准假车型
	"""
	quasi_driving_models
	"""
	驾校ID
	"""
	driver_school_id
	"""
	初次领驾驶证日期
	"""
	first_time_received_date
	"""
	签字的照片
	"""
	signnature_photo
	"""
	手持身份证照片
	"""
	handle_id_photo
	"""
	现居住地址
	"""
	current_address
	"""
	资格证号
	"""
	qualification_number
	"""
	是否旧驾驶员
	"""
	is_former_driver
	"""
	审核状态
	"""
	check_station
	"""
	内网更新时间
	"""
	update_time_in
	"""
	记录时间
	"""
	create_at
	"""
	记录人员ID
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人员id
	"""
	update_by
	"""
	操作员id
	"""
	operator_id
	"""
	备注
	"""
	remarks
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ride_hailing_driver(distinct_on: [RideHailingDriverSelectColumn!], limit: Int, offset: Int, order_by: [RideHailingDriverOrderBy!], where: RideHailingDriverBoolExp): [RideHailingDriver!]!
	"""
	聚合查询
	"""
	ride_hailing_driver_aggregate(distinct_on: [RideHailingDriverSelectColumn!], limit: Int, offset: Int, order_by: [RideHailingDriverOrderBy!], where: RideHailingDriverBoolExp): RideHailingDriverAggregate!
	"""
	主键查询
	"""
	ride_hailing_driver_by_pk(id: Bigint!): RideHailingDriver!
	"""
	联合主键查询
	"""
	ride_hailing_driver_by_union_pk(ride_hailing_driver_id: String!): RideHailingDriver!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ride_hailing_driver(where: RideHailingDriverBoolExp!): RideHailingDriverMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ride_hailing_driver_by_pk(id: Bigint!): RideHailingDriver
	"""
	插入
	"""
	insert_ride_hailing_driver(objects: [RideHailingDriverInsertInput!]!): RideHailingDriverMutationResponse
	"""
	插入一条记录
	"""
	insert_ride_hailing_driver_one(objects: RideHailingDriverInsertInput!): RideHailingDriver
	"""
	更新
	"""
	update_ride_hailing_driver(_inc: RideHailingDriverIncInput, _set: RideHailingDriverSetInput, where: RideHailingDriverBoolExp!): RideHailingDriverMutationResponse
	"""
	根据主键更新
	"""
	update_ride_hailing_driver_by_pk(_inc: RideHailingDriverIncInput, _set: RideHailingDriverSetInput, id: Bigint!): RideHailingDriver
	"""
	根据联合主键更新
	"""
	update_ride_hailing_driver_by_union_pk(_inc: RideHailingDriverIncInput, _set: RideHailingDriverSetInput, ride_hailing_driver_id: String!): RideHailingDriver
	"""
	根据联合主键删除记录
	"""
	delete_ride_hailing_driver_by_union_pk(ride_hailing_driver_id: String!): RideHailingDriver
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ride_hailing_driver_verify.graphqls", Input: `"""
网约车驾驶员审核表
"""
type RideHailingDriverVerify {
	"""
	ID
	"""
	id: Bigint!
	"""
	审核ID
	"""
	ride_hailing_driver_verify_id: String!
	"""
	是否有暴力犯罪记录（刑侦支队）
	"""
	is_violent_crime: Boolean
	"""
	刑侦支队审核备注
	"""
	violent_crime_remark: String
	"""
	刑侦支队审核时间
	"""
	violent_crime_examine_time: Timestamptz
	"""
	是否有吸毒记录（禁毒支队）
	"""
	is_drug_history: Boolean
	"""
	禁毒支队审核备注
	"""
	drug_history_remark: String
	"""
	禁毒支队审核时间
	"""
	drug_history_examine_time: Timestamptz
	"""
	是否满足三年驾龄（驾管大队）
	"""
	is_three_years_driving_experience: Boolean
	"""
	驾管大队审核备注
	"""
	driving_experience_remark: String
	"""
	驾管大队审核时间
	"""
	driving_experience_examine_time: Timestamptz
	"""
	是否最近连续三个记分周期内没有记满12分（驾管大队）
	"""
	is_three_cycle_twelve: Boolean
	"""
	是否有交通肇事犯罪记录（事故大队）
	"""
	is_traffic_accident_escape_record: Boolean
	"""
	事故大队审核备注
	"""
	traffic_accident_escape_remark: String
	"""
	事故大队审核时间
	"""
	traffic_accident_escape_examine_time: Timestamptz
	"""
	是否有酒驾毒驾记录(秩序大队)
	"""
	is_drunk_drug_driving: Boolean
	"""
	秩序大队审核备注
	"""
	drunk_drug_driving_remark: String
	"""
	秩序大队审核时间
	"""
	drunk_drug_driving_examine_time: Timestamptz
	"""
	是否通过考试(交通局审)
	"""
	is_pass_driving_exam: Boolean
	"""
	交通局考试认定时间
	"""
	driving_exam_time: Timestamptz
	"""
	创建时间
	"""
	create_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: String!
}
"""
aggregated selection of "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyAggregate {
	aggregate: RideHailingDriverVerifyAggregateFields
}
"""
aggregate fields of "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyAggregateFields {
	avg: RideHailingDriverVerifyAvgFields
	count: Int
	max: RideHailingDriverVerifyMaxFields
	min: RideHailingDriverVerifyMinFields
	stddev: RideHailingDriverVerifyStddevFields
	stddev_pop: RideHailingDriverVerifyStddevPopFields
	stddev_samp: RideHailingDriverVerifyStddevSampFields
	sum: RideHailingDriverVerifySumFields
	var_pop: RideHailingDriverVerifyVarPopFields
	var_samp: RideHailingDriverVerifyVarSampFields
	variance: RideHailingDriverVerifyVarianceFields
}
"""
aggregate avg on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyMaxFields {
	id: Bigint
	ride_hailing_driver_verify_id: String
	is_violent_crime: Boolean
	violent_crime_remark: String
	violent_crime_examine_time: Timestamptz
	is_drug_history: Boolean
	drug_history_remark: String
	drug_history_examine_time: Timestamptz
	is_three_years_driving_experience: Boolean
	driving_experience_remark: String
	driving_experience_examine_time: Timestamptz
	is_three_cycle_twelve: Boolean
	is_traffic_accident_escape_record: Boolean
	traffic_accident_escape_remark: String
	traffic_accident_escape_examine_time: Timestamptz
	is_drunk_drug_driving: Boolean
	drunk_drug_driving_remark: String
	drunk_drug_driving_examine_time: Timestamptz
	is_pass_driving_exam: Boolean
	driving_exam_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: String
}
"""
aggregate min on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyMinFields {
	id: Bigint
	ride_hailing_driver_verify_id: String
	is_violent_crime: Boolean
	violent_crime_remark: String
	violent_crime_examine_time: Timestamptz
	is_drug_history: Boolean
	drug_history_remark: String
	drug_history_examine_time: Timestamptz
	is_three_years_driving_experience: Boolean
	driving_experience_remark: String
	driving_experience_examine_time: Timestamptz
	is_three_cycle_twelve: Boolean
	is_traffic_accident_escape_record: Boolean
	traffic_accident_escape_remark: String
	traffic_accident_escape_examine_time: Timestamptz
	is_drunk_drug_driving: Boolean
	drunk_drug_driving_remark: String
	drunk_drug_driving_examine_time: Timestamptz
	is_pass_driving_exam: Boolean
	driving_exam_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: String
}
"""
aggregate stddev on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifySumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "ride_hailing_driver_verify"
"""
type RideHailingDriverVerifyMutationResponse {
	affected_rows: Int!
	returning: [RideHailingDriverVerify!]!
}
"""
ordering options when selecting data from "ride_hailing_driver_verify"
"""
input RideHailingDriverVerifyOrderBy {
	id: OrderBy
	ride_hailing_driver_verify_id: OrderBy
	is_violent_crime: OrderBy
	violent_crime_remark: OrderBy
	violent_crime_examine_time: OrderBy
	is_drug_history: OrderBy
	drug_history_remark: OrderBy
	drug_history_examine_time: OrderBy
	is_three_years_driving_experience: OrderBy
	driving_experience_remark: OrderBy
	driving_experience_examine_time: OrderBy
	is_three_cycle_twelve: OrderBy
	is_traffic_accident_escape_record: OrderBy
	traffic_accident_escape_remark: OrderBy
	traffic_accident_escape_examine_time: OrderBy
	is_drunk_drug_driving: OrderBy
	drunk_drug_driving_remark: OrderBy
	drunk_drug_driving_examine_time: OrderBy
	is_pass_driving_exam: OrderBy
	driving_exam_time: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ride_hailing_driver_verify'.
"""
input RideHailingDriverVerifyBoolExp {
	_and: [RideHailingDriverVerifyBoolExp]
	_not: RideHailingDriverVerifyBoolExp
	_or: [RideHailingDriverVerifyBoolExp]
	id: BigintComparisonExp
	ride_hailing_driver_verify_id: StringComparisonExp
	is_violent_crime: BooleanComparisonExp
	violent_crime_remark: StringComparisonExp
	violent_crime_examine_time: TimestamptzComparisonExp
	is_drug_history: BooleanComparisonExp
	drug_history_remark: StringComparisonExp
	drug_history_examine_time: TimestamptzComparisonExp
	is_three_years_driving_experience: BooleanComparisonExp
	driving_experience_remark: StringComparisonExp
	driving_experience_examine_time: TimestamptzComparisonExp
	is_three_cycle_twelve: BooleanComparisonExp
	is_traffic_accident_escape_record: BooleanComparisonExp
	traffic_accident_escape_remark: StringComparisonExp
	traffic_accident_escape_examine_time: TimestamptzComparisonExp
	is_drunk_drug_driving: BooleanComparisonExp
	drunk_drug_driving_remark: StringComparisonExp
	drunk_drug_driving_examine_time: TimestamptzComparisonExp
	is_pass_driving_exam: BooleanComparisonExp
	driving_exam_time: TimestamptzComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: StringComparisonExp
}
"""
input type for inserting data into table "ride_hailing_driver_verify"
"""
input RideHailingDriverVerifyInsertInput {
	ride_hailing_driver_verify_id: String!
	is_violent_crime: Boolean
	violent_crime_remark: String
	violent_crime_examine_time: Timestamptz
	is_drug_history: Boolean
	drug_history_remark: String
	drug_history_examine_time: Timestamptz
	is_three_years_driving_experience: Boolean
	driving_experience_remark: String
	driving_experience_examine_time: Timestamptz
	is_three_cycle_twelve: Boolean
	is_traffic_accident_escape_record: Boolean
	traffic_accident_escape_remark: String
	traffic_accident_escape_examine_time: Timestamptz
	is_drunk_drug_driving: Boolean
	drunk_drug_driving_remark: String
	drunk_drug_driving_examine_time: Timestamptz
	is_pass_driving_exam: Boolean
	driving_exam_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: String!
}
"""
input type for incrementing integer column in table "ride_hailing_driver_verify"
"""
input RideHailingDriverVerifyIncInput {
	id: Bigint
}
"""
input type for updating data in table "ride_hailing_driver_verify"
"""
input RideHailingDriverVerifySetInput {
	id: Bigint
	ride_hailing_driver_verify_id: String
	is_violent_crime: Boolean
	violent_crime_remark: String
	violent_crime_examine_time: Timestamptz
	is_drug_history: Boolean
	drug_history_remark: String
	drug_history_examine_time: Timestamptz
	is_three_years_driving_experience: Boolean
	driving_experience_remark: String
	driving_experience_examine_time: Timestamptz
	is_three_cycle_twelve: Boolean
	is_traffic_accident_escape_record: Boolean
	traffic_accident_escape_remark: String
	traffic_accident_escape_examine_time: Timestamptz
	is_drunk_drug_driving: Boolean
	drunk_drug_driving_remark: String
	drunk_drug_driving_examine_time: Timestamptz
	is_pass_driving_exam: Boolean
	driving_exam_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: String
}
"""
可选select
"""
enum RideHailingDriverVerifySelectColumn {
	"""
	ID
	"""
	id
	"""
	审核ID
	"""
	ride_hailing_driver_verify_id
	"""
	是否有暴力犯罪记录（刑侦支队）
	"""
	is_violent_crime
	"""
	刑侦支队审核备注
	"""
	violent_crime_remark
	"""
	刑侦支队审核时间
	"""
	violent_crime_examine_time
	"""
	是否有吸毒记录（禁毒支队）
	"""
	is_drug_history
	"""
	禁毒支队审核备注
	"""
	drug_history_remark
	"""
	禁毒支队审核时间
	"""
	drug_history_examine_time
	"""
	是否满足三年驾龄（驾管大队）
	"""
	is_three_years_driving_experience
	"""
	驾管大队审核备注
	"""
	driving_experience_remark
	"""
	驾管大队审核时间
	"""
	driving_experience_examine_time
	"""
	是否最近连续三个记分周期内没有记满12分（驾管大队）
	"""
	is_three_cycle_twelve
	"""
	是否有交通肇事犯罪记录（事故大队）
	"""
	is_traffic_accident_escape_record
	"""
	事故大队审核备注
	"""
	traffic_accident_escape_remark
	"""
	事故大队审核时间
	"""
	traffic_accident_escape_examine_time
	"""
	是否有酒驾毒驾记录(秩序大队)
	"""
	is_drunk_drug_driving
	"""
	秩序大队审核备注
	"""
	drunk_drug_driving_remark
	"""
	秩序大队审核时间
	"""
	drunk_drug_driving_examine_time
	"""
	是否通过考试(交通局审)
	"""
	is_pass_driving_exam
	"""
	交通局考试认定时间
	"""
	driving_exam_time
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	修改时间
	"""
	update_at
	"""
	修改人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ride_hailing_driver_verify(distinct_on: [RideHailingDriverVerifySelectColumn!], limit: Int, offset: Int, order_by: [RideHailingDriverVerifyOrderBy!], where: RideHailingDriverVerifyBoolExp): [RideHailingDriverVerify!]!
	"""
	聚合查询
	"""
	ride_hailing_driver_verify_aggregate(distinct_on: [RideHailingDriverVerifySelectColumn!], limit: Int, offset: Int, order_by: [RideHailingDriverVerifyOrderBy!], where: RideHailingDriverVerifyBoolExp): RideHailingDriverVerifyAggregate!
	"""
	主键查询
	"""
	ride_hailing_driver_verify_by_pk(id: Bigint!): RideHailingDriverVerify!
	"""
	联合主键查询
	"""
	ride_hailing_driver_verify_by_union_pk(ride_hailing_driver_verify_id: String!): RideHailingDriverVerify!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ride_hailing_driver_verify(where: RideHailingDriverVerifyBoolExp!): RideHailingDriverVerifyMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ride_hailing_driver_verify_by_pk(id: Bigint!): RideHailingDriverVerify
	"""
	插入
	"""
	insert_ride_hailing_driver_verify(objects: [RideHailingDriverVerifyInsertInput!]!): RideHailingDriverVerifyMutationResponse
	"""
	插入一条记录
	"""
	insert_ride_hailing_driver_verify_one(objects: RideHailingDriverVerifyInsertInput!): RideHailingDriverVerify
	"""
	更新
	"""
	update_ride_hailing_driver_verify(_inc: RideHailingDriverVerifyIncInput, _set: RideHailingDriverVerifySetInput, where: RideHailingDriverVerifyBoolExp!): RideHailingDriverVerifyMutationResponse
	"""
	根据主键更新
	"""
	update_ride_hailing_driver_verify_by_pk(_inc: RideHailingDriverVerifyIncInput, _set: RideHailingDriverVerifySetInput, id: Bigint!): RideHailingDriverVerify
	"""
	根据联合主键更新
	"""
	update_ride_hailing_driver_verify_by_union_pk(_inc: RideHailingDriverVerifyIncInput, _set: RideHailingDriverVerifySetInput, ride_hailing_driver_verify_id: String!): RideHailingDriverVerify
	"""
	根据联合主键删除记录
	"""
	delete_ride_hailing_driver_verify_by_union_pk(ride_hailing_driver_verify_id: String!): RideHailingDriverVerify
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNRideHailingDriverBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ride_hailing_driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ride_hailing_driver_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNRideHailingDriverVerifyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_verify_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_verify_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ride_hailing_driver_verify_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ride_hailing_driver_verify_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RideHailingDriverInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRideHailingDriverInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRideHailingDriverInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RideHailingDriverVerifyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRideHailingDriverVerifyInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_verify_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverVerifyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRideHailingDriverVerifyInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORideHailingDriverIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORideHailingDriverSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNRideHailingDriverBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORideHailingDriverIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORideHailingDriverSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORideHailingDriverIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORideHailingDriverSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["ride_hailing_driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ride_hailing_driver_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverVerifyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORideHailingDriverVerifyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverVerifySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORideHailingDriverVerifySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNRideHailingDriverVerifyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_verify_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverVerifyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORideHailingDriverVerifyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverVerifySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORideHailingDriverVerifySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_verify_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverVerifyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORideHailingDriverVerifyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverVerifySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORideHailingDriverVerifySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["ride_hailing_driver_verify_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ride_hailing_driver_verify_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORideHailingDriverSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORideHailingDriverOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORideHailingDriverBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORideHailingDriverSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORideHailingDriverOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORideHailingDriverBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ride_hailing_driver_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ride_hailing_driver_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverVerifySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORideHailingDriverVerifySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverVerifyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORideHailingDriverVerifyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORideHailingDriverVerifyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverVerifySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORideHailingDriverVerifySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverVerifyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORideHailingDriverVerifyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORideHailingDriverVerifyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ride_hailing_driver_verify_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ride_hailing_driver_verify_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriver(rctx, args["where"].(model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMutationResponse)
	fc.Result = res
	return ec.marshalORideHailingDriverMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalORideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriver(rctx, args["objects"].([]*model.RideHailingDriverInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMutationResponse)
	fc.Result = res
	return ec.marshalORideHailingDriverMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriverOne(rctx, args["objects"].(model.RideHailingDriverInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalORideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriver(rctx, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["where"].(model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMutationResponse)
	fc.Result = res
	return ec.marshalORideHailingDriverMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverByPk(rctx, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalORideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverByUnionPk(rctx, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["ride_hailing_driver_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalORideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverByUnionPk(rctx, args["ride_hailing_driver_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalORideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverVerify(rctx, args["where"].(model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMutationResponse)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_verify_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverVerifyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalORideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriverVerify(rctx, args["objects"].([]*model.RideHailingDriverVerifyInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMutationResponse)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver_verify_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriverVerifyOne(rctx, args["objects"].(model.RideHailingDriverVerifyInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalORideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverVerify(rctx, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["where"].(model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMutationResponse)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_verify_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_verify_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverVerifyByPk(rctx, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalORideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_verify_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_verify_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverVerifyByUnionPk(rctx, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["ride_hailing_driver_verify_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalORideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_verify_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverVerifyByUnionPk(rctx, args["ride_hailing_driver_verify_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalORideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriver(rctx, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNRideHailingDriver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverAggregate(rctx, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverAggregate)
	fc.Result = res
	return ec.marshalNRideHailingDriverAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNRideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverByUnionPk(rctx, args["ride_hailing_driver_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNRideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerify(rctx, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNRideHailingDriverVerify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerifyAggregate(rctx, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyAggregate)
	fc.Result = res
	return ec.marshalNRideHailingDriverVerifyAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerifyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNRideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerifyByUnionPk(rctx, args["ride_hailing_driver_verify_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNRideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_driver_name(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_phone_number(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_id_number(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_sex(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_birthday(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_nation(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_sign_gov(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignGov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_id_address(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_start_valid_date(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_end_valid_date(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_idcard_photo(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdcardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_driver_school_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSchoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_first_time_received_date(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTimeReceivedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_signnature_photo(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignnaturePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_handle_id_photo(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_current_address(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_qualification_number(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_is_former_driver(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFormerDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_check_station(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_operator_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriver_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverAggregateFields)
	fc.Result = res
	return ec.marshalORideHailingDriverAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverAvgFields)
	fc.Result = res
	return ec.marshalORideHailingDriverAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMaxFields)
	fc.Result = res
	return ec.marshalORideHailingDriverMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMinFields)
	fc.Result = res
	return ec.marshalORideHailingDriverMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverStddevFields)
	fc.Result = res
	return ec.marshalORideHailingDriverStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverStddevPopFields)
	fc.Result = res
	return ec.marshalORideHailingDriverStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverStddevSampFields)
	fc.Result = res
	return ec.marshalORideHailingDriverStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverSumFields)
	fc.Result = res
	return ec.marshalORideHailingDriverSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVarPopFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVarSampFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVarianceFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAvgFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAvgFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverAvgFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_birthday(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_nation(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_sign_gov(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignGov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_id_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_start_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_end_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_idcard_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdcardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_driver_school_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSchoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_first_time_received_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTimeReceivedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_signnature_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignnaturePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_handle_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_current_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_qualification_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_is_former_driver(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFormerDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_operator_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_birthday(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_nation(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_sign_gov(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignGov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_id_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_start_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_end_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_idcard_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdcardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_driver_school_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSchoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_first_time_received_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTimeReceivedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_signnature_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignnaturePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_handle_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_current_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_qualification_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_is_former_driver(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFormerDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_operator_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNRideHailingDriver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevPopFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevPopFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevPopFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevSampFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevSampFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverStddevSampFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverSumFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverSumFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverSumFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarPopFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarPopFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarPopFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarSampFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarSampFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarSampFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarianceFields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarianceFields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVarianceFields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_violent_crime(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsViolentCrime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_violent_crime_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_violent_crime_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_drug_history(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrugHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_drug_history_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_drug_history_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_three_years_driving_experience(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeYearsDrivingExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_driving_experience_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_driving_experience_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_three_cycle_twelve(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeCycleTwelve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_traffic_accident_escape_record(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTrafficAccidentEscapeRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_traffic_accident_escape_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_traffic_accident_escape_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_drunk_drug_driving(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrunkDrugDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_drunk_drug_driving_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_drunk_drug_driving_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_pass_driving_exam(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPassDrivingExam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_driving_exam_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExamTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerify_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyAggregateFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyAvgFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMaxFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMinFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyStddevFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyStddevPopFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyStddevSampFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifySumFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyVarPopFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyVarSampFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyVarianceFields)
	fc.Result = res
	return ec.marshalORideHailingDriverVerifyVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_violent_crime(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsViolentCrime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_violent_crime_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_violent_crime_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_drug_history(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrugHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_drug_history_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_drug_history_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_three_years_driving_experience(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeYearsDrivingExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_driving_experience_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_driving_experience_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_three_cycle_twelve(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeCycleTwelve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_traffic_accident_escape_record(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTrafficAccidentEscapeRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_traffic_accident_escape_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_traffic_accident_escape_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_drunk_drug_driving(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrunkDrugDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_drunk_drug_driving_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_drunk_drug_driving_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_pass_driving_exam(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPassDrivingExam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_driving_exam_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExamTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_violent_crime(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsViolentCrime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_violent_crime_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_violent_crime_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_drug_history(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrugHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_drug_history_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_drug_history_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_three_years_driving_experience(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeYearsDrivingExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_driving_experience_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_driving_experience_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_three_cycle_twelve(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeCycleTwelve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_traffic_accident_escape_record(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTrafficAccidentEscapeRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_traffic_accident_escape_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_traffic_accident_escape_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_drunk_drug_driving(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrunkDrugDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_drunk_drug_driving_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_drunk_drug_driving_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_pass_driving_exam(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPassDrivingExam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_driving_exam_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExamTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNRideHailingDriverVerify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifySumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RideHailingDriverVerifyVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RideHailingDriverVerifyVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverBoolExp(ctx context.Context, obj interface{}) (model.RideHailingDriverBoolExp, error) {
	var it model.RideHailingDriverBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalORideHailingDriverBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalORideHailingDriverBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalORideHailingDriverBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverIncInput(ctx context.Context, obj interface{}) (model.RideHailingDriverIncInput, error) {
	var it model.RideHailingDriverIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverInsertInput(ctx context.Context, obj interface{}) (model.RideHailingDriverInsertInput, error) {
	var it model.RideHailingDriverInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverOrderBy(ctx context.Context, obj interface{}) (model.RideHailingDriverOrderBy, error) {
	var it model.RideHailingDriverOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverSetInput(ctx context.Context, obj interface{}) (model.RideHailingDriverSetInput, error) {
	var it model.RideHailingDriverSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverVerifyBoolExp(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyBoolExp, error) {
	var it model.RideHailingDriverVerifyBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalORideHailingDriverVerifyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalORideHailingDriverVerifyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalORideHailingDriverVerifyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverVerifyIncInput(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyIncInput, error) {
	var it model.RideHailingDriverVerifyIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverVerifyInsertInput(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyInsertInput, error) {
	var it model.RideHailingDriverVerifyInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverVerifyOrderBy(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyOrderBy, error) {
	var it model.RideHailingDriverVerifyOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRideHailingDriverVerifySetInput(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifySetInput, error) {
	var it model.RideHailingDriverVerifySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_ride_hailing_driver":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver(ctx, field)
		case "delete_ride_hailing_driver_by_pk":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_by_pk(ctx, field)
		case "insert_ride_hailing_driver":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver(ctx, field)
		case "insert_ride_hailing_driver_one":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver_one(ctx, field)
		case "update_ride_hailing_driver":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver(ctx, field)
		case "update_ride_hailing_driver_by_pk":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_by_pk(ctx, field)
		case "update_ride_hailing_driver_by_union_pk":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_by_union_pk(ctx, field)
		case "delete_ride_hailing_driver_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_by_union_pk(ctx, field)
		case "delete_ride_hailing_driver_verify":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_verify(ctx, field)
		case "delete_ride_hailing_driver_verify_by_pk":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_verify_by_pk(ctx, field)
		case "insert_ride_hailing_driver_verify":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver_verify(ctx, field)
		case "insert_ride_hailing_driver_verify_one":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver_verify_one(ctx, field)
		case "update_ride_hailing_driver_verify":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_verify(ctx, field)
		case "update_ride_hailing_driver_verify_by_pk":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_verify_by_pk(ctx, field)
		case "update_ride_hailing_driver_verify_by_union_pk":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_verify_by_union_pk(ctx, field)
		case "delete_ride_hailing_driver_verify_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_verify_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "ride_hailing_driver":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_verify":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_verify_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_verify_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_verify_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverImplementors = []string{"RideHailingDriver"}

func (ec *executionContext) _RideHailingDriver(ctx context.Context, sel ast.SelectionSet, obj *model1.RideHailingDriver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriver")
		case "id":
			out.Values[i] = ec._RideHailingDriver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ride_hailing_driver_id":
			out.Values[i] = ec._RideHailingDriver_ride_hailing_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._RideHailingDriver_ride_hailing_driver_verify_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._RideHailingDriver_driver_name(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._RideHailingDriver_phone_number(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._RideHailingDriver_id_number(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriver_sex(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._RideHailingDriver_birthday(ctx, field, obj)
		case "nation":
			out.Values[i] = ec._RideHailingDriver_nation(ctx, field, obj)
		case "sign_gov":
			out.Values[i] = ec._RideHailingDriver_sign_gov(ctx, field, obj)
		case "id_address":
			out.Values[i] = ec._RideHailingDriver_id_address(ctx, field, obj)
		case "start_valid_date":
			out.Values[i] = ec._RideHailingDriver_start_valid_date(ctx, field, obj)
		case "end_valid_date":
			out.Values[i] = ec._RideHailingDriver_end_valid_date(ctx, field, obj)
		case "idcard_photo":
			out.Values[i] = ec._RideHailingDriver_idcard_photo(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriver_quasi_driving_models(ctx, field, obj)
		case "driver_school_id":
			out.Values[i] = ec._RideHailingDriver_driver_school_id(ctx, field, obj)
		case "first_time_received_date":
			out.Values[i] = ec._RideHailingDriver_first_time_received_date(ctx, field, obj)
		case "signnature_photo":
			out.Values[i] = ec._RideHailingDriver_signnature_photo(ctx, field, obj)
		case "handle_id_photo":
			out.Values[i] = ec._RideHailingDriver_handle_id_photo(ctx, field, obj)
		case "current_address":
			out.Values[i] = ec._RideHailingDriver_current_address(ctx, field, obj)
		case "qualification_number":
			out.Values[i] = ec._RideHailingDriver_qualification_number(ctx, field, obj)
		case "is_former_driver":
			out.Values[i] = ec._RideHailingDriver_is_former_driver(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriver_check_station(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._RideHailingDriver_update_time_in(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._RideHailingDriver_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._RideHailingDriver_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._RideHailingDriver_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._RideHailingDriver_update_by(ctx, field, obj)
		case "operator_id":
			out.Values[i] = ec._RideHailingDriver_operator_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._RideHailingDriver_remarks(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._RideHailingDriver_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverAggregateImplementors = []string{"RideHailingDriverAggregate"}

func (ec *executionContext) _RideHailingDriverAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverAggregate")
		case "aggregate":
			out.Values[i] = ec._RideHailingDriverAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverAggregateFieldsImplementors = []string{"RideHailingDriverAggregateFields"}

func (ec *executionContext) _RideHailingDriverAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverAggregateFields")
		case "avg":
			out.Values[i] = ec._RideHailingDriverAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._RideHailingDriverAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._RideHailingDriverAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._RideHailingDriverAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._RideHailingDriverAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._RideHailingDriverAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._RideHailingDriverAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._RideHailingDriverAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._RideHailingDriverAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._RideHailingDriverAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._RideHailingDriverAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverAvgFieldsImplementors = []string{"RideHailingDriverAvgFields"}

func (ec *executionContext) _RideHailingDriverAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverAvgFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverAvgFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverAvgFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverAvgFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverAvgFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverMaxFieldsImplementors = []string{"RideHailingDriverMaxFields"}

func (ec *executionContext) _RideHailingDriverMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverMaxFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverMaxFields_id(ctx, field, obj)
		case "ride_hailing_driver_id":
			out.Values[i] = ec._RideHailingDriverMaxFields_ride_hailing_driver_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._RideHailingDriverMaxFields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._RideHailingDriverMaxFields_driver_name(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._RideHailingDriverMaxFields_phone_number(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._RideHailingDriverMaxFields_id_number(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverMaxFields_sex(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._RideHailingDriverMaxFields_birthday(ctx, field, obj)
		case "nation":
			out.Values[i] = ec._RideHailingDriverMaxFields_nation(ctx, field, obj)
		case "sign_gov":
			out.Values[i] = ec._RideHailingDriverMaxFields_sign_gov(ctx, field, obj)
		case "id_address":
			out.Values[i] = ec._RideHailingDriverMaxFields_id_address(ctx, field, obj)
		case "start_valid_date":
			out.Values[i] = ec._RideHailingDriverMaxFields_start_valid_date(ctx, field, obj)
		case "end_valid_date":
			out.Values[i] = ec._RideHailingDriverMaxFields_end_valid_date(ctx, field, obj)
		case "idcard_photo":
			out.Values[i] = ec._RideHailingDriverMaxFields_idcard_photo(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverMaxFields_quasi_driving_models(ctx, field, obj)
		case "driver_school_id":
			out.Values[i] = ec._RideHailingDriverMaxFields_driver_school_id(ctx, field, obj)
		case "first_time_received_date":
			out.Values[i] = ec._RideHailingDriverMaxFields_first_time_received_date(ctx, field, obj)
		case "signnature_photo":
			out.Values[i] = ec._RideHailingDriverMaxFields_signnature_photo(ctx, field, obj)
		case "handle_id_photo":
			out.Values[i] = ec._RideHailingDriverMaxFields_handle_id_photo(ctx, field, obj)
		case "current_address":
			out.Values[i] = ec._RideHailingDriverMaxFields_current_address(ctx, field, obj)
		case "qualification_number":
			out.Values[i] = ec._RideHailingDriverMaxFields_qualification_number(ctx, field, obj)
		case "is_former_driver":
			out.Values[i] = ec._RideHailingDriverMaxFields_is_former_driver(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverMaxFields_check_station(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._RideHailingDriverMaxFields_update_time_in(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._RideHailingDriverMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._RideHailingDriverMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._RideHailingDriverMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._RideHailingDriverMaxFields_update_by(ctx, field, obj)
		case "operator_id":
			out.Values[i] = ec._RideHailingDriverMaxFields_operator_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._RideHailingDriverMaxFields_remarks(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._RideHailingDriverMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverMinFieldsImplementors = []string{"RideHailingDriverMinFields"}

func (ec *executionContext) _RideHailingDriverMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverMinFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverMinFields_id(ctx, field, obj)
		case "ride_hailing_driver_id":
			out.Values[i] = ec._RideHailingDriverMinFields_ride_hailing_driver_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._RideHailingDriverMinFields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._RideHailingDriverMinFields_driver_name(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._RideHailingDriverMinFields_phone_number(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._RideHailingDriverMinFields_id_number(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverMinFields_sex(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._RideHailingDriverMinFields_birthday(ctx, field, obj)
		case "nation":
			out.Values[i] = ec._RideHailingDriverMinFields_nation(ctx, field, obj)
		case "sign_gov":
			out.Values[i] = ec._RideHailingDriverMinFields_sign_gov(ctx, field, obj)
		case "id_address":
			out.Values[i] = ec._RideHailingDriverMinFields_id_address(ctx, field, obj)
		case "start_valid_date":
			out.Values[i] = ec._RideHailingDriverMinFields_start_valid_date(ctx, field, obj)
		case "end_valid_date":
			out.Values[i] = ec._RideHailingDriverMinFields_end_valid_date(ctx, field, obj)
		case "idcard_photo":
			out.Values[i] = ec._RideHailingDriverMinFields_idcard_photo(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverMinFields_quasi_driving_models(ctx, field, obj)
		case "driver_school_id":
			out.Values[i] = ec._RideHailingDriverMinFields_driver_school_id(ctx, field, obj)
		case "first_time_received_date":
			out.Values[i] = ec._RideHailingDriverMinFields_first_time_received_date(ctx, field, obj)
		case "signnature_photo":
			out.Values[i] = ec._RideHailingDriverMinFields_signnature_photo(ctx, field, obj)
		case "handle_id_photo":
			out.Values[i] = ec._RideHailingDriverMinFields_handle_id_photo(ctx, field, obj)
		case "current_address":
			out.Values[i] = ec._RideHailingDriverMinFields_current_address(ctx, field, obj)
		case "qualification_number":
			out.Values[i] = ec._RideHailingDriverMinFields_qualification_number(ctx, field, obj)
		case "is_former_driver":
			out.Values[i] = ec._RideHailingDriverMinFields_is_former_driver(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverMinFields_check_station(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._RideHailingDriverMinFields_update_time_in(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._RideHailingDriverMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._RideHailingDriverMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._RideHailingDriverMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._RideHailingDriverMinFields_update_by(ctx, field, obj)
		case "operator_id":
			out.Values[i] = ec._RideHailingDriverMinFields_operator_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._RideHailingDriverMinFields_remarks(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._RideHailingDriverMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverMutationResponseImplementors = []string{"RideHailingDriverMutationResponse"}

func (ec *executionContext) _RideHailingDriverMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._RideHailingDriverMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._RideHailingDriverMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverStddevFieldsImplementors = []string{"RideHailingDriverStddevFields"}

func (ec *executionContext) _RideHailingDriverStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverStddevFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverStddevFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverStddevFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverStddevFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverStddevFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverStddevPopFieldsImplementors = []string{"RideHailingDriverStddevPopFields"}

func (ec *executionContext) _RideHailingDriverStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverStddevPopFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverStddevPopFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverStddevPopFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverStddevPopFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverStddevPopFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverStddevSampFieldsImplementors = []string{"RideHailingDriverStddevSampFields"}

func (ec *executionContext) _RideHailingDriverStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverStddevSampFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverStddevSampFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverStddevSampFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverStddevSampFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverStddevSampFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverSumFieldsImplementors = []string{"RideHailingDriverSumFields"}

func (ec *executionContext) _RideHailingDriverSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverSumFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverSumFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverSumFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverSumFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverSumFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVarPopFieldsImplementors = []string{"RideHailingDriverVarPopFields"}

func (ec *executionContext) _RideHailingDriverVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVarPopFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVarPopFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverVarPopFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverVarPopFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverVarPopFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVarSampFieldsImplementors = []string{"RideHailingDriverVarSampFields"}

func (ec *executionContext) _RideHailingDriverVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVarSampFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVarSampFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverVarSampFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverVarSampFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverVarSampFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVarianceFieldsImplementors = []string{"RideHailingDriverVarianceFields"}

func (ec *executionContext) _RideHailingDriverVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVarianceFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVarianceFields_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._RideHailingDriverVarianceFields_sex(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._RideHailingDriverVarianceFields_quasi_driving_models(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._RideHailingDriverVarianceFields_check_station(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyImplementors = []string{"RideHailingDriverVerify"}

func (ec *executionContext) _RideHailingDriverVerify(ctx context.Context, sel ast.SelectionSet, obj *model1.RideHailingDriverVerify) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerify")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerify_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._RideHailingDriverVerify_ride_hailing_driver_verify_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_violent_crime":
			out.Values[i] = ec._RideHailingDriverVerify_is_violent_crime(ctx, field, obj)
		case "violent_crime_remark":
			out.Values[i] = ec._RideHailingDriverVerify_violent_crime_remark(ctx, field, obj)
		case "violent_crime_examine_time":
			out.Values[i] = ec._RideHailingDriverVerify_violent_crime_examine_time(ctx, field, obj)
		case "is_drug_history":
			out.Values[i] = ec._RideHailingDriverVerify_is_drug_history(ctx, field, obj)
		case "drug_history_remark":
			out.Values[i] = ec._RideHailingDriverVerify_drug_history_remark(ctx, field, obj)
		case "drug_history_examine_time":
			out.Values[i] = ec._RideHailingDriverVerify_drug_history_examine_time(ctx, field, obj)
		case "is_three_years_driving_experience":
			out.Values[i] = ec._RideHailingDriverVerify_is_three_years_driving_experience(ctx, field, obj)
		case "driving_experience_remark":
			out.Values[i] = ec._RideHailingDriverVerify_driving_experience_remark(ctx, field, obj)
		case "driving_experience_examine_time":
			out.Values[i] = ec._RideHailingDriverVerify_driving_experience_examine_time(ctx, field, obj)
		case "is_three_cycle_twelve":
			out.Values[i] = ec._RideHailingDriverVerify_is_three_cycle_twelve(ctx, field, obj)
		case "is_traffic_accident_escape_record":
			out.Values[i] = ec._RideHailingDriverVerify_is_traffic_accident_escape_record(ctx, field, obj)
		case "traffic_accident_escape_remark":
			out.Values[i] = ec._RideHailingDriverVerify_traffic_accident_escape_remark(ctx, field, obj)
		case "traffic_accident_escape_examine_time":
			out.Values[i] = ec._RideHailingDriverVerify_traffic_accident_escape_examine_time(ctx, field, obj)
		case "is_drunk_drug_driving":
			out.Values[i] = ec._RideHailingDriverVerify_is_drunk_drug_driving(ctx, field, obj)
		case "drunk_drug_driving_remark":
			out.Values[i] = ec._RideHailingDriverVerify_drunk_drug_driving_remark(ctx, field, obj)
		case "drunk_drug_driving_examine_time":
			out.Values[i] = ec._RideHailingDriverVerify_drunk_drug_driving_examine_time(ctx, field, obj)
		case "is_pass_driving_exam":
			out.Values[i] = ec._RideHailingDriverVerify_is_pass_driving_exam(ctx, field, obj)
		case "driving_exam_time":
			out.Values[i] = ec._RideHailingDriverVerify_driving_exam_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._RideHailingDriverVerify_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._RideHailingDriverVerify_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._RideHailingDriverVerify_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._RideHailingDriverVerify_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._RideHailingDriverVerify_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._RideHailingDriverVerify_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._RideHailingDriverVerify_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyAggregateImplementors = []string{"RideHailingDriverVerifyAggregate"}

func (ec *executionContext) _RideHailingDriverVerifyAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyAggregate")
		case "aggregate":
			out.Values[i] = ec._RideHailingDriverVerifyAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyAggregateFieldsImplementors = []string{"RideHailingDriverVerifyAggregateFields"}

func (ec *executionContext) _RideHailingDriverVerifyAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyAggregateFields")
		case "avg":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._RideHailingDriverVerifyAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyAvgFieldsImplementors = []string{"RideHailingDriverVerifyAvgFields"}

func (ec *executionContext) _RideHailingDriverVerifyAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyAvgFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyMaxFieldsImplementors = []string{"RideHailingDriverVerifyMaxFields"}

func (ec *executionContext) _RideHailingDriverVerifyMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyMaxFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "is_violent_crime":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_violent_crime(ctx, field, obj)
		case "violent_crime_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_violent_crime_remark(ctx, field, obj)
		case "violent_crime_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_violent_crime_examine_time(ctx, field, obj)
		case "is_drug_history":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_drug_history(ctx, field, obj)
		case "drug_history_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_drug_history_remark(ctx, field, obj)
		case "drug_history_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_drug_history_examine_time(ctx, field, obj)
		case "is_three_years_driving_experience":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_three_years_driving_experience(ctx, field, obj)
		case "driving_experience_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_driving_experience_remark(ctx, field, obj)
		case "driving_experience_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_driving_experience_examine_time(ctx, field, obj)
		case "is_three_cycle_twelve":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_three_cycle_twelve(ctx, field, obj)
		case "is_traffic_accident_escape_record":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_traffic_accident_escape_record(ctx, field, obj)
		case "traffic_accident_escape_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_traffic_accident_escape_remark(ctx, field, obj)
		case "traffic_accident_escape_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_traffic_accident_escape_examine_time(ctx, field, obj)
		case "is_drunk_drug_driving":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_drunk_drug_driving(ctx, field, obj)
		case "drunk_drug_driving_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_drunk_drug_driving_remark(ctx, field, obj)
		case "drunk_drug_driving_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_drunk_drug_driving_examine_time(ctx, field, obj)
		case "is_pass_driving_exam":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_pass_driving_exam(ctx, field, obj)
		case "driving_exam_time":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_driving_exam_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._RideHailingDriverVerifyMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyMinFieldsImplementors = []string{"RideHailingDriverVerifyMinFields"}

func (ec *executionContext) _RideHailingDriverVerifyMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyMinFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "is_violent_crime":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_violent_crime(ctx, field, obj)
		case "violent_crime_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_violent_crime_remark(ctx, field, obj)
		case "violent_crime_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_violent_crime_examine_time(ctx, field, obj)
		case "is_drug_history":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_drug_history(ctx, field, obj)
		case "drug_history_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_drug_history_remark(ctx, field, obj)
		case "drug_history_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_drug_history_examine_time(ctx, field, obj)
		case "is_three_years_driving_experience":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_three_years_driving_experience(ctx, field, obj)
		case "driving_experience_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_driving_experience_remark(ctx, field, obj)
		case "driving_experience_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_driving_experience_examine_time(ctx, field, obj)
		case "is_three_cycle_twelve":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_three_cycle_twelve(ctx, field, obj)
		case "is_traffic_accident_escape_record":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_traffic_accident_escape_record(ctx, field, obj)
		case "traffic_accident_escape_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_traffic_accident_escape_remark(ctx, field, obj)
		case "traffic_accident_escape_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_traffic_accident_escape_examine_time(ctx, field, obj)
		case "is_drunk_drug_driving":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_drunk_drug_driving(ctx, field, obj)
		case "drunk_drug_driving_remark":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_drunk_drug_driving_remark(ctx, field, obj)
		case "drunk_drug_driving_examine_time":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_drunk_drug_driving_examine_time(ctx, field, obj)
		case "is_pass_driving_exam":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_pass_driving_exam(ctx, field, obj)
		case "driving_exam_time":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_driving_exam_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._RideHailingDriverVerifyMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyMutationResponseImplementors = []string{"RideHailingDriverVerifyMutationResponse"}

func (ec *executionContext) _RideHailingDriverVerifyMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._RideHailingDriverVerifyMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._RideHailingDriverVerifyMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyStddevFieldsImplementors = []string{"RideHailingDriverVerifyStddevFields"}

func (ec *executionContext) _RideHailingDriverVerifyStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyStddevFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyStddevPopFieldsImplementors = []string{"RideHailingDriverVerifyStddevPopFields"}

func (ec *executionContext) _RideHailingDriverVerifyStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyStddevPopFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyStddevSampFieldsImplementors = []string{"RideHailingDriverVerifyStddevSampFields"}

func (ec *executionContext) _RideHailingDriverVerifyStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyStddevSampFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifySumFieldsImplementors = []string{"RideHailingDriverVerifySumFields"}

func (ec *executionContext) _RideHailingDriverVerifySumFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifySumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifySumFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifySumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyVarPopFieldsImplementors = []string{"RideHailingDriverVerifyVarPopFields"}

func (ec *executionContext) _RideHailingDriverVerifyVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyVarPopFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyVarSampFieldsImplementors = []string{"RideHailingDriverVerifyVarSampFields"}

func (ec *executionContext) _RideHailingDriverVerifyVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyVarSampFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rideHailingDriverVerifyVarianceFieldsImplementors = []string{"RideHailingDriverVerifyVarianceFields"}

func (ec *executionContext) _RideHailingDriverVerifyVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rideHailingDriverVerifyVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RideHailingDriverVerifyVarianceFields")
		case "id":
			out.Values[i] = ec._RideHailingDriverVerifyVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNRideHailingDriver2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx context.Context, sel ast.SelectionSet, v model1.RideHailingDriver) graphql.Marshaler {
	return ec._RideHailingDriver(ctx, sel, &v)
}

func (ec *executionContext) marshalNRideHailingDriver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RideHailingDriver) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriver) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RideHailingDriver(ctx, sel, v)
}

func (ec *executionContext) marshalNRideHailingDriverAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregate(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverAggregate) graphql.Marshaler {
	return ec._RideHailingDriverAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNRideHailingDriverAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RideHailingDriverAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRideHailingDriverBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx context.Context, v interface{}) (model.RideHailingDriverBoolExp, error) {
	res, err := ec.unmarshalInputRideHailingDriverBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx context.Context, v interface{}) (model.RideHailingDriverInsertInput, error) {
	res, err := ec.unmarshalInputRideHailingDriverInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRideHailingDriverInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRideHailingDriverInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx context.Context, v interface{}) (*model.RideHailingDriverInsertInput, error) {
	res, err := ec.unmarshalInputRideHailingDriverInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverOrderBy, error) {
	res, err := ec.unmarshalInputRideHailingDriverOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx context.Context, v interface{}) (model.RideHailingDriverSelectColumn, error) {
	var res model.RideHailingDriverSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRideHailingDriverSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRideHailingDriverVerify2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx context.Context, sel ast.SelectionSet, v model1.RideHailingDriverVerify) graphql.Marshaler {
	return ec._RideHailingDriverVerify(ctx, sel, &v)
}

func (ec *executionContext) marshalNRideHailingDriverVerify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RideHailingDriverVerify) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriverVerify) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RideHailingDriverVerify(ctx, sel, v)
}

func (ec *executionContext) marshalNRideHailingDriverVerifyAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregate(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverVerifyAggregate) graphql.Marshaler {
	return ec._RideHailingDriverVerifyAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNRideHailingDriverVerifyAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRideHailingDriverVerifyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyBoolExp, error) {
	res, err := ec.unmarshalInputRideHailingDriverVerifyBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverVerifyInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyInsertInput, error) {
	res, err := ec.unmarshalInputRideHailingDriverVerifyInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverVerifyInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverVerifyInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverVerifyInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRideHailingDriverVerifyInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRideHailingDriverVerifyInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyInsertInput, error) {
	res, err := ec.unmarshalInputRideHailingDriverVerifyInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverVerifyOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyOrderBy, error) {
	res, err := ec.unmarshalInputRideHailingDriverVerifyOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRideHailingDriverVerifySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx context.Context, v interface{}) (model.RideHailingDriverVerifySelectColumn, error) {
	var res model.RideHailingDriverVerifySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRideHailingDriverVerifySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverVerifySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalORideHailingDriver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriver(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalORideHailingDriverBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx context.Context, v interface{}) ([]*model.RideHailingDriverBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORideHailingDriverBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORideHailingDriverBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx context.Context, v interface{}) (*model.RideHailingDriverBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRideHailingDriverBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORideHailingDriverIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx context.Context, v interface{}) (*model.RideHailingDriverIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRideHailingDriverIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORideHailingDriverMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalORideHailingDriverOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRideHailingDriverOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORideHailingDriverSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RideHailingDriverSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RideHailingDriverSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRideHailingDriverSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORideHailingDriverSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RideHailingDriverSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRideHailingDriverSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalORideHailingDriverSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx context.Context, v interface{}) (*model.RideHailingDriverSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRideHailingDriverSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORideHailingDriverStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSumFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriverVerify) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerify(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalORideHailingDriverVerifyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx context.Context, v interface{}) ([]*model.RideHailingDriverVerifyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverVerifyBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORideHailingDriverVerifyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORideHailingDriverVerifyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRideHailingDriverVerifyBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORideHailingDriverVerifyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRideHailingDriverVerifyIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORideHailingDriverVerifyMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalORideHailingDriverVerifyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverVerifyOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverVerifyOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRideHailingDriverVerifyOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORideHailingDriverVerifySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RideHailingDriverVerifySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RideHailingDriverVerifySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRideHailingDriverVerifySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORideHailingDriverVerifySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RideHailingDriverVerifySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRideHailingDriverVerifySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalORideHailingDriverVerifySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRideHailingDriverVerifySetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORideHailingDriverVerifyStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySumFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifySumFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORideHailingDriverVerifyVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RideHailingDriverVerifyVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
