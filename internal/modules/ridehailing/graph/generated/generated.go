// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/ridehailing/graph/model"
	model1 "VehicleSupervision/internal/modules/ridehailing/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteRideHailingDriver           func(childComplexity int, where model.RideHailingDriverBoolExp) int
		DeleteRideHailingDriverByPk       func(childComplexity int, id int64) int
		DeleteRideHailingDriverVerify     func(childComplexity int, where model.RideHailingDriverVerifyBoolExp) int
		DeleteRideHailingDriverVerifyByPk func(childComplexity int, id int64) int
		InsertRideHailingDriver           func(childComplexity int, objects []*model.RideHailingDriverInsertInput, onConflict *model.RideHailingDriverOnConflict) int
		InsertRideHailingDriverOne        func(childComplexity int, object model.RideHailingDriverInsertInput, onConflict *model.RideHailingDriverOnConflict) int
		InsertRideHailingDriverVerify     func(childComplexity int, objects []*model.RideHailingDriverVerifyInsertInput, onConflict *model.RideHailingDriverVerifyOnConflict) int
		InsertRideHailingDriverVerifyOne  func(childComplexity int, object model.RideHailingDriverVerifyInsertInput, onConflict *model.RideHailingDriverVerifyOnConflict) int
		UpdateRideHailingDriver           func(childComplexity int, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, where model.RideHailingDriverBoolExp) int
		UpdateRideHailingDriverByPk       func(childComplexity int, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, pkColumns model.RideHailingDriverPkColumnsInput) int
		UpdateRideHailingDriverVerify     func(childComplexity int, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, where model.RideHailingDriverVerifyBoolExp) int
		UpdateRideHailingDriverVerifyByPk func(childComplexity int, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, pkColumns model.RideHailingDriverVerifyPkColumnsInput) int
	}

	Query struct {
		RideHailingDriver                func(childComplexity int, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) int
		RideHailingDriverAggregate       func(childComplexity int, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) int
		RideHailingDriverByPk            func(childComplexity int, id int64) int
		RideHailingDriverVerify          func(childComplexity int, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) int
		RideHailingDriverVerifyAggregate func(childComplexity int, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) int
		RideHailingDriverVerifyByPk      func(childComplexity int, id int64) int
	}

	RideHailingDriver struct {
		Birthday                  func(childComplexity int) int
		CheckStation              func(childComplexity int) int
		CreateAt                  func(childComplexity int) int
		CreateBy                  func(childComplexity int) int
		CurrentAddress            func(childComplexity int) int
		DriverName                func(childComplexity int) int
		DriverSchoolID            func(childComplexity int) int
		EndValidDate              func(childComplexity int) int
		FirstTimeReceivedDate     func(childComplexity int) int
		HandleIDPhoto             func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDAddress                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdcardPhoto               func(childComplexity int) int
		IsDelete                  func(childComplexity int) int
		IsFormerDriver            func(childComplexity int) int
		Nation                    func(childComplexity int) int
		OperatorID                func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		QualificationNumber       func(childComplexity int) int
		QuasiDrivingModels        func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		RideHailingDriverID       func(childComplexity int) int
		RideHailingDriverVerifyID func(childComplexity int) int
		Sex                       func(childComplexity int) int
		SignGov                   func(childComplexity int) int
		SignnaturePhoto           func(childComplexity int) int
		StartValidDate            func(childComplexity int) int
		UpdateAt                  func(childComplexity int) int
		UpdateBy                  func(childComplexity int) int
		UpdateTimeIn              func(childComplexity int) int
	}

	RideHailingDriverAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	RideHailingDriverAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.RideHailingDriverSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RideHailingDriverAvgFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverMaxFields struct {
		Birthday                  func(childComplexity int) int
		CheckStation              func(childComplexity int) int
		CreateAt                  func(childComplexity int) int
		CreateBy                  func(childComplexity int) int
		CurrentAddress            func(childComplexity int) int
		DriverName                func(childComplexity int) int
		DriverSchoolID            func(childComplexity int) int
		EndValidDate              func(childComplexity int) int
		FirstTimeReceivedDate     func(childComplexity int) int
		HandleIDPhoto             func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDAddress                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdcardPhoto               func(childComplexity int) int
		Nation                    func(childComplexity int) int
		OperatorID                func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		QualificationNumber       func(childComplexity int) int
		QuasiDrivingModels        func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		RideHailingDriverID       func(childComplexity int) int
		RideHailingDriverVerifyID func(childComplexity int) int
		Sex                       func(childComplexity int) int
		SignGov                   func(childComplexity int) int
		SignnaturePhoto           func(childComplexity int) int
		StartValidDate            func(childComplexity int) int
		UpdateAt                  func(childComplexity int) int
		UpdateBy                  func(childComplexity int) int
		UpdateTimeIn              func(childComplexity int) int
	}

	RideHailingDriverMinFields struct {
		Birthday                  func(childComplexity int) int
		CheckStation              func(childComplexity int) int
		CreateAt                  func(childComplexity int) int
		CreateBy                  func(childComplexity int) int
		CurrentAddress            func(childComplexity int) int
		DriverName                func(childComplexity int) int
		DriverSchoolID            func(childComplexity int) int
		EndValidDate              func(childComplexity int) int
		FirstTimeReceivedDate     func(childComplexity int) int
		HandleIDPhoto             func(childComplexity int) int
		ID                        func(childComplexity int) int
		IDAddress                 func(childComplexity int) int
		IDNumber                  func(childComplexity int) int
		IdcardPhoto               func(childComplexity int) int
		Nation                    func(childComplexity int) int
		OperatorID                func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		QualificationNumber       func(childComplexity int) int
		QuasiDrivingModels        func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		RideHailingDriverID       func(childComplexity int) int
		RideHailingDriverVerifyID func(childComplexity int) int
		Sex                       func(childComplexity int) int
		SignGov                   func(childComplexity int) int
		SignnaturePhoto           func(childComplexity int) int
		StartValidDate            func(childComplexity int) int
		UpdateAt                  func(childComplexity int) int
		UpdateBy                  func(childComplexity int) int
		UpdateTimeIn              func(childComplexity int) int
	}

	RideHailingDriverMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RideHailingDriverStddevFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverStddevPopFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverStddevSampFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverSumFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVarPopFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVarSampFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVarianceFields struct {
		CheckStation       func(childComplexity int) int
		ID                 func(childComplexity int) int
		QuasiDrivingModels func(childComplexity int) int
		Sex                func(childComplexity int) int
	}

	RideHailingDriverVerify struct {
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DrivingExamTime                  func(childComplexity int) int
		DrivingExperienceExamineTime     func(childComplexity int) int
		DrivingExperienceRemark          func(childComplexity int) int
		DrugHistoryExamineTime           func(childComplexity int) int
		DrugHistoryRemark                func(childComplexity int) int
		DrunkDrugDrivingExamineTime      func(childComplexity int) int
		DrunkDrugDrivingRemark           func(childComplexity int) int
		ID                               func(childComplexity int) int
		IsDelete                         func(childComplexity int) int
		IsDrugHistory                    func(childComplexity int) int
		IsDrunkDrugDriving               func(childComplexity int) int
		IsPassDrivingExam                func(childComplexity int) int
		IsThreeCycleTwelve               func(childComplexity int) int
		IsThreeYearsDrivingExperience    func(childComplexity int) int
		IsTrafficAccidentEscapeRecord    func(childComplexity int) int
		IsViolentCrime                   func(childComplexity int) int
		RideHailingDriverVerifyID        func(childComplexity int) int
		TrafficAccidentEscapeExamineTime func(childComplexity int) int
		TrafficAccidentEscapeRemark      func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		ViolentCrimeExamineTime          func(childComplexity int) int
		ViolentCrimeRemark               func(childComplexity int) int
	}

	RideHailingDriverVerifyAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	RideHailingDriverVerifyAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.RideHailingDriverVerifySelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RideHailingDriverVerifyAvgFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyMaxFields struct {
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DrivingExamTime                  func(childComplexity int) int
		DrivingExperienceExamineTime     func(childComplexity int) int
		DrivingExperienceRemark          func(childComplexity int) int
		DrugHistoryExamineTime           func(childComplexity int) int
		DrugHistoryRemark                func(childComplexity int) int
		DrunkDrugDrivingExamineTime      func(childComplexity int) int
		DrunkDrugDrivingRemark           func(childComplexity int) int
		ID                               func(childComplexity int) int
		RideHailingDriverVerifyID        func(childComplexity int) int
		TrafficAccidentEscapeExamineTime func(childComplexity int) int
		TrafficAccidentEscapeRemark      func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		ViolentCrimeExamineTime          func(childComplexity int) int
		ViolentCrimeRemark               func(childComplexity int) int
	}

	RideHailingDriverVerifyMinFields struct {
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DrivingExamTime                  func(childComplexity int) int
		DrivingExperienceExamineTime     func(childComplexity int) int
		DrivingExperienceRemark          func(childComplexity int) int
		DrugHistoryExamineTime           func(childComplexity int) int
		DrugHistoryRemark                func(childComplexity int) int
		DrunkDrugDrivingExamineTime      func(childComplexity int) int
		DrunkDrugDrivingRemark           func(childComplexity int) int
		ID                               func(childComplexity int) int
		RideHailingDriverVerifyID        func(childComplexity int) int
		TrafficAccidentEscapeExamineTime func(childComplexity int) int
		TrafficAccidentEscapeRemark      func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		ViolentCrimeExamineTime          func(childComplexity int) int
		ViolentCrimeRemark               func(childComplexity int) int
	}

	RideHailingDriverVerifyMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RideHailingDriverVerifyStddevFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyStddevPopFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyStddevSampFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifySumFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyVarPopFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyVarSampFields struct {
		ID func(childComplexity int) int
	}

	RideHailingDriverVerifyVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteRideHailingDriver(ctx context.Context, where model.RideHailingDriverBoolExp) (*model.RideHailingDriverMutationResponse, error)
	DeleteRideHailingDriverByPk(ctx context.Context, id int64) (*model1.RideHailingDriver, error)
	InsertRideHailingDriver(ctx context.Context, objects []*model.RideHailingDriverInsertInput, onConflict *model.RideHailingDriverOnConflict) (*model.RideHailingDriverMutationResponse, error)
	InsertRideHailingDriverOne(ctx context.Context, object model.RideHailingDriverInsertInput, onConflict *model.RideHailingDriverOnConflict) (*model1.RideHailingDriver, error)
	UpdateRideHailingDriver(ctx context.Context, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, where model.RideHailingDriverBoolExp) (*model.RideHailingDriverMutationResponse, error)
	UpdateRideHailingDriverByPk(ctx context.Context, inc *model.RideHailingDriverIncInput, set *model.RideHailingDriverSetInput, pkColumns model.RideHailingDriverPkColumnsInput) (*model1.RideHailingDriver, error)
	DeleteRideHailingDriverVerify(ctx context.Context, where model.RideHailingDriverVerifyBoolExp) (*model.RideHailingDriverVerifyMutationResponse, error)
	DeleteRideHailingDriverVerifyByPk(ctx context.Context, id int64) (*model1.RideHailingDriverVerify, error)
	InsertRideHailingDriverVerify(ctx context.Context, objects []*model.RideHailingDriverVerifyInsertInput, onConflict *model.RideHailingDriverVerifyOnConflict) (*model.RideHailingDriverVerifyMutationResponse, error)
	InsertRideHailingDriverVerifyOne(ctx context.Context, object model.RideHailingDriverVerifyInsertInput, onConflict *model.RideHailingDriverVerifyOnConflict) (*model1.RideHailingDriverVerify, error)
	UpdateRideHailingDriverVerify(ctx context.Context, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, where model.RideHailingDriverVerifyBoolExp) (*model.RideHailingDriverVerifyMutationResponse, error)
	UpdateRideHailingDriverVerifyByPk(ctx context.Context, inc *model.RideHailingDriverVerifyIncInput, set *model.RideHailingDriverVerifySetInput, pkColumns model.RideHailingDriverVerifyPkColumnsInput) (*model1.RideHailingDriverVerify, error)
}
type QueryResolver interface {
	RideHailingDriver(ctx context.Context, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) ([]*model1.RideHailingDriver, error)
	RideHailingDriverAggregate(ctx context.Context, distinctOn []model.RideHailingDriverSelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverOrderBy, where *model.RideHailingDriverBoolExp) (*model.RideHailingDriverAggregate, error)
	RideHailingDriverByPk(ctx context.Context, id int64) (*model1.RideHailingDriver, error)
	RideHailingDriverVerify(ctx context.Context, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) ([]*model1.RideHailingDriverVerify, error)
	RideHailingDriverVerifyAggregate(ctx context.Context, distinctOn []model.RideHailingDriverVerifySelectColumn, limit *int, offset *int, orderBy []*model.RideHailingDriverVerifyOrderBy, where *model.RideHailingDriverVerifyBoolExp) (*model.RideHailingDriverVerifyAggregate, error)
	RideHailingDriverVerifyByPk(ctx context.Context, id int64) (*model1.RideHailingDriverVerify, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_ride_hailing_driver":
		if e.complexity.Mutation.DeleteRideHailingDriver == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriver(childComplexity, args["where"].(model.RideHailingDriverBoolExp)), true

	case "Mutation.delete_ride_hailing_driver_by_pk":
		if e.complexity.Mutation.DeleteRideHailingDriverByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ride_hailing_driver_verify":
		if e.complexity.Mutation.DeleteRideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverVerify(childComplexity, args["where"].(model.RideHailingDriverVerifyBoolExp)), true

	case "Mutation.delete_ride_hailing_driver_verify_by_pk":
		if e.complexity.Mutation.DeleteRideHailingDriverVerifyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRideHailingDriverVerifyByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_ride_hailing_driver":
		if e.complexity.Mutation.InsertRideHailingDriver == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriver(childComplexity, args["objects"].([]*model.RideHailingDriverInsertInput), args["on_conflict"].(*model.RideHailingDriverOnConflict)), true

	case "Mutation.insert_ride_hailing_driver_one":
		if e.complexity.Mutation.InsertRideHailingDriverOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriverOne(childComplexity, args["object"].(model.RideHailingDriverInsertInput), args["on_conflict"].(*model.RideHailingDriverOnConflict)), true

	case "Mutation.insert_ride_hailing_driver_verify":
		if e.complexity.Mutation.InsertRideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriverVerify(childComplexity, args["objects"].([]*model.RideHailingDriverVerifyInsertInput), args["on_conflict"].(*model.RideHailingDriverVerifyOnConflict)), true

	case "Mutation.insert_ride_hailing_driver_verify_one":
		if e.complexity.Mutation.InsertRideHailingDriverVerifyOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRideHailingDriverVerifyOne(childComplexity, args["object"].(model.RideHailingDriverVerifyInsertInput), args["on_conflict"].(*model.RideHailingDriverVerifyOnConflict)), true

	case "Mutation.update_ride_hailing_driver":
		if e.complexity.Mutation.UpdateRideHailingDriver == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriver(childComplexity, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["where"].(model.RideHailingDriverBoolExp)), true

	case "Mutation.update_ride_hailing_driver_by_pk":
		if e.complexity.Mutation.UpdateRideHailingDriverByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverByPk(childComplexity, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["pk_columns"].(model.RideHailingDriverPkColumnsInput)), true

	case "Mutation.update_ride_hailing_driver_verify":
		if e.complexity.Mutation.UpdateRideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverVerify(childComplexity, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["where"].(model.RideHailingDriverVerifyBoolExp)), true

	case "Mutation.update_ride_hailing_driver_verify_by_pk":
		if e.complexity.Mutation.UpdateRideHailingDriverVerifyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ride_hailing_driver_verify_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRideHailingDriverVerifyByPk(childComplexity, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["pk_columns"].(model.RideHailingDriverVerifyPkColumnsInput)), true

	case "Query.ride_hailing_driver":
		if e.complexity.Query.RideHailingDriver == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriver(childComplexity, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp)), true

	case "Query.ride_hailing_driver_aggregate":
		if e.complexity.Query.RideHailingDriverAggregate == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverAggregate(childComplexity, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp)), true

	case "Query.ride_hailing_driver_by_pk":
		if e.complexity.Query.RideHailingDriverByPk == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverByPk(childComplexity, args["id"].(int64)), true

	case "Query.ride_hailing_driver_verify":
		if e.complexity.Query.RideHailingDriverVerify == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerify(childComplexity, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp)), true

	case "Query.ride_hailing_driver_verify_aggregate":
		if e.complexity.Query.RideHailingDriverVerifyAggregate == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerifyAggregate(childComplexity, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp)), true

	case "Query.ride_hailing_driver_verify_by_pk":
		if e.complexity.Query.RideHailingDriverVerifyByPk == nil {
			break
		}

		args, err := ec.field_Query_ride_hailing_driver_verify_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RideHailingDriverVerifyByPk(childComplexity, args["id"].(int64)), true

	case "ride_hailing_driver.birthday":
		if e.complexity.RideHailingDriver.Birthday == nil {
			break
		}

		return e.complexity.RideHailingDriver.Birthday(childComplexity), true

	case "ride_hailing_driver.check_station":
		if e.complexity.RideHailingDriver.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriver.CheckStation(childComplexity), true

	case "ride_hailing_driver.create_at":
		if e.complexity.RideHailingDriver.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriver.CreateAt(childComplexity), true

	case "ride_hailing_driver.create_by":
		if e.complexity.RideHailingDriver.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriver.CreateBy(childComplexity), true

	case "ride_hailing_driver.current_address":
		if e.complexity.RideHailingDriver.CurrentAddress == nil {
			break
		}

		return e.complexity.RideHailingDriver.CurrentAddress(childComplexity), true

	case "ride_hailing_driver.driver_name":
		if e.complexity.RideHailingDriver.DriverName == nil {
			break
		}

		return e.complexity.RideHailingDriver.DriverName(childComplexity), true

	case "ride_hailing_driver.driver_school_id":
		if e.complexity.RideHailingDriver.DriverSchoolID == nil {
			break
		}

		return e.complexity.RideHailingDriver.DriverSchoolID(childComplexity), true

	case "ride_hailing_driver.end_valid_date":
		if e.complexity.RideHailingDriver.EndValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriver.EndValidDate(childComplexity), true

	case "ride_hailing_driver.first_time_received_date":
		if e.complexity.RideHailingDriver.FirstTimeReceivedDate == nil {
			break
		}

		return e.complexity.RideHailingDriver.FirstTimeReceivedDate(childComplexity), true

	case "ride_hailing_driver.handle_id_photo":
		if e.complexity.RideHailingDriver.HandleIDPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriver.HandleIDPhoto(childComplexity), true

	case "ride_hailing_driver.id":
		if e.complexity.RideHailingDriver.ID == nil {
			break
		}

		return e.complexity.RideHailingDriver.ID(childComplexity), true

	case "ride_hailing_driver.id_address":
		if e.complexity.RideHailingDriver.IDAddress == nil {
			break
		}

		return e.complexity.RideHailingDriver.IDAddress(childComplexity), true

	case "ride_hailing_driver.id_number":
		if e.complexity.RideHailingDriver.IDNumber == nil {
			break
		}

		return e.complexity.RideHailingDriver.IDNumber(childComplexity), true

	case "ride_hailing_driver.idcard_photo":
		if e.complexity.RideHailingDriver.IdcardPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriver.IdcardPhoto(childComplexity), true

	case "ride_hailing_driver.is_delete":
		if e.complexity.RideHailingDriver.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriver.IsDelete(childComplexity), true

	case "ride_hailing_driver.is_former_driver":
		if e.complexity.RideHailingDriver.IsFormerDriver == nil {
			break
		}

		return e.complexity.RideHailingDriver.IsFormerDriver(childComplexity), true

	case "ride_hailing_driver.nation":
		if e.complexity.RideHailingDriver.Nation == nil {
			break
		}

		return e.complexity.RideHailingDriver.Nation(childComplexity), true

	case "ride_hailing_driver.operator_id":
		if e.complexity.RideHailingDriver.OperatorID == nil {
			break
		}

		return e.complexity.RideHailingDriver.OperatorID(childComplexity), true

	case "ride_hailing_driver.phone_number":
		if e.complexity.RideHailingDriver.PhoneNumber == nil {
			break
		}

		return e.complexity.RideHailingDriver.PhoneNumber(childComplexity), true

	case "ride_hailing_driver.qualification_number":
		if e.complexity.RideHailingDriver.QualificationNumber == nil {
			break
		}

		return e.complexity.RideHailingDriver.QualificationNumber(childComplexity), true

	case "ride_hailing_driver.quasi_driving_models":
		if e.complexity.RideHailingDriver.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriver.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver.remarks":
		if e.complexity.RideHailingDriver.Remarks == nil {
			break
		}

		return e.complexity.RideHailingDriver.Remarks(childComplexity), true

	case "ride_hailing_driver.ride_hailing_driver_id":
		if e.complexity.RideHailingDriver.RideHailingDriverID == nil {
			break
		}

		return e.complexity.RideHailingDriver.RideHailingDriverID(childComplexity), true

	case "ride_hailing_driver.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriver.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriver.RideHailingDriverVerifyID(childComplexity), true

	case "ride_hailing_driver.sex":
		if e.complexity.RideHailingDriver.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriver.Sex(childComplexity), true

	case "ride_hailing_driver.sign_gov":
		if e.complexity.RideHailingDriver.SignGov == nil {
			break
		}

		return e.complexity.RideHailingDriver.SignGov(childComplexity), true

	case "ride_hailing_driver.signnature_photo":
		if e.complexity.RideHailingDriver.SignnaturePhoto == nil {
			break
		}

		return e.complexity.RideHailingDriver.SignnaturePhoto(childComplexity), true

	case "ride_hailing_driver.start_valid_date":
		if e.complexity.RideHailingDriver.StartValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriver.StartValidDate(childComplexity), true

	case "ride_hailing_driver.update_at":
		if e.complexity.RideHailingDriver.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriver.UpdateAt(childComplexity), true

	case "ride_hailing_driver.update_by":
		if e.complexity.RideHailingDriver.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriver.UpdateBy(childComplexity), true

	case "ride_hailing_driver.update_time_in":
		if e.complexity.RideHailingDriver.UpdateTimeIn == nil {
			break
		}

		return e.complexity.RideHailingDriver.UpdateTimeIn(childComplexity), true

	case "ride_hailing_driver_aggregate.aggregate":
		if e.complexity.RideHailingDriverAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregate.Aggregate(childComplexity), true

	case "ride_hailing_driver_aggregate.nodes":
		if e.complexity.RideHailingDriverAggregate.Nodes == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregate.Nodes(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.avg":
		if e.complexity.RideHailingDriverAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Avg(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.count":
		if e.complexity.RideHailingDriverAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_ride_hailing_driver_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.RideHailingDriverAggregateFields.Count(childComplexity, args["columns"].([]model.RideHailingDriverSelectColumn), args["distinct"].(*bool)), true

	case "ride_hailing_driver_aggregate_fields.max":
		if e.complexity.RideHailingDriverAggregateFields.Max == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Max(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.min":
		if e.complexity.RideHailingDriverAggregateFields.Min == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Min(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.stddev":
		if e.complexity.RideHailingDriverAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Stddev(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.stddev_pop":
		if e.complexity.RideHailingDriverAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.StddevPop(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.stddev_samp":
		if e.complexity.RideHailingDriverAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.StddevSamp(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.sum":
		if e.complexity.RideHailingDriverAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Sum(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.var_pop":
		if e.complexity.RideHailingDriverAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.VarPop(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.var_samp":
		if e.complexity.RideHailingDriverAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.VarSamp(childComplexity), true

	case "ride_hailing_driver_aggregate_fields.variance":
		if e.complexity.RideHailingDriverAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RideHailingDriverAggregateFields.Variance(childComplexity), true

	case "ride_hailing_driver_avg_fields.check_station":
		if e.complexity.RideHailingDriverAvgFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_avg_fields.id":
		if e.complexity.RideHailingDriverAvgFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.ID(childComplexity), true

	case "ride_hailing_driver_avg_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverAvgFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_avg_fields.sex":
		if e.complexity.RideHailingDriverAvgFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverAvgFields.Sex(childComplexity), true

	case "ride_hailing_driver_max_fields.birthday":
		if e.complexity.RideHailingDriverMaxFields.Birthday == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Birthday(childComplexity), true

	case "ride_hailing_driver_max_fields.check_station":
		if e.complexity.RideHailingDriverMaxFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_max_fields.create_at":
		if e.complexity.RideHailingDriverMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CreateAt(childComplexity), true

	case "ride_hailing_driver_max_fields.create_by":
		if e.complexity.RideHailingDriverMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CreateBy(childComplexity), true

	case "ride_hailing_driver_max_fields.current_address":
		if e.complexity.RideHailingDriverMaxFields.CurrentAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.CurrentAddress(childComplexity), true

	case "ride_hailing_driver_max_fields.driver_name":
		if e.complexity.RideHailingDriverMaxFields.DriverName == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.DriverName(childComplexity), true

	case "ride_hailing_driver_max_fields.driver_school_id":
		if e.complexity.RideHailingDriverMaxFields.DriverSchoolID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.DriverSchoolID(childComplexity), true

	case "ride_hailing_driver_max_fields.end_valid_date":
		if e.complexity.RideHailingDriverMaxFields.EndValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.EndValidDate(childComplexity), true

	case "ride_hailing_driver_max_fields.first_time_received_date":
		if e.complexity.RideHailingDriverMaxFields.FirstTimeReceivedDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.FirstTimeReceivedDate(childComplexity), true

	case "ride_hailing_driver_max_fields.handle_id_photo":
		if e.complexity.RideHailingDriverMaxFields.HandleIDPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.HandleIDPhoto(childComplexity), true

	case "ride_hailing_driver_max_fields.id":
		if e.complexity.RideHailingDriverMaxFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.ID(childComplexity), true

	case "ride_hailing_driver_max_fields.id_address":
		if e.complexity.RideHailingDriverMaxFields.IDAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IDAddress(childComplexity), true

	case "ride_hailing_driver_max_fields.id_number":
		if e.complexity.RideHailingDriverMaxFields.IDNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IDNumber(childComplexity), true

	case "ride_hailing_driver_max_fields.idcard_photo":
		if e.complexity.RideHailingDriverMaxFields.IdcardPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.IdcardPhoto(childComplexity), true

	case "ride_hailing_driver_max_fields.nation":
		if e.complexity.RideHailingDriverMaxFields.Nation == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Nation(childComplexity), true

	case "ride_hailing_driver_max_fields.operator_id":
		if e.complexity.RideHailingDriverMaxFields.OperatorID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.OperatorID(childComplexity), true

	case "ride_hailing_driver_max_fields.phone_number":
		if e.complexity.RideHailingDriverMaxFields.PhoneNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.PhoneNumber(childComplexity), true

	case "ride_hailing_driver_max_fields.qualification_number":
		if e.complexity.RideHailingDriverMaxFields.QualificationNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.QualificationNumber(childComplexity), true

	case "ride_hailing_driver_max_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverMaxFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_max_fields.remarks":
		if e.complexity.RideHailingDriverMaxFields.Remarks == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Remarks(childComplexity), true

	case "ride_hailing_driver_max_fields.ride_hailing_driver_id":
		if e.complexity.RideHailingDriverMaxFields.RideHailingDriverID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.RideHailingDriverID(childComplexity), true

	case "ride_hailing_driver_max_fields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverMaxFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.RideHailingDriverVerifyID(childComplexity), true

	case "ride_hailing_driver_max_fields.sex":
		if e.complexity.RideHailingDriverMaxFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.Sex(childComplexity), true

	case "ride_hailing_driver_max_fields.sign_gov":
		if e.complexity.RideHailingDriverMaxFields.SignGov == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.SignGov(childComplexity), true

	case "ride_hailing_driver_max_fields.signnature_photo":
		if e.complexity.RideHailingDriverMaxFields.SignnaturePhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.SignnaturePhoto(childComplexity), true

	case "ride_hailing_driver_max_fields.start_valid_date":
		if e.complexity.RideHailingDriverMaxFields.StartValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.StartValidDate(childComplexity), true

	case "ride_hailing_driver_max_fields.update_at":
		if e.complexity.RideHailingDriverMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.UpdateAt(childComplexity), true

	case "ride_hailing_driver_max_fields.update_by":
		if e.complexity.RideHailingDriverMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.UpdateBy(childComplexity), true

	case "ride_hailing_driver_max_fields.update_time_in":
		if e.complexity.RideHailingDriverMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.RideHailingDriverMaxFields.UpdateTimeIn(childComplexity), true

	case "ride_hailing_driver_min_fields.birthday":
		if e.complexity.RideHailingDriverMinFields.Birthday == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Birthday(childComplexity), true

	case "ride_hailing_driver_min_fields.check_station":
		if e.complexity.RideHailingDriverMinFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_min_fields.create_at":
		if e.complexity.RideHailingDriverMinFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CreateAt(childComplexity), true

	case "ride_hailing_driver_min_fields.create_by":
		if e.complexity.RideHailingDriverMinFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CreateBy(childComplexity), true

	case "ride_hailing_driver_min_fields.current_address":
		if e.complexity.RideHailingDriverMinFields.CurrentAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.CurrentAddress(childComplexity), true

	case "ride_hailing_driver_min_fields.driver_name":
		if e.complexity.RideHailingDriverMinFields.DriverName == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.DriverName(childComplexity), true

	case "ride_hailing_driver_min_fields.driver_school_id":
		if e.complexity.RideHailingDriverMinFields.DriverSchoolID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.DriverSchoolID(childComplexity), true

	case "ride_hailing_driver_min_fields.end_valid_date":
		if e.complexity.RideHailingDriverMinFields.EndValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.EndValidDate(childComplexity), true

	case "ride_hailing_driver_min_fields.first_time_received_date":
		if e.complexity.RideHailingDriverMinFields.FirstTimeReceivedDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.FirstTimeReceivedDate(childComplexity), true

	case "ride_hailing_driver_min_fields.handle_id_photo":
		if e.complexity.RideHailingDriverMinFields.HandleIDPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.HandleIDPhoto(childComplexity), true

	case "ride_hailing_driver_min_fields.id":
		if e.complexity.RideHailingDriverMinFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.ID(childComplexity), true

	case "ride_hailing_driver_min_fields.id_address":
		if e.complexity.RideHailingDriverMinFields.IDAddress == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IDAddress(childComplexity), true

	case "ride_hailing_driver_min_fields.id_number":
		if e.complexity.RideHailingDriverMinFields.IDNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IDNumber(childComplexity), true

	case "ride_hailing_driver_min_fields.idcard_photo":
		if e.complexity.RideHailingDriverMinFields.IdcardPhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.IdcardPhoto(childComplexity), true

	case "ride_hailing_driver_min_fields.nation":
		if e.complexity.RideHailingDriverMinFields.Nation == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Nation(childComplexity), true

	case "ride_hailing_driver_min_fields.operator_id":
		if e.complexity.RideHailingDriverMinFields.OperatorID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.OperatorID(childComplexity), true

	case "ride_hailing_driver_min_fields.phone_number":
		if e.complexity.RideHailingDriverMinFields.PhoneNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.PhoneNumber(childComplexity), true

	case "ride_hailing_driver_min_fields.qualification_number":
		if e.complexity.RideHailingDriverMinFields.QualificationNumber == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.QualificationNumber(childComplexity), true

	case "ride_hailing_driver_min_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverMinFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_min_fields.remarks":
		if e.complexity.RideHailingDriverMinFields.Remarks == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Remarks(childComplexity), true

	case "ride_hailing_driver_min_fields.ride_hailing_driver_id":
		if e.complexity.RideHailingDriverMinFields.RideHailingDriverID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.RideHailingDriverID(childComplexity), true

	case "ride_hailing_driver_min_fields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverMinFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.RideHailingDriverVerifyID(childComplexity), true

	case "ride_hailing_driver_min_fields.sex":
		if e.complexity.RideHailingDriverMinFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.Sex(childComplexity), true

	case "ride_hailing_driver_min_fields.sign_gov":
		if e.complexity.RideHailingDriverMinFields.SignGov == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.SignGov(childComplexity), true

	case "ride_hailing_driver_min_fields.signnature_photo":
		if e.complexity.RideHailingDriverMinFields.SignnaturePhoto == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.SignnaturePhoto(childComplexity), true

	case "ride_hailing_driver_min_fields.start_valid_date":
		if e.complexity.RideHailingDriverMinFields.StartValidDate == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.StartValidDate(childComplexity), true

	case "ride_hailing_driver_min_fields.update_at":
		if e.complexity.RideHailingDriverMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.UpdateAt(childComplexity), true

	case "ride_hailing_driver_min_fields.update_by":
		if e.complexity.RideHailingDriverMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.UpdateBy(childComplexity), true

	case "ride_hailing_driver_min_fields.update_time_in":
		if e.complexity.RideHailingDriverMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.RideHailingDriverMinFields.UpdateTimeIn(childComplexity), true

	case "ride_hailing_driver_mutation_response.affected_rows":
		if e.complexity.RideHailingDriverMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RideHailingDriverMutationResponse.AffectedRows(childComplexity), true

	case "ride_hailing_driver_mutation_response.returning":
		if e.complexity.RideHailingDriverMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RideHailingDriverMutationResponse.Returning(childComplexity), true

	case "ride_hailing_driver_stddev_fields.check_station":
		if e.complexity.RideHailingDriverStddevFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_stddev_fields.id":
		if e.complexity.RideHailingDriverStddevFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.ID(childComplexity), true

	case "ride_hailing_driver_stddev_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverStddevFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_stddev_fields.sex":
		if e.complexity.RideHailingDriverStddevFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevFields.Sex(childComplexity), true

	case "ride_hailing_driver_stddev_pop_fields.check_station":
		if e.complexity.RideHailingDriverStddevPopFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_stddev_pop_fields.id":
		if e.complexity.RideHailingDriverStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.ID(childComplexity), true

	case "ride_hailing_driver_stddev_pop_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverStddevPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_stddev_pop_fields.sex":
		if e.complexity.RideHailingDriverStddevPopFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevPopFields.Sex(childComplexity), true

	case "ride_hailing_driver_stddev_samp_fields.check_station":
		if e.complexity.RideHailingDriverStddevSampFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_stddev_samp_fields.id":
		if e.complexity.RideHailingDriverStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.ID(childComplexity), true

	case "ride_hailing_driver_stddev_samp_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverStddevSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_stddev_samp_fields.sex":
		if e.complexity.RideHailingDriverStddevSampFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverStddevSampFields.Sex(childComplexity), true

	case "ride_hailing_driver_sum_fields.check_station":
		if e.complexity.RideHailingDriverSumFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_sum_fields.id":
		if e.complexity.RideHailingDriverSumFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.ID(childComplexity), true

	case "ride_hailing_driver_sum_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverSumFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_sum_fields.sex":
		if e.complexity.RideHailingDriverSumFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverSumFields.Sex(childComplexity), true

	case "ride_hailing_driver_var_pop_fields.check_station":
		if e.complexity.RideHailingDriverVarPopFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_var_pop_fields.id":
		if e.complexity.RideHailingDriverVarPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.ID(childComplexity), true

	case "ride_hailing_driver_var_pop_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverVarPopFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_var_pop_fields.sex":
		if e.complexity.RideHailingDriverVarPopFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverVarPopFields.Sex(childComplexity), true

	case "ride_hailing_driver_var_samp_fields.check_station":
		if e.complexity.RideHailingDriverVarSampFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_var_samp_fields.id":
		if e.complexity.RideHailingDriverVarSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.ID(childComplexity), true

	case "ride_hailing_driver_var_samp_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverVarSampFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_var_samp_fields.sex":
		if e.complexity.RideHailingDriverVarSampFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverVarSampFields.Sex(childComplexity), true

	case "ride_hailing_driver_variance_fields.check_station":
		if e.complexity.RideHailingDriverVarianceFields.CheckStation == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.CheckStation(childComplexity), true

	case "ride_hailing_driver_variance_fields.id":
		if e.complexity.RideHailingDriverVarianceFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.ID(childComplexity), true

	case "ride_hailing_driver_variance_fields.quasi_driving_models":
		if e.complexity.RideHailingDriverVarianceFields.QuasiDrivingModels == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.QuasiDrivingModels(childComplexity), true

	case "ride_hailing_driver_variance_fields.sex":
		if e.complexity.RideHailingDriverVarianceFields.Sex == nil {
			break
		}

		return e.complexity.RideHailingDriverVarianceFields.Sex(childComplexity), true

	case "ride_hailing_driver_verify.create_at":
		if e.complexity.RideHailingDriverVerify.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.CreateAt(childComplexity), true

	case "ride_hailing_driver_verify.create_by":
		if e.complexity.RideHailingDriverVerify.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.CreateBy(childComplexity), true

	case "ride_hailing_driver_verify.delete_at":
		if e.complexity.RideHailingDriverVerify.DeleteAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DeleteAt(childComplexity), true

	case "ride_hailing_driver_verify.delete_by":
		if e.complexity.RideHailingDriverVerify.DeleteBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DeleteBy(childComplexity), true

	case "ride_hailing_driver_verify.driving_exam_time":
		if e.complexity.RideHailingDriverVerify.DrivingExamTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrivingExamTime(childComplexity), true

	case "ride_hailing_driver_verify.driving_experience_examine_time":
		if e.complexity.RideHailingDriverVerify.DrivingExperienceExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrivingExperienceExamineTime(childComplexity), true

	case "ride_hailing_driver_verify.driving_experience_remark":
		if e.complexity.RideHailingDriverVerify.DrivingExperienceRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrivingExperienceRemark(childComplexity), true

	case "ride_hailing_driver_verify.drug_history_examine_time":
		if e.complexity.RideHailingDriverVerify.DrugHistoryExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrugHistoryExamineTime(childComplexity), true

	case "ride_hailing_driver_verify.drug_history_remark":
		if e.complexity.RideHailingDriverVerify.DrugHistoryRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrugHistoryRemark(childComplexity), true

	case "ride_hailing_driver_verify.drunk_drug_driving_examine_time":
		if e.complexity.RideHailingDriverVerify.DrunkDrugDrivingExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrunkDrugDrivingExamineTime(childComplexity), true

	case "ride_hailing_driver_verify.drunk_drug_driving_remark":
		if e.complexity.RideHailingDriverVerify.DrunkDrugDrivingRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.DrunkDrugDrivingRemark(childComplexity), true

	case "ride_hailing_driver_verify.id":
		if e.complexity.RideHailingDriverVerify.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.ID(childComplexity), true

	case "ride_hailing_driver_verify.is_delete":
		if e.complexity.RideHailingDriverVerify.IsDelete == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsDelete(childComplexity), true

	case "ride_hailing_driver_verify.is_drug_history":
		if e.complexity.RideHailingDriverVerify.IsDrugHistory == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsDrugHistory(childComplexity), true

	case "ride_hailing_driver_verify.is_drunk_drug_driving":
		if e.complexity.RideHailingDriverVerify.IsDrunkDrugDriving == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsDrunkDrugDriving(childComplexity), true

	case "ride_hailing_driver_verify.is_pass_driving_exam":
		if e.complexity.RideHailingDriverVerify.IsPassDrivingExam == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsPassDrivingExam(childComplexity), true

	case "ride_hailing_driver_verify.is_three_cycle_twelve":
		if e.complexity.RideHailingDriverVerify.IsThreeCycleTwelve == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsThreeCycleTwelve(childComplexity), true

	case "ride_hailing_driver_verify.is_three_years_driving_experience":
		if e.complexity.RideHailingDriverVerify.IsThreeYearsDrivingExperience == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsThreeYearsDrivingExperience(childComplexity), true

	case "ride_hailing_driver_verify.is_traffic_accident_escape_record":
		if e.complexity.RideHailingDriverVerify.IsTrafficAccidentEscapeRecord == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsTrafficAccidentEscapeRecord(childComplexity), true

	case "ride_hailing_driver_verify.is_violent_crime":
		if e.complexity.RideHailingDriverVerify.IsViolentCrime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.IsViolentCrime(childComplexity), true

	case "ride_hailing_driver_verify.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverVerify.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.RideHailingDriverVerifyID(childComplexity), true

	case "ride_hailing_driver_verify.traffic_accident_escape_examine_time":
		if e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeExamineTime(childComplexity), true

	case "ride_hailing_driver_verify.traffic_accident_escape_remark":
		if e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.TrafficAccidentEscapeRemark(childComplexity), true

	case "ride_hailing_driver_verify.update_at":
		if e.complexity.RideHailingDriverVerify.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.UpdateAt(childComplexity), true

	case "ride_hailing_driver_verify.update_by":
		if e.complexity.RideHailingDriverVerify.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.UpdateBy(childComplexity), true

	case "ride_hailing_driver_verify.violent_crime_examine_time":
		if e.complexity.RideHailingDriverVerify.ViolentCrimeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.ViolentCrimeExamineTime(childComplexity), true

	case "ride_hailing_driver_verify.violent_crime_remark":
		if e.complexity.RideHailingDriverVerify.ViolentCrimeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerify.ViolentCrimeRemark(childComplexity), true

	case "ride_hailing_driver_verify_aggregate.aggregate":
		if e.complexity.RideHailingDriverVerifyAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregate.Aggregate(childComplexity), true

	case "ride_hailing_driver_verify_aggregate.nodes":
		if e.complexity.RideHailingDriverVerifyAggregate.Nodes == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregate.Nodes(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.avg":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Avg(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.count":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_ride_hailing_driver_verify_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Count(childComplexity, args["columns"].([]model.RideHailingDriverVerifySelectColumn), args["distinct"].(*bool)), true

	case "ride_hailing_driver_verify_aggregate_fields.max":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Max == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Max(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.min":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Min == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Min(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.stddev":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Stddev(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.stddev_pop":
		if e.complexity.RideHailingDriverVerifyAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.StddevPop(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.stddev_samp":
		if e.complexity.RideHailingDriverVerifyAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.StddevSamp(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.sum":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Sum(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.var_pop":
		if e.complexity.RideHailingDriverVerifyAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.VarPop(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.var_samp":
		if e.complexity.RideHailingDriverVerifyAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.VarSamp(childComplexity), true

	case "ride_hailing_driver_verify_aggregate_fields.variance":
		if e.complexity.RideHailingDriverVerifyAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAggregateFields.Variance(childComplexity), true

	case "ride_hailing_driver_verify_avg_fields.id":
		if e.complexity.RideHailingDriverVerifyAvgFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyAvgFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.create_at":
		if e.complexity.RideHailingDriverVerifyMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.CreateAt(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.create_by":
		if e.complexity.RideHailingDriverVerifyMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.CreateBy(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.delete_at":
		if e.complexity.RideHailingDriverVerifyMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DeleteAt(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.delete_by":
		if e.complexity.RideHailingDriverVerifyMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DeleteBy(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.driving_exam_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrivingExamTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrivingExamTime(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.driving_experience_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.driving_experience_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrivingExperienceRemark(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.drug_history_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.drug_history_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrugHistoryRemark(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.drunk_drug_driving_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.drunk_drug_driving_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.DrunkDrugDrivingRemark(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.id":
		if e.complexity.RideHailingDriverVerifyMaxFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverVerifyMaxFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.RideHailingDriverVerifyID(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.traffic_accident_escape_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.traffic_accident_escape_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.TrafficAccidentEscapeRemark(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.update_at":
		if e.complexity.RideHailingDriverVerifyMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.UpdateAt(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.update_by":
		if e.complexity.RideHailingDriverVerifyMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.UpdateBy(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.violent_crime_examine_time":
		if e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_max_fields.violent_crime_remark":
		if e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMaxFields.ViolentCrimeRemark(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.create_at":
		if e.complexity.RideHailingDriverVerifyMinFields.CreateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.CreateAt(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.create_by":
		if e.complexity.RideHailingDriverVerifyMinFields.CreateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.CreateBy(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.delete_at":
		if e.complexity.RideHailingDriverVerifyMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DeleteAt(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.delete_by":
		if e.complexity.RideHailingDriverVerifyMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DeleteBy(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.driving_exam_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrivingExamTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrivingExamTime(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.driving_experience_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.driving_experience_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrivingExperienceRemark(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.drug_history_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.drug_history_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrugHistoryRemark(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.drunk_drug_driving_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.drunk_drug_driving_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.DrunkDrugDrivingRemark(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.id":
		if e.complexity.RideHailingDriverVerifyMinFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.ride_hailing_driver_verify_id":
		if e.complexity.RideHailingDriverVerifyMinFields.RideHailingDriverVerifyID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.RideHailingDriverVerifyID(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.traffic_accident_escape_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.traffic_accident_escape_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.TrafficAccidentEscapeRemark(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.update_at":
		if e.complexity.RideHailingDriverVerifyMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.UpdateAt(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.update_by":
		if e.complexity.RideHailingDriverVerifyMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.UpdateBy(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.violent_crime_examine_time":
		if e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeExamineTime == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeExamineTime(childComplexity), true

	case "ride_hailing_driver_verify_min_fields.violent_crime_remark":
		if e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeRemark == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMinFields.ViolentCrimeRemark(childComplexity), true

	case "ride_hailing_driver_verify_mutation_response.affected_rows":
		if e.complexity.RideHailingDriverVerifyMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMutationResponse.AffectedRows(childComplexity), true

	case "ride_hailing_driver_verify_mutation_response.returning":
		if e.complexity.RideHailingDriverVerifyMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyMutationResponse.Returning(childComplexity), true

	case "ride_hailing_driver_verify_stddev_fields.id":
		if e.complexity.RideHailingDriverVerifyStddevFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyStddevFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_stddev_pop_fields.id":
		if e.complexity.RideHailingDriverVerifyStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyStddevPopFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_stddev_samp_fields.id":
		if e.complexity.RideHailingDriverVerifyStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyStddevSampFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_sum_fields.id":
		if e.complexity.RideHailingDriverVerifySumFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifySumFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_var_pop_fields.id":
		if e.complexity.RideHailingDriverVerifyVarPopFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyVarPopFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_var_samp_fields.id":
		if e.complexity.RideHailingDriverVerifyVarSampFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyVarSampFields.ID(childComplexity), true

	case "ride_hailing_driver_verify_variance_fields.id":
		if e.complexity.RideHailingDriverVerifyVarianceFields.ID == nil {
			break
		}

		return e.complexity.RideHailingDriverVerifyVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}


"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}



"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}


"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}




scalar _jsonb
scalar bigint
scalar timestamptz
scalar point
scalar numeric
`, BuiltIn: false},
	{Name: "graph/graphqls/ride_hailing_driver.graphqls", Input: `
extend type Mutation {
  """
  delete data from the table: "ride_hailing_driver"
  """
  delete_ride_hailing_driver(
    """filter the rows which have to be deleted"""
    where: ride_hailing_driver_bool_exp!
  ): ride_hailing_driver_mutation_response

  """
  delete single row from the table: "ride_hailing_driver"
  """
  delete_ride_hailing_driver_by_pk(
    """ID"""
    id: bigint!
  ): ride_hailing_driver

  """
  insert data into the table: "ride_hailing_driver"
  """
  insert_ride_hailing_driver(
    """the rows to be inserted"""
    objects: [ride_hailing_driver_insert_input!]!

    """on conflict condition"""
    on_conflict: ride_hailing_driver_on_conflict
  ): ride_hailing_driver_mutation_response

  """
  insert a single row into the table: "ride_hailing_driver"
  """
  insert_ride_hailing_driver_one(
    """the row to be inserted"""
    object: ride_hailing_driver_insert_input!

    """on conflict condition"""
    on_conflict: ride_hailing_driver_on_conflict
  ): ride_hailing_driver

  """
  update data of the table: "ride_hailing_driver"
  """
  update_ride_hailing_driver(
    """increments the integer columns with given value of the filtered values"""
    _inc: ride_hailing_driver_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ride_hailing_driver_set_input

    """filter the rows which have to be updated"""
    where: ride_hailing_driver_bool_exp!
  ): ride_hailing_driver_mutation_response

  """
  update single row of the table: "ride_hailing_driver"
  """
  update_ride_hailing_driver_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: ride_hailing_driver_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ride_hailing_driver_set_input
    pk_columns: ride_hailing_driver_pk_columns_input!
  ): ride_hailing_driver
}

extend type Query {
  """
  fetch data from the table: "ride_hailing_driver"
  """
  ride_hailing_driver(
    """distinct select on columns"""
    distinct_on: [ride_hailing_driver_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ride_hailing_driver_order_by!]

    """filter the rows returned"""
    where: ride_hailing_driver_bool_exp
  ): [ride_hailing_driver!]!

  """
  fetch aggregated fields from the table: "ride_hailing_driver"
  """
  ride_hailing_driver_aggregate(
    """distinct select on columns"""
    distinct_on: [ride_hailing_driver_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ride_hailing_driver_order_by!]

    """filter the rows returned"""
    where: ride_hailing_driver_bool_exp
  ): ride_hailing_driver_aggregate!

  """
  fetch data from the table: "ride_hailing_driver" using primary key columns
  """
  ride_hailing_driver_by_pk(
    """ID"""
    id: bigint!
  ): ride_hailing_driver
}

"""
网约车驾驶员


columns and relationships of "ride_hailing_driver"

"""
type ride_hailing_driver {
  """出生日期"""
  birthday: timestamptz

  """审核状态"""
  check_station: Int

  """记录时间"""
  create_at: timestamptz

  """记录人员ID"""
  create_by: String

  """现居住地址"""
  current_address: String

  """驾驶员名称"""
  driver_name: String

  """驾校ID"""
  driver_school_id: String

  """有效期截止日期"""
  end_valid_date: timestamptz

  """初次领驾驶证日期"""
  first_time_received_date: timestamptz

  """手持身份证照片"""
  handle_id_photo: String

  """ID"""
  id: bigint!

  """身份证住址"""
  id_address: String

  """驾驶员身份证号"""
  id_number: String

  """身份证图片"""
  idcard_photo: String

  """是否删除"""
  is_delete: Boolean!

  """是否旧驾驶员"""
  is_former_driver: Boolean

  """民族"""
  nation: String

  """操作员id"""
  operator_id: String

  """联系电话"""
  phone_number: String

  """资格证号"""
  qualification_number: String

  """准假车型"""
  quasi_driving_models: Int

  """备注"""
  remarks: String

  """网约车驾驶员ID"""
  ride_hailing_driver_id: String!

  """网约车驾驶员审核表ID"""
  ride_hailing_driver_verify_id: String

  """性别"""
  sex: Int

  """发证机构"""
  sign_gov: String

  """签字的照片"""
  signnature_photo: String

  """身份证-有效期起始日期"""
  start_valid_date: timestamptz

  """更新时间"""
  update_at: timestamptz

  """更新人员id"""
  update_by: String

  """内网更新时间"""
  update_time_in: timestamptz
}

"""
aggregated selection of "ride_hailing_driver"
"""
type ride_hailing_driver_aggregate {
  aggregate: ride_hailing_driver_aggregate_fields
  nodes: [ride_hailing_driver!]!
}

"""
aggregate fields of "ride_hailing_driver"
"""
type ride_hailing_driver_aggregate_fields {
  avg: ride_hailing_driver_avg_fields
  count(columns: [ride_hailing_driver_select_column!], distinct: Boolean): Int
  max: ride_hailing_driver_max_fields
  min: ride_hailing_driver_min_fields
  stddev: ride_hailing_driver_stddev_fields
  stddev_pop: ride_hailing_driver_stddev_pop_fields
  stddev_samp: ride_hailing_driver_stddev_samp_fields
  sum: ride_hailing_driver_sum_fields
  var_pop: ride_hailing_driver_var_pop_fields
  var_samp: ride_hailing_driver_var_samp_fields
  variance: ride_hailing_driver_variance_fields
}

"""
order by aggregate values of table "ride_hailing_driver"
"""
input ride_hailing_driver_aggregate_order_by {
  avg: ride_hailing_driver_avg_order_by
  count: order_by
  max: ride_hailing_driver_max_order_by
  min: ride_hailing_driver_min_order_by
  stddev: ride_hailing_driver_stddev_order_by
  stddev_pop: ride_hailing_driver_stddev_pop_order_by
  stddev_samp: ride_hailing_driver_stddev_samp_order_by
  sum: ride_hailing_driver_sum_order_by
  var_pop: ride_hailing_driver_var_pop_order_by
  var_samp: ride_hailing_driver_var_samp_order_by
  variance: ride_hailing_driver_variance_order_by
}

"""
input type for inserting array relation for remote table "ride_hailing_driver"
"""
input ride_hailing_driver_arr_rel_insert_input {
  data: [ride_hailing_driver_insert_input!]!
  on_conflict: ride_hailing_driver_on_conflict
}

"""aggregate avg on columns"""
type ride_hailing_driver_avg_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by avg() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_avg_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""
Boolean expression to filter rows from the table "ride_hailing_driver". All fields are combined with a logical 'AND'.
"""
input ride_hailing_driver_bool_exp {
  _and: [ride_hailing_driver_bool_exp]
  _not: ride_hailing_driver_bool_exp
  _or: [ride_hailing_driver_bool_exp]
  birthday: timestamptz_comparison_exp
  check_station: Int_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  current_address: String_comparison_exp
  driver_name: String_comparison_exp
  driver_school_id: String_comparison_exp
  end_valid_date: timestamptz_comparison_exp
  first_time_received_date: timestamptz_comparison_exp
  handle_id_photo: String_comparison_exp
  id: bigint_comparison_exp
  id_address: String_comparison_exp
  id_number: String_comparison_exp
  idcard_photo: String_comparison_exp
  is_delete: Boolean_comparison_exp
  is_former_driver: Boolean_comparison_exp
  nation: String_comparison_exp
  operator_id: String_comparison_exp
  phone_number: String_comparison_exp
  qualification_number: String_comparison_exp
  quasi_driving_models: Int_comparison_exp
  remarks: String_comparison_exp
  ride_hailing_driver_id: String_comparison_exp
  ride_hailing_driver_verify_id: String_comparison_exp
  sex: Int_comparison_exp
  sign_gov: String_comparison_exp
  signnature_photo: String_comparison_exp
  start_valid_date: timestamptz_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  update_time_in: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "ride_hailing_driver"
"""
enum ride_hailing_driver_constraint {
  """unique or primary key constraint"""
  ride_hailing_driver_pkey
}

"""
input type for incrementing integer column in table "ride_hailing_driver"
"""
input ride_hailing_driver_inc_input {
  check_station: Int
  id: bigint
  quasi_driving_models: Int
  sex: Int
}

"""
input type for inserting data into table "ride_hailing_driver"
"""
input ride_hailing_driver_insert_input {
  birthday: timestamptz
  check_station: Int
  create_at: timestamptz
  create_by: String
  current_address: String
  driver_name: String
  driver_school_id: String
  end_valid_date: timestamptz
  first_time_received_date: timestamptz
  handle_id_photo: String
  id: bigint
  id_address: String
  id_number: String
  idcard_photo: String
  is_delete: Boolean
  is_former_driver: Boolean
  nation: String
  operator_id: String
  phone_number: String
  qualification_number: String
  quasi_driving_models: Int
  remarks: String
  ride_hailing_driver_id: String
  ride_hailing_driver_verify_id: String
  sex: Int
  sign_gov: String
  signnature_photo: String
  start_valid_date: timestamptz
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""aggregate max on columns"""
type ride_hailing_driver_max_fields {
  birthday: timestamptz
  check_station: Int
  create_at: timestamptz
  create_by: String
  current_address: String
  driver_name: String
  driver_school_id: String
  end_valid_date: timestamptz
  first_time_received_date: timestamptz
  handle_id_photo: String
  id: bigint
  id_address: String
  id_number: String
  idcard_photo: String
  nation: String
  operator_id: String
  phone_number: String
  qualification_number: String
  quasi_driving_models: Int
  remarks: String
  ride_hailing_driver_id: String
  ride_hailing_driver_verify_id: String
  sex: Int
  sign_gov: String
  signnature_photo: String
  start_valid_date: timestamptz
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""
order by max() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_max_order_by {
  birthday: order_by
  check_station: order_by
  create_at: order_by
  create_by: order_by
  current_address: order_by
  driver_name: order_by
  driver_school_id: order_by
  end_valid_date: order_by
  first_time_received_date: order_by
  handle_id_photo: order_by
  id: order_by
  id_address: order_by
  id_number: order_by
  idcard_photo: order_by
  nation: order_by
  operator_id: order_by
  phone_number: order_by
  qualification_number: order_by
  quasi_driving_models: order_by
  remarks: order_by
  ride_hailing_driver_id: order_by
  ride_hailing_driver_verify_id: order_by
  sex: order_by
  sign_gov: order_by
  signnature_photo: order_by
  start_valid_date: order_by
  update_at: order_by
  update_by: order_by
  update_time_in: order_by
}

"""aggregate min on columns"""
type ride_hailing_driver_min_fields {
  birthday: timestamptz
  check_station: Int
  create_at: timestamptz
  create_by: String
  current_address: String
  driver_name: String
  driver_school_id: String
  end_valid_date: timestamptz
  first_time_received_date: timestamptz
  handle_id_photo: String
  id: bigint
  id_address: String
  id_number: String
  idcard_photo: String
  nation: String
  operator_id: String
  phone_number: String
  qualification_number: String
  quasi_driving_models: Int
  remarks: String
  ride_hailing_driver_id: String
  ride_hailing_driver_verify_id: String
  sex: Int
  sign_gov: String
  signnature_photo: String
  start_valid_date: timestamptz
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""
order by min() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_min_order_by {
  birthday: order_by
  check_station: order_by
  create_at: order_by
  create_by: order_by
  current_address: order_by
  driver_name: order_by
  driver_school_id: order_by
  end_valid_date: order_by
  first_time_received_date: order_by
  handle_id_photo: order_by
  id: order_by
  id_address: order_by
  id_number: order_by
  idcard_photo: order_by
  nation: order_by
  operator_id: order_by
  phone_number: order_by
  qualification_number: order_by
  quasi_driving_models: order_by
  remarks: order_by
  ride_hailing_driver_id: order_by
  ride_hailing_driver_verify_id: order_by
  sex: order_by
  sign_gov: order_by
  signnature_photo: order_by
  start_valid_date: order_by
  update_at: order_by
  update_by: order_by
  update_time_in: order_by
}

"""
response of any mutation on the table "ride_hailing_driver"
"""
type ride_hailing_driver_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ride_hailing_driver!]!
}

"""
input type for inserting object relation for remote table "ride_hailing_driver"
"""
input ride_hailing_driver_obj_rel_insert_input {
  data: ride_hailing_driver_insert_input!
  on_conflict: ride_hailing_driver_on_conflict
}

"""
on conflict condition type for table "ride_hailing_driver"
"""
input ride_hailing_driver_on_conflict {
  constraint: ride_hailing_driver_constraint!
  update_columns: [ride_hailing_driver_update_column!]!
  where: ride_hailing_driver_bool_exp
}

"""
ordering options when selecting data from "ride_hailing_driver"
"""
input ride_hailing_driver_order_by {
  birthday: order_by
  check_station: order_by
  create_at: order_by
  create_by: order_by
  current_address: order_by
  driver_name: order_by
  driver_school_id: order_by
  end_valid_date: order_by
  first_time_received_date: order_by
  handle_id_photo: order_by
  id: order_by
  id_address: order_by
  id_number: order_by
  idcard_photo: order_by
  is_delete: order_by
  is_former_driver: order_by
  nation: order_by
  operator_id: order_by
  phone_number: order_by
  qualification_number: order_by
  quasi_driving_models: order_by
  remarks: order_by
  ride_hailing_driver_id: order_by
  ride_hailing_driver_verify_id: order_by
  sex: order_by
  sign_gov: order_by
  signnature_photo: order_by
  start_valid_date: order_by
  update_at: order_by
  update_by: order_by
  update_time_in: order_by
}

"""
primary key columns input for table: "ride_hailing_driver"
"""
input ride_hailing_driver_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "ride_hailing_driver"
"""
enum ride_hailing_driver_select_column {
  """column name"""
  birthday

  """column name"""
  check_station

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  current_address

  """column name"""
  driver_name

  """column name"""
  driver_school_id

  """column name"""
  end_valid_date

  """column name"""
  first_time_received_date

  """column name"""
  handle_id_photo

  """column name"""
  id

  """column name"""
  id_address

  """column name"""
  id_number

  """column name"""
  idcard_photo

  """column name"""
  is_delete

  """column name"""
  is_former_driver

  """column name"""
  nation

  """column name"""
  operator_id

  """column name"""
  phone_number

  """column name"""
  qualification_number

  """column name"""
  quasi_driving_models

  """column name"""
  remarks

  """column name"""
  ride_hailing_driver_id

  """column name"""
  ride_hailing_driver_verify_id

  """column name"""
  sex

  """column name"""
  sign_gov

  """column name"""
  signnature_photo

  """column name"""
  start_valid_date

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  update_time_in
}

"""
input type for updating data in table "ride_hailing_driver"
"""
input ride_hailing_driver_set_input {
  birthday: timestamptz
  check_station: Int
  create_at: timestamptz
  create_by: String
  current_address: String
  driver_name: String
  driver_school_id: String
  end_valid_date: timestamptz
  first_time_received_date: timestamptz
  handle_id_photo: String
  id: bigint
  id_address: String
  id_number: String
  idcard_photo: String
  is_delete: Boolean
  is_former_driver: Boolean
  nation: String
  operator_id: String
  phone_number: String
  qualification_number: String
  quasi_driving_models: Int
  remarks: String
  ride_hailing_driver_id: String
  ride_hailing_driver_verify_id: String
  sex: Int
  sign_gov: String
  signnature_photo: String
  start_valid_date: timestamptz
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""aggregate stddev on columns"""
type ride_hailing_driver_stddev_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by stddev() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_stddev_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""aggregate stddev_pop on columns"""
type ride_hailing_driver_stddev_pop_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by stddev_pop() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_stddev_pop_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""aggregate stddev_samp on columns"""
type ride_hailing_driver_stddev_samp_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by stddev_samp() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_stddev_samp_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""aggregate sum on columns"""
type ride_hailing_driver_sum_fields {
  check_station: Int
  id: bigint
  quasi_driving_models: Int
  sex: Int
}

"""
order by sum() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_sum_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""
update columns of table "ride_hailing_driver"
"""
enum ride_hailing_driver_update_column {
  """column name"""
  birthday

  """column name"""
  check_station

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  current_address

  """column name"""
  driver_name

  """column name"""
  driver_school_id

  """column name"""
  end_valid_date

  """column name"""
  first_time_received_date

  """column name"""
  handle_id_photo

  """column name"""
  id

  """column name"""
  id_address

  """column name"""
  id_number

  """column name"""
  idcard_photo

  """column name"""
  is_delete

  """column name"""
  is_former_driver

  """column name"""
  nation

  """column name"""
  operator_id

  """column name"""
  phone_number

  """column name"""
  qualification_number

  """column name"""
  quasi_driving_models

  """column name"""
  remarks

  """column name"""
  ride_hailing_driver_id

  """column name"""
  ride_hailing_driver_verify_id

  """column name"""
  sex

  """column name"""
  sign_gov

  """column name"""
  signnature_photo

  """column name"""
  start_valid_date

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  update_time_in
}

"""aggregate var_pop on columns"""
type ride_hailing_driver_var_pop_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by var_pop() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_var_pop_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""aggregate var_samp on columns"""
type ride_hailing_driver_var_samp_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by var_samp() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_var_samp_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}

"""aggregate variance on columns"""
type ride_hailing_driver_variance_fields {
  check_station: Float
  id: Float
  quasi_driving_models: Float
  sex: Float
}

"""
order by variance() on columns of table "ride_hailing_driver"
"""
input ride_hailing_driver_variance_order_by {
  check_station: order_by
  id: order_by
  quasi_driving_models: order_by
  sex: order_by
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ride_hailing_driver_verify.graphqls", Input: `
extend type Mutation {
  """
  delete data from the table: "ride_hailing_driver_verify"
  """
  delete_ride_hailing_driver_verify(
    """filter the rows which have to be deleted"""
    where: ride_hailing_driver_verify_bool_exp!
  ): ride_hailing_driver_verify_mutation_response

  """
  delete single row from the table: "ride_hailing_driver_verify"
  """
  delete_ride_hailing_driver_verify_by_pk(
    """ID"""
    id: bigint!
  ): ride_hailing_driver_verify

  """
  insert data into the table: "ride_hailing_driver_verify"
  """
  insert_ride_hailing_driver_verify(
    """the rows to be inserted"""
    objects: [ride_hailing_driver_verify_insert_input!]!

    """on conflict condition"""
    on_conflict: ride_hailing_driver_verify_on_conflict
  ): ride_hailing_driver_verify_mutation_response

  """
  insert a single row into the table: "ride_hailing_driver_verify"
  """
  insert_ride_hailing_driver_verify_one(
    """the row to be inserted"""
    object: ride_hailing_driver_verify_insert_input!

    """on conflict condition"""
    on_conflict: ride_hailing_driver_verify_on_conflict
  ): ride_hailing_driver_verify

  """
  update data of the table: "ride_hailing_driver_verify"
  """
  update_ride_hailing_driver_verify(
    """increments the integer columns with given value of the filtered values"""
    _inc: ride_hailing_driver_verify_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ride_hailing_driver_verify_set_input

    """filter the rows which have to be updated"""
    where: ride_hailing_driver_verify_bool_exp!
  ): ride_hailing_driver_verify_mutation_response

  """
  update single row of the table: "ride_hailing_driver_verify"
  """
  update_ride_hailing_driver_verify_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: ride_hailing_driver_verify_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ride_hailing_driver_verify_set_input
    pk_columns: ride_hailing_driver_verify_pk_columns_input!
  ): ride_hailing_driver_verify
}

extend type Query {
  """
  fetch data from the table: "ride_hailing_driver_verify"
  """
  ride_hailing_driver_verify(
    """distinct select on columns"""
    distinct_on: [ride_hailing_driver_verify_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ride_hailing_driver_verify_order_by!]

    """filter the rows returned"""
    where: ride_hailing_driver_verify_bool_exp
  ): [ride_hailing_driver_verify!]!

  """
  fetch aggregated fields from the table: "ride_hailing_driver_verify"
  """
  ride_hailing_driver_verify_aggregate(
    """distinct select on columns"""
    distinct_on: [ride_hailing_driver_verify_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ride_hailing_driver_verify_order_by!]

    """filter the rows returned"""
    where: ride_hailing_driver_verify_bool_exp
  ): ride_hailing_driver_verify_aggregate!

  """
  fetch data from the table: "ride_hailing_driver_verify" using primary key columns
  """
  ride_hailing_driver_verify_by_pk(
    """ID"""
    id: bigint!
  ): ride_hailing_driver_verify
}

"""
网约车驾驶员审核表


columns and relationships of "ride_hailing_driver_verify"

"""
type ride_hailing_driver_verify {
  """创建时间"""
  create_at: timestamptz

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """交通局考试认定时间"""
  driving_exam_time: timestamptz

  """驾管大队审核时间"""
  driving_experience_examine_time: timestamptz

  """驾管大队审核备注"""
  driving_experience_remark: String

  """禁毒支队审核时间"""
  drug_history_examine_time: timestamptz

  """禁毒支队审核备注"""
  drug_history_remark: String

  """秩序大队审核时间"""
  drunk_drug_driving_examine_time: timestamptz

  """秩序大队审核备注"""
  drunk_drug_driving_remark: String

  """ID"""
  id: bigint!

  """是否删除"""
  is_delete: Boolean!

  """是否有吸毒记录（禁毒支队）"""
  is_drug_history: Boolean

  """是否有酒驾毒驾记录(秩序大队)"""
  is_drunk_drug_driving: Boolean

  """是否通过考试(交通局审)"""
  is_pass_driving_exam: Boolean

  """是否最近连续三个记分周期内没有记满12分（驾管大队）"""
  is_three_cycle_twelve: Boolean

  """是否满足三年驾龄（驾管大队）"""
  is_three_years_driving_experience: Boolean

  """是否有交通肇事犯罪记录（事故大队）"""
  is_traffic_accident_escape_record: Boolean

  """是否有暴力犯罪记录（刑侦支队）"""
  is_violent_crime: Boolean

  """审核ID"""
  ride_hailing_driver_verify_id: String!

  """事故大队审核时间"""
  traffic_accident_escape_examine_time: timestamptz

  """事故大队审核备注"""
  traffic_accident_escape_remark: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """刑侦支队审核时间"""
  violent_crime_examine_time: timestamptz

  """刑侦支队审核备注"""
  violent_crime_remark: String
}

"""
aggregated selection of "ride_hailing_driver_verify"
"""
type ride_hailing_driver_verify_aggregate {
  aggregate: ride_hailing_driver_verify_aggregate_fields
  nodes: [ride_hailing_driver_verify!]!
}

"""
aggregate fields of "ride_hailing_driver_verify"
"""
type ride_hailing_driver_verify_aggregate_fields {
  avg: ride_hailing_driver_verify_avg_fields
  count(columns: [ride_hailing_driver_verify_select_column!], distinct: Boolean): Int
  max: ride_hailing_driver_verify_max_fields
  min: ride_hailing_driver_verify_min_fields
  stddev: ride_hailing_driver_verify_stddev_fields
  stddev_pop: ride_hailing_driver_verify_stddev_pop_fields
  stddev_samp: ride_hailing_driver_verify_stddev_samp_fields
  sum: ride_hailing_driver_verify_sum_fields
  var_pop: ride_hailing_driver_verify_var_pop_fields
  var_samp: ride_hailing_driver_verify_var_samp_fields
  variance: ride_hailing_driver_verify_variance_fields
}

"""
order by aggregate values of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_aggregate_order_by {
  avg: ride_hailing_driver_verify_avg_order_by
  count: order_by
  max: ride_hailing_driver_verify_max_order_by
  min: ride_hailing_driver_verify_min_order_by
  stddev: ride_hailing_driver_verify_stddev_order_by
  stddev_pop: ride_hailing_driver_verify_stddev_pop_order_by
  stddev_samp: ride_hailing_driver_verify_stddev_samp_order_by
  sum: ride_hailing_driver_verify_sum_order_by
  var_pop: ride_hailing_driver_verify_var_pop_order_by
  var_samp: ride_hailing_driver_verify_var_samp_order_by
  variance: ride_hailing_driver_verify_variance_order_by
}

"""
input type for inserting array relation for remote table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_arr_rel_insert_input {
  data: [ride_hailing_driver_verify_insert_input!]!
  on_conflict: ride_hailing_driver_verify_on_conflict
}

"""aggregate avg on columns"""
type ride_hailing_driver_verify_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "ride_hailing_driver_verify". All fields are combined with a logical 'AND'.
"""
input ride_hailing_driver_verify_bool_exp {
  _and: [ride_hailing_driver_verify_bool_exp]
  _not: ride_hailing_driver_verify_bool_exp
  _or: [ride_hailing_driver_verify_bool_exp]
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  driving_exam_time: timestamptz_comparison_exp
  driving_experience_examine_time: timestamptz_comparison_exp
  driving_experience_remark: String_comparison_exp
  drug_history_examine_time: timestamptz_comparison_exp
  drug_history_remark: String_comparison_exp
  drunk_drug_driving_examine_time: timestamptz_comparison_exp
  drunk_drug_driving_remark: String_comparison_exp
  id: bigint_comparison_exp
  is_delete: Boolean_comparison_exp
  is_drug_history: Boolean_comparison_exp
  is_drunk_drug_driving: Boolean_comparison_exp
  is_pass_driving_exam: Boolean_comparison_exp
  is_three_cycle_twelve: Boolean_comparison_exp
  is_three_years_driving_experience: Boolean_comparison_exp
  is_traffic_accident_escape_record: Boolean_comparison_exp
  is_violent_crime: Boolean_comparison_exp
  ride_hailing_driver_verify_id: String_comparison_exp
  traffic_accident_escape_examine_time: timestamptz_comparison_exp
  traffic_accident_escape_remark: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  violent_crime_examine_time: timestamptz_comparison_exp
  violent_crime_remark: String_comparison_exp
}

"""
unique or primary key constraints on table "ride_hailing_driver_verify"
"""
enum ride_hailing_driver_verify_constraint {
  """unique or primary key constraint"""
  ride_hailing_driver_verify_pkey
}

"""
input type for incrementing integer column in table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_inc_input {
  id: bigint
}

"""
input type for inserting data into table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_insert_input {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driving_exam_time: timestamptz
  driving_experience_examine_time: timestamptz
  driving_experience_remark: String
  drug_history_examine_time: timestamptz
  drug_history_remark: String
  drunk_drug_driving_examine_time: timestamptz
  drunk_drug_driving_remark: String
  id: bigint
  is_delete: Boolean
  is_drug_history: Boolean
  is_drunk_drug_driving: Boolean
  is_pass_driving_exam: Boolean
  is_three_cycle_twelve: Boolean
  is_three_years_driving_experience: Boolean
  is_traffic_accident_escape_record: Boolean
  is_violent_crime: Boolean
  ride_hailing_driver_verify_id: String
  traffic_accident_escape_examine_time: timestamptz
  traffic_accident_escape_remark: String
  update_at: timestamptz
  update_by: String
  violent_crime_examine_time: timestamptz
  violent_crime_remark: String
}

"""aggregate max on columns"""
type ride_hailing_driver_verify_max_fields {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driving_exam_time: timestamptz
  driving_experience_examine_time: timestamptz
  driving_experience_remark: String
  drug_history_examine_time: timestamptz
  drug_history_remark: String
  drunk_drug_driving_examine_time: timestamptz
  drunk_drug_driving_remark: String
  id: bigint
  ride_hailing_driver_verify_id: String
  traffic_accident_escape_examine_time: timestamptz
  traffic_accident_escape_remark: String
  update_at: timestamptz
  update_by: String
  violent_crime_examine_time: timestamptz
  violent_crime_remark: String
}

"""
order by max() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_max_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driving_exam_time: order_by
  driving_experience_examine_time: order_by
  driving_experience_remark: order_by
  drug_history_examine_time: order_by
  drug_history_remark: order_by
  drunk_drug_driving_examine_time: order_by
  drunk_drug_driving_remark: order_by
  id: order_by
  ride_hailing_driver_verify_id: order_by
  traffic_accident_escape_examine_time: order_by
  traffic_accident_escape_remark: order_by
  update_at: order_by
  update_by: order_by
  violent_crime_examine_time: order_by
  violent_crime_remark: order_by
}

"""aggregate min on columns"""
type ride_hailing_driver_verify_min_fields {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driving_exam_time: timestamptz
  driving_experience_examine_time: timestamptz
  driving_experience_remark: String
  drug_history_examine_time: timestamptz
  drug_history_remark: String
  drunk_drug_driving_examine_time: timestamptz
  drunk_drug_driving_remark: String
  id: bigint
  ride_hailing_driver_verify_id: String
  traffic_accident_escape_examine_time: timestamptz
  traffic_accident_escape_remark: String
  update_at: timestamptz
  update_by: String
  violent_crime_examine_time: timestamptz
  violent_crime_remark: String
}

"""
order by min() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_min_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driving_exam_time: order_by
  driving_experience_examine_time: order_by
  driving_experience_remark: order_by
  drug_history_examine_time: order_by
  drug_history_remark: order_by
  drunk_drug_driving_examine_time: order_by
  drunk_drug_driving_remark: order_by
  id: order_by
  ride_hailing_driver_verify_id: order_by
  traffic_accident_escape_examine_time: order_by
  traffic_accident_escape_remark: order_by
  update_at: order_by
  update_by: order_by
  violent_crime_examine_time: order_by
  violent_crime_remark: order_by
}

"""
response of any mutation on the table "ride_hailing_driver_verify"
"""
type ride_hailing_driver_verify_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ride_hailing_driver_verify!]!
}

"""
input type for inserting object relation for remote table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_obj_rel_insert_input {
  data: ride_hailing_driver_verify_insert_input!
  on_conflict: ride_hailing_driver_verify_on_conflict
}

"""
on conflict condition type for table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_on_conflict {
  constraint: ride_hailing_driver_verify_constraint!
  update_columns: [ride_hailing_driver_verify_update_column!]!
  where: ride_hailing_driver_verify_bool_exp
}

"""
ordering options when selecting data from "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driving_exam_time: order_by
  driving_experience_examine_time: order_by
  driving_experience_remark: order_by
  drug_history_examine_time: order_by
  drug_history_remark: order_by
  drunk_drug_driving_examine_time: order_by
  drunk_drug_driving_remark: order_by
  id: order_by
  is_delete: order_by
  is_drug_history: order_by
  is_drunk_drug_driving: order_by
  is_pass_driving_exam: order_by
  is_three_cycle_twelve: order_by
  is_three_years_driving_experience: order_by
  is_traffic_accident_escape_record: order_by
  is_violent_crime: order_by
  ride_hailing_driver_verify_id: order_by
  traffic_accident_escape_examine_time: order_by
  traffic_accident_escape_remark: order_by
  update_at: order_by
  update_by: order_by
  violent_crime_examine_time: order_by
  violent_crime_remark: order_by
}

"""
primary key columns input for table: "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "ride_hailing_driver_verify"
"""
enum ride_hailing_driver_verify_select_column {
  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  driving_exam_time

  """column name"""
  driving_experience_examine_time

  """column name"""
  driving_experience_remark

  """column name"""
  drug_history_examine_time

  """column name"""
  drug_history_remark

  """column name"""
  drunk_drug_driving_examine_time

  """column name"""
  drunk_drug_driving_remark

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  is_drug_history

  """column name"""
  is_drunk_drug_driving

  """column name"""
  is_pass_driving_exam

  """column name"""
  is_three_cycle_twelve

  """column name"""
  is_three_years_driving_experience

  """column name"""
  is_traffic_accident_escape_record

  """column name"""
  is_violent_crime

  """column name"""
  ride_hailing_driver_verify_id

  """column name"""
  traffic_accident_escape_examine_time

  """column name"""
  traffic_accident_escape_remark

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  violent_crime_examine_time

  """column name"""
  violent_crime_remark
}

"""
input type for updating data in table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_set_input {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driving_exam_time: timestamptz
  driving_experience_examine_time: timestamptz
  driving_experience_remark: String
  drug_history_examine_time: timestamptz
  drug_history_remark: String
  drunk_drug_driving_examine_time: timestamptz
  drunk_drug_driving_remark: String
  id: bigint
  is_delete: Boolean
  is_drug_history: Boolean
  is_drunk_drug_driving: Boolean
  is_pass_driving_exam: Boolean
  is_three_cycle_twelve: Boolean
  is_three_years_driving_experience: Boolean
  is_traffic_accident_escape_record: Boolean
  is_violent_crime: Boolean
  ride_hailing_driver_verify_id: String
  traffic_accident_escape_examine_time: timestamptz
  traffic_accident_escape_remark: String
  update_at: timestamptz
  update_by: String
  violent_crime_examine_time: timestamptz
  violent_crime_remark: String
}

"""aggregate stddev on columns"""
type ride_hailing_driver_verify_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type ride_hailing_driver_verify_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type ride_hailing_driver_verify_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type ride_hailing_driver_verify_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_sum_order_by {
  id: order_by
}

"""
update columns of table "ride_hailing_driver_verify"
"""
enum ride_hailing_driver_verify_update_column {
  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  driving_exam_time

  """column name"""
  driving_experience_examine_time

  """column name"""
  driving_experience_remark

  """column name"""
  drug_history_examine_time

  """column name"""
  drug_history_remark

  """column name"""
  drunk_drug_driving_examine_time

  """column name"""
  drunk_drug_driving_remark

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  is_drug_history

  """column name"""
  is_drunk_drug_driving

  """column name"""
  is_pass_driving_exam

  """column name"""
  is_three_cycle_twelve

  """column name"""
  is_three_years_driving_experience

  """column name"""
  is_traffic_accident_escape_record

  """column name"""
  is_violent_crime

  """column name"""
  ride_hailing_driver_verify_id

  """column name"""
  traffic_accident_escape_examine_time

  """column name"""
  traffic_accident_escape_remark

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  violent_crime_examine_time

  """column name"""
  violent_crime_remark
}

"""aggregate var_pop on columns"""
type ride_hailing_driver_verify_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type ride_hailing_driver_verify_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type ride_hailing_driver_verify_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "ride_hailing_driver_verify"
"""
input ride_hailing_driver_verify_variance_order_by {
  id: order_by
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNride_hailing_driver_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNride_hailing_driver_verify_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ride_hailing_driver_verify_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RideHailingDriverInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNride_hailing_driver_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.RideHailingDriverOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOride_hailing_driver_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNride_hailing_driver_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.RideHailingDriverOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOride_hailing_driver_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RideHailingDriverVerifyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNride_hailing_driver_verify_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.RideHailingDriverVerifyOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOride_hailing_driver_verify_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ride_hailing_driver_verify_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RideHailingDriverVerifyInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNride_hailing_driver_verify_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.RideHailingDriverVerifyOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOride_hailing_driver_verify_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOride_hailing_driver_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOride_hailing_driver_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNride_hailing_driver_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOride_hailing_driver_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOride_hailing_driver_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RideHailingDriverPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNride_hailing_driver_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverVerifyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOride_hailing_driver_verify_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverVerifySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOride_hailing_driver_verify_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNride_hailing_driver_verify_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ride_hailing_driver_verify_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RideHailingDriverVerifyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOride_hailing_driver_verify_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RideHailingDriverVerifySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOride_hailing_driver_verify_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RideHailingDriverVerifyPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNride_hailing_driver_verify_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOride_hailing_driver_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOride_hailing_driver_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOride_hailing_driver_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOride_hailing_driver_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOride_hailing_driver_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOride_hailing_driver_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverVerifySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOride_hailing_driver_verify_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverVerifyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOride_hailing_driver_verify_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverVerifySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOride_hailing_driver_verify_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RideHailingDriverVerifyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOride_hailing_driver_verify_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RideHailingDriverVerifyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ride_hailing_driver_verify_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_ride_hailing_driver_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOride_hailing_driver_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_ride_hailing_driver_verify_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RideHailingDriverVerifySelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOride_hailing_driver_verify_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriver(rctx, args["where"].(model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMutationResponse)
	fc.Result = res
	return ec.marshalOride_hailing_driver_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalOride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriver(rctx, args["objects"].([]*model.RideHailingDriverInsertInput), args["on_conflict"].(*model.RideHailingDriverOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMutationResponse)
	fc.Result = res
	return ec.marshalOride_hailing_driver_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriverOne(rctx, args["object"].(model.RideHailingDriverInsertInput), args["on_conflict"].(*model.RideHailingDriverOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalOride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriver(rctx, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["where"].(model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMutationResponse)
	fc.Result = res
	return ec.marshalOride_hailing_driver_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverByPk(rctx, args["_inc"].(*model.RideHailingDriverIncInput), args["_set"].(*model.RideHailingDriverSetInput), args["pk_columns"].(model.RideHailingDriverPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalOride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverVerify(rctx, args["where"].(model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMutationResponse)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ride_hailing_driver_verify_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ride_hailing_driver_verify_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRideHailingDriverVerifyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriverVerify(rctx, args["objects"].([]*model.RideHailingDriverVerifyInsertInput), args["on_conflict"].(*model.RideHailingDriverVerifyOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMutationResponse)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ride_hailing_driver_verify_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ride_hailing_driver_verify_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRideHailingDriverVerifyOne(rctx, args["object"].(model.RideHailingDriverVerifyInsertInput), args["on_conflict"].(*model.RideHailingDriverVerifyOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverVerify(rctx, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["where"].(model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMutationResponse)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ride_hailing_driver_verify_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ride_hailing_driver_verify_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRideHailingDriverVerifyByPk(rctx, args["_inc"].(*model.RideHailingDriverVerifyIncInput), args["_set"].(*model.RideHailingDriverVerifySetInput), args["pk_columns"].(model.RideHailingDriverVerifyPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriver(rctx, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNride_hailing_driver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverAggregate(rctx, args["distinct_on"].([]model.RideHailingDriverSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverOrderBy), args["where"].(*model.RideHailingDriverBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverAggregate)
	fc.Result = res
	return ec.marshalNride_hailing_driver_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalOride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerify(rctx, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNride_hailing_driver_verify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerifyAggregate(rctx, args["distinct_on"].([]model.RideHailingDriverVerifySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RideHailingDriverVerifyOrderBy), args["where"].(*model.RideHailingDriverVerifyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyAggregate)
	fc.Result = res
	return ec.marshalNride_hailing_driver_verify_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ride_hailing_driver_verify_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ride_hailing_driver_verify_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RideHailingDriverVerifyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_birthday(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_check_station(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_current_address(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_driver_name(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_driver_school_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSchoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_end_valid_date(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_first_time_received_date(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTimeReceivedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_handle_id_photo(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_id_address(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_id_number(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_idcard_photo(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdcardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_is_former_driver(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFormerDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_nation(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_operator_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_phone_number(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_qualification_number(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_sex(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_sign_gov(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignGov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_signnature_photo(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignnaturePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_start_valid_date(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverAggregateFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNride_hailing_driver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverAvgFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ride_hailing_driver_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMaxFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverMinFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverStddevFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverStddevPopFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverStddevSampFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverSumFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVarPopFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVarSampFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVarianceFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_avg_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_avg_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_avg_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_birthday(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_current_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_driver_school_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSchoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_end_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_first_time_received_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTimeReceivedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_handle_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_id_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_idcard_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdcardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_nation(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_operator_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_qualification_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_sign_gov(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignGov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_signnature_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignnaturePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_start_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_birthday(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_current_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_driver_name(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_driver_school_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverSchoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_end_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_first_time_received_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstTimeReceivedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_handle_id_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandleIDPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_id_address(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_id_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_idcard_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdcardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_nation(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_operator_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_phone_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_qualification_number(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_ride_hailing_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_sign_gov(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignGov, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_signnature_photo(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignnaturePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_start_valid_date(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartValidDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriver)
	fc.Result = res
	return ec.marshalNride_hailing_driver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_pop_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_samp_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_stddev_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_sum_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_sum_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_sum_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_pop_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_pop_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_pop_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_samp_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_samp_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_var_samp_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_variance_fields_check_station(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_variance_fields_quasi_driving_models(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuasiDrivingModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_variance_fields_sex(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_driving_exam_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExamTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_driving_experience_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_driving_experience_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_drug_history_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_drug_history_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_drunk_drug_driving_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_drunk_drug_driving_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_drug_history(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrugHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_drunk_drug_driving(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDrunkDrugDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_pass_driving_exam(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPassDrivingExam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_three_cycle_twelve(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeCycleTwelve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_three_years_driving_experience(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThreeYearsDrivingExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_traffic_accident_escape_record(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTrafficAccidentEscapeRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_is_violent_crime(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsViolentCrime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_traffic_accident_escape_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_traffic_accident_escape_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_violent_crime_examine_time(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_violent_crime_remark(ctx context.Context, field graphql.CollectedField, obj *model1.RideHailingDriverVerify) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyAggregateFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNride_hailing_driver_verify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyAvgFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ride_hailing_driver_verify_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMaxFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyMinFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyStddevFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyStddevPopFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyStddevSampFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifySumFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyVarPopFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyVarSampFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RideHailingDriverVerifyVarianceFields)
	fc.Result = res
	return ec.marshalOride_hailing_driver_verify_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_driving_exam_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExamTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_driving_experience_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_driving_experience_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_drug_history_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_drug_history_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_drunk_drug_driving_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_drunk_drug_driving_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_traffic_accident_escape_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_traffic_accident_escape_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_violent_crime_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields_violent_crime_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_driving_exam_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExamTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_driving_experience_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_driving_experience_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingExperienceRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_drug_history_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_drug_history_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrugHistoryRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_drunk_drug_driving_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_drunk_drug_driving_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrunkDrugDrivingRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_ride_hailing_driver_verify_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RideHailingDriverVerifyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_traffic_accident_escape_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_traffic_accident_escape_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficAccidentEscapeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_violent_crime_examine_time(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeExamineTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields_violent_crime_remark(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViolentCrimeRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RideHailingDriverVerify)
	fc.Result = res
	return ec.marshalNride_hailing_driver_verify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ride_hailing_driver_verify_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.RideHailingDriverVerifyVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ride_hailing_driver_verify_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_aggregate_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverAggregateOrderBy, error) {
	var it model.RideHailingDriverAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOride_hailing_driver_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOride_hailing_driver_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOride_hailing_driver_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOride_hailing_driver_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOride_hailing_driver_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOride_hailing_driver_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOride_hailing_driver_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOride_hailing_driver_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOride_hailing_driver_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOride_hailing_driver_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.RideHailingDriverArrRelInsertInput, error) {
	var it model.RideHailingDriverArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNride_hailing_driver_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOride_hailing_driver_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_avg_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverAvgOrderBy, error) {
	var it model.RideHailingDriverAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_bool_exp(ctx context.Context, obj interface{}) (model.RideHailingDriverBoolExp, error) {
	var it model.RideHailingDriverBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOride_hailing_driver_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOride_hailing_driver_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOride_hailing_driver_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_inc_input(ctx context.Context, obj interface{}) (model.RideHailingDriverIncInput, error) {
	var it model.RideHailingDriverIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_insert_input(ctx context.Context, obj interface{}) (model.RideHailingDriverInsertInput, error) {
	var it model.RideHailingDriverInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_max_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverMaxOrderBy, error) {
	var it model.RideHailingDriverMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_min_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverMinOrderBy, error) {
	var it model.RideHailingDriverMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.RideHailingDriverObjRelInsertInput, error) {
	var it model.RideHailingDriverObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNride_hailing_driver_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOride_hailing_driver_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_on_conflict(ctx context.Context, obj interface{}) (model.RideHailingDriverOnConflict, error) {
	var it model.RideHailingDriverOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNride_hailing_driver_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNride_hailing_driver_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOride_hailing_driver_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverOrderBy, error) {
	var it model.RideHailingDriverOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_pk_columns_input(ctx context.Context, obj interface{}) (model.RideHailingDriverPkColumnsInput, error) {
	var it model.RideHailingDriverPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_set_input(ctx context.Context, obj interface{}) (model.RideHailingDriverSetInput, error) {
	var it model.RideHailingDriverSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "birthday":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthday"))
			it.Birthday, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "current_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_address"))
			it.CurrentAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_name"))
			it.DriverName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_school_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_school_id"))
			it.DriverSchoolID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_valid_date"))
			it.EndValidDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_time_received_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_time_received_date"))
			it.FirstTimeReceivedDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "handle_id_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handle_id_photo"))
			it.HandleIDPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_address"))
			it.IDAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id_number"))
			it.IDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idcard_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idcard_photo"))
			it.IdcardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_former_driver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_former_driver"))
			it.IsFormerDriver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "nation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nation"))
			it.Nation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator_id"))
			it.OperatorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_number"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "qualification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualification_number"))
			it.QualificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_id"))
			it.RideHailingDriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sign_gov":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sign_gov"))
			it.SignGov, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "signnature_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signnature_photo"))
			it.SignnaturePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_valid_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_valid_date"))
			it.StartValidDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_stddev_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverStddevOrderBy, error) {
	var it model.RideHailingDriverStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverStddevPopOrderBy, error) {
	var it model.RideHailingDriverStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverStddevSampOrderBy, error) {
	var it model.RideHailingDriverStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_sum_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverSumOrderBy, error) {
	var it model.RideHailingDriverSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_var_pop_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVarPopOrderBy, error) {
	var it model.RideHailingDriverVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_var_samp_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVarSampOrderBy, error) {
	var it model.RideHailingDriverVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_variance_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVarianceOrderBy, error) {
	var it model.RideHailingDriverVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_station":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_station"))
			it.CheckStation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "quasi_driving_models":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quasi_driving_models"))
			it.QuasiDrivingModels, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sex":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sex"))
			it.Sex, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_aggregate_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyAggregateOrderBy, error) {
	var it model.RideHailingDriverVerifyAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOride_hailing_driver_verify_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOride_hailing_driver_verify_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOride_hailing_driver_verify_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOride_hailing_driver_verify_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOride_hailing_driver_verify_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOride_hailing_driver_verify_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOride_hailing_driver_verify_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOride_hailing_driver_verify_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOride_hailing_driver_verify_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOride_hailing_driver_verify_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyArrRelInsertInput, error) {
	var it model.RideHailingDriverVerifyArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNride_hailing_driver_verify_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOride_hailing_driver_verify_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_avg_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyAvgOrderBy, error) {
	var it model.RideHailingDriverVerifyAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_bool_exp(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyBoolExp, error) {
	var it model.RideHailingDriverVerifyBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_inc_input(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyIncInput, error) {
	var it model.RideHailingDriverVerifyIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_insert_input(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyInsertInput, error) {
	var it model.RideHailingDriverVerifyInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_max_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyMaxOrderBy, error) {
	var it model.RideHailingDriverVerifyMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_min_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyMinOrderBy, error) {
	var it model.RideHailingDriverVerifyMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyObjRelInsertInput, error) {
	var it model.RideHailingDriverVerifyObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNride_hailing_driver_verify_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOride_hailing_driver_verify_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_on_conflict(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyOnConflict, error) {
	var it model.RideHailingDriverVerifyOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNride_hailing_driver_verify_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNride_hailing_driver_verify_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyOrderBy, error) {
	var it model.RideHailingDriverVerifyOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_pk_columns_input(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyPkColumnsInput, error) {
	var it model.RideHailingDriverVerifyPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_set_input(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifySetInput, error) {
	var it model.RideHailingDriverVerifySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_exam_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_exam_time"))
			it.DrivingExamTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_examine_time"))
			it.DrivingExperienceExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_experience_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_experience_remark"))
			it.DrivingExperienceRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_examine_time"))
			it.DrugHistoryExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "drug_history_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drug_history_remark"))
			it.DrugHistoryRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_examine_time"))
			it.DrunkDrugDrivingExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "drunk_drug_driving_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drunk_drug_driving_remark"))
			it.DrunkDrugDrivingRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drug_history":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drug_history"))
			it.IsDrugHistory, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_drunk_drug_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_drunk_drug_driving"))
			it.IsDrunkDrugDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pass_driving_exam":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pass_driving_exam"))
			it.IsPassDrivingExam, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_cycle_twelve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_cycle_twelve"))
			it.IsThreeCycleTwelve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_three_years_driving_experience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_three_years_driving_experience"))
			it.IsThreeYearsDrivingExperience, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_traffic_accident_escape_record":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_traffic_accident_escape_record"))
			it.IsTrafficAccidentEscapeRecord, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_violent_crime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_violent_crime"))
			it.IsViolentCrime, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ride_hailing_driver_verify_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ride_hailing_driver_verify_id"))
			it.RideHailingDriverVerifyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_examine_time"))
			it.TrafficAccidentEscapeExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_accident_escape_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_accident_escape_remark"))
			it.TrafficAccidentEscapeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_examine_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_examine_time"))
			it.ViolentCrimeExamineTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "violent_crime_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("violent_crime_remark"))
			it.ViolentCrimeRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_stddev_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyStddevOrderBy, error) {
	var it model.RideHailingDriverVerifyStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyStddevPopOrderBy, error) {
	var it model.RideHailingDriverVerifyStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyStddevSampOrderBy, error) {
	var it model.RideHailingDriverVerifyStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_sum_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifySumOrderBy, error) {
	var it model.RideHailingDriverVerifySumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_var_pop_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyVarPopOrderBy, error) {
	var it model.RideHailingDriverVerifyVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_var_samp_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyVarSampOrderBy, error) {
	var it model.RideHailingDriverVerifyVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputride_hailing_driver_verify_variance_order_by(ctx context.Context, obj interface{}) (model.RideHailingDriverVerifyVarianceOrderBy, error) {
	var it model.RideHailingDriverVerifyVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_ride_hailing_driver":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver(ctx, field)
		case "delete_ride_hailing_driver_by_pk":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_by_pk(ctx, field)
		case "insert_ride_hailing_driver":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver(ctx, field)
		case "insert_ride_hailing_driver_one":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver_one(ctx, field)
		case "update_ride_hailing_driver":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver(ctx, field)
		case "update_ride_hailing_driver_by_pk":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_by_pk(ctx, field)
		case "delete_ride_hailing_driver_verify":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_verify(ctx, field)
		case "delete_ride_hailing_driver_verify_by_pk":
			out.Values[i] = ec._Mutation_delete_ride_hailing_driver_verify_by_pk(ctx, field)
		case "insert_ride_hailing_driver_verify":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver_verify(ctx, field)
		case "insert_ride_hailing_driver_verify_one":
			out.Values[i] = ec._Mutation_insert_ride_hailing_driver_verify_one(ctx, field)
		case "update_ride_hailing_driver_verify":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_verify(ctx, field)
		case "update_ride_hailing_driver_verify_by_pk":
			out.Values[i] = ec._Mutation_update_ride_hailing_driver_verify_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "ride_hailing_driver":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_by_pk(ctx, field)
				return res
			})
		case "ride_hailing_driver_verify":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_verify_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ride_hailing_driver_verify_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ride_hailing_driver_verify_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driverImplementors = []string{"ride_hailing_driver"}

func (ec *executionContext) _ride_hailing_driver(ctx context.Context, sel ast.SelectionSet, obj *model1.RideHailingDriver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driverImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver")
		case "birthday":
			out.Values[i] = ec._ride_hailing_driver_birthday(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_check_station(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ride_hailing_driver_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ride_hailing_driver_create_by(ctx, field, obj)
		case "current_address":
			out.Values[i] = ec._ride_hailing_driver_current_address(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._ride_hailing_driver_driver_name(ctx, field, obj)
		case "driver_school_id":
			out.Values[i] = ec._ride_hailing_driver_driver_school_id(ctx, field, obj)
		case "end_valid_date":
			out.Values[i] = ec._ride_hailing_driver_end_valid_date(ctx, field, obj)
		case "first_time_received_date":
			out.Values[i] = ec._ride_hailing_driver_first_time_received_date(ctx, field, obj)
		case "handle_id_photo":
			out.Values[i] = ec._ride_hailing_driver_handle_id_photo(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id_address":
			out.Values[i] = ec._ride_hailing_driver_id_address(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._ride_hailing_driver_id_number(ctx, field, obj)
		case "idcard_photo":
			out.Values[i] = ec._ride_hailing_driver_idcard_photo(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ride_hailing_driver_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_former_driver":
			out.Values[i] = ec._ride_hailing_driver_is_former_driver(ctx, field, obj)
		case "nation":
			out.Values[i] = ec._ride_hailing_driver_nation(ctx, field, obj)
		case "operator_id":
			out.Values[i] = ec._ride_hailing_driver_operator_id(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._ride_hailing_driver_phone_number(ctx, field, obj)
		case "qualification_number":
			out.Values[i] = ec._ride_hailing_driver_qualification_number(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_quasi_driving_models(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._ride_hailing_driver_remarks(ctx, field, obj)
		case "ride_hailing_driver_id":
			out.Values[i] = ec._ride_hailing_driver_ride_hailing_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._ride_hailing_driver_ride_hailing_driver_verify_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_sex(ctx, field, obj)
		case "sign_gov":
			out.Values[i] = ec._ride_hailing_driver_sign_gov(ctx, field, obj)
		case "signnature_photo":
			out.Values[i] = ec._ride_hailing_driver_signnature_photo(ctx, field, obj)
		case "start_valid_date":
			out.Values[i] = ec._ride_hailing_driver_start_valid_date(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ride_hailing_driver_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ride_hailing_driver_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._ride_hailing_driver_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_aggregateImplementors = []string{"ride_hailing_driver_aggregate"}

func (ec *executionContext) _ride_hailing_driver_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_aggregate")
		case "aggregate":
			out.Values[i] = ec._ride_hailing_driver_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._ride_hailing_driver_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_aggregate_fieldsImplementors = []string{"ride_hailing_driver_aggregate_fields"}

func (ec *executionContext) _ride_hailing_driver_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_aggregate_fields")
		case "avg":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ride_hailing_driver_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_avg_fieldsImplementors = []string{"ride_hailing_driver_avg_fields"}

func (ec *executionContext) _ride_hailing_driver_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_avg_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_avg_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_avg_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_avg_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_avg_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_max_fieldsImplementors = []string{"ride_hailing_driver_max_fields"}

func (ec *executionContext) _ride_hailing_driver_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_max_fields")
		case "birthday":
			out.Values[i] = ec._ride_hailing_driver_max_fields_birthday(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_max_fields_check_station(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ride_hailing_driver_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ride_hailing_driver_max_fields_create_by(ctx, field, obj)
		case "current_address":
			out.Values[i] = ec._ride_hailing_driver_max_fields_current_address(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._ride_hailing_driver_max_fields_driver_name(ctx, field, obj)
		case "driver_school_id":
			out.Values[i] = ec._ride_hailing_driver_max_fields_driver_school_id(ctx, field, obj)
		case "end_valid_date":
			out.Values[i] = ec._ride_hailing_driver_max_fields_end_valid_date(ctx, field, obj)
		case "first_time_received_date":
			out.Values[i] = ec._ride_hailing_driver_max_fields_first_time_received_date(ctx, field, obj)
		case "handle_id_photo":
			out.Values[i] = ec._ride_hailing_driver_max_fields_handle_id_photo(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_max_fields_id(ctx, field, obj)
		case "id_address":
			out.Values[i] = ec._ride_hailing_driver_max_fields_id_address(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._ride_hailing_driver_max_fields_id_number(ctx, field, obj)
		case "idcard_photo":
			out.Values[i] = ec._ride_hailing_driver_max_fields_idcard_photo(ctx, field, obj)
		case "nation":
			out.Values[i] = ec._ride_hailing_driver_max_fields_nation(ctx, field, obj)
		case "operator_id":
			out.Values[i] = ec._ride_hailing_driver_max_fields_operator_id(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._ride_hailing_driver_max_fields_phone_number(ctx, field, obj)
		case "qualification_number":
			out.Values[i] = ec._ride_hailing_driver_max_fields_qualification_number(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_max_fields_quasi_driving_models(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._ride_hailing_driver_max_fields_remarks(ctx, field, obj)
		case "ride_hailing_driver_id":
			out.Values[i] = ec._ride_hailing_driver_max_fields_ride_hailing_driver_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._ride_hailing_driver_max_fields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_max_fields_sex(ctx, field, obj)
		case "sign_gov":
			out.Values[i] = ec._ride_hailing_driver_max_fields_sign_gov(ctx, field, obj)
		case "signnature_photo":
			out.Values[i] = ec._ride_hailing_driver_max_fields_signnature_photo(ctx, field, obj)
		case "start_valid_date":
			out.Values[i] = ec._ride_hailing_driver_max_fields_start_valid_date(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ride_hailing_driver_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ride_hailing_driver_max_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._ride_hailing_driver_max_fields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_min_fieldsImplementors = []string{"ride_hailing_driver_min_fields"}

func (ec *executionContext) _ride_hailing_driver_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_min_fields")
		case "birthday":
			out.Values[i] = ec._ride_hailing_driver_min_fields_birthday(ctx, field, obj)
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_min_fields_check_station(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ride_hailing_driver_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ride_hailing_driver_min_fields_create_by(ctx, field, obj)
		case "current_address":
			out.Values[i] = ec._ride_hailing_driver_min_fields_current_address(ctx, field, obj)
		case "driver_name":
			out.Values[i] = ec._ride_hailing_driver_min_fields_driver_name(ctx, field, obj)
		case "driver_school_id":
			out.Values[i] = ec._ride_hailing_driver_min_fields_driver_school_id(ctx, field, obj)
		case "end_valid_date":
			out.Values[i] = ec._ride_hailing_driver_min_fields_end_valid_date(ctx, field, obj)
		case "first_time_received_date":
			out.Values[i] = ec._ride_hailing_driver_min_fields_first_time_received_date(ctx, field, obj)
		case "handle_id_photo":
			out.Values[i] = ec._ride_hailing_driver_min_fields_handle_id_photo(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_min_fields_id(ctx, field, obj)
		case "id_address":
			out.Values[i] = ec._ride_hailing_driver_min_fields_id_address(ctx, field, obj)
		case "id_number":
			out.Values[i] = ec._ride_hailing_driver_min_fields_id_number(ctx, field, obj)
		case "idcard_photo":
			out.Values[i] = ec._ride_hailing_driver_min_fields_idcard_photo(ctx, field, obj)
		case "nation":
			out.Values[i] = ec._ride_hailing_driver_min_fields_nation(ctx, field, obj)
		case "operator_id":
			out.Values[i] = ec._ride_hailing_driver_min_fields_operator_id(ctx, field, obj)
		case "phone_number":
			out.Values[i] = ec._ride_hailing_driver_min_fields_phone_number(ctx, field, obj)
		case "qualification_number":
			out.Values[i] = ec._ride_hailing_driver_min_fields_qualification_number(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_min_fields_quasi_driving_models(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._ride_hailing_driver_min_fields_remarks(ctx, field, obj)
		case "ride_hailing_driver_id":
			out.Values[i] = ec._ride_hailing_driver_min_fields_ride_hailing_driver_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._ride_hailing_driver_min_fields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_min_fields_sex(ctx, field, obj)
		case "sign_gov":
			out.Values[i] = ec._ride_hailing_driver_min_fields_sign_gov(ctx, field, obj)
		case "signnature_photo":
			out.Values[i] = ec._ride_hailing_driver_min_fields_signnature_photo(ctx, field, obj)
		case "start_valid_date":
			out.Values[i] = ec._ride_hailing_driver_min_fields_start_valid_date(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ride_hailing_driver_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ride_hailing_driver_min_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._ride_hailing_driver_min_fields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_mutation_responseImplementors = []string{"ride_hailing_driver_mutation_response"}

func (ec *executionContext) _ride_hailing_driver_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._ride_hailing_driver_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ride_hailing_driver_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_stddev_fieldsImplementors = []string{"ride_hailing_driver_stddev_fields"}

func (ec *executionContext) _ride_hailing_driver_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_stddev_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_stddev_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_stddev_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_stddev_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_stddev_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_stddev_pop_fieldsImplementors = []string{"ride_hailing_driver_stddev_pop_fields"}

func (ec *executionContext) _ride_hailing_driver_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_stddev_pop_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_stddev_pop_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_stddev_pop_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_stddev_pop_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_stddev_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_stddev_samp_fieldsImplementors = []string{"ride_hailing_driver_stddev_samp_fields"}

func (ec *executionContext) _ride_hailing_driver_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_stddev_samp_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_stddev_samp_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_stddev_samp_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_stddev_samp_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_stddev_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_sum_fieldsImplementors = []string{"ride_hailing_driver_sum_fields"}

func (ec *executionContext) _ride_hailing_driver_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_sum_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_sum_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_sum_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_sum_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_sum_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_var_pop_fieldsImplementors = []string{"ride_hailing_driver_var_pop_fields"}

func (ec *executionContext) _ride_hailing_driver_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_var_pop_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_var_pop_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_var_pop_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_var_pop_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_var_pop_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_var_samp_fieldsImplementors = []string{"ride_hailing_driver_var_samp_fields"}

func (ec *executionContext) _ride_hailing_driver_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_var_samp_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_var_samp_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_var_samp_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_var_samp_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_var_samp_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_variance_fieldsImplementors = []string{"ride_hailing_driver_variance_fields"}

func (ec *executionContext) _ride_hailing_driver_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_variance_fields")
		case "check_station":
			out.Values[i] = ec._ride_hailing_driver_variance_fields_check_station(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_variance_fields_id(ctx, field, obj)
		case "quasi_driving_models":
			out.Values[i] = ec._ride_hailing_driver_variance_fields_quasi_driving_models(ctx, field, obj)
		case "sex":
			out.Values[i] = ec._ride_hailing_driver_variance_fields_sex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verifyImplementors = []string{"ride_hailing_driver_verify"}

func (ec *executionContext) _ride_hailing_driver_verify(ctx context.Context, sel ast.SelectionSet, obj *model1.RideHailingDriverVerify) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verifyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify")
		case "create_at":
			out.Values[i] = ec._ride_hailing_driver_verify_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ride_hailing_driver_verify_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ride_hailing_driver_verify_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ride_hailing_driver_verify_delete_by(ctx, field, obj)
		case "driving_exam_time":
			out.Values[i] = ec._ride_hailing_driver_verify_driving_exam_time(ctx, field, obj)
		case "driving_experience_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_driving_experience_examine_time(ctx, field, obj)
		case "driving_experience_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_driving_experience_remark(ctx, field, obj)
		case "drug_history_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_drug_history_examine_time(ctx, field, obj)
		case "drug_history_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_drug_history_remark(ctx, field, obj)
		case "drunk_drug_driving_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_drunk_drug_driving_examine_time(ctx, field, obj)
		case "drunk_drug_driving_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_drunk_drug_driving_remark(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._ride_hailing_driver_verify_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_drug_history":
			out.Values[i] = ec._ride_hailing_driver_verify_is_drug_history(ctx, field, obj)
		case "is_drunk_drug_driving":
			out.Values[i] = ec._ride_hailing_driver_verify_is_drunk_drug_driving(ctx, field, obj)
		case "is_pass_driving_exam":
			out.Values[i] = ec._ride_hailing_driver_verify_is_pass_driving_exam(ctx, field, obj)
		case "is_three_cycle_twelve":
			out.Values[i] = ec._ride_hailing_driver_verify_is_three_cycle_twelve(ctx, field, obj)
		case "is_three_years_driving_experience":
			out.Values[i] = ec._ride_hailing_driver_verify_is_three_years_driving_experience(ctx, field, obj)
		case "is_traffic_accident_escape_record":
			out.Values[i] = ec._ride_hailing_driver_verify_is_traffic_accident_escape_record(ctx, field, obj)
		case "is_violent_crime":
			out.Values[i] = ec._ride_hailing_driver_verify_is_violent_crime(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._ride_hailing_driver_verify_ride_hailing_driver_verify_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "traffic_accident_escape_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_traffic_accident_escape_examine_time(ctx, field, obj)
		case "traffic_accident_escape_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_traffic_accident_escape_remark(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ride_hailing_driver_verify_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ride_hailing_driver_verify_update_by(ctx, field, obj)
		case "violent_crime_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_violent_crime_examine_time(ctx, field, obj)
		case "violent_crime_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_violent_crime_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_aggregateImplementors = []string{"ride_hailing_driver_verify_aggregate"}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_aggregate")
		case "aggregate":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_aggregate_fieldsImplementors = []string{"ride_hailing_driver_verify_aggregate_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_aggregate_fields")
		case "avg":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ride_hailing_driver_verify_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_avg_fieldsImplementors = []string{"ride_hailing_driver_verify_avg_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_avg_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_max_fieldsImplementors = []string{"ride_hailing_driver_verify_max_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_max_fields")
		case "create_at":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_delete_by(ctx, field, obj)
		case "driving_exam_time":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_driving_exam_time(ctx, field, obj)
		case "driving_experience_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_driving_experience_examine_time(ctx, field, obj)
		case "driving_experience_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_driving_experience_remark(ctx, field, obj)
		case "drug_history_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_drug_history_examine_time(ctx, field, obj)
		case "drug_history_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_drug_history_remark(ctx, field, obj)
		case "drunk_drug_driving_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_drunk_drug_driving_examine_time(ctx, field, obj)
		case "drunk_drug_driving_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_drunk_drug_driving_remark(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "traffic_accident_escape_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_traffic_accident_escape_examine_time(ctx, field, obj)
		case "traffic_accident_escape_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_traffic_accident_escape_remark(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_update_by(ctx, field, obj)
		case "violent_crime_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_violent_crime_examine_time(ctx, field, obj)
		case "violent_crime_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_max_fields_violent_crime_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_min_fieldsImplementors = []string{"ride_hailing_driver_verify_min_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_min_fields")
		case "create_at":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_delete_by(ctx, field, obj)
		case "driving_exam_time":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_driving_exam_time(ctx, field, obj)
		case "driving_experience_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_driving_experience_examine_time(ctx, field, obj)
		case "driving_experience_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_driving_experience_remark(ctx, field, obj)
		case "drug_history_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_drug_history_examine_time(ctx, field, obj)
		case "drug_history_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_drug_history_remark(ctx, field, obj)
		case "drunk_drug_driving_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_drunk_drug_driving_examine_time(ctx, field, obj)
		case "drunk_drug_driving_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_drunk_drug_driving_remark(ctx, field, obj)
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_id(ctx, field, obj)
		case "ride_hailing_driver_verify_id":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_ride_hailing_driver_verify_id(ctx, field, obj)
		case "traffic_accident_escape_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_traffic_accident_escape_examine_time(ctx, field, obj)
		case "traffic_accident_escape_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_traffic_accident_escape_remark(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_update_by(ctx, field, obj)
		case "violent_crime_examine_time":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_violent_crime_examine_time(ctx, field, obj)
		case "violent_crime_remark":
			out.Values[i] = ec._ride_hailing_driver_verify_min_fields_violent_crime_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_mutation_responseImplementors = []string{"ride_hailing_driver_verify_mutation_response"}

func (ec *executionContext) _ride_hailing_driver_verify_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._ride_hailing_driver_verify_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ride_hailing_driver_verify_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_stddev_fieldsImplementors = []string{"ride_hailing_driver_verify_stddev_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_stddev_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_stddev_pop_fieldsImplementors = []string{"ride_hailing_driver_verify_stddev_pop_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_stddev_samp_fieldsImplementors = []string{"ride_hailing_driver_verify_stddev_samp_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_sum_fieldsImplementors = []string{"ride_hailing_driver_verify_sum_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_sum_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_var_pop_fieldsImplementors = []string{"ride_hailing_driver_verify_var_pop_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_var_pop_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_var_samp_fieldsImplementors = []string{"ride_hailing_driver_verify_var_samp_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_var_samp_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ride_hailing_driver_verify_variance_fieldsImplementors = []string{"ride_hailing_driver_verify_variance_fields"}

func (ec *executionContext) _ride_hailing_driver_verify_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.RideHailingDriverVerifyVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ride_hailing_driver_verify_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ride_hailing_driver_verify_variance_fields")
		case "id":
			out.Values[i] = ec._ride_hailing_driver_verify_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNride_hailing_driver2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RideHailingDriver) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriver) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ride_hailing_driver(ctx, sel, v)
}

func (ec *executionContext) marshalNride_hailing_driver_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregate(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverAggregate) graphql.Marshaler {
	return ec._ride_hailing_driver_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNride_hailing_driver_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ride_hailing_driver_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNride_hailing_driver_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx context.Context, v interface{}) (model.RideHailingDriverBoolExp, error) {
	res, err := ec.unmarshalInputride_hailing_driver_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverConstraint(ctx context.Context, v interface{}) (model.RideHailingDriverConstraint, error) {
	var res model.RideHailingDriverConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNride_hailing_driver_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverConstraint(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNride_hailing_driver_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx context.Context, v interface{}) (model.RideHailingDriverInsertInput, error) {
	res, err := ec.unmarshalInputride_hailing_driver_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNride_hailing_driver_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverInsertInput(ctx context.Context, v interface{}) (*model.RideHailingDriverInsertInput, error) {
	res, err := ec.unmarshalInputride_hailing_driver_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverOrderBy, error) {
	res, err := ec.unmarshalInputride_hailing_driver_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverPkColumnsInput(ctx context.Context, v interface{}) (model.RideHailingDriverPkColumnsInput, error) {
	res, err := ec.unmarshalInputride_hailing_driver_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx context.Context, v interface{}) (model.RideHailingDriverSelectColumn, error) {
	var res model.RideHailingDriverSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNride_hailing_driver_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNride_hailing_driver_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumn(ctx context.Context, v interface{}) (model.RideHailingDriverUpdateColumn, error) {
	var res model.RideHailingDriverUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNride_hailing_driver_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNride_hailing_driver_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.RideHailingDriverUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RideHailingDriverUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNride_hailing_driver_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RideHailingDriverUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNride_hailing_driver_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNride_hailing_driver_verify2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerifyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RideHailingDriverVerify) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriverVerify) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify(ctx, sel, v)
}

func (ec *executionContext) marshalNride_hailing_driver_verify_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregate(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverVerifyAggregate) graphql.Marshaler {
	return ec._ride_hailing_driver_verify_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNride_hailing_driver_verify_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyBoolExp, error) {
	res, err := ec.unmarshalInputride_hailing_driver_verify_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyConstraint(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyConstraint, error) {
	var res model.RideHailingDriverVerifyConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNride_hailing_driver_verify_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyConstraint(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverVerifyConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyInsertInput, error) {
	res, err := ec.unmarshalInputride_hailing_driver_verify_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverVerifyInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverVerifyInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_verify_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyInsertInput(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyInsertInput, error) {
	res, err := ec.unmarshalInputride_hailing_driver_verify_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyOrderBy, error) {
	res, err := ec.unmarshalInputride_hailing_driver_verify_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyPkColumnsInput(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyPkColumnsInput, error) {
	res, err := ec.unmarshalInputride_hailing_driver_verify_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx context.Context, v interface{}) (model.RideHailingDriverVerifySelectColumn, error) {
	var res model.RideHailingDriverVerifySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNride_hailing_driver_verify_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverVerifySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumn(ctx context.Context, v interface{}) (model.RideHailingDriverVerifyUpdateColumn, error) {
	var res model.RideHailingDriverVerifyUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNride_hailing_driver_verify_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.RideHailingDriverVerifyUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNride_hailing_driver_verify_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.RideHailingDriverVerifyUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RideHailingDriverVerifyUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_verify_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNride_hailing_driver_verify_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RideHailingDriverVerifyUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNride_hailing_driver_verify_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOride_hailing_driver2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriver(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver(ctx, sel, v)
}

func (ec *executionContext) marshalOride_hailing_driver_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOride_hailing_driver_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverAvgOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOride_hailing_driver_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx context.Context, v interface{}) ([]*model.RideHailingDriverBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOride_hailing_driver_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOride_hailing_driver_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverBoolExp(ctx context.Context, v interface{}) (*model.RideHailingDriverBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOride_hailing_driver_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverIncInput(ctx context.Context, v interface{}) (*model.RideHailingDriverIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMaxOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMinOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOnConflict(ctx context.Context, v interface{}) (*model.RideHailingDriverOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOride_hailing_driver_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOride_hailing_driver_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RideHailingDriverSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RideHailingDriverSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOride_hailing_driver_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RideHailingDriverSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNride_hailing_driver_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOride_hailing_driver_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSetInput(ctx context.Context, v interface{}) (*model.RideHailingDriverSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevPopOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverStddevSampOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSumFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverSumOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarPopOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarSampOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVarianceOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋmodelᚐRideHailingDriverVerify(ctx context.Context, sel ast.SelectionSet, v *model1.RideHailingDriverVerify) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify(ctx, sel, v)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyAvgOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx context.Context, v interface{}) ([]*model.RideHailingDriverVerifyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverVerifyBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOride_hailing_driver_verify_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyBoolExp(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyIncInput(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMaxOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMinOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOnConflict(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RideHailingDriverVerifyOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RideHailingDriverVerifyOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_verify_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RideHailingDriverVerifySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RideHailingDriverVerifySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNride_hailing_driver_verify_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOride_hailing_driver_verify_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RideHailingDriverVerifySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNride_hailing_driver_verify_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySetInput(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevPopOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyStddevSampOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySumFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifySumOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifySumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarPopOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarSampOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOride_hailing_driver_verify_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RideHailingDriverVerifyVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ride_hailing_driver_verify_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOride_hailing_driver_verify_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋridehailingᚋgraphᚋmodelᚐRideHailingDriverVerifyVarianceOrderBy(ctx context.Context, v interface{}) (*model.RideHailingDriverVerifyVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputride_hailing_driver_verify_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
