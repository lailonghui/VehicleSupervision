// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/internal/modules/device/simflow/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "sim_card_flow"
type SimCardFlowAggregate struct {
	Aggregate *SimCardFlowAggregateFields `json:"aggregate"`
	Nodes     []*model.SimCardFlow        `json:"nodes"`
}

// aggregate fields of "sim_card_flow"
type SimCardFlowAggregateFields struct {
	Avg        *SimCardFlowAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *SimCardFlowMaxFields        `json:"max"`
	Min        *SimCardFlowMinFields        `json:"min"`
	Stddev     *SimCardFlowStddevFields     `json:"stddev"`
	StddevPop  *SimCardFlowStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SimCardFlowStddevSampFields `json:"stddev_samp"`
	Sum        *SimCardFlowSumFields        `json:"sum"`
	VarPop     *SimCardFlowVarPopFields     `json:"var_pop"`
	VarSamp    *SimCardFlowVarSampFields    `json:"var_samp"`
	Variance   *SimCardFlowVarianceFields   `json:"variance"`
}

// order by aggregate values of table "sim_card_flow"
type SimCardFlowAggregateOrderBy struct {
	Avg        *SimCardFlowAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy               `json:"count"`
	Max        *SimCardFlowMaxOrderBy        `json:"max"`
	Min        *SimCardFlowMinOrderBy        `json:"min"`
	Stddev     *SimCardFlowStddevOrderBy     `json:"stddev"`
	StddevPop  *SimCardFlowStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *SimCardFlowStddevSampOrderBy `json:"stddev_samp"`
	Sum        *SimCardFlowSumOrderBy        `json:"sum"`
	VarPop     *SimCardFlowVarPopOrderBy     `json:"var_pop"`
	VarSamp    *SimCardFlowVarSampOrderBy    `json:"var_samp"`
	Variance   *SimCardFlowVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "sim_card_flow"
type SimCardFlowArrRelInsertInput struct {
	Data       []*SimCardFlowInsertInput `json:"data"`
	OnConflict *SimCardFlowOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type SimCardFlowAvgFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by avg() on columns of table "sim_card_flow"
type SimCardFlowAvgOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// Boolean expression to filter rows from the table "sim_card_flow". All fields are combined with a logical 'AND'.
type SimCardFlowBoolExp struct {
	And            []*SimCardFlowBoolExp            `json:"_and"`
	Not            *SimCardFlowBoolExp              `json:"_not"`
	Or             []*SimCardFlowBoolExp            `json:"_or"`
	CardAvgFlow    *model1.NumericComparisonExp     `json:"card_avg_flow"`
	CardNoRemark   *model1.StringComparisonExp      `json:"card_no_remark"`
	CreateAt       *model1.TimestamptzComparisonExp `json:"create_at"`
	CreateBy       *model1.StringComparisonExp      `json:"create_by"`
	DeleteAt       *model1.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy       *model1.StringComparisonExp      `json:"delete_by"`
	EnterpriseID   *model1.StringComparisonExp      `json:"enterprise_id"`
	Iccid          *model1.StringComparisonExp      `json:"iccid"`
	ID             *model1.BigintComparisonExp      `json:"id"`
	IotCardNo      *model1.StringComparisonExp      `json:"iot_card_no"`
	IsDelete       *model1.BooleanComparisonExp     `json:"is_delete"`
	IsSharePool    *model1.BooleanComparisonExp     `json:"is_share_pool"`
	PoolAvgFlow    *model1.NumericComparisonExp     `json:"pool_avg_flow"`
	SimCardFlowID  *model1.StringComparisonExp      `json:"sim_card_flow_id"`
	SuitFlow       *model1.NumericComparisonExp     `json:"suit_flow"`
	SuitLeftFlow   *model1.NumericComparisonExp     `json:"suit_left_flow"`
	SuitOverFlow   *model1.NumericComparisonExp     `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.IntComparisonExp         `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.IntComparisonExp         `json:"suit_sms_num"`
	SuitSmsOverNum *model1.IntComparisonExp         `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.IntComparisonExp         `json:"suit_use_sms_num"`
	UpdateAt       *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy       *model1.StringComparisonExp      `json:"update_by"`
	UseFlow        *model1.NumericComparisonExp     `json:"use_flow"`
}

// input type for incrementing integer column in table "sim_card_flow"
type SimCardFlowIncInput struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *int64   `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// input type for inserting data into table "sim_card_flow"
type SimCardFlowInsertInput struct {
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	CardNoRemark   *string    `json:"card_no_remark"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	Iccid          *string    `json:"iccid"`
	ID             *int64     `json:"id"`
	IotCardNo      *string    `json:"iot_card_no"`
	IsDelete       *bool      `json:"is_delete"`
	IsSharePool    *bool      `json:"is_share_pool"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	UseFlow        *float64   `json:"use_flow"`
}

// aggregate max on columns
type SimCardFlowMaxFields struct {
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	CardNoRemark   *string    `json:"card_no_remark"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	Iccid          *string    `json:"iccid"`
	ID             *int64     `json:"id"`
	IotCardNo      *string    `json:"iot_card_no"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	UseFlow        *float64   `json:"use_flow"`
}

// order by max() on columns of table "sim_card_flow"
type SimCardFlowMaxOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	CardNoRemark   *model1.OrderBy `json:"card_no_remark"`
	CreateAt       *model1.OrderBy `json:"create_at"`
	CreateBy       *model1.OrderBy `json:"create_by"`
	DeleteAt       *model1.OrderBy `json:"delete_at"`
	DeleteBy       *model1.OrderBy `json:"delete_by"`
	EnterpriseID   *model1.OrderBy `json:"enterprise_id"`
	Iccid          *model1.OrderBy `json:"iccid"`
	ID             *model1.OrderBy `json:"id"`
	IotCardNo      *model1.OrderBy `json:"iot_card_no"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SimCardFlowID  *model1.OrderBy `json:"sim_card_flow_id"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UpdateAt       *model1.OrderBy `json:"update_at"`
	UpdateBy       *model1.OrderBy `json:"update_by"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate min on columns
type SimCardFlowMinFields struct {
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	CardNoRemark   *string    `json:"card_no_remark"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	Iccid          *string    `json:"iccid"`
	ID             *int64     `json:"id"`
	IotCardNo      *string    `json:"iot_card_no"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	UseFlow        *float64   `json:"use_flow"`
}

// order by min() on columns of table "sim_card_flow"
type SimCardFlowMinOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	CardNoRemark   *model1.OrderBy `json:"card_no_remark"`
	CreateAt       *model1.OrderBy `json:"create_at"`
	CreateBy       *model1.OrderBy `json:"create_by"`
	DeleteAt       *model1.OrderBy `json:"delete_at"`
	DeleteBy       *model1.OrderBy `json:"delete_by"`
	EnterpriseID   *model1.OrderBy `json:"enterprise_id"`
	Iccid          *model1.OrderBy `json:"iccid"`
	ID             *model1.OrderBy `json:"id"`
	IotCardNo      *model1.OrderBy `json:"iot_card_no"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SimCardFlowID  *model1.OrderBy `json:"sim_card_flow_id"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UpdateAt       *model1.OrderBy `json:"update_at"`
	UpdateBy       *model1.OrderBy `json:"update_by"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// response of any mutation on the table "sim_card_flow"
type SimCardFlowMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.SimCardFlow `json:"returning"`
}

// input type for inserting object relation for remote table "sim_card_flow"
type SimCardFlowObjRelInsertInput struct {
	Data       *SimCardFlowInsertInput `json:"data"`
	OnConflict *SimCardFlowOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "sim_card_flow"
type SimCardFlowOnConflict struct {
	Constraint    SimCardFlowConstraint     `json:"constraint"`
	UpdateColumns []SimCardFlowUpdateColumn `json:"update_columns"`
	Where         *SimCardFlowBoolExp       `json:"where"`
}

// ordering options when selecting data from "sim_card_flow"
type SimCardFlowOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	CardNoRemark   *model1.OrderBy `json:"card_no_remark"`
	CreateAt       *model1.OrderBy `json:"create_at"`
	CreateBy       *model1.OrderBy `json:"create_by"`
	DeleteAt       *model1.OrderBy `json:"delete_at"`
	DeleteBy       *model1.OrderBy `json:"delete_by"`
	EnterpriseID   *model1.OrderBy `json:"enterprise_id"`
	Iccid          *model1.OrderBy `json:"iccid"`
	ID             *model1.OrderBy `json:"id"`
	IotCardNo      *model1.OrderBy `json:"iot_card_no"`
	IsDelete       *model1.OrderBy `json:"is_delete"`
	IsSharePool    *model1.OrderBy `json:"is_share_pool"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SimCardFlowID  *model1.OrderBy `json:"sim_card_flow_id"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UpdateAt       *model1.OrderBy `json:"update_at"`
	UpdateBy       *model1.OrderBy `json:"update_by"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// primary key columns input for table: "sim_card_flow"
type SimCardFlowPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "sim_card_flow"
type SimCardFlowSetInput struct {
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	CardNoRemark   *string    `json:"card_no_remark"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	EnterpriseID   *string    `json:"enterprise_id"`
	Iccid          *string    `json:"iccid"`
	ID             *int64     `json:"id"`
	IotCardNo      *string    `json:"iot_card_no"`
	IsDelete       *bool      `json:"is_delete"`
	IsSharePool    *bool      `json:"is_share_pool"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	UseFlow        *float64   `json:"use_flow"`
}

// aggregate stddev on columns
type SimCardFlowStddevFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by stddev() on columns of table "sim_card_flow"
type SimCardFlowStddevOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate stddev_pop on columns
type SimCardFlowStddevPopFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by stddev_pop() on columns of table "sim_card_flow"
type SimCardFlowStddevPopOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate stddev_samp on columns
type SimCardFlowStddevSampFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by stddev_samp() on columns of table "sim_card_flow"
type SimCardFlowStddevSampOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate sum on columns
type SimCardFlowSumFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *int64   `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by sum() on columns of table "sim_card_flow"
type SimCardFlowSumOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate var_pop on columns
type SimCardFlowVarPopFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by var_pop() on columns of table "sim_card_flow"
type SimCardFlowVarPopOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate var_samp on columns
type SimCardFlowVarSampFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by var_samp() on columns of table "sim_card_flow"
type SimCardFlowVarSampOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// aggregate variance on columns
type SimCardFlowVarianceFields struct {
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	ID             *float64 `json:"id"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitSmsLeftNum *float64 `json:"suit_sms_left_num"`
	SuitSmsNum     *float64 `json:"suit_sms_num"`
	SuitSmsOverNum *float64 `json:"suit_sms_over_num"`
	SuitUseSmsNum  *float64 `json:"suit_use_sms_num"`
	UseFlow        *float64 `json:"use_flow"`
}

// order by variance() on columns of table "sim_card_flow"
type SimCardFlowVarianceOrderBy struct {
	CardAvgFlow    *model1.OrderBy `json:"card_avg_flow"`
	ID             *model1.OrderBy `json:"id"`
	PoolAvgFlow    *model1.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model1.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model1.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model1.OrderBy `json:"suit_over_flow"`
	SuitSmsLeftNum *model1.OrderBy `json:"suit_sms_left_num"`
	SuitSmsNum     *model1.OrderBy `json:"suit_sms_num"`
	SuitSmsOverNum *model1.OrderBy `json:"suit_sms_over_num"`
	SuitUseSmsNum  *model1.OrderBy `json:"suit_use_sms_num"`
	UseFlow        *model1.OrderBy `json:"use_flow"`
}

// subscription root
type SubscriptionRoot struct {
	// fetch data from the table: "sim_card_flow"
	SimCardFlow []*model.SimCardFlow `json:"sim_card_flow"`
	// fetch aggregated fields from the table: "sim_card_flow"
	SimCardFlowAggregate *SimCardFlowAggregate `json:"sim_card_flow_aggregate"`
	// fetch data from the table: "sim_card_flow" using primary key columns
	SimCardFlowByPk *model.SimCardFlow `json:"sim_card_flow_by_pk"`
}

// unique or primary key constraints on table "sim_card_flow"
type SimCardFlowConstraint string

const (
	// unique or primary key constraint
	SimCardFlowConstraintSimCardFlowPkey SimCardFlowConstraint = "sim_card_flow_pkey"
)

var AllSimCardFlowConstraint = []SimCardFlowConstraint{
	SimCardFlowConstraintSimCardFlowPkey,
}

func (e SimCardFlowConstraint) IsValid() bool {
	switch e {
	case SimCardFlowConstraintSimCardFlowPkey:
		return true
	}
	return false
}

func (e SimCardFlowConstraint) String() string {
	return string(e)
}

func (e *SimCardFlowConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardFlowConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid sim_card_flow_constraint", str)
	}
	return nil
}

func (e SimCardFlowConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "sim_card_flow"
type SimCardFlowSelectColumn string

const (
	// column name
	SimCardFlowSelectColumnCardAvgFlow SimCardFlowSelectColumn = "card_avg_flow"
	// column name
	SimCardFlowSelectColumnCardNoRemark SimCardFlowSelectColumn = "card_no_remark"
	// column name
	SimCardFlowSelectColumnCreateAt SimCardFlowSelectColumn = "create_at"
	// column name
	SimCardFlowSelectColumnCreateBy SimCardFlowSelectColumn = "create_by"
	// column name
	SimCardFlowSelectColumnDeleteAt SimCardFlowSelectColumn = "delete_at"
	// column name
	SimCardFlowSelectColumnDeleteBy SimCardFlowSelectColumn = "delete_by"
	// column name
	SimCardFlowSelectColumnEnterpriseID SimCardFlowSelectColumn = "enterprise_id"
	// column name
	SimCardFlowSelectColumnIccid SimCardFlowSelectColumn = "iccid"
	// column name
	SimCardFlowSelectColumnID SimCardFlowSelectColumn = "id"
	// column name
	SimCardFlowSelectColumnIotCardNo SimCardFlowSelectColumn = "iot_card_no"
	// column name
	SimCardFlowSelectColumnIsDelete SimCardFlowSelectColumn = "is_delete"
	// column name
	SimCardFlowSelectColumnIsSharePool SimCardFlowSelectColumn = "is_share_pool"
	// column name
	SimCardFlowSelectColumnPoolAvgFlow SimCardFlowSelectColumn = "pool_avg_flow"
	// column name
	SimCardFlowSelectColumnSimCardFlowID SimCardFlowSelectColumn = "sim_card_flow_id"
	// column name
	SimCardFlowSelectColumnSuitFlow SimCardFlowSelectColumn = "suit_flow"
	// column name
	SimCardFlowSelectColumnSuitLeftFlow SimCardFlowSelectColumn = "suit_left_flow"
	// column name
	SimCardFlowSelectColumnSuitOverFlow SimCardFlowSelectColumn = "suit_over_flow"
	// column name
	SimCardFlowSelectColumnSuitSmsLeftNum SimCardFlowSelectColumn = "suit_sms_left_num"
	// column name
	SimCardFlowSelectColumnSuitSmsNum SimCardFlowSelectColumn = "suit_sms_num"
	// column name
	SimCardFlowSelectColumnSuitSmsOverNum SimCardFlowSelectColumn = "suit_sms_over_num"
	// column name
	SimCardFlowSelectColumnSuitUseSmsNum SimCardFlowSelectColumn = "suit_use_sms_num"
	// column name
	SimCardFlowSelectColumnUpdateAt SimCardFlowSelectColumn = "update_at"
	// column name
	SimCardFlowSelectColumnUpdateBy SimCardFlowSelectColumn = "update_by"
	// column name
	SimCardFlowSelectColumnUseFlow SimCardFlowSelectColumn = "use_flow"
)

var AllSimCardFlowSelectColumn = []SimCardFlowSelectColumn{
	SimCardFlowSelectColumnCardAvgFlow,
	SimCardFlowSelectColumnCardNoRemark,
	SimCardFlowSelectColumnCreateAt,
	SimCardFlowSelectColumnCreateBy,
	SimCardFlowSelectColumnDeleteAt,
	SimCardFlowSelectColumnDeleteBy,
	SimCardFlowSelectColumnEnterpriseID,
	SimCardFlowSelectColumnIccid,
	SimCardFlowSelectColumnID,
	SimCardFlowSelectColumnIotCardNo,
	SimCardFlowSelectColumnIsDelete,
	SimCardFlowSelectColumnIsSharePool,
	SimCardFlowSelectColumnPoolAvgFlow,
	SimCardFlowSelectColumnSimCardFlowID,
	SimCardFlowSelectColumnSuitFlow,
	SimCardFlowSelectColumnSuitLeftFlow,
	SimCardFlowSelectColumnSuitOverFlow,
	SimCardFlowSelectColumnSuitSmsLeftNum,
	SimCardFlowSelectColumnSuitSmsNum,
	SimCardFlowSelectColumnSuitSmsOverNum,
	SimCardFlowSelectColumnSuitUseSmsNum,
	SimCardFlowSelectColumnUpdateAt,
	SimCardFlowSelectColumnUpdateBy,
	SimCardFlowSelectColumnUseFlow,
}

func (e SimCardFlowSelectColumn) IsValid() bool {
	switch e {
	case SimCardFlowSelectColumnCardAvgFlow, SimCardFlowSelectColumnCardNoRemark, SimCardFlowSelectColumnCreateAt, SimCardFlowSelectColumnCreateBy, SimCardFlowSelectColumnDeleteAt, SimCardFlowSelectColumnDeleteBy, SimCardFlowSelectColumnEnterpriseID, SimCardFlowSelectColumnIccid, SimCardFlowSelectColumnID, SimCardFlowSelectColumnIotCardNo, SimCardFlowSelectColumnIsDelete, SimCardFlowSelectColumnIsSharePool, SimCardFlowSelectColumnPoolAvgFlow, SimCardFlowSelectColumnSimCardFlowID, SimCardFlowSelectColumnSuitFlow, SimCardFlowSelectColumnSuitLeftFlow, SimCardFlowSelectColumnSuitOverFlow, SimCardFlowSelectColumnSuitSmsLeftNum, SimCardFlowSelectColumnSuitSmsNum, SimCardFlowSelectColumnSuitSmsOverNum, SimCardFlowSelectColumnSuitUseSmsNum, SimCardFlowSelectColumnUpdateAt, SimCardFlowSelectColumnUpdateBy, SimCardFlowSelectColumnUseFlow:
		return true
	}
	return false
}

func (e SimCardFlowSelectColumn) String() string {
	return string(e)
}

func (e *SimCardFlowSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardFlowSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid sim_card_flow_select_column", str)
	}
	return nil
}

func (e SimCardFlowSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "sim_card_flow"
type SimCardFlowUpdateColumn string

const (
	// column name
	SimCardFlowUpdateColumnCardAvgFlow SimCardFlowUpdateColumn = "card_avg_flow"
	// column name
	SimCardFlowUpdateColumnCardNoRemark SimCardFlowUpdateColumn = "card_no_remark"
	// column name
	SimCardFlowUpdateColumnCreateAt SimCardFlowUpdateColumn = "create_at"
	// column name
	SimCardFlowUpdateColumnCreateBy SimCardFlowUpdateColumn = "create_by"
	// column name
	SimCardFlowUpdateColumnDeleteAt SimCardFlowUpdateColumn = "delete_at"
	// column name
	SimCardFlowUpdateColumnDeleteBy SimCardFlowUpdateColumn = "delete_by"
	// column name
	SimCardFlowUpdateColumnEnterpriseID SimCardFlowUpdateColumn = "enterprise_id"
	// column name
	SimCardFlowUpdateColumnIccid SimCardFlowUpdateColumn = "iccid"
	// column name
	SimCardFlowUpdateColumnID SimCardFlowUpdateColumn = "id"
	// column name
	SimCardFlowUpdateColumnIotCardNo SimCardFlowUpdateColumn = "iot_card_no"
	// column name
	SimCardFlowUpdateColumnIsDelete SimCardFlowUpdateColumn = "is_delete"
	// column name
	SimCardFlowUpdateColumnIsSharePool SimCardFlowUpdateColumn = "is_share_pool"
	// column name
	SimCardFlowUpdateColumnPoolAvgFlow SimCardFlowUpdateColumn = "pool_avg_flow"
	// column name
	SimCardFlowUpdateColumnSimCardFlowID SimCardFlowUpdateColumn = "sim_card_flow_id"
	// column name
	SimCardFlowUpdateColumnSuitFlow SimCardFlowUpdateColumn = "suit_flow"
	// column name
	SimCardFlowUpdateColumnSuitLeftFlow SimCardFlowUpdateColumn = "suit_left_flow"
	// column name
	SimCardFlowUpdateColumnSuitOverFlow SimCardFlowUpdateColumn = "suit_over_flow"
	// column name
	SimCardFlowUpdateColumnSuitSmsLeftNum SimCardFlowUpdateColumn = "suit_sms_left_num"
	// column name
	SimCardFlowUpdateColumnSuitSmsNum SimCardFlowUpdateColumn = "suit_sms_num"
	// column name
	SimCardFlowUpdateColumnSuitSmsOverNum SimCardFlowUpdateColumn = "suit_sms_over_num"
	// column name
	SimCardFlowUpdateColumnSuitUseSmsNum SimCardFlowUpdateColumn = "suit_use_sms_num"
	// column name
	SimCardFlowUpdateColumnUpdateAt SimCardFlowUpdateColumn = "update_at"
	// column name
	SimCardFlowUpdateColumnUpdateBy SimCardFlowUpdateColumn = "update_by"
	// column name
	SimCardFlowUpdateColumnUseFlow SimCardFlowUpdateColumn = "use_flow"
)

var AllSimCardFlowUpdateColumn = []SimCardFlowUpdateColumn{
	SimCardFlowUpdateColumnCardAvgFlow,
	SimCardFlowUpdateColumnCardNoRemark,
	SimCardFlowUpdateColumnCreateAt,
	SimCardFlowUpdateColumnCreateBy,
	SimCardFlowUpdateColumnDeleteAt,
	SimCardFlowUpdateColumnDeleteBy,
	SimCardFlowUpdateColumnEnterpriseID,
	SimCardFlowUpdateColumnIccid,
	SimCardFlowUpdateColumnID,
	SimCardFlowUpdateColumnIotCardNo,
	SimCardFlowUpdateColumnIsDelete,
	SimCardFlowUpdateColumnIsSharePool,
	SimCardFlowUpdateColumnPoolAvgFlow,
	SimCardFlowUpdateColumnSimCardFlowID,
	SimCardFlowUpdateColumnSuitFlow,
	SimCardFlowUpdateColumnSuitLeftFlow,
	SimCardFlowUpdateColumnSuitOverFlow,
	SimCardFlowUpdateColumnSuitSmsLeftNum,
	SimCardFlowUpdateColumnSuitSmsNum,
	SimCardFlowUpdateColumnSuitSmsOverNum,
	SimCardFlowUpdateColumnSuitUseSmsNum,
	SimCardFlowUpdateColumnUpdateAt,
	SimCardFlowUpdateColumnUpdateBy,
	SimCardFlowUpdateColumnUseFlow,
}

func (e SimCardFlowUpdateColumn) IsValid() bool {
	switch e {
	case SimCardFlowUpdateColumnCardAvgFlow, SimCardFlowUpdateColumnCardNoRemark, SimCardFlowUpdateColumnCreateAt, SimCardFlowUpdateColumnCreateBy, SimCardFlowUpdateColumnDeleteAt, SimCardFlowUpdateColumnDeleteBy, SimCardFlowUpdateColumnEnterpriseID, SimCardFlowUpdateColumnIccid, SimCardFlowUpdateColumnID, SimCardFlowUpdateColumnIotCardNo, SimCardFlowUpdateColumnIsDelete, SimCardFlowUpdateColumnIsSharePool, SimCardFlowUpdateColumnPoolAvgFlow, SimCardFlowUpdateColumnSimCardFlowID, SimCardFlowUpdateColumnSuitFlow, SimCardFlowUpdateColumnSuitLeftFlow, SimCardFlowUpdateColumnSuitOverFlow, SimCardFlowUpdateColumnSuitSmsLeftNum, SimCardFlowUpdateColumnSuitSmsNum, SimCardFlowUpdateColumnSuitSmsOverNum, SimCardFlowUpdateColumnSuitUseSmsNum, SimCardFlowUpdateColumnUpdateAt, SimCardFlowUpdateColumnUpdateBy, SimCardFlowUpdateColumnUseFlow:
		return true
	}
	return false
}

func (e SimCardFlowUpdateColumn) String() string {
	return string(e)
}

func (e *SimCardFlowUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardFlowUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid sim_card_flow_update_column", str)
	}
	return nil
}

func (e SimCardFlowUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
