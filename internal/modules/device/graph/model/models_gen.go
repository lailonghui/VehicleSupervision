// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/device/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "fingerprint"
type FingerprintAggregate struct {
	Aggregate *FingerprintAggregateFields `json:"aggregate"`
}

// aggregate fields of "fingerprint"
type FingerprintAggregateFields struct {
	Avg        *FingerprintAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *FingerprintMaxFields        `json:"max"`
	Min        *FingerprintMinFields        `json:"min"`
	Stddev     *FingerprintStddevFields     `json:"stddev"`
	StddevPop  *FingerprintStddevPopFields  `json:"stddev_pop"`
	StddevSamp *FingerprintStddevSampFields `json:"stddev_samp"`
	Sum        *FingerprintSumFields        `json:"sum"`
	VarPop     *FingerprintVarPopFields     `json:"var_pop"`
	VarSamp    *FingerprintVarSampFields    `json:"var_samp"`
	Variance   *FingerprintVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "fingerprint"
type FingerprintAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'fingerprint'.
type FingerprintBoolExp struct {
	And      []*FingerprintBoolExp      `json:"_and"`
	Not      *FingerprintBoolExp        `json:"_not"`
	Or       []*FingerprintBoolExp      `json:"_or"`
	ID       *model.BigintComparisonExp `json:"id"`
	FingerID *model.StringComparisonExp `json:"finger_id"`
	Content  *model.StringComparisonExp `json:"content"`
}

// aggregated selection of "fingerprint_driver"
type FingerprintDriverAggregate struct {
	Aggregate *FingerprintDriverAggregateFields `json:"aggregate"`
}

// aggregate fields of "fingerprint_driver"
type FingerprintDriverAggregateFields struct {
	Avg        *FingerprintDriverAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *FingerprintDriverMaxFields        `json:"max"`
	Min        *FingerprintDriverMinFields        `json:"min"`
	Stddev     *FingerprintDriverStddevFields     `json:"stddev"`
	StddevPop  *FingerprintDriverStddevPopFields  `json:"stddev_pop"`
	StddevSamp *FingerprintDriverStddevSampFields `json:"stddev_samp"`
	Sum        *FingerprintDriverSumFields        `json:"sum"`
	VarPop     *FingerprintDriverVarPopFields     `json:"var_pop"`
	VarSamp    *FingerprintDriverVarSampFields    `json:"var_samp"`
	Variance   *FingerprintDriverVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "fingerprint_driver"
type FingerprintDriverAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'fingerprint_driver'.
type FingerprintDriverBoolExp struct {
	And                 []*FingerprintDriverBoolExp     `json:"_and"`
	Not                 *FingerprintDriverBoolExp       `json:"_not"`
	Or                  []*FingerprintDriverBoolExp     `json:"_or"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	FingerprintDriverID *model.StringComparisonExp      `json:"fingerprint_driver_id"`
	DriverID            *model.StringComparisonExp      `json:"driver_id"`
	FingerName          *model.StringComparisonExp      `json:"finger_name"`
	FingerID            *model.StringComparisonExp      `json:"finger_id"`
	PicURL              *model.StringComparisonExp      `json:"pic_url"`
	CreateAt            *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy            *model.StringComparisonExp      `json:"create_by"`
	UpdateAt            *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy            *model.StringComparisonExp      `json:"update_by"`
	DeleteAt            *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy            *model.StringComparisonExp      `json:"delete_by"`
	IsDelete            *model.BooleanComparisonExp     `json:"is_delete"`
	Remark              *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "fingerprint_driver"
type FingerprintDriverIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "fingerprint_driver"
type FingerprintDriverInsertInput struct {
	FingerprintDriverID string     `json:"fingerprint_driver_id"`
	DriverID            string     `json:"driver_id"`
	FingerName          *string    `json:"finger_name"`
	FingerID            *string    `json:"finger_id"`
	PicURL              *string    `json:"pic_url"`
	CreateAt            time.Time  `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            bool       `json:"is_delete"`
	Remark              *string    `json:"remark"`
}

// aggregate max on columns of table "fingerprint_driver"
type FingerprintDriverMaxFields struct {
	ID                  *int64     `json:"id"`
	FingerprintDriverID *string    `json:"fingerprint_driver_id"`
	DriverID            *string    `json:"driver_id"`
	FingerName          *string    `json:"finger_name"`
	FingerID            *string    `json:"finger_id"`
	PicURL              *string    `json:"pic_url"`
	CreateAt            *time.Time `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            *bool      `json:"is_delete"`
	Remark              *string    `json:"remark"`
}

// aggregate min on columns of table "fingerprint_driver"
type FingerprintDriverMinFields struct {
	ID                  *int64     `json:"id"`
	FingerprintDriverID *string    `json:"fingerprint_driver_id"`
	DriverID            *string    `json:"driver_id"`
	FingerName          *string    `json:"finger_name"`
	FingerID            *string    `json:"finger_id"`
	PicURL              *string    `json:"pic_url"`
	CreateAt            *time.Time `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            *bool      `json:"is_delete"`
	Remark              *string    `json:"remark"`
}

// response of any mutation on the table "fingerprint_driver"
type FingerprintDriverMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.FingerprintDriver `json:"returning"`
}

// ordering options when selecting data from "fingerprint_driver"
type FingerprintDriverOrderBy struct {
	ID                  *model.OrderBy `json:"id"`
	FingerprintDriverID *model.OrderBy `json:"fingerprint_driver_id"`
	DriverID            *model.OrderBy `json:"driver_id"`
	FingerName          *model.OrderBy `json:"finger_name"`
	FingerID            *model.OrderBy `json:"finger_id"`
	PicURL              *model.OrderBy `json:"pic_url"`
	CreateAt            *model.OrderBy `json:"create_at"`
	CreateBy            *model.OrderBy `json:"create_by"`
	UpdateAt            *model.OrderBy `json:"update_at"`
	UpdateBy            *model.OrderBy `json:"update_by"`
	DeleteAt            *model.OrderBy `json:"delete_at"`
	DeleteBy            *model.OrderBy `json:"delete_by"`
	IsDelete            *model.OrderBy `json:"is_delete"`
	Remark              *model.OrderBy `json:"remark"`
}

// input type for updating data in table "fingerprint_driver"
type FingerprintDriverSetInput struct {
	ID                  *int64     `json:"id"`
	FingerprintDriverID *string    `json:"fingerprint_driver_id"`
	DriverID            *string    `json:"driver_id"`
	FingerName          *string    `json:"finger_name"`
	FingerID            *string    `json:"finger_id"`
	PicURL              *string    `json:"pic_url"`
	CreateAt            *time.Time `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            *bool      `json:"is_delete"`
	Remark              *string    `json:"remark"`
}

// aggregate stddev on columns of table "fingerprint_driver"
type FingerprintDriverStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "fingerprint_driver"
type FingerprintDriverStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "fingerprint_driver"
type FingerprintDriverStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "fingerprint_driver"
type FingerprintDriverSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "fingerprint_driver"
type FingerprintDriverVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "fingerprint_driver"
type FingerprintDriverVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "fingerprint_driver"
type FingerprintDriverVarianceFields struct {
	ID *int64 `json:"id"`
}

// input type for incrementing integer column in table "fingerprint"
type FingerprintIncInput struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "fingerprint_information"
type FingerprintInformationAggregate struct {
	Aggregate *FingerprintInformationAggregateFields `json:"aggregate"`
}

// aggregate fields of "fingerprint_information"
type FingerprintInformationAggregateFields struct {
	Avg        *FingerprintInformationAvgFields        `json:"avg"`
	Count      *int                                    `json:"count"`
	Max        *FingerprintInformationMaxFields        `json:"max"`
	Min        *FingerprintInformationMinFields        `json:"min"`
	Stddev     *FingerprintInformationStddevFields     `json:"stddev"`
	StddevPop  *FingerprintInformationStddevPopFields  `json:"stddev_pop"`
	StddevSamp *FingerprintInformationStddevSampFields `json:"stddev_samp"`
	Sum        *FingerprintInformationSumFields        `json:"sum"`
	VarPop     *FingerprintInformationVarPopFields     `json:"var_pop"`
	VarSamp    *FingerprintInformationVarSampFields    `json:"var_samp"`
	Variance   *FingerprintInformationVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "fingerprint_information"
type FingerprintInformationAvgFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'fingerprint_information'.
type FingerprintInformationBoolExp struct {
	And                      []*FingerprintInformationBoolExp `json:"_and"`
	Not                      *FingerprintInformationBoolExp   `json:"_not"`
	Or                       []*FingerprintInformationBoolExp `json:"_or"`
	ID                       *model.BigintComparisonExp       `json:"id"`
	FingerprintInformationID *model.StringComparisonExp       `json:"fingerprint_information_id"`
	UserID                   *model.StringComparisonExp       `json:"user_id"`
	VehicleID                *model.StringComparisonExp       `json:"vehicle_id"`
	SimID                    *model.StringComparisonExp       `json:"sim_id"`
	MessageID                *model.StringComparisonExp       `json:"message_id"`
	OperationType            *model.IntComparisonExp          `json:"operation_type"`
	Content                  *model.StringComparisonExp       `json:"content"`
	IsSuccess                *model.BooleanComparisonExp      `json:"is_success"`
	OperationTime            *model.TimestamptzComparisonExp  `json:"operation_time"`
	UploadTime               *model.TimestamptzComparisonExp  `json:"upload_time"`
	SaveID                   *model.StringComparisonExp       `json:"save_id"`
	DriverID                 *model.StringComparisonExp       `json:"driver_id"`
	DriverName               *model.StringComparisonExp       `json:"driver_name"`
	FingerID                 *model.StringComparisonExp       `json:"finger_id"`
	TerminalID               *model.StringComparisonExp       `json:"terminal_id"`
}

// input type for incrementing integer column in table "fingerprint_information"
type FingerprintInformationIncInput struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// input type for inserting data into table "fingerprint_information"
type FingerprintInformationInsertInput struct {
	FingerprintInformationID string     `json:"fingerprint_information_id"`
	UserID                   *string    `json:"user_id"`
	VehicleID                *string    `json:"vehicle_id"`
	SimID                    *string    `json:"sim_id"`
	MessageID                *string    `json:"message_id"`
	OperationType            *int       `json:"operation_type"`
	Content                  *string    `json:"content"`
	IsSuccess                *bool      `json:"is_success"`
	OperationTime            *time.Time `json:"operation_time"`
	UploadTime               *time.Time `json:"upload_time"`
	SaveID                   *string    `json:"save_id"`
	DriverID                 *string    `json:"driver_id"`
	DriverName               *string    `json:"driver_name"`
	FingerID                 *string    `json:"finger_id"`
	TerminalID               *string    `json:"terminal_id"`
}

// aggregate max on columns of table "fingerprint_information"
type FingerprintInformationMaxFields struct {
	ID                       *int64     `json:"id"`
	FingerprintInformationID *string    `json:"fingerprint_information_id"`
	UserID                   *string    `json:"user_id"`
	VehicleID                *string    `json:"vehicle_id"`
	SimID                    *string    `json:"sim_id"`
	MessageID                *string    `json:"message_id"`
	OperationType            *int       `json:"operation_type"`
	Content                  *string    `json:"content"`
	IsSuccess                *bool      `json:"is_success"`
	OperationTime            *time.Time `json:"operation_time"`
	UploadTime               *time.Time `json:"upload_time"`
	SaveID                   *string    `json:"save_id"`
	DriverID                 *string    `json:"driver_id"`
	DriverName               *string    `json:"driver_name"`
	FingerID                 *string    `json:"finger_id"`
	TerminalID               *string    `json:"terminal_id"`
}

// aggregate min on columns of table "fingerprint_information"
type FingerprintInformationMinFields struct {
	ID                       *int64     `json:"id"`
	FingerprintInformationID *string    `json:"fingerprint_information_id"`
	UserID                   *string    `json:"user_id"`
	VehicleID                *string    `json:"vehicle_id"`
	SimID                    *string    `json:"sim_id"`
	MessageID                *string    `json:"message_id"`
	OperationType            *int       `json:"operation_type"`
	Content                  *string    `json:"content"`
	IsSuccess                *bool      `json:"is_success"`
	OperationTime            *time.Time `json:"operation_time"`
	UploadTime               *time.Time `json:"upload_time"`
	SaveID                   *string    `json:"save_id"`
	DriverID                 *string    `json:"driver_id"`
	DriverName               *string    `json:"driver_name"`
	FingerID                 *string    `json:"finger_id"`
	TerminalID               *string    `json:"terminal_id"`
}

// response of any mutation on the table "fingerprint_information"
type FingerprintInformationMutationResponse struct {
	AffectedRows int                              `json:"affected_rows"`
	Returning    []*model1.FingerprintInformation `json:"returning"`
}

// ordering options when selecting data from "fingerprint_information"
type FingerprintInformationOrderBy struct {
	ID                       *model.OrderBy `json:"id"`
	FingerprintInformationID *model.OrderBy `json:"fingerprint_information_id"`
	UserID                   *model.OrderBy `json:"user_id"`
	VehicleID                *model.OrderBy `json:"vehicle_id"`
	SimID                    *model.OrderBy `json:"sim_id"`
	MessageID                *model.OrderBy `json:"message_id"`
	OperationType            *model.OrderBy `json:"operation_type"`
	Content                  *model.OrderBy `json:"content"`
	IsSuccess                *model.OrderBy `json:"is_success"`
	OperationTime            *model.OrderBy `json:"operation_time"`
	UploadTime               *model.OrderBy `json:"upload_time"`
	SaveID                   *model.OrderBy `json:"save_id"`
	DriverID                 *model.OrderBy `json:"driver_id"`
	DriverName               *model.OrderBy `json:"driver_name"`
	FingerID                 *model.OrderBy `json:"finger_id"`
	TerminalID               *model.OrderBy `json:"terminal_id"`
}

// input type for updating data in table "fingerprint_information"
type FingerprintInformationSetInput struct {
	ID                       *int64     `json:"id"`
	FingerprintInformationID *string    `json:"fingerprint_information_id"`
	UserID                   *string    `json:"user_id"`
	VehicleID                *string    `json:"vehicle_id"`
	SimID                    *string    `json:"sim_id"`
	MessageID                *string    `json:"message_id"`
	OperationType            *int       `json:"operation_type"`
	Content                  *string    `json:"content"`
	IsSuccess                *bool      `json:"is_success"`
	OperationTime            *time.Time `json:"operation_time"`
	UploadTime               *time.Time `json:"upload_time"`
	SaveID                   *string    `json:"save_id"`
	DriverID                 *string    `json:"driver_id"`
	DriverName               *string    `json:"driver_name"`
	FingerID                 *string    `json:"finger_id"`
	TerminalID               *string    `json:"terminal_id"`
}

// aggregate stddev on columns of table "fingerprint_information"
type FingerprintInformationStddevFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate stddev_pop on columns of table "fingerprint_information"
type FingerprintInformationStddevPopFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate stddev_samp on columns of table "fingerprint_information"
type FingerprintInformationStddevSampFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate sum on columns of table "fingerprint_information"
type FingerprintInformationSumFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate var_pop on columns of table "fingerprint_information"
type FingerprintInformationVarPopFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate var_samp on columns of table "fingerprint_information"
type FingerprintInformationVarSampFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// aggregate variance on columns of table "fingerprint_information"
type FingerprintInformationVarianceFields struct {
	ID            *int64 `json:"id"`
	OperationType *int   `json:"operation_type"`
}

// input type for inserting data into table "fingerprint"
type FingerprintInsertInput struct {
	FingerID string `json:"finger_id"`
	Content  string `json:"content"`
}

// aggregate max on columns of table "fingerprint"
type FingerprintMaxFields struct {
	ID       *int64  `json:"id"`
	FingerID *string `json:"finger_id"`
	Content  *string `json:"content"`
}

// aggregate min on columns of table "fingerprint"
type FingerprintMinFields struct {
	ID       *int64  `json:"id"`
	FingerID *string `json:"finger_id"`
	Content  *string `json:"content"`
}

// response of any mutation on the table "fingerprint"
type FingerprintMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*model1.Fingerprint `json:"returning"`
}

// ordering options when selecting data from "fingerprint"
type FingerprintOrderBy struct {
	ID       *model.OrderBy `json:"id"`
	FingerID *model.OrderBy `json:"finger_id"`
	Content  *model.OrderBy `json:"content"`
}

// input type for updating data in table "fingerprint"
type FingerprintSetInput struct {
	ID       *int64  `json:"id"`
	FingerID *string `json:"finger_id"`
	Content  *string `json:"content"`
}

// aggregate stddev on columns of table "fingerprint"
type FingerprintStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "fingerprint"
type FingerprintStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "fingerprint"
type FingerprintStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "fingerprint"
type FingerprintSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "fingerprint"
type FingerprintVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "fingerprint"
type FingerprintVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "fingerprint"
type FingerprintVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "sim_card"
type SimCardAggregate struct {
	Aggregate *SimCardAggregateFields `json:"aggregate"`
}

// aggregate fields of "sim_card"
type SimCardAggregateFields struct {
	Avg        *SimCardAvgFields        `json:"avg"`
	Count      *int                     `json:"count"`
	Max        *SimCardMaxFields        `json:"max"`
	Min        *SimCardMinFields        `json:"min"`
	Stddev     *SimCardStddevFields     `json:"stddev"`
	StddevPop  *SimCardStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SimCardStddevSampFields `json:"stddev_samp"`
	Sum        *SimCardSumFields        `json:"sum"`
	VarPop     *SimCardVarPopFields     `json:"var_pop"`
	VarSamp    *SimCardVarSampFields    `json:"var_samp"`
	Variance   *SimCardVarianceFields   `json:"variance"`
}

// aggregated selection of "sim_card_all"
type SimCardAllAggregate struct {
	Aggregate *SimCardAllAggregateFields `json:"aggregate"`
}

// aggregate fields of "sim_card_all"
type SimCardAllAggregateFields struct {
	Avg        *SimCardAllAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *SimCardAllMaxFields        `json:"max"`
	Min        *SimCardAllMinFields        `json:"min"`
	Stddev     *SimCardAllStddevFields     `json:"stddev"`
	StddevPop  *SimCardAllStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SimCardAllStddevSampFields `json:"stddev_samp"`
	Sum        *SimCardAllSumFields        `json:"sum"`
	VarPop     *SimCardAllVarPopFields     `json:"var_pop"`
	VarSamp    *SimCardAllVarSampFields    `json:"var_samp"`
	Variance   *SimCardAllVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "sim_card_all"
type SimCardAllAvgFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'sim_card_all'.
type SimCardAllBoolExp struct {
	And            []*SimCardAllBoolExp            `json:"_and"`
	Not            *SimCardAllBoolExp              `json:"_not"`
	Or             []*SimCardAllBoolExp            `json:"_or"`
	ID             *model.BigintComparisonExp      `json:"id"`
	SimcardAllID   *model.StringComparisonExp      `json:"simcard_all_id"`
	PlateNumber    *model.StringComparisonExp      `json:"plate_number"`
	PlateColor     *model.StringComparisonExp      `json:"plate_color"`
	DeptID         *model.StringComparisonExp      `json:"dept_id"`
	ProxyrgID      *model.StringComparisonExp      `json:"proxyrg_id"`
	EnterpriseID   *model.StringComparisonExp      `json:"enterprise_id"`
	SimNumber      *model.StringComparisonExp      `json:"sim_number"`
	ServiceEndTime *model.TimestamptzComparisonExp `json:"service_end_time"`
	TerminalID     *model.StringComparisonExp      `json:"terminal_id"`
	SystemName     *model.StringComparisonExp      `json:"system_name"`
	SimType        *model.IntComparisonExp         `json:"sim_type"`
	UserID         *model.StringComparisonExp      `json:"user_id"`
	MobileType     *model.IntComparisonExp         `json:"mobile_type"`
	UpdateCause    *model.StringComparisonExp      `json:"update_cause"`
	CreateAt       *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy       *model.StringComparisonExp      `json:"create_by"`
	UpdateAt       *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy       *model.StringComparisonExp      `json:"update_by"`
	DeleteAt       *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy       *model.StringComparisonExp      `json:"delete_by"`
	IsDelete       *model.BooleanComparisonExp     `json:"is_delete"`
	Remark         *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "sim_card_all"
type SimCardAllIncInput struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// input type for inserting data into table "sim_card_all"
type SimCardAllInsertInput struct {
	SimcardAllID   string     `json:"simcard_all_id"`
	PlateNumber    *string    `json:"plate_number"`
	PlateColor     *string    `json:"plate_color"`
	DeptID         *string    `json:"dept_id"`
	ProxyrgID      *string    `json:"proxyrg_id"`
	EnterpriseID   *string    `json:"enterprise_id"`
	SimNumber      *string    `json:"sim_number"`
	ServiceEndTime *time.Time `json:"service_end_time"`
	TerminalID     *string    `json:"terminal_id"`
	SystemName     *string    `json:"system_name"`
	SimType        *int       `json:"sim_type"`
	UserID         *string    `json:"user_id"`
	MobileType     *int       `json:"mobile_type"`
	UpdateCause    *string    `json:"update_cause"`
	CreateAt       time.Time  `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	IsDelete       bool       `json:"is_delete"`
	Remark         *string    `json:"remark"`
}

// aggregate max on columns of table "sim_card_all"
type SimCardAllMaxFields struct {
	ID             *int64     `json:"id"`
	SimcardAllID   *string    `json:"simcard_all_id"`
	PlateNumber    *string    `json:"plate_number"`
	PlateColor     *string    `json:"plate_color"`
	DeptID         *string    `json:"dept_id"`
	ProxyrgID      *string    `json:"proxyrg_id"`
	EnterpriseID   *string    `json:"enterprise_id"`
	SimNumber      *string    `json:"sim_number"`
	ServiceEndTime *time.Time `json:"service_end_time"`
	TerminalID     *string    `json:"terminal_id"`
	SystemName     *string    `json:"system_name"`
	SimType        *int       `json:"sim_type"`
	UserID         *string    `json:"user_id"`
	MobileType     *int       `json:"mobile_type"`
	UpdateCause    *string    `json:"update_cause"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	IsDelete       *bool      `json:"is_delete"`
	Remark         *string    `json:"remark"`
}

// aggregate min on columns of table "sim_card_all"
type SimCardAllMinFields struct {
	ID             *int64     `json:"id"`
	SimcardAllID   *string    `json:"simcard_all_id"`
	PlateNumber    *string    `json:"plate_number"`
	PlateColor     *string    `json:"plate_color"`
	DeptID         *string    `json:"dept_id"`
	ProxyrgID      *string    `json:"proxyrg_id"`
	EnterpriseID   *string    `json:"enterprise_id"`
	SimNumber      *string    `json:"sim_number"`
	ServiceEndTime *time.Time `json:"service_end_time"`
	TerminalID     *string    `json:"terminal_id"`
	SystemName     *string    `json:"system_name"`
	SimType        *int       `json:"sim_type"`
	UserID         *string    `json:"user_id"`
	MobileType     *int       `json:"mobile_type"`
	UpdateCause    *string    `json:"update_cause"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	IsDelete       *bool      `json:"is_delete"`
	Remark         *string    `json:"remark"`
}

// response of any mutation on the table "sim_card_all"
type SimCardAllMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*model1.SimCardAll `json:"returning"`
}

// ordering options when selecting data from "sim_card_all"
type SimCardAllOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	SimcardAllID   *model.OrderBy `json:"simcard_all_id"`
	PlateNumber    *model.OrderBy `json:"plate_number"`
	PlateColor     *model.OrderBy `json:"plate_color"`
	DeptID         *model.OrderBy `json:"dept_id"`
	ProxyrgID      *model.OrderBy `json:"proxyrg_id"`
	EnterpriseID   *model.OrderBy `json:"enterprise_id"`
	SimNumber      *model.OrderBy `json:"sim_number"`
	ServiceEndTime *model.OrderBy `json:"service_end_time"`
	TerminalID     *model.OrderBy `json:"terminal_id"`
	SystemName     *model.OrderBy `json:"system_name"`
	SimType        *model.OrderBy `json:"sim_type"`
	UserID         *model.OrderBy `json:"user_id"`
	MobileType     *model.OrderBy `json:"mobile_type"`
	UpdateCause    *model.OrderBy `json:"update_cause"`
	CreateAt       *model.OrderBy `json:"create_at"`
	CreateBy       *model.OrderBy `json:"create_by"`
	UpdateAt       *model.OrderBy `json:"update_at"`
	UpdateBy       *model.OrderBy `json:"update_by"`
	DeleteAt       *model.OrderBy `json:"delete_at"`
	DeleteBy       *model.OrderBy `json:"delete_by"`
	IsDelete       *model.OrderBy `json:"is_delete"`
	Remark         *model.OrderBy `json:"remark"`
}

// input type for updating data in table "sim_card_all"
type SimCardAllSetInput struct {
	ID             *int64     `json:"id"`
	SimcardAllID   *string    `json:"simcard_all_id"`
	PlateNumber    *string    `json:"plate_number"`
	PlateColor     *string    `json:"plate_color"`
	DeptID         *string    `json:"dept_id"`
	ProxyrgID      *string    `json:"proxyrg_id"`
	EnterpriseID   *string    `json:"enterprise_id"`
	SimNumber      *string    `json:"sim_number"`
	ServiceEndTime *time.Time `json:"service_end_time"`
	TerminalID     *string    `json:"terminal_id"`
	SystemName     *string    `json:"system_name"`
	SimType        *int       `json:"sim_type"`
	UserID         *string    `json:"user_id"`
	MobileType     *int       `json:"mobile_type"`
	UpdateCause    *string    `json:"update_cause"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
	IsDelete       *bool      `json:"is_delete"`
	Remark         *string    `json:"remark"`
}

// aggregate stddev on columns of table "sim_card_all"
type SimCardAllStddevFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate stddev_pop on columns of table "sim_card_all"
type SimCardAllStddevPopFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate stddev_samp on columns of table "sim_card_all"
type SimCardAllStddevSampFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate sum on columns of table "sim_card_all"
type SimCardAllSumFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate var_pop on columns of table "sim_card_all"
type SimCardAllVarPopFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate var_samp on columns of table "sim_card_all"
type SimCardAllVarSampFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate variance on columns of table "sim_card_all"
type SimCardAllVarianceFields struct {
	ID         *int64 `json:"id"`
	SimType    *int   `json:"sim_type"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate avg on columns of table "sim_card"
type SimCardAvgFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'sim_card'.
type SimCardBoolExp struct {
	And         []*SimCardBoolExp               `json:"_and"`
	Not         *SimCardBoolExp                 `json:"_not"`
	Or          []*SimCardBoolExp               `json:"_or"`
	ID          *model.BigintComparisonExp      `json:"id"`
	SimCardID   *model.StringComparisonExp      `json:"sim_card_id"`
	DeptID      *model.StringComparisonExp      `json:"dept_id"`
	TerminalID  *model.StringComparisonExp      `json:"terminal_id"`
	ProxyrgID   *model.StringComparisonExp      `json:"proxyrg_id"`
	OperatorsID *model.StringComparisonExp      `json:"operators_id"`
	SimNumber   *model.StringComparisonExp      `json:"sim_number"`
	MobileType  *model.IntComparisonExp         `json:"mobile_type"`
	Remark      *model.StringComparisonExp      `json:"remark"`
	CreateAt    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy    *model.StringComparisonExp      `json:"create_by"`
	UpdateAt    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy    *model.StringComparisonExp      `json:"update_by"`
	DeleteAt    *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy    *model.StringComparisonExp      `json:"delete_by"`
	IsDelete    *model.BooleanComparisonExp     `json:"is_delete"`
	Source      *model.IntComparisonExp         `json:"source"`
}

// aggregated selection of "sim_card_flow"
type SimCardFlowAggregate struct {
	Aggregate *SimCardFlowAggregateFields `json:"aggregate"`
}

// aggregate fields of "sim_card_flow"
type SimCardFlowAggregateFields struct {
	Avg        *SimCardFlowAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *SimCardFlowMaxFields        `json:"max"`
	Min        *SimCardFlowMinFields        `json:"min"`
	Stddev     *SimCardFlowStddevFields     `json:"stddev"`
	StddevPop  *SimCardFlowStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SimCardFlowStddevSampFields `json:"stddev_samp"`
	Sum        *SimCardFlowSumFields        `json:"sum"`
	VarPop     *SimCardFlowVarPopFields     `json:"var_pop"`
	VarSamp    *SimCardFlowVarSampFields    `json:"var_samp"`
	Variance   *SimCardFlowVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "sim_card_flow"
type SimCardFlowAvgFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'sim_card_flow'.
type SimCardFlowBoolExp struct {
	And            []*SimCardFlowBoolExp           `json:"_and"`
	Not            *SimCardFlowBoolExp             `json:"_not"`
	Or             []*SimCardFlowBoolExp           `json:"_or"`
	ID             *model.BigintComparisonExp      `json:"id"`
	SimCardFlowID  *model.StringComparisonExp      `json:"sim_card_flow_id"`
	SimCardID      *model.StringComparisonExp      `json:"sim_card_id"`
	CardNoRemark   *model.StringComparisonExp      `json:"card_no_remark"`
	Iccid          *model.StringComparisonExp      `json:"iccid"`
	EnterpriseID   *model.StringComparisonExp      `json:"enterprise_id"`
	UseFlow        *model.NumericComparisonExp     `json:"use_flow"`
	CardAvgFlow    *model.NumericComparisonExp     `json:"card_avg_flow"`
	PoolAvgFlow    *model.NumericComparisonExp     `json:"pool_avg_flow"`
	SuitFlow       *model.NumericComparisonExp     `json:"suit_flow"`
	SuitLeftFlow   *model.NumericComparisonExp     `json:"suit_left_flow"`
	SuitOverFlow   *model.NumericComparisonExp     `json:"suit_over_flow"`
	SuitUseSmsNum  *model.IntComparisonExp         `json:"suit_use_sms_num"`
	SuitSmsNum     *model.IntComparisonExp         `json:"suit_sms_num"`
	SuitSmsLeftNum *model.IntComparisonExp         `json:"suit_sms_left_num"`
	SuitSmsOverNum *model.IntComparisonExp         `json:"suit_sms_over_num"`
	IsSharePool    *model.BooleanComparisonExp     `json:"is_share_pool"`
	IsDelete       *model.BooleanComparisonExp     `json:"is_delete"`
	CreateAt       *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy       *model.StringComparisonExp      `json:"create_by"`
	UpdateAt       *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy       *model.StringComparisonExp      `json:"update_by"`
	DeleteAt       *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy       *model.StringComparisonExp      `json:"delete_by"`
}

// input type for incrementing integer column in table "sim_card_flow"
type SimCardFlowIncInput struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// input type for inserting data into table "sim_card_flow"
type SimCardFlowInsertInput struct {
	SimCardFlowID  string     `json:"sim_card_flow_id"`
	SimCardID      string     `json:"sim_card_id"`
	CardNoRemark   *string    `json:"card_no_remark"`
	Iccid          *string    `json:"iccid"`
	EnterpriseID   *string    `json:"enterprise_id"`
	UseFlow        *float64   `json:"use_flow"`
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	IsSharePool    bool       `json:"is_share_pool"`
	IsDelete       bool       `json:"is_delete"`
	CreateAt       time.Time  `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
}

// aggregate max on columns of table "sim_card_flow"
type SimCardFlowMaxFields struct {
	ID             *int64     `json:"id"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SimCardID      *string    `json:"sim_card_id"`
	CardNoRemark   *string    `json:"card_no_remark"`
	Iccid          *string    `json:"iccid"`
	EnterpriseID   *string    `json:"enterprise_id"`
	UseFlow        *float64   `json:"use_flow"`
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	IsSharePool    *bool      `json:"is_share_pool"`
	IsDelete       *bool      `json:"is_delete"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
}

// aggregate min on columns of table "sim_card_flow"
type SimCardFlowMinFields struct {
	ID             *int64     `json:"id"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SimCardID      *string    `json:"sim_card_id"`
	CardNoRemark   *string    `json:"card_no_remark"`
	Iccid          *string    `json:"iccid"`
	EnterpriseID   *string    `json:"enterprise_id"`
	UseFlow        *float64   `json:"use_flow"`
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	IsSharePool    *bool      `json:"is_share_pool"`
	IsDelete       *bool      `json:"is_delete"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
}

// response of any mutation on the table "sim_card_flow"
type SimCardFlowMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*model1.SimCardFlow `json:"returning"`
}

// ordering options when selecting data from "sim_card_flow"
type SimCardFlowOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	SimCardFlowID  *model.OrderBy `json:"sim_card_flow_id"`
	SimCardID      *model.OrderBy `json:"sim_card_id"`
	CardNoRemark   *model.OrderBy `json:"card_no_remark"`
	Iccid          *model.OrderBy `json:"iccid"`
	EnterpriseID   *model.OrderBy `json:"enterprise_id"`
	UseFlow        *model.OrderBy `json:"use_flow"`
	CardAvgFlow    *model.OrderBy `json:"card_avg_flow"`
	PoolAvgFlow    *model.OrderBy `json:"pool_avg_flow"`
	SuitFlow       *model.OrderBy `json:"suit_flow"`
	SuitLeftFlow   *model.OrderBy `json:"suit_left_flow"`
	SuitOverFlow   *model.OrderBy `json:"suit_over_flow"`
	SuitUseSmsNum  *model.OrderBy `json:"suit_use_sms_num"`
	SuitSmsNum     *model.OrderBy `json:"suit_sms_num"`
	SuitSmsLeftNum *model.OrderBy `json:"suit_sms_left_num"`
	SuitSmsOverNum *model.OrderBy `json:"suit_sms_over_num"`
	IsSharePool    *model.OrderBy `json:"is_share_pool"`
	IsDelete       *model.OrderBy `json:"is_delete"`
	CreateAt       *model.OrderBy `json:"create_at"`
	CreateBy       *model.OrderBy `json:"create_by"`
	UpdateAt       *model.OrderBy `json:"update_at"`
	UpdateBy       *model.OrderBy `json:"update_by"`
	DeleteAt       *model.OrderBy `json:"delete_at"`
	DeleteBy       *model.OrderBy `json:"delete_by"`
}

// input type for updating data in table "sim_card_flow"
type SimCardFlowSetInput struct {
	ID             *int64     `json:"id"`
	SimCardFlowID  *string    `json:"sim_card_flow_id"`
	SimCardID      *string    `json:"sim_card_id"`
	CardNoRemark   *string    `json:"card_no_remark"`
	Iccid          *string    `json:"iccid"`
	EnterpriseID   *string    `json:"enterprise_id"`
	UseFlow        *float64   `json:"use_flow"`
	CardAvgFlow    *float64   `json:"card_avg_flow"`
	PoolAvgFlow    *float64   `json:"pool_avg_flow"`
	SuitFlow       *float64   `json:"suit_flow"`
	SuitLeftFlow   *float64   `json:"suit_left_flow"`
	SuitOverFlow   *float64   `json:"suit_over_flow"`
	SuitUseSmsNum  *int       `json:"suit_use_sms_num"`
	SuitSmsNum     *int       `json:"suit_sms_num"`
	SuitSmsLeftNum *int       `json:"suit_sms_left_num"`
	SuitSmsOverNum *int       `json:"suit_sms_over_num"`
	IsSharePool    *bool      `json:"is_share_pool"`
	IsDelete       *bool      `json:"is_delete"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	UpdateAt       *time.Time `json:"update_at"`
	UpdateBy       *string    `json:"update_by"`
	DeleteAt       *time.Time `json:"delete_at"`
	DeleteBy       *string    `json:"delete_by"`
}

// aggregate stddev on columns of table "sim_card_flow"
type SimCardFlowStddevFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// aggregate stddev_pop on columns of table "sim_card_flow"
type SimCardFlowStddevPopFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// aggregate stddev_samp on columns of table "sim_card_flow"
type SimCardFlowStddevSampFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// aggregate sum on columns of table "sim_card_flow"
type SimCardFlowSumFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// aggregate var_pop on columns of table "sim_card_flow"
type SimCardFlowVarPopFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// aggregate var_samp on columns of table "sim_card_flow"
type SimCardFlowVarSampFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// aggregate variance on columns of table "sim_card_flow"
type SimCardFlowVarianceFields struct {
	ID             *int64   `json:"id"`
	UseFlow        *float64 `json:"use_flow"`
	CardAvgFlow    *float64 `json:"card_avg_flow"`
	PoolAvgFlow    *float64 `json:"pool_avg_flow"`
	SuitFlow       *float64 `json:"suit_flow"`
	SuitLeftFlow   *float64 `json:"suit_left_flow"`
	SuitOverFlow   *float64 `json:"suit_over_flow"`
	SuitUseSmsNum  *int     `json:"suit_use_sms_num"`
	SuitSmsNum     *int     `json:"suit_sms_num"`
	SuitSmsLeftNum *int     `json:"suit_sms_left_num"`
	SuitSmsOverNum *int     `json:"suit_sms_over_num"`
}

// input type for incrementing integer column in table "sim_card"
type SimCardIncInput struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// input type for inserting data into table "sim_card"
type SimCardInsertInput struct {
	SimCardID   string     `json:"sim_card_id"`
	DeptID      *string    `json:"dept_id"`
	TerminalID  *string    `json:"terminal_id"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	OperatorsID *string    `json:"operators_id"`
	SimNumber   *string    `json:"sim_number"`
	MobileType  *int       `json:"mobile_type"`
	Remark      *string    `json:"remark"`
	CreateAt    time.Time  `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    bool       `json:"is_delete"`
	Source      *int       `json:"source"`
}

// aggregate max on columns of table "sim_card"
type SimCardMaxFields struct {
	ID          *int64     `json:"id"`
	SimCardID   *string    `json:"sim_card_id"`
	DeptID      *string    `json:"dept_id"`
	TerminalID  *string    `json:"terminal_id"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	OperatorsID *string    `json:"operators_id"`
	SimNumber   *string    `json:"sim_number"`
	MobileType  *int       `json:"mobile_type"`
	Remark      *string    `json:"remark"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
	Source      *int       `json:"source"`
}

// aggregated selection of "sim_card_mgr"
type SimCardMgrAggregate struct {
	Aggregate *SimCardMgrAggregateFields `json:"aggregate"`
}

// aggregate fields of "sim_card_mgr"
type SimCardMgrAggregateFields struct {
	Avg        *SimCardMgrAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *SimCardMgrMaxFields        `json:"max"`
	Min        *SimCardMgrMinFields        `json:"min"`
	Stddev     *SimCardMgrStddevFields     `json:"stddev"`
	StddevPop  *SimCardMgrStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SimCardMgrStddevSampFields `json:"stddev_samp"`
	Sum        *SimCardMgrSumFields        `json:"sum"`
	VarPop     *SimCardMgrVarPopFields     `json:"var_pop"`
	VarSamp    *SimCardMgrVarSampFields    `json:"var_samp"`
	Variance   *SimCardMgrVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "sim_card_mgr"
type SimCardMgrAvgFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'sim_card_mgr'.
type SimCardMgrBoolExp struct {
	And         []*SimCardMgrBoolExp            `json:"_and"`
	Not         *SimCardMgrBoolExp              `json:"_not"`
	Or          []*SimCardMgrBoolExp            `json:"_or"`
	ID          *model.BigintComparisonExp      `json:"id"`
	MgrID       *model.StringComparisonExp      `json:"mgr_id"`
	Status      *model.IntComparisonExp         `json:"status"`
	TerminalID  *model.StringComparisonExp      `json:"terminal_id"`
	MobileType  *model.IntComparisonExp         `json:"mobile_type"`
	ProxyrgID   *model.StringComparisonExp      `json:"proxyrg_id"`
	DeptID      *model.StringComparisonExp      `json:"dept_id"`
	SimType     *model.IntComparisonExp         `json:"sim_type"`
	UseType     *model.IntComparisonExp         `json:"use_type"`
	UseUserID   *model.StringComparisonExp      `json:"use_user_id"`
	SystemName  *model.StringComparisonExp      `json:"system_name"`
	SimNumber   *model.StringComparisonExp      `json:"sim_number"`
	IsOutside   *model.BooleanComparisonExp     `json:"is_outside"`
	UpdateCause *model.StringComparisonExp      `json:"update_cause"`
	SimArea     *model.StringComparisonExp      `json:"sim_area"`
	SimNumber12 *model.StringComparisonExp      `json:"sim_number_12"`
	SimNumber23 *model.StringComparisonExp      `json:"sim_number_23"`
	SimBak      *model.StringComparisonExp      `json:"sim_bak"`
	SimNumber10 *model.StringComparisonExp      `json:"sim_number10"`
	CancelTime  *model.TimestamptzComparisonExp `json:"cancel_time"`
	CancelCause *model.StringComparisonExp      `json:"cancel_cause"`
	CreateAt    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy    *model.StringComparisonExp      `json:"create_by"`
	UpdateAt    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy    *model.StringComparisonExp      `json:"update_by"`
	DeleteAt    *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy    *model.StringComparisonExp      `json:"delete_by"`
	IsDelete    *model.BooleanComparisonExp     `json:"is_delete"`
	Remark      *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "sim_card_mgr"
type SimCardMgrIncInput struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// input type for inserting data into table "sim_card_mgr"
type SimCardMgrInsertInput struct {
	MgrID       string     `json:"mgr_id"`
	Status      *int       `json:"status"`
	TerminalID  *string    `json:"terminal_id"`
	MobileType  *int       `json:"mobile_type"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	DeptID      *string    `json:"dept_id"`
	SimType     *int       `json:"sim_type"`
	UseType     *int       `json:"use_type"`
	UseUserID   *string    `json:"use_user_id"`
	SystemName  *string    `json:"system_name"`
	SimNumber   *string    `json:"sim_number"`
	IsOutside   bool       `json:"is_outside"`
	UpdateCause *string    `json:"update_cause"`
	SimArea     *string    `json:"sim_area"`
	SimNumber12 *string    `json:"sim_number_12"`
	SimNumber23 *string    `json:"sim_number_23"`
	SimBak      *string    `json:"sim_bak"`
	SimNumber10 *string    `json:"sim_number10"`
	CancelTime  *time.Time `json:"cancel_time"`
	CancelCause *string    `json:"cancel_cause"`
	CreateAt    time.Time  `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    bool       `json:"is_delete"`
	Remark      *string    `json:"remark"`
}

// aggregate max on columns of table "sim_card_mgr"
type SimCardMgrMaxFields struct {
	ID          *int64     `json:"id"`
	MgrID       *string    `json:"mgr_id"`
	Status      *int       `json:"status"`
	TerminalID  *string    `json:"terminal_id"`
	MobileType  *int       `json:"mobile_type"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	DeptID      *string    `json:"dept_id"`
	SimType     *int       `json:"sim_type"`
	UseType     *int       `json:"use_type"`
	UseUserID   *string    `json:"use_user_id"`
	SystemName  *string    `json:"system_name"`
	SimNumber   *string    `json:"sim_number"`
	IsOutside   *bool      `json:"is_outside"`
	UpdateCause *string    `json:"update_cause"`
	SimArea     *string    `json:"sim_area"`
	SimNumber12 *string    `json:"sim_number_12"`
	SimNumber23 *string    `json:"sim_number_23"`
	SimBak      *string    `json:"sim_bak"`
	SimNumber10 *string    `json:"sim_number10"`
	CancelTime  *time.Time `json:"cancel_time"`
	CancelCause *string    `json:"cancel_cause"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
	Remark      *string    `json:"remark"`
}

// aggregate min on columns of table "sim_card_mgr"
type SimCardMgrMinFields struct {
	ID          *int64     `json:"id"`
	MgrID       *string    `json:"mgr_id"`
	Status      *int       `json:"status"`
	TerminalID  *string    `json:"terminal_id"`
	MobileType  *int       `json:"mobile_type"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	DeptID      *string    `json:"dept_id"`
	SimType     *int       `json:"sim_type"`
	UseType     *int       `json:"use_type"`
	UseUserID   *string    `json:"use_user_id"`
	SystemName  *string    `json:"system_name"`
	SimNumber   *string    `json:"sim_number"`
	IsOutside   *bool      `json:"is_outside"`
	UpdateCause *string    `json:"update_cause"`
	SimArea     *string    `json:"sim_area"`
	SimNumber12 *string    `json:"sim_number_12"`
	SimNumber23 *string    `json:"sim_number_23"`
	SimBak      *string    `json:"sim_bak"`
	SimNumber10 *string    `json:"sim_number10"`
	CancelTime  *time.Time `json:"cancel_time"`
	CancelCause *string    `json:"cancel_cause"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
	Remark      *string    `json:"remark"`
}

// response of any mutation on the table "sim_card_mgr"
type SimCardMgrMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*model1.SimCardMgr `json:"returning"`
}

// ordering options when selecting data from "sim_card_mgr"
type SimCardMgrOrderBy struct {
	ID          *model.OrderBy `json:"id"`
	MgrID       *model.OrderBy `json:"mgr_id"`
	Status      *model.OrderBy `json:"status"`
	TerminalID  *model.OrderBy `json:"terminal_id"`
	MobileType  *model.OrderBy `json:"mobile_type"`
	ProxyrgID   *model.OrderBy `json:"proxyrg_id"`
	DeptID      *model.OrderBy `json:"dept_id"`
	SimType     *model.OrderBy `json:"sim_type"`
	UseType     *model.OrderBy `json:"use_type"`
	UseUserID   *model.OrderBy `json:"use_user_id"`
	SystemName  *model.OrderBy `json:"system_name"`
	SimNumber   *model.OrderBy `json:"sim_number"`
	IsOutside   *model.OrderBy `json:"is_outside"`
	UpdateCause *model.OrderBy `json:"update_cause"`
	SimArea     *model.OrderBy `json:"sim_area"`
	SimNumber12 *model.OrderBy `json:"sim_number_12"`
	SimNumber23 *model.OrderBy `json:"sim_number_23"`
	SimBak      *model.OrderBy `json:"sim_bak"`
	SimNumber10 *model.OrderBy `json:"sim_number10"`
	CancelTime  *model.OrderBy `json:"cancel_time"`
	CancelCause *model.OrderBy `json:"cancel_cause"`
	CreateAt    *model.OrderBy `json:"create_at"`
	CreateBy    *model.OrderBy `json:"create_by"`
	UpdateAt    *model.OrderBy `json:"update_at"`
	UpdateBy    *model.OrderBy `json:"update_by"`
	DeleteAt    *model.OrderBy `json:"delete_at"`
	DeleteBy    *model.OrderBy `json:"delete_by"`
	IsDelete    *model.OrderBy `json:"is_delete"`
	Remark      *model.OrderBy `json:"remark"`
}

// input type for updating data in table "sim_card_mgr"
type SimCardMgrSetInput struct {
	ID          *int64     `json:"id"`
	MgrID       *string    `json:"mgr_id"`
	Status      *int       `json:"status"`
	TerminalID  *string    `json:"terminal_id"`
	MobileType  *int       `json:"mobile_type"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	DeptID      *string    `json:"dept_id"`
	SimType     *int       `json:"sim_type"`
	UseType     *int       `json:"use_type"`
	UseUserID   *string    `json:"use_user_id"`
	SystemName  *string    `json:"system_name"`
	SimNumber   *string    `json:"sim_number"`
	IsOutside   *bool      `json:"is_outside"`
	UpdateCause *string    `json:"update_cause"`
	SimArea     *string    `json:"sim_area"`
	SimNumber12 *string    `json:"sim_number_12"`
	SimNumber23 *string    `json:"sim_number_23"`
	SimBak      *string    `json:"sim_bak"`
	SimNumber10 *string    `json:"sim_number10"`
	CancelTime  *time.Time `json:"cancel_time"`
	CancelCause *string    `json:"cancel_cause"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
	Remark      *string    `json:"remark"`
}

// aggregate stddev on columns of table "sim_card_mgr"
type SimCardMgrStddevFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate stddev_pop on columns of table "sim_card_mgr"
type SimCardMgrStddevPopFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate stddev_samp on columns of table "sim_card_mgr"
type SimCardMgrStddevSampFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate sum on columns of table "sim_card_mgr"
type SimCardMgrSumFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate var_pop on columns of table "sim_card_mgr"
type SimCardMgrVarPopFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate var_samp on columns of table "sim_card_mgr"
type SimCardMgrVarSampFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate variance on columns of table "sim_card_mgr"
type SimCardMgrVarianceFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
	SimType    *int   `json:"sim_type"`
	UseType    *int   `json:"use_type"`
}

// aggregate min on columns of table "sim_card"
type SimCardMinFields struct {
	ID          *int64     `json:"id"`
	SimCardID   *string    `json:"sim_card_id"`
	DeptID      *string    `json:"dept_id"`
	TerminalID  *string    `json:"terminal_id"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	OperatorsID *string    `json:"operators_id"`
	SimNumber   *string    `json:"sim_number"`
	MobileType  *int       `json:"mobile_type"`
	Remark      *string    `json:"remark"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
	Source      *int       `json:"source"`
}

// response of any mutation on the table "sim_card"
type SimCardMutationResponse struct {
	AffectedRows int               `json:"affected_rows"`
	Returning    []*model1.SimCard `json:"returning"`
}

// ordering options when selecting data from "sim_card"
type SimCardOrderBy struct {
	ID          *model.OrderBy `json:"id"`
	SimCardID   *model.OrderBy `json:"sim_card_id"`
	DeptID      *model.OrderBy `json:"dept_id"`
	TerminalID  *model.OrderBy `json:"terminal_id"`
	ProxyrgID   *model.OrderBy `json:"proxyrg_id"`
	OperatorsID *model.OrderBy `json:"operators_id"`
	SimNumber   *model.OrderBy `json:"sim_number"`
	MobileType  *model.OrderBy `json:"mobile_type"`
	Remark      *model.OrderBy `json:"remark"`
	CreateAt    *model.OrderBy `json:"create_at"`
	CreateBy    *model.OrderBy `json:"create_by"`
	UpdateAt    *model.OrderBy `json:"update_at"`
	UpdateBy    *model.OrderBy `json:"update_by"`
	DeleteAt    *model.OrderBy `json:"delete_at"`
	DeleteBy    *model.OrderBy `json:"delete_by"`
	IsDelete    *model.OrderBy `json:"is_delete"`
	Source      *model.OrderBy `json:"source"`
}

// input type for updating data in table "sim_card"
type SimCardSetInput struct {
	ID          *int64     `json:"id"`
	SimCardID   *string    `json:"sim_card_id"`
	DeptID      *string    `json:"dept_id"`
	TerminalID  *string    `json:"terminal_id"`
	ProxyrgID   *string    `json:"proxyrg_id"`
	OperatorsID *string    `json:"operators_id"`
	SimNumber   *string    `json:"sim_number"`
	MobileType  *int       `json:"mobile_type"`
	Remark      *string    `json:"remark"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
	Source      *int       `json:"source"`
}

// aggregated selection of "sim_card_status"
type SimCardStatusAggregate struct {
	Aggregate *SimCardStatusAggregateFields `json:"aggregate"`
}

// aggregate fields of "sim_card_status"
type SimCardStatusAggregateFields struct {
	Avg        *SimCardStatusAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *SimCardStatusMaxFields        `json:"max"`
	Min        *SimCardStatusMinFields        `json:"min"`
	Stddev     *SimCardStatusStddevFields     `json:"stddev"`
	StddevPop  *SimCardStatusStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SimCardStatusStddevSampFields `json:"stddev_samp"`
	Sum        *SimCardStatusSumFields        `json:"sum"`
	VarPop     *SimCardStatusVarPopFields     `json:"var_pop"`
	VarSamp    *SimCardStatusVarSampFields    `json:"var_samp"`
	Variance   *SimCardStatusVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "sim_card_status"
type SimCardStatusAvgFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'sim_card_status'.
type SimCardStatusBoolExp struct {
	And             []*SimCardStatusBoolExp         `json:"_and"`
	Not             *SimCardStatusBoolExp           `json:"_not"`
	Or              []*SimCardStatusBoolExp         `json:"_or"`
	ID              *model.BigintComparisonExp      `json:"id"`
	SimCardStatusID *model.StringComparisonExp      `json:"sim_card_status_id"`
	Status          *model.IntComparisonExp         `json:"status"`
	TerminalModalID *model.StringComparisonExp      `json:"terminal_modal_id"`
	MobileType      *model.IntComparisonExp         `json:"mobile_type"`
	ProxyrgID       *model.StringComparisonExp      `json:"proxyrg_id"`
	EnterpriseID    *model.StringComparisonExp      `json:"enterprise_id"`
	SystemName      *model.StringComparisonExp      `json:"system_name"`
	SimNumber       *model.StringComparisonExp      `json:"sim_number"`
	CancelTime      *model.TimestamptzComparisonExp `json:"cancel_time"`
	CancelCause     *model.StringComparisonExp      `json:"cancel_cause"`
	SimNumber10     *model.StringComparisonExp      `json:"sim_number10"`
	PlateNumber     *model.StringComparisonExp      `json:"plate_number"`
	FeeEndDate      *model.TimestamptzComparisonExp `json:"fee_end_date"`
	CreateAt        *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy        *model.StringComparisonExp      `json:"create_by"`
	UpdateAt        *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy        *model.StringComparisonExp      `json:"update_by"`
	DeleteAt        *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy        *model.StringComparisonExp      `json:"delete_by"`
	IsDelete        *model.BooleanComparisonExp     `json:"is_delete"`
	Remark          *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "sim_card_status"
type SimCardStatusIncInput struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// input type for inserting data into table "sim_card_status"
type SimCardStatusInsertInput struct {
	SimCardStatusID string     `json:"sim_card_status_id"`
	Status          *int       `json:"status"`
	TerminalModalID *string    `json:"terminal_modal_id"`
	MobileType      *int       `json:"mobile_type"`
	ProxyrgID       *string    `json:"proxyrg_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	SystemName      *string    `json:"system_name"`
	SimNumber       *string    `json:"sim_number"`
	CancelTime      *time.Time `json:"cancel_time"`
	CancelCause     *string    `json:"cancel_cause"`
	SimNumber10     *string    `json:"sim_number10"`
	PlateNumber     *string    `json:"plate_number"`
	FeeEndDate      *time.Time `json:"fee_end_date"`
	CreateAt        time.Time  `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        bool       `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// aggregate max on columns of table "sim_card_status"
type SimCardStatusMaxFields struct {
	ID              *int64     `json:"id"`
	SimCardStatusID *string    `json:"sim_card_status_id"`
	Status          *int       `json:"status"`
	TerminalModalID *string    `json:"terminal_modal_id"`
	MobileType      *int       `json:"mobile_type"`
	ProxyrgID       *string    `json:"proxyrg_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	SystemName      *string    `json:"system_name"`
	SimNumber       *string    `json:"sim_number"`
	CancelTime      *time.Time `json:"cancel_time"`
	CancelCause     *string    `json:"cancel_cause"`
	SimNumber10     *string    `json:"sim_number10"`
	PlateNumber     *string    `json:"plate_number"`
	FeeEndDate      *time.Time `json:"fee_end_date"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// aggregate min on columns of table "sim_card_status"
type SimCardStatusMinFields struct {
	ID              *int64     `json:"id"`
	SimCardStatusID *string    `json:"sim_card_status_id"`
	Status          *int       `json:"status"`
	TerminalModalID *string    `json:"terminal_modal_id"`
	MobileType      *int       `json:"mobile_type"`
	ProxyrgID       *string    `json:"proxyrg_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	SystemName      *string    `json:"system_name"`
	SimNumber       *string    `json:"sim_number"`
	CancelTime      *time.Time `json:"cancel_time"`
	CancelCause     *string    `json:"cancel_cause"`
	SimNumber10     *string    `json:"sim_number10"`
	PlateNumber     *string    `json:"plate_number"`
	FeeEndDate      *time.Time `json:"fee_end_date"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// response of any mutation on the table "sim_card_status"
type SimCardStatusMutationResponse struct {
	AffectedRows int                     `json:"affected_rows"`
	Returning    []*model1.SimCardStatus `json:"returning"`
}

// ordering options when selecting data from "sim_card_status"
type SimCardStatusOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	SimCardStatusID *model.OrderBy `json:"sim_card_status_id"`
	Status          *model.OrderBy `json:"status"`
	TerminalModalID *model.OrderBy `json:"terminal_modal_id"`
	MobileType      *model.OrderBy `json:"mobile_type"`
	ProxyrgID       *model.OrderBy `json:"proxyrg_id"`
	EnterpriseID    *model.OrderBy `json:"enterprise_id"`
	SystemName      *model.OrderBy `json:"system_name"`
	SimNumber       *model.OrderBy `json:"sim_number"`
	CancelTime      *model.OrderBy `json:"cancel_time"`
	CancelCause     *model.OrderBy `json:"cancel_cause"`
	SimNumber10     *model.OrderBy `json:"sim_number10"`
	PlateNumber     *model.OrderBy `json:"plate_number"`
	FeeEndDate      *model.OrderBy `json:"fee_end_date"`
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	IsDelete        *model.OrderBy `json:"is_delete"`
	Remark          *model.OrderBy `json:"remark"`
}

// input type for updating data in table "sim_card_status"
type SimCardStatusSetInput struct {
	ID              *int64     `json:"id"`
	SimCardStatusID *string    `json:"sim_card_status_id"`
	Status          *int       `json:"status"`
	TerminalModalID *string    `json:"terminal_modal_id"`
	MobileType      *int       `json:"mobile_type"`
	ProxyrgID       *string    `json:"proxyrg_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	SystemName      *string    `json:"system_name"`
	SimNumber       *string    `json:"sim_number"`
	CancelTime      *time.Time `json:"cancel_time"`
	CancelCause     *string    `json:"cancel_cause"`
	SimNumber10     *string    `json:"sim_number10"`
	PlateNumber     *string    `json:"plate_number"`
	FeeEndDate      *time.Time `json:"fee_end_date"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// aggregate stddev on columns of table "sim_card_status"
type SimCardStatusStddevFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate stddev_pop on columns of table "sim_card_status"
type SimCardStatusStddevPopFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate stddev_samp on columns of table "sim_card_status"
type SimCardStatusStddevSampFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate sum on columns of table "sim_card_status"
type SimCardStatusSumFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate var_pop on columns of table "sim_card_status"
type SimCardStatusVarPopFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate var_samp on columns of table "sim_card_status"
type SimCardStatusVarSampFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate variance on columns of table "sim_card_status"
type SimCardStatusVarianceFields struct {
	ID         *int64 `json:"id"`
	Status     *int   `json:"status"`
	MobileType *int   `json:"mobile_type"`
}

// aggregate stddev on columns of table "sim_card"
type SimCardStddevFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregate stddev_pop on columns of table "sim_card"
type SimCardStddevPopFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregate stddev_samp on columns of table "sim_card"
type SimCardStddevSampFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregate sum on columns of table "sim_card"
type SimCardSumFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregate var_pop on columns of table "sim_card"
type SimCardVarPopFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregate var_samp on columns of table "sim_card"
type SimCardVarSampFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregate variance on columns of table "sim_card"
type SimCardVarianceFields struct {
	ID         *int64 `json:"id"`
	MobileType *int   `json:"mobile_type"`
	Source     *int   `json:"source"`
}

// aggregated selection of "terminal"
type TerminalAggregate struct {
	Aggregate *TerminalAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal"
type TerminalAggregateFields struct {
	Avg        *TerminalAvgFields        `json:"avg"`
	Count      *int                      `json:"count"`
	Max        *TerminalMaxFields        `json:"max"`
	Min        *TerminalMinFields        `json:"min"`
	Stddev     *TerminalStddevFields     `json:"stddev"`
	StddevPop  *TerminalStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalSumFields        `json:"sum"`
	VarPop     *TerminalVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalVarSampFields    `json:"var_samp"`
	Variance   *TerminalVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal"
type TerminalAvgFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregated selection of "terminal_beidou_valid"
type TerminalBeidouValidAggregate struct {
	Aggregate *TerminalBeidouValidAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_beidou_valid"
type TerminalBeidouValidAggregateFields struct {
	Avg        *TerminalBeidouValidAvgFields        `json:"avg"`
	Count      *int                                 `json:"count"`
	Max        *TerminalBeidouValidMaxFields        `json:"max"`
	Min        *TerminalBeidouValidMinFields        `json:"min"`
	Stddev     *TerminalBeidouValidStddevFields     `json:"stddev"`
	StddevPop  *TerminalBeidouValidStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalBeidouValidStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalBeidouValidSumFields        `json:"sum"`
	VarPop     *TerminalBeidouValidVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalBeidouValidVarSampFields    `json:"var_samp"`
	Variance   *TerminalBeidouValidVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_beidou_valid"
type TerminalBeidouValidAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_beidou_valid'.
type TerminalBeidouValidBoolExp struct {
	And                   []*TerminalBeidouValidBoolExp   `json:"_and"`
	Not                   *TerminalBeidouValidBoolExp     `json:"_not"`
	Or                    []*TerminalBeidouValidBoolExp   `json:"_or"`
	ID                    *model.BigintComparisonExp      `json:"id"`
	TerminalBeidouValidID *model.StringComparisonExp      `json:"terminal_beidou_valid_id"`
	TerminalID            *model.StringComparisonExp      `json:"terminal_id"`
	TerminalModalID       *model.StringComparisonExp      `json:"terminal_modal_id"`
	IsBind                *model.BooleanComparisonExp     `json:"is_bind"`
	BuyBill               *model.StringComparisonExp      `json:"buy_bill"`
	CreateAt              *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy              *model.StringComparisonExp      `json:"create_by"`
	UpdateAt              *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy              *model.StringComparisonExp      `json:"update_by"`
	DeleteAt              *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy              *model.StringComparisonExp      `json:"delete_by"`
	IsDelete              *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_beidou_valid"
type TerminalBeidouValidIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_beidou_valid"
type TerminalBeidouValidInsertInput struct {
	TerminalBeidouValidID string     `json:"terminal_beidou_valid_id"`
	TerminalID            string     `json:"terminal_id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	IsBind                bool       `json:"is_bind"`
	BuyBill               *string    `json:"buy_bill"`
	CreateAt              time.Time  `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_beidou_valid"
type TerminalBeidouValidMaxFields struct {
	ID                    *int64     `json:"id"`
	TerminalBeidouValidID *string    `json:"terminal_beidou_valid_id"`
	TerminalID            *string    `json:"terminal_id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	IsBind                *bool      `json:"is_bind"`
	BuyBill               *string    `json:"buy_bill"`
	CreateAt              *time.Time `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_beidou_valid"
type TerminalBeidouValidMinFields struct {
	ID                    *int64     `json:"id"`
	TerminalBeidouValidID *string    `json:"terminal_beidou_valid_id"`
	TerminalID            *string    `json:"terminal_id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	IsBind                *bool      `json:"is_bind"`
	BuyBill               *string    `json:"buy_bill"`
	CreateAt              *time.Time `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_beidou_valid"
type TerminalBeidouValidMutationResponse struct {
	AffectedRows int                           `json:"affected_rows"`
	Returning    []*model1.TerminalBeidouValid `json:"returning"`
}

// ordering options when selecting data from "terminal_beidou_valid"
type TerminalBeidouValidOrderBy struct {
	ID                    *model.OrderBy `json:"id"`
	TerminalBeidouValidID *model.OrderBy `json:"terminal_beidou_valid_id"`
	TerminalID            *model.OrderBy `json:"terminal_id"`
	TerminalModalID       *model.OrderBy `json:"terminal_modal_id"`
	IsBind                *model.OrderBy `json:"is_bind"`
	BuyBill               *model.OrderBy `json:"buy_bill"`
	CreateAt              *model.OrderBy `json:"create_at"`
	CreateBy              *model.OrderBy `json:"create_by"`
	UpdateAt              *model.OrderBy `json:"update_at"`
	UpdateBy              *model.OrderBy `json:"update_by"`
	DeleteAt              *model.OrderBy `json:"delete_at"`
	DeleteBy              *model.OrderBy `json:"delete_by"`
	IsDelete              *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_beidou_valid"
type TerminalBeidouValidSetInput struct {
	ID                    *int64     `json:"id"`
	TerminalBeidouValidID *string    `json:"terminal_beidou_valid_id"`
	TerminalID            *string    `json:"terminal_id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	IsBind                *bool      `json:"is_bind"`
	BuyBill               *string    `json:"buy_bill"`
	CreateAt              *time.Time `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_beidou_valid"
type TerminalBeidouValidStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_beidou_valid"
type TerminalBeidouValidStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_beidou_valid"
type TerminalBeidouValidStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_beidou_valid"
type TerminalBeidouValidSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_beidou_valid"
type TerminalBeidouValidVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_beidou_valid"
type TerminalBeidouValidVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_beidou_valid"
type TerminalBeidouValidVarianceFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal'.
type TerminalBoolExp struct {
	And              []*TerminalBoolExp              `json:"_and"`
	Not              *TerminalBoolExp                `json:"_not"`
	Or               []*TerminalBoolExp              `json:"_or"`
	ID               *model.BigintComparisonExp      `json:"id"`
	TerminalID       *model.StringComparisonExp      `json:"terminal_id"`
	FirstInstallTime *model.TimestamptzComparisonExp `json:"first_install_time"`
	Imei             *model.StringComparisonExp      `json:"imei"`
	ProduceDate      *model.TimestamptzComparisonExp `json:"produce_date"`
	TypeID           *model.StringComparisonExp      `json:"type_id"`
	VehicleID        *model.StringComparisonExp      `json:"vehicle_id"`
	VersionNumber    *model.StringComparisonExp      `json:"version_number"`
	IsReg            *model.BooleanComparisonExp     `json:"is_reg"`
	SimID            *model.StringComparisonExp      `json:"sim_id"`
	RecordDate       *model.TimestamptzComparisonExp `json:"record_date"`
	DeptID           *model.StringComparisonExp      `json:"dept_id"`
	ProxyrgID        *model.StringComparisonExp      `json:"proxyrg_id"`
	InstallManID     *model.StringComparisonExp      `json:"install_man_id"`
	RegID            *model.StringComparisonExp      `json:"reg_id"`
	ProvinceID       *model.StringComparisonExp      `json:"province_id"`
	CityID           *model.StringComparisonExp      `json:"city_id"`
	AuthKey          *model.StringComparisonExp      `json:"auth_key"`
	IsSupportPhoto   *model.BooleanComparisonExp     `json:"is_support_photo"`
	MockAuthKey      *model.StringComparisonExp      `json:"mock_auth_key"`
	SprgID           *model.StringComparisonExp      `json:"sprg_id"`
	RemoveReason     *model.StringComparisonExp      `json:"remove_reason"`
	GuaranteeDate    *model.TimestamptzComparisonExp `json:"guarantee_date"`
	CameraNum        *model.IntComparisonExp         `json:"camera_num"`
	AdasModel        *model.StringComparisonExp      `json:"adas_model"`
	ChannelNo        *model.StringComparisonExp      `json:"channel_no"`
	ProveProxyrgID   *model.StringComparisonExp      `json:"prove_proxyrg_id"`
	IsDelete         *model.BooleanComparisonExp     `json:"is_delete"`
	Remarks          *model.StringComparisonExp      `json:"remarks"`
	CreateAt         *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy         *model.StringComparisonExp      `json:"create_by"`
	UpdateAt         *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy         *model.StringComparisonExp      `json:"update_by"`
	DeleteAt         *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy         *model.StringComparisonExp      `json:"delete_by"`
}

// aggregated selection of "terminal_buy_bill"
type TerminalBuyBillAggregate struct {
	Aggregate *TerminalBuyBillAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_buy_bill"
type TerminalBuyBillAggregateFields struct {
	Avg        *TerminalBuyBillAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *TerminalBuyBillMaxFields        `json:"max"`
	Min        *TerminalBuyBillMinFields        `json:"min"`
	Stddev     *TerminalBuyBillStddevFields     `json:"stddev"`
	StddevPop  *TerminalBuyBillStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalBuyBillStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalBuyBillSumFields        `json:"sum"`
	VarPop     *TerminalBuyBillVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalBuyBillVarSampFields    `json:"var_samp"`
	Variance   *TerminalBuyBillVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_buy_bill"
type TerminalBuyBillAvgFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_buy_bill'.
type TerminalBuyBillBoolExp struct {
	And          []*TerminalBuyBillBoolExp       `json:"_and"`
	Not          *TerminalBuyBillBoolExp         `json:"_not"`
	Or           []*TerminalBuyBillBoolExp       `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	BillID       *model.StringComparisonExp      `json:"bill_id"`
	TerminalType *model.IntComparisonExp         `json:"terminal_type"`
	StartSn      *model.BigintComparisonExp      `json:"start_sn"`
	EndSn        *model.BigintComparisonExp      `json:"end_sn"`
	BuyerID      *model.StringComparisonExp      `json:"buyer_id"`
	BuyDate      *model.TimestamptzComparisonExp `json:"buy_date"`
	SnCount      *model.BigintComparisonExp      `json:"sn_count"`
	UseSnCount   *model.BigintComparisonExp      `json:"use_sn_count"`
	IsSnUseOver  *model.BooleanComparisonExp     `json:"is_sn_use_over"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
	Remark       *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "terminal_buy_bill"
type TerminalBuyBillIncInput struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// input type for inserting data into table "terminal_buy_bill"
type TerminalBuyBillInsertInput struct {
	BillID       string     `json:"bill_id"`
	TerminalType int        `json:"terminal_type"`
	StartSn      *int64     `json:"start_sn"`
	EndSn        *int64     `json:"end_sn"`
	BuyerID      *string    `json:"buyer_id"`
	BuyDate      *time.Time `json:"buy_date"`
	SnCount      *int64     `json:"sn_count"`
	UseSnCount   *int64     `json:"use_sn_count"`
	IsSnUseOver  bool       `json:"is_sn_use_over"`
	CreateAt     time.Time  `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// aggregate max on columns of table "terminal_buy_bill"
type TerminalBuyBillMaxFields struct {
	ID           *int64     `json:"id"`
	BillID       *string    `json:"bill_id"`
	TerminalType *int       `json:"terminal_type"`
	StartSn      *int64     `json:"start_sn"`
	EndSn        *int64     `json:"end_sn"`
	BuyerID      *string    `json:"buyer_id"`
	BuyDate      *time.Time `json:"buy_date"`
	SnCount      *int64     `json:"sn_count"`
	UseSnCount   *int64     `json:"use_sn_count"`
	IsSnUseOver  *bool      `json:"is_sn_use_over"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// aggregate min on columns of table "terminal_buy_bill"
type TerminalBuyBillMinFields struct {
	ID           *int64     `json:"id"`
	BillID       *string    `json:"bill_id"`
	TerminalType *int       `json:"terminal_type"`
	StartSn      *int64     `json:"start_sn"`
	EndSn        *int64     `json:"end_sn"`
	BuyerID      *string    `json:"buyer_id"`
	BuyDate      *time.Time `json:"buy_date"`
	SnCount      *int64     `json:"sn_count"`
	UseSnCount   *int64     `json:"use_sn_count"`
	IsSnUseOver  *bool      `json:"is_sn_use_over"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// response of any mutation on the table "terminal_buy_bill"
type TerminalBuyBillMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.TerminalBuyBill `json:"returning"`
}

// ordering options when selecting data from "terminal_buy_bill"
type TerminalBuyBillOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	BillID       *model.OrderBy `json:"bill_id"`
	TerminalType *model.OrderBy `json:"terminal_type"`
	StartSn      *model.OrderBy `json:"start_sn"`
	EndSn        *model.OrderBy `json:"end_sn"`
	BuyerID      *model.OrderBy `json:"buyer_id"`
	BuyDate      *model.OrderBy `json:"buy_date"`
	SnCount      *model.OrderBy `json:"sn_count"`
	UseSnCount   *model.OrderBy `json:"use_sn_count"`
	IsSnUseOver  *model.OrderBy `json:"is_sn_use_over"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
	Remark       *model.OrderBy `json:"remark"`
}

// input type for updating data in table "terminal_buy_bill"
type TerminalBuyBillSetInput struct {
	ID           *int64     `json:"id"`
	BillID       *string    `json:"bill_id"`
	TerminalType *int       `json:"terminal_type"`
	StartSn      *int64     `json:"start_sn"`
	EndSn        *int64     `json:"end_sn"`
	BuyerID      *string    `json:"buyer_id"`
	BuyDate      *time.Time `json:"buy_date"`
	SnCount      *int64     `json:"sn_count"`
	UseSnCount   *int64     `json:"use_sn_count"`
	IsSnUseOver  *bool      `json:"is_sn_use_over"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// aggregate stddev on columns of table "terminal_buy_bill"
type TerminalBuyBillStddevFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregate stddev_pop on columns of table "terminal_buy_bill"
type TerminalBuyBillStddevPopFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregate stddev_samp on columns of table "terminal_buy_bill"
type TerminalBuyBillStddevSampFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregate sum on columns of table "terminal_buy_bill"
type TerminalBuyBillSumFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregate var_pop on columns of table "terminal_buy_bill"
type TerminalBuyBillVarPopFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregate var_samp on columns of table "terminal_buy_bill"
type TerminalBuyBillVarSampFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregate variance on columns of table "terminal_buy_bill"
type TerminalBuyBillVarianceFields struct {
	ID           *int64 `json:"id"`
	TerminalType *int   `json:"terminal_type"`
	StartSn      *int64 `json:"start_sn"`
	EndSn        *int64 `json:"end_sn"`
	SnCount      *int64 `json:"sn_count"`
	UseSnCount   *int64 `json:"use_sn_count"`
}

// aggregated selection of "terminal_change"
type TerminalChangeAggregate struct {
	Aggregate *TerminalChangeAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_change"
type TerminalChangeAggregateFields struct {
	Avg        *TerminalChangeAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *TerminalChangeMaxFields        `json:"max"`
	Min        *TerminalChangeMinFields        `json:"min"`
	Stddev     *TerminalChangeStddevFields     `json:"stddev"`
	StddevPop  *TerminalChangeStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalChangeStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalChangeSumFields        `json:"sum"`
	VarPop     *TerminalChangeVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalChangeVarSampFields    `json:"var_samp"`
	Variance   *TerminalChangeVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_change"
type TerminalChangeAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_change'.
type TerminalChangeBoolExp struct {
	And            []*TerminalChangeBoolExp        `json:"_and"`
	Not            *TerminalChangeBoolExp          `json:"_not"`
	Or             []*TerminalChangeBoolExp        `json:"_or"`
	ID             *model.BigintComparisonExp      `json:"id"`
	ChangeID       *model.StringComparisonExp      `json:"change_id"`
	NewPlateNumber *model.StringComparisonExp      `json:"new_plate_number"`
	TerminalID     *model.StringComparisonExp      `json:"terminal_id"`
	TerminalTypeID *model.StringComparisonExp      `json:"terminal_type_id"`
	OldPlateNumber *model.StringComparisonExp      `json:"old_plate_number"`
	DeptID         *model.StringComparisonExp      `json:"dept_id"`
	CreateAt       *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy       *model.StringComparisonExp      `json:"create_by"`
	Remark         *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "terminal_change"
type TerminalChangeIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_change"
type TerminalChangeInsertInput struct {
	ChangeID       string    `json:"change_id"`
	NewPlateNumber string    `json:"new_plate_number"`
	TerminalID     string    `json:"terminal_id"`
	TerminalTypeID *string   `json:"terminal_type_id"`
	OldPlateNumber string    `json:"old_plate_number"`
	DeptID         *string   `json:"dept_id"`
	CreateAt       time.Time `json:"create_at"`
	CreateBy       *string   `json:"create_by"`
	Remark         *string   `json:"remark"`
}

// aggregate max on columns of table "terminal_change"
type TerminalChangeMaxFields struct {
	ID             *int64     `json:"id"`
	ChangeID       *string    `json:"change_id"`
	NewPlateNumber *string    `json:"new_plate_number"`
	TerminalID     *string    `json:"terminal_id"`
	TerminalTypeID *string    `json:"terminal_type_id"`
	OldPlateNumber *string    `json:"old_plate_number"`
	DeptID         *string    `json:"dept_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Remark         *string    `json:"remark"`
}

// aggregate min on columns of table "terminal_change"
type TerminalChangeMinFields struct {
	ID             *int64     `json:"id"`
	ChangeID       *string    `json:"change_id"`
	NewPlateNumber *string    `json:"new_plate_number"`
	TerminalID     *string    `json:"terminal_id"`
	TerminalTypeID *string    `json:"terminal_type_id"`
	OldPlateNumber *string    `json:"old_plate_number"`
	DeptID         *string    `json:"dept_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Remark         *string    `json:"remark"`
}

// response of any mutation on the table "terminal_change"
type TerminalChangeMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.TerminalChange `json:"returning"`
}

// ordering options when selecting data from "terminal_change"
type TerminalChangeOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	ChangeID       *model.OrderBy `json:"change_id"`
	NewPlateNumber *model.OrderBy `json:"new_plate_number"`
	TerminalID     *model.OrderBy `json:"terminal_id"`
	TerminalTypeID *model.OrderBy `json:"terminal_type_id"`
	OldPlateNumber *model.OrderBy `json:"old_plate_number"`
	DeptID         *model.OrderBy `json:"dept_id"`
	CreateAt       *model.OrderBy `json:"create_at"`
	CreateBy       *model.OrderBy `json:"create_by"`
	Remark         *model.OrderBy `json:"remark"`
}

// input type for updating data in table "terminal_change"
type TerminalChangeSetInput struct {
	ID             *int64     `json:"id"`
	ChangeID       *string    `json:"change_id"`
	NewPlateNumber *string    `json:"new_plate_number"`
	TerminalID     *string    `json:"terminal_id"`
	TerminalTypeID *string    `json:"terminal_type_id"`
	OldPlateNumber *string    `json:"old_plate_number"`
	DeptID         *string    `json:"dept_id"`
	CreateAt       *time.Time `json:"create_at"`
	CreateBy       *string    `json:"create_by"`
	Remark         *string    `json:"remark"`
}

// aggregate stddev on columns of table "terminal_change"
type TerminalChangeStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_change"
type TerminalChangeStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_change"
type TerminalChangeStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_change"
type TerminalChangeSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_change"
type TerminalChangeVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_change"
type TerminalChangeVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_change"
type TerminalChangeVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "terminal_check"
type TerminalCheckAggregate struct {
	Aggregate *TerminalCheckAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_check"
type TerminalCheckAggregateFields struct {
	Avg        *TerminalCheckAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *TerminalCheckMaxFields        `json:"max"`
	Min        *TerminalCheckMinFields        `json:"min"`
	Stddev     *TerminalCheckStddevFields     `json:"stddev"`
	StddevPop  *TerminalCheckStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalCheckStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalCheckSumFields        `json:"sum"`
	VarPop     *TerminalCheckVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalCheckVarSampFields    `json:"var_samp"`
	Variance   *TerminalCheckVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_check"
type TerminalCheckAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_check'.
type TerminalCheckBoolExp struct {
	And              []*TerminalCheckBoolExp         `json:"_and"`
	Not              *TerminalCheckBoolExp           `json:"_not"`
	Or               []*TerminalCheckBoolExp         `json:"_or"`
	ID               *model.BigintComparisonExp      `json:"id"`
	TerminalCheckID  *model.StringComparisonExp      `json:"terminal_check_id"`
	TerminalID       *model.StringComparisonExp      `json:"terminal_id"`
	Acc              *model.StringComparisonExp      `json:"acc"`
	Brake            *model.StringComparisonExp      `json:"brake"`
	LeftLamp         *model.StringComparisonExp      `json:"left_lamp"`
	RightLamp        *model.StringComparisonExp      `json:"right_lamp"`
	NearLamp         *model.StringComparisonExp      `json:"near_lamp"`
	FarLamp          *model.StringComparisonExp      `json:"far_lamp"`
	LoudSpeaker      *model.StringComparisonExp      `json:"loud_speaker"`
	Reverse          *model.StringComparisonExp      `json:"reverse"`
	Locate           *model.StringComparisonExp      `json:"locate"`
	FrontDoor        *model.StringComparisonExp      `json:"front_door"`
	MiddleDoor       *model.StringComparisonExp      `json:"middle_door"`
	BackDoor         *model.StringComparisonExp      `json:"back_door"`
	GpsOpen          *model.StringComparisonExp      `json:"gps_open"`
	BdOpen           *model.StringComparisonExp      `json:"bd_open"`
	VoiceDevice      *model.StringComparisonExp      `json:"voice_device"`
	Camera           *model.StringComparisonExp      `json:"camera"`
	EmergencyAlarm   *model.StringComparisonExp      `json:"emergency_alarm"`
	Mileage          *model.StringComparisonExp      `json:"mileage"`
	Oilmass          *model.StringComparisonExp      `json:"oilmass"`
	VehicleSpeed     *model.StringComparisonExp      `json:"vehicle_speed"`
	PowerAlarm       *model.StringComparisonExp      `json:"power_alarm"`
	Pass             *model.StringComparisonExp      `json:"pass"`
	AirConditioning  *model.StringComparisonExp      `json:"air_conditioning"`
	AutoVehicleSpeed *model.StringComparisonExp      `json:"auto_vehicle_speed"`
	IsImpulseSpeed   *model.BooleanComparisonExp     `json:"is_impulse_speed"`
	FaultEndTime     *model.TimestamptzComparisonExp `json:"fault_end_time"`
	VideoPass        *model.StringComparisonExp      `json:"video_pass"`
	CreateAt         *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy         *model.StringComparisonExp      `json:"create_by"`
	UpdateAt         *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy         *model.StringComparisonExp      `json:"update_by"`
	DeleteAt         *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy         *model.StringComparisonExp      `json:"delete_by"`
	IsDelete         *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_check"
type TerminalCheckIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_check"
type TerminalCheckInsertInput struct {
	TerminalCheckID  string     `json:"terminal_check_id"`
	TerminalID       string     `json:"terminal_id"`
	Acc              *string    `json:"acc"`
	Brake            *string    `json:"brake"`
	LeftLamp         *string    `json:"left_lamp"`
	RightLamp        *string    `json:"right_lamp"`
	NearLamp         *string    `json:"near_lamp"`
	FarLamp          *string    `json:"far_lamp"`
	LoudSpeaker      *string    `json:"loud_speaker"`
	Reverse          *string    `json:"reverse"`
	Locate           *string    `json:"locate"`
	FrontDoor        *string    `json:"front_door"`
	MiddleDoor       *string    `json:"middle_door"`
	BackDoor         *string    `json:"back_door"`
	GpsOpen          *string    `json:"gps_open"`
	BdOpen           *string    `json:"bd_open"`
	VoiceDevice      *string    `json:"voice_device"`
	Camera           *string    `json:"camera"`
	EmergencyAlarm   *string    `json:"emergency_alarm"`
	Mileage          *string    `json:"mileage"`
	Oilmass          *string    `json:"oilmass"`
	VehicleSpeed     *string    `json:"vehicle_speed"`
	PowerAlarm       *string    `json:"power_alarm"`
	Pass             *string    `json:"pass"`
	AirConditioning  *string    `json:"air_conditioning"`
	AutoVehicleSpeed *string    `json:"auto_vehicle_speed"`
	IsImpulseSpeed   bool       `json:"is_impulse_speed"`
	FaultEndTime     *time.Time `json:"fault_end_time"`
	VideoPass        *string    `json:"video_pass"`
	CreateAt         time.Time  `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         bool       `json:"is_delete"`
}

// aggregated selection of "terminal_check_last"
type TerminalCheckLastAggregate struct {
	Aggregate *TerminalCheckLastAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_check_last"
type TerminalCheckLastAggregateFields struct {
	Avg        *TerminalCheckLastAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *TerminalCheckLastMaxFields        `json:"max"`
	Min        *TerminalCheckLastMinFields        `json:"min"`
	Stddev     *TerminalCheckLastStddevFields     `json:"stddev"`
	StddevPop  *TerminalCheckLastStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalCheckLastStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalCheckLastSumFields        `json:"sum"`
	VarPop     *TerminalCheckLastVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalCheckLastVarSampFields    `json:"var_samp"`
	Variance   *TerminalCheckLastVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_check_last"
type TerminalCheckLastAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_check_last'.
type TerminalCheckLastBoolExp struct {
	And                 []*TerminalCheckLastBoolExp     `json:"_and"`
	Not                 *TerminalCheckLastBoolExp       `json:"_not"`
	Or                  []*TerminalCheckLastBoolExp     `json:"_or"`
	ID                  *model.BigintComparisonExp      `json:"id"`
	TerminalCheckLastID *model.StringComparisonExp      `json:"terminal_check_last_id"`
	TerminalID          *model.StringComparisonExp      `json:"terminal_id"`
	Acc                 *model.StringComparisonExp      `json:"acc"`
	Brake               *model.StringComparisonExp      `json:"brake"`
	LeftLamp            *model.StringComparisonExp      `json:"left_lamp"`
	RightLamp           *model.StringComparisonExp      `json:"right_lamp"`
	NearLamp            *model.StringComparisonExp      `json:"near_lamp"`
	FarLamp             *model.StringComparisonExp      `json:"far_lamp"`
	LoudSpeaker         *model.StringComparisonExp      `json:"loud_speaker"`
	Locate              *model.StringComparisonExp      `json:"locate"`
	FrontDoor           *model.StringComparisonExp      `json:"front_door"`
	GpsOpen             *model.StringComparisonExp      `json:"gps_open"`
	BdOpen              *model.StringComparisonExp      `json:"bd_open"`
	Camera              *model.StringComparisonExp      `json:"camera"`
	VehicleSpeed        *model.StringComparisonExp      `json:"vehicle_speed"`
	Remark              *model.StringComparisonExp      `json:"remark"`
	CreateAt            *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy            *model.StringComparisonExp      `json:"create_by"`
	UpdateAt            *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy            *model.StringComparisonExp      `json:"update_by"`
	DeleteAt            *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy            *model.StringComparisonExp      `json:"delete_by"`
	IsDelete            *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_check_last"
type TerminalCheckLastIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_check_last"
type TerminalCheckLastInsertInput struct {
	TerminalCheckLastID string     `json:"terminal_check_last_id"`
	TerminalID          string     `json:"terminal_id"`
	Acc                 *string    `json:"acc"`
	Brake               *string    `json:"brake"`
	LeftLamp            *string    `json:"left_lamp"`
	RightLamp           *string    `json:"right_lamp"`
	NearLamp            *string    `json:"near_lamp"`
	FarLamp             *string    `json:"far_lamp"`
	LoudSpeaker         *string    `json:"loud_speaker"`
	Locate              *string    `json:"locate"`
	FrontDoor           *string    `json:"front_door"`
	GpsOpen             *string    `json:"gps_open"`
	BdOpen              *string    `json:"bd_open"`
	Camera              *string    `json:"camera"`
	VehicleSpeed        *string    `json:"vehicle_speed"`
	Remark              *string    `json:"remark"`
	CreateAt            time.Time  `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_check_last"
type TerminalCheckLastMaxFields struct {
	ID                  *int64     `json:"id"`
	TerminalCheckLastID *string    `json:"terminal_check_last_id"`
	TerminalID          *string    `json:"terminal_id"`
	Acc                 *string    `json:"acc"`
	Brake               *string    `json:"brake"`
	LeftLamp            *string    `json:"left_lamp"`
	RightLamp           *string    `json:"right_lamp"`
	NearLamp            *string    `json:"near_lamp"`
	FarLamp             *string    `json:"far_lamp"`
	LoudSpeaker         *string    `json:"loud_speaker"`
	Locate              *string    `json:"locate"`
	FrontDoor           *string    `json:"front_door"`
	GpsOpen             *string    `json:"gps_open"`
	BdOpen              *string    `json:"bd_open"`
	Camera              *string    `json:"camera"`
	VehicleSpeed        *string    `json:"vehicle_speed"`
	Remark              *string    `json:"remark"`
	CreateAt            *time.Time `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_check_last"
type TerminalCheckLastMinFields struct {
	ID                  *int64     `json:"id"`
	TerminalCheckLastID *string    `json:"terminal_check_last_id"`
	TerminalID          *string    `json:"terminal_id"`
	Acc                 *string    `json:"acc"`
	Brake               *string    `json:"brake"`
	LeftLamp            *string    `json:"left_lamp"`
	RightLamp           *string    `json:"right_lamp"`
	NearLamp            *string    `json:"near_lamp"`
	FarLamp             *string    `json:"far_lamp"`
	LoudSpeaker         *string    `json:"loud_speaker"`
	Locate              *string    `json:"locate"`
	FrontDoor           *string    `json:"front_door"`
	GpsOpen             *string    `json:"gps_open"`
	BdOpen              *string    `json:"bd_open"`
	Camera              *string    `json:"camera"`
	VehicleSpeed        *string    `json:"vehicle_speed"`
	Remark              *string    `json:"remark"`
	CreateAt            *time.Time `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_check_last"
type TerminalCheckLastMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.TerminalCheckLast `json:"returning"`
}

// ordering options when selecting data from "terminal_check_last"
type TerminalCheckLastOrderBy struct {
	ID                  *model.OrderBy `json:"id"`
	TerminalCheckLastID *model.OrderBy `json:"terminal_check_last_id"`
	TerminalID          *model.OrderBy `json:"terminal_id"`
	Acc                 *model.OrderBy `json:"acc"`
	Brake               *model.OrderBy `json:"brake"`
	LeftLamp            *model.OrderBy `json:"left_lamp"`
	RightLamp           *model.OrderBy `json:"right_lamp"`
	NearLamp            *model.OrderBy `json:"near_lamp"`
	FarLamp             *model.OrderBy `json:"far_lamp"`
	LoudSpeaker         *model.OrderBy `json:"loud_speaker"`
	Locate              *model.OrderBy `json:"locate"`
	FrontDoor           *model.OrderBy `json:"front_door"`
	GpsOpen             *model.OrderBy `json:"gps_open"`
	BdOpen              *model.OrderBy `json:"bd_open"`
	Camera              *model.OrderBy `json:"camera"`
	VehicleSpeed        *model.OrderBy `json:"vehicle_speed"`
	Remark              *model.OrderBy `json:"remark"`
	CreateAt            *model.OrderBy `json:"create_at"`
	CreateBy            *model.OrderBy `json:"create_by"`
	UpdateAt            *model.OrderBy `json:"update_at"`
	UpdateBy            *model.OrderBy `json:"update_by"`
	DeleteAt            *model.OrderBy `json:"delete_at"`
	DeleteBy            *model.OrderBy `json:"delete_by"`
	IsDelete            *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_check_last"
type TerminalCheckLastSetInput struct {
	ID                  *int64     `json:"id"`
	TerminalCheckLastID *string    `json:"terminal_check_last_id"`
	TerminalID          *string    `json:"terminal_id"`
	Acc                 *string    `json:"acc"`
	Brake               *string    `json:"brake"`
	LeftLamp            *string    `json:"left_lamp"`
	RightLamp           *string    `json:"right_lamp"`
	NearLamp            *string    `json:"near_lamp"`
	FarLamp             *string    `json:"far_lamp"`
	LoudSpeaker         *string    `json:"loud_speaker"`
	Locate              *string    `json:"locate"`
	FrontDoor           *string    `json:"front_door"`
	GpsOpen             *string    `json:"gps_open"`
	BdOpen              *string    `json:"bd_open"`
	Camera              *string    `json:"camera"`
	VehicleSpeed        *string    `json:"vehicle_speed"`
	Remark              *string    `json:"remark"`
	CreateAt            *time.Time `json:"create_at"`
	CreateBy            *string    `json:"create_by"`
	UpdateAt            *time.Time `json:"update_at"`
	UpdateBy            *string    `json:"update_by"`
	DeleteAt            *time.Time `json:"delete_at"`
	DeleteBy            *string    `json:"delete_by"`
	IsDelete            *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_check_last"
type TerminalCheckLastStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_check_last"
type TerminalCheckLastStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_check_last"
type TerminalCheckLastStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_check_last"
type TerminalCheckLastSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_check_last"
type TerminalCheckLastVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_check_last"
type TerminalCheckLastVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_check_last"
type TerminalCheckLastVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate max on columns of table "terminal_check"
type TerminalCheckMaxFields struct {
	ID               *int64     `json:"id"`
	TerminalCheckID  *string    `json:"terminal_check_id"`
	TerminalID       *string    `json:"terminal_id"`
	Acc              *string    `json:"acc"`
	Brake            *string    `json:"brake"`
	LeftLamp         *string    `json:"left_lamp"`
	RightLamp        *string    `json:"right_lamp"`
	NearLamp         *string    `json:"near_lamp"`
	FarLamp          *string    `json:"far_lamp"`
	LoudSpeaker      *string    `json:"loud_speaker"`
	Reverse          *string    `json:"reverse"`
	Locate           *string    `json:"locate"`
	FrontDoor        *string    `json:"front_door"`
	MiddleDoor       *string    `json:"middle_door"`
	BackDoor         *string    `json:"back_door"`
	GpsOpen          *string    `json:"gps_open"`
	BdOpen           *string    `json:"bd_open"`
	VoiceDevice      *string    `json:"voice_device"`
	Camera           *string    `json:"camera"`
	EmergencyAlarm   *string    `json:"emergency_alarm"`
	Mileage          *string    `json:"mileage"`
	Oilmass          *string    `json:"oilmass"`
	VehicleSpeed     *string    `json:"vehicle_speed"`
	PowerAlarm       *string    `json:"power_alarm"`
	Pass             *string    `json:"pass"`
	AirConditioning  *string    `json:"air_conditioning"`
	AutoVehicleSpeed *string    `json:"auto_vehicle_speed"`
	IsImpulseSpeed   *bool      `json:"is_impulse_speed"`
	FaultEndTime     *time.Time `json:"fault_end_time"`
	VideoPass        *string    `json:"video_pass"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_check"
type TerminalCheckMinFields struct {
	ID               *int64     `json:"id"`
	TerminalCheckID  *string    `json:"terminal_check_id"`
	TerminalID       *string    `json:"terminal_id"`
	Acc              *string    `json:"acc"`
	Brake            *string    `json:"brake"`
	LeftLamp         *string    `json:"left_lamp"`
	RightLamp        *string    `json:"right_lamp"`
	NearLamp         *string    `json:"near_lamp"`
	FarLamp          *string    `json:"far_lamp"`
	LoudSpeaker      *string    `json:"loud_speaker"`
	Reverse          *string    `json:"reverse"`
	Locate           *string    `json:"locate"`
	FrontDoor        *string    `json:"front_door"`
	MiddleDoor       *string    `json:"middle_door"`
	BackDoor         *string    `json:"back_door"`
	GpsOpen          *string    `json:"gps_open"`
	BdOpen           *string    `json:"bd_open"`
	VoiceDevice      *string    `json:"voice_device"`
	Camera           *string    `json:"camera"`
	EmergencyAlarm   *string    `json:"emergency_alarm"`
	Mileage          *string    `json:"mileage"`
	Oilmass          *string    `json:"oilmass"`
	VehicleSpeed     *string    `json:"vehicle_speed"`
	PowerAlarm       *string    `json:"power_alarm"`
	Pass             *string    `json:"pass"`
	AirConditioning  *string    `json:"air_conditioning"`
	AutoVehicleSpeed *string    `json:"auto_vehicle_speed"`
	IsImpulseSpeed   *bool      `json:"is_impulse_speed"`
	FaultEndTime     *time.Time `json:"fault_end_time"`
	VideoPass        *string    `json:"video_pass"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_check"
type TerminalCheckMutationResponse struct {
	AffectedRows int                     `json:"affected_rows"`
	Returning    []*model1.TerminalCheck `json:"returning"`
}

// ordering options when selecting data from "terminal_check"
type TerminalCheckOrderBy struct {
	ID               *model.OrderBy `json:"id"`
	TerminalCheckID  *model.OrderBy `json:"terminal_check_id"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
	Acc              *model.OrderBy `json:"acc"`
	Brake            *model.OrderBy `json:"brake"`
	LeftLamp         *model.OrderBy `json:"left_lamp"`
	RightLamp        *model.OrderBy `json:"right_lamp"`
	NearLamp         *model.OrderBy `json:"near_lamp"`
	FarLamp          *model.OrderBy `json:"far_lamp"`
	LoudSpeaker      *model.OrderBy `json:"loud_speaker"`
	Reverse          *model.OrderBy `json:"reverse"`
	Locate           *model.OrderBy `json:"locate"`
	FrontDoor        *model.OrderBy `json:"front_door"`
	MiddleDoor       *model.OrderBy `json:"middle_door"`
	BackDoor         *model.OrderBy `json:"back_door"`
	GpsOpen          *model.OrderBy `json:"gps_open"`
	BdOpen           *model.OrderBy `json:"bd_open"`
	VoiceDevice      *model.OrderBy `json:"voice_device"`
	Camera           *model.OrderBy `json:"camera"`
	EmergencyAlarm   *model.OrderBy `json:"emergency_alarm"`
	Mileage          *model.OrderBy `json:"mileage"`
	Oilmass          *model.OrderBy `json:"oilmass"`
	VehicleSpeed     *model.OrderBy `json:"vehicle_speed"`
	PowerAlarm       *model.OrderBy `json:"power_alarm"`
	Pass             *model.OrderBy `json:"pass"`
	AirConditioning  *model.OrderBy `json:"air_conditioning"`
	AutoVehicleSpeed *model.OrderBy `json:"auto_vehicle_speed"`
	IsImpulseSpeed   *model.OrderBy `json:"is_impulse_speed"`
	FaultEndTime     *model.OrderBy `json:"fault_end_time"`
	VideoPass        *model.OrderBy `json:"video_pass"`
	CreateAt         *model.OrderBy `json:"create_at"`
	CreateBy         *model.OrderBy `json:"create_by"`
	UpdateAt         *model.OrderBy `json:"update_at"`
	UpdateBy         *model.OrderBy `json:"update_by"`
	DeleteAt         *model.OrderBy `json:"delete_at"`
	DeleteBy         *model.OrderBy `json:"delete_by"`
	IsDelete         *model.OrderBy `json:"is_delete"`
}

// aggregated selection of "terminal_check_param"
type TerminalCheckParamAggregate struct {
	Aggregate *TerminalCheckParamAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_check_param"
type TerminalCheckParamAggregateFields struct {
	Avg        *TerminalCheckParamAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *TerminalCheckParamMaxFields        `json:"max"`
	Min        *TerminalCheckParamMinFields        `json:"min"`
	Stddev     *TerminalCheckParamStddevFields     `json:"stddev"`
	StddevPop  *TerminalCheckParamStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalCheckParamStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalCheckParamSumFields        `json:"sum"`
	VarPop     *TerminalCheckParamVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalCheckParamVarSampFields    `json:"var_samp"`
	Variance   *TerminalCheckParamVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_check_param"
type TerminalCheckParamAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_check_param'.
type TerminalCheckParamBoolExp struct {
	And                  []*TerminalCheckParamBoolExp `json:"_and"`
	Not                  *TerminalCheckParamBoolExp   `json:"_not"`
	Or                   []*TerminalCheckParamBoolExp `json:"_or"`
	ID                   *model.BigintComparisonExp   `json:"id"`
	TerminalCheckParamID *model.StringComparisonExp   `json:"terminal_check_param_id"`
	Acc                  *model.StringComparisonExp   `json:"acc"`
	Brake                *model.StringComparisonExp   `json:"brake"`
	LeftLamp             *model.StringComparisonExp   `json:"left_lamp"`
	RightLamp            *model.StringComparisonExp   `json:"right_lamp"`
	NearLamp             *model.StringComparisonExp   `json:"near_lamp"`
	FarLamp              *model.StringComparisonExp   `json:"far_lamp"`
	LoudSpeaker          *model.StringComparisonExp   `json:"loud_speaker"`
	Reverse              *model.StringComparisonExp   `json:"reverse"`
	Locate               *model.StringComparisonExp   `json:"locate"`
	FrontDoor            *model.StringComparisonExp   `json:"front_door"`
	MiddleDoor           *model.StringComparisonExp   `json:"middle_door"`
	BackDoor             *model.StringComparisonExp   `json:"back_door"`
	GpsOpen              *model.StringComparisonExp   `json:"gps_open"`
	BdOpen               *model.StringComparisonExp   `json:"bd_open"`
	VoiceDevice          *model.StringComparisonExp   `json:"voice_device"`
	Camera               *model.StringComparisonExp   `json:"camera"`
	EmergencyAlarm       *model.StringComparisonExp   `json:"emergency_alarm"`
	Mileage              *model.StringComparisonExp   `json:"mileage"`
	Oilmass              *model.StringComparisonExp   `json:"oilmass"`
	VehicleSpeed         *model.StringComparisonExp   `json:"vehicle_speed"`
	PowerAlarm           *model.StringComparisonExp   `json:"power_alarm"`
	Pass                 *model.StringComparisonExp   `json:"pass"`
}

// input type for incrementing integer column in table "terminal_check_param"
type TerminalCheckParamIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_check_param"
type TerminalCheckParamInsertInput struct {
	TerminalCheckParamID string  `json:"terminal_check_param_id"`
	Acc                  string  `json:"acc"`
	Brake                *string `json:"brake"`
	LeftLamp             *string `json:"left_lamp"`
	RightLamp            *string `json:"right_lamp"`
	NearLamp             *string `json:"near_lamp"`
	FarLamp              *string `json:"far_lamp"`
	LoudSpeaker          *string `json:"loud_speaker"`
	Reverse              *string `json:"reverse"`
	Locate               *string `json:"locate"`
	FrontDoor            *string `json:"front_door"`
	MiddleDoor           *string `json:"middle_door"`
	BackDoor             *string `json:"back_door"`
	GpsOpen              *string `json:"gps_open"`
	BdOpen               *string `json:"bd_open"`
	VoiceDevice          *string `json:"voice_device"`
	Camera               *string `json:"camera"`
	EmergencyAlarm       *string `json:"emergency_alarm"`
	Mileage              *string `json:"mileage"`
	Oilmass              *string `json:"oilmass"`
	VehicleSpeed         *string `json:"vehicle_speed"`
	PowerAlarm           *string `json:"power_alarm"`
	Pass                 *string `json:"pass"`
}

// aggregate max on columns of table "terminal_check_param"
type TerminalCheckParamMaxFields struct {
	ID                   *int64  `json:"id"`
	TerminalCheckParamID *string `json:"terminal_check_param_id"`
	Acc                  *string `json:"acc"`
	Brake                *string `json:"brake"`
	LeftLamp             *string `json:"left_lamp"`
	RightLamp            *string `json:"right_lamp"`
	NearLamp             *string `json:"near_lamp"`
	FarLamp              *string `json:"far_lamp"`
	LoudSpeaker          *string `json:"loud_speaker"`
	Reverse              *string `json:"reverse"`
	Locate               *string `json:"locate"`
	FrontDoor            *string `json:"front_door"`
	MiddleDoor           *string `json:"middle_door"`
	BackDoor             *string `json:"back_door"`
	GpsOpen              *string `json:"gps_open"`
	BdOpen               *string `json:"bd_open"`
	VoiceDevice          *string `json:"voice_device"`
	Camera               *string `json:"camera"`
	EmergencyAlarm       *string `json:"emergency_alarm"`
	Mileage              *string `json:"mileage"`
	Oilmass              *string `json:"oilmass"`
	VehicleSpeed         *string `json:"vehicle_speed"`
	PowerAlarm           *string `json:"power_alarm"`
	Pass                 *string `json:"pass"`
}

// aggregate min on columns of table "terminal_check_param"
type TerminalCheckParamMinFields struct {
	ID                   *int64  `json:"id"`
	TerminalCheckParamID *string `json:"terminal_check_param_id"`
	Acc                  *string `json:"acc"`
	Brake                *string `json:"brake"`
	LeftLamp             *string `json:"left_lamp"`
	RightLamp            *string `json:"right_lamp"`
	NearLamp             *string `json:"near_lamp"`
	FarLamp              *string `json:"far_lamp"`
	LoudSpeaker          *string `json:"loud_speaker"`
	Reverse              *string `json:"reverse"`
	Locate               *string `json:"locate"`
	FrontDoor            *string `json:"front_door"`
	MiddleDoor           *string `json:"middle_door"`
	BackDoor             *string `json:"back_door"`
	GpsOpen              *string `json:"gps_open"`
	BdOpen               *string `json:"bd_open"`
	VoiceDevice          *string `json:"voice_device"`
	Camera               *string `json:"camera"`
	EmergencyAlarm       *string `json:"emergency_alarm"`
	Mileage              *string `json:"mileage"`
	Oilmass              *string `json:"oilmass"`
	VehicleSpeed         *string `json:"vehicle_speed"`
	PowerAlarm           *string `json:"power_alarm"`
	Pass                 *string `json:"pass"`
}

// response of any mutation on the table "terminal_check_param"
type TerminalCheckParamMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.TerminalCheckParam `json:"returning"`
}

// ordering options when selecting data from "terminal_check_param"
type TerminalCheckParamOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	TerminalCheckParamID *model.OrderBy `json:"terminal_check_param_id"`
	Acc                  *model.OrderBy `json:"acc"`
	Brake                *model.OrderBy `json:"brake"`
	LeftLamp             *model.OrderBy `json:"left_lamp"`
	RightLamp            *model.OrderBy `json:"right_lamp"`
	NearLamp             *model.OrderBy `json:"near_lamp"`
	FarLamp              *model.OrderBy `json:"far_lamp"`
	LoudSpeaker          *model.OrderBy `json:"loud_speaker"`
	Reverse              *model.OrderBy `json:"reverse"`
	Locate               *model.OrderBy `json:"locate"`
	FrontDoor            *model.OrderBy `json:"front_door"`
	MiddleDoor           *model.OrderBy `json:"middle_door"`
	BackDoor             *model.OrderBy `json:"back_door"`
	GpsOpen              *model.OrderBy `json:"gps_open"`
	BdOpen               *model.OrderBy `json:"bd_open"`
	VoiceDevice          *model.OrderBy `json:"voice_device"`
	Camera               *model.OrderBy `json:"camera"`
	EmergencyAlarm       *model.OrderBy `json:"emergency_alarm"`
	Mileage              *model.OrderBy `json:"mileage"`
	Oilmass              *model.OrderBy `json:"oilmass"`
	VehicleSpeed         *model.OrderBy `json:"vehicle_speed"`
	PowerAlarm           *model.OrderBy `json:"power_alarm"`
	Pass                 *model.OrderBy `json:"pass"`
}

// input type for updating data in table "terminal_check_param"
type TerminalCheckParamSetInput struct {
	ID                   *int64  `json:"id"`
	TerminalCheckParamID *string `json:"terminal_check_param_id"`
	Acc                  *string `json:"acc"`
	Brake                *string `json:"brake"`
	LeftLamp             *string `json:"left_lamp"`
	RightLamp            *string `json:"right_lamp"`
	NearLamp             *string `json:"near_lamp"`
	FarLamp              *string `json:"far_lamp"`
	LoudSpeaker          *string `json:"loud_speaker"`
	Reverse              *string `json:"reverse"`
	Locate               *string `json:"locate"`
	FrontDoor            *string `json:"front_door"`
	MiddleDoor           *string `json:"middle_door"`
	BackDoor             *string `json:"back_door"`
	GpsOpen              *string `json:"gps_open"`
	BdOpen               *string `json:"bd_open"`
	VoiceDevice          *string `json:"voice_device"`
	Camera               *string `json:"camera"`
	EmergencyAlarm       *string `json:"emergency_alarm"`
	Mileage              *string `json:"mileage"`
	Oilmass              *string `json:"oilmass"`
	VehicleSpeed         *string `json:"vehicle_speed"`
	PowerAlarm           *string `json:"power_alarm"`
	Pass                 *string `json:"pass"`
}

// aggregate stddev on columns of table "terminal_check_param"
type TerminalCheckParamStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_check_param"
type TerminalCheckParamStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_check_param"
type TerminalCheckParamStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_check_param"
type TerminalCheckParamSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_check_param"
type TerminalCheckParamVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_check_param"
type TerminalCheckParamVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_check_param"
type TerminalCheckParamVarianceFields struct {
	ID *int64 `json:"id"`
}

// input type for updating data in table "terminal_check"
type TerminalCheckSetInput struct {
	ID               *int64     `json:"id"`
	TerminalCheckID  *string    `json:"terminal_check_id"`
	TerminalID       *string    `json:"terminal_id"`
	Acc              *string    `json:"acc"`
	Brake            *string    `json:"brake"`
	LeftLamp         *string    `json:"left_lamp"`
	RightLamp        *string    `json:"right_lamp"`
	NearLamp         *string    `json:"near_lamp"`
	FarLamp          *string    `json:"far_lamp"`
	LoudSpeaker      *string    `json:"loud_speaker"`
	Reverse          *string    `json:"reverse"`
	Locate           *string    `json:"locate"`
	FrontDoor        *string    `json:"front_door"`
	MiddleDoor       *string    `json:"middle_door"`
	BackDoor         *string    `json:"back_door"`
	GpsOpen          *string    `json:"gps_open"`
	BdOpen           *string    `json:"bd_open"`
	VoiceDevice      *string    `json:"voice_device"`
	Camera           *string    `json:"camera"`
	EmergencyAlarm   *string    `json:"emergency_alarm"`
	Mileage          *string    `json:"mileage"`
	Oilmass          *string    `json:"oilmass"`
	VehicleSpeed     *string    `json:"vehicle_speed"`
	PowerAlarm       *string    `json:"power_alarm"`
	Pass             *string    `json:"pass"`
	AirConditioning  *string    `json:"air_conditioning"`
	AutoVehicleSpeed *string    `json:"auto_vehicle_speed"`
	IsImpulseSpeed   *bool      `json:"is_impulse_speed"`
	FaultEndTime     *time.Time `json:"fault_end_time"`
	VideoPass        *string    `json:"video_pass"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_check"
type TerminalCheckStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_check"
type TerminalCheckStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_check"
type TerminalCheckStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_check"
type TerminalCheckSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_check"
type TerminalCheckVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_check"
type TerminalCheckVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_check"
type TerminalCheckVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "terminal_factory"
type TerminalFactoryAggregate struct {
	Aggregate *TerminalFactoryAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_factory"
type TerminalFactoryAggregateFields struct {
	Avg        *TerminalFactoryAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *TerminalFactoryMaxFields        `json:"max"`
	Min        *TerminalFactoryMinFields        `json:"min"`
	Stddev     *TerminalFactoryStddevFields     `json:"stddev"`
	StddevPop  *TerminalFactoryStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalFactoryStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalFactorySumFields        `json:"sum"`
	VarPop     *TerminalFactoryVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalFactoryVarSampFields    `json:"var_samp"`
	Variance   *TerminalFactoryVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_factory"
type TerminalFactoryAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_factory'.
type TerminalFactoryBoolExp struct {
	And              []*TerminalFactoryBoolExp       `json:"_and"`
	Not              *TerminalFactoryBoolExp         `json:"_not"`
	Or               []*TerminalFactoryBoolExp       `json:"_or"`
	ID               *model.BigintComparisonExp      `json:"id"`
	FactoryID        *model.StringComparisonExp      `json:"factory_id"`
	FactoryName      *model.StringComparisonExp      `json:"factory_name"`
	Remark           *model.StringComparisonExp      `json:"remark"`
	Contact          *model.StringComparisonExp      `json:"contact"`
	ContactPhone     *model.StringComparisonExp      `json:"contact_phone"`
	Address          *model.StringComparisonExp      `json:"address"`
	TechContact      *model.StringComparisonExp      `json:"tech_contact"`
	TechContactPhone *model.StringComparisonExp      `json:"tech_contact_phone"`
	CreateAt         *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy         *model.StringComparisonExp      `json:"create_by"`
	UpdateAt         *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy         *model.StringComparisonExp      `json:"update_by"`
	DeleteAt         *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy         *model.StringComparisonExp      `json:"delete_by"`
	IsDelete         *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_factory"
type TerminalFactoryIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_factory"
type TerminalFactoryInsertInput struct {
	FactoryID        string     `json:"factory_id"`
	FactoryName      string     `json:"factory_name"`
	Remark           *string    `json:"remark"`
	Contact          *string    `json:"contact"`
	ContactPhone     *string    `json:"contact_phone"`
	Address          *string    `json:"address"`
	TechContact      *string    `json:"tech_contact"`
	TechContactPhone *string    `json:"tech_contact_phone"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_factory"
type TerminalFactoryMaxFields struct {
	ID               *int64     `json:"id"`
	FactoryID        *string    `json:"factory_id"`
	FactoryName      *string    `json:"factory_name"`
	Remark           *string    `json:"remark"`
	Contact          *string    `json:"contact"`
	ContactPhone     *string    `json:"contact_phone"`
	Address          *string    `json:"address"`
	TechContact      *string    `json:"tech_contact"`
	TechContactPhone *string    `json:"tech_contact_phone"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_factory"
type TerminalFactoryMinFields struct {
	ID               *int64     `json:"id"`
	FactoryID        *string    `json:"factory_id"`
	FactoryName      *string    `json:"factory_name"`
	Remark           *string    `json:"remark"`
	Contact          *string    `json:"contact"`
	ContactPhone     *string    `json:"contact_phone"`
	Address          *string    `json:"address"`
	TechContact      *string    `json:"tech_contact"`
	TechContactPhone *string    `json:"tech_contact_phone"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_factory"
type TerminalFactoryMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.TerminalFactory `json:"returning"`
}

// ordering options when selecting data from "terminal_factory"
type TerminalFactoryOrderBy struct {
	ID               *model.OrderBy `json:"id"`
	FactoryID        *model.OrderBy `json:"factory_id"`
	FactoryName      *model.OrderBy `json:"factory_name"`
	Remark           *model.OrderBy `json:"remark"`
	Contact          *model.OrderBy `json:"contact"`
	ContactPhone     *model.OrderBy `json:"contact_phone"`
	Address          *model.OrderBy `json:"address"`
	TechContact      *model.OrderBy `json:"tech_contact"`
	TechContactPhone *model.OrderBy `json:"tech_contact_phone"`
	CreateAt         *model.OrderBy `json:"create_at"`
	CreateBy         *model.OrderBy `json:"create_by"`
	UpdateAt         *model.OrderBy `json:"update_at"`
	UpdateBy         *model.OrderBy `json:"update_by"`
	DeleteAt         *model.OrderBy `json:"delete_at"`
	DeleteBy         *model.OrderBy `json:"delete_by"`
	IsDelete         *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_factory"
type TerminalFactorySetInput struct {
	ID               *int64     `json:"id"`
	FactoryID        *string    `json:"factory_id"`
	FactoryName      *string    `json:"factory_name"`
	Remark           *string    `json:"remark"`
	Contact          *string    `json:"contact"`
	ContactPhone     *string    `json:"contact_phone"`
	Address          *string    `json:"address"`
	TechContact      *string    `json:"tech_contact"`
	TechContactPhone *string    `json:"tech_contact_phone"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
	IsDelete         *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_factory"
type TerminalFactoryStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_factory"
type TerminalFactoryStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_factory"
type TerminalFactoryStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_factory"
type TerminalFactorySumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_factory"
type TerminalFactoryVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_factory"
type TerminalFactoryVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_factory"
type TerminalFactoryVarianceFields struct {
	ID *int64 `json:"id"`
}

// input type for incrementing integer column in table "terminal"
type TerminalIncInput struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// input type for inserting data into table "terminal"
type TerminalInsertInput struct {
	TerminalID       string     `json:"terminal_id"`
	FirstInstallTime *time.Time `json:"first_install_time"`
	Imei             string     `json:"imei"`
	ProduceDate      *time.Time `json:"produce_date"`
	TypeID           *string    `json:"type_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VersionNumber    *string    `json:"version_number"`
	IsReg            *bool      `json:"is_reg"`
	SimID            *string    `json:"sim_id"`
	RecordDate       *time.Time `json:"record_date"`
	DeptID           *string    `json:"dept_id"`
	ProxyrgID        *string    `json:"proxyrg_id"`
	InstallManID     *string    `json:"install_man_id"`
	RegID            *string    `json:"reg_id"`
	ProvinceID       *string    `json:"province_id"`
	CityID           *string    `json:"city_id"`
	AuthKey          *string    `json:"auth_key"`
	IsSupportPhoto   bool       `json:"is_support_photo"`
	MockAuthKey      *string    `json:"mock_auth_key"`
	SprgID           *string    `json:"sprg_id"`
	RemoveReason     *string    `json:"remove_reason"`
	GuaranteeDate    *time.Time `json:"guarantee_date"`
	CameraNum        *int       `json:"camera_num"`
	AdasModel        *string    `json:"adas_model"`
	ChannelNo        *string    `json:"channel_no"`
	ProveProxyrgID   *string    `json:"prove_proxyrg_id"`
	IsDelete         bool       `json:"is_delete"`
	Remarks          *string    `json:"remarks"`
	CreateAt         time.Time  `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
}

// aggregate max on columns of table "terminal"
type TerminalMaxFields struct {
	ID               *int64     `json:"id"`
	TerminalID       *string    `json:"terminal_id"`
	FirstInstallTime *time.Time `json:"first_install_time"`
	Imei             *string    `json:"imei"`
	ProduceDate      *time.Time `json:"produce_date"`
	TypeID           *string    `json:"type_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VersionNumber    *string    `json:"version_number"`
	IsReg            *bool      `json:"is_reg"`
	SimID            *string    `json:"sim_id"`
	RecordDate       *time.Time `json:"record_date"`
	DeptID           *string    `json:"dept_id"`
	ProxyrgID        *string    `json:"proxyrg_id"`
	InstallManID     *string    `json:"install_man_id"`
	RegID            *string    `json:"reg_id"`
	ProvinceID       *string    `json:"province_id"`
	CityID           *string    `json:"city_id"`
	AuthKey          *string    `json:"auth_key"`
	IsSupportPhoto   *bool      `json:"is_support_photo"`
	MockAuthKey      *string    `json:"mock_auth_key"`
	SprgID           *string    `json:"sprg_id"`
	RemoveReason     *string    `json:"remove_reason"`
	GuaranteeDate    *time.Time `json:"guarantee_date"`
	CameraNum        *int       `json:"camera_num"`
	AdasModel        *string    `json:"adas_model"`
	ChannelNo        *string    `json:"channel_no"`
	ProveProxyrgID   *string    `json:"prove_proxyrg_id"`
	IsDelete         *bool      `json:"is_delete"`
	Remarks          *string    `json:"remarks"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
}

// aggregate min on columns of table "terminal"
type TerminalMinFields struct {
	ID               *int64     `json:"id"`
	TerminalID       *string    `json:"terminal_id"`
	FirstInstallTime *time.Time `json:"first_install_time"`
	Imei             *string    `json:"imei"`
	ProduceDate      *time.Time `json:"produce_date"`
	TypeID           *string    `json:"type_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VersionNumber    *string    `json:"version_number"`
	IsReg            *bool      `json:"is_reg"`
	SimID            *string    `json:"sim_id"`
	RecordDate       *time.Time `json:"record_date"`
	DeptID           *string    `json:"dept_id"`
	ProxyrgID        *string    `json:"proxyrg_id"`
	InstallManID     *string    `json:"install_man_id"`
	RegID            *string    `json:"reg_id"`
	ProvinceID       *string    `json:"province_id"`
	CityID           *string    `json:"city_id"`
	AuthKey          *string    `json:"auth_key"`
	IsSupportPhoto   *bool      `json:"is_support_photo"`
	MockAuthKey      *string    `json:"mock_auth_key"`
	SprgID           *string    `json:"sprg_id"`
	RemoveReason     *string    `json:"remove_reason"`
	GuaranteeDate    *time.Time `json:"guarantee_date"`
	CameraNum        *int       `json:"camera_num"`
	AdasModel        *string    `json:"adas_model"`
	ChannelNo        *string    `json:"channel_no"`
	ProveProxyrgID   *string    `json:"prove_proxyrg_id"`
	IsDelete         *bool      `json:"is_delete"`
	Remarks          *string    `json:"remarks"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
}

// aggregated selection of "terminal_modal"
type TerminalModalAggregate struct {
	Aggregate *TerminalModalAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_modal"
type TerminalModalAggregateFields struct {
	Avg        *TerminalModalAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *TerminalModalMaxFields        `json:"max"`
	Min        *TerminalModalMinFields        `json:"min"`
	Stddev     *TerminalModalStddevFields     `json:"stddev"`
	StddevPop  *TerminalModalStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalModalStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalModalSumFields        `json:"sum"`
	VarPop     *TerminalModalVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalModalVarSampFields    `json:"var_samp"`
	Variance   *TerminalModalVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_modal"
type TerminalModalAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_modal'.
type TerminalModalBoolExp struct {
	And                   []*TerminalModalBoolExp         `json:"_and"`
	Not                   *TerminalModalBoolExp           `json:"_not"`
	Or                    []*TerminalModalBoolExp         `json:"_or"`
	ID                    *model.BigintComparisonExp      `json:"id"`
	TerminalModalID       *model.StringComparisonExp      `json:"terminal_modal_id"`
	FactoryID             *model.StringComparisonExp      `json:"factory_id"`
	TerminalTypeID        *model.StringComparisonExp      `json:"terminal_type_id"`
	ModalName             *model.StringComparisonExp      `json:"modal_name"`
	Remark                *model.StringComparisonExp      `json:"remark"`
	RecordNo              *model.StringComparisonExp      `json:"record_no"`
	ProxyrgID             *model.StringComparisonExp      `json:"proxyrg_id"`
	AdasModal             *model.StringComparisonExp      `json:"adas_modal"`
	IsSlagCarTeminal      *model.BooleanComparisonExp     `json:"is_slag_car_teminal"`
	IsTransportDept4g     *model.BooleanComparisonExp     `json:"is_transport_dept_4g"`
	IsTestingSituation    *model.BooleanComparisonExp     `json:"is_testing_situation"`
	IsElectronicsPostCard *model.BooleanComparisonExp     `json:"is_electronics_post_card"`
	CreateAt              *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy              *model.StringComparisonExp      `json:"create_by"`
	UpdateAt              *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy              *model.StringComparisonExp      `json:"update_by"`
	DeleteAt              *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy              *model.StringComparisonExp      `json:"delete_by"`
	IsDelete              *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_modal"
type TerminalModalIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_modal"
type TerminalModalInsertInput struct {
	TerminalModalID       string     `json:"terminal_modal_id"`
	FactoryID             *string    `json:"factory_id"`
	TerminalTypeID        *string    `json:"terminal_type_id"`
	ModalName             *string    `json:"modal_name"`
	Remark                *string    `json:"remark"`
	RecordNo              *string    `json:"record_no"`
	ProxyrgID             *string    `json:"proxyrg_id"`
	AdasModal             *string    `json:"adas_modal"`
	IsSlagCarTeminal      *bool      `json:"is_slag_car_teminal"`
	IsTransportDept4g     *bool      `json:"is_transport_dept_4g"`
	IsTestingSituation    *bool      `json:"is_testing_situation"`
	IsElectronicsPostCard *bool      `json:"is_electronics_post_card"`
	CreateAt              time.Time  `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_modal"
type TerminalModalMaxFields struct {
	ID                    *int64     `json:"id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	FactoryID             *string    `json:"factory_id"`
	TerminalTypeID        *string    `json:"terminal_type_id"`
	ModalName             *string    `json:"modal_name"`
	Remark                *string    `json:"remark"`
	RecordNo              *string    `json:"record_no"`
	ProxyrgID             *string    `json:"proxyrg_id"`
	AdasModal             *string    `json:"adas_modal"`
	IsSlagCarTeminal      *bool      `json:"is_slag_car_teminal"`
	IsTransportDept4g     *bool      `json:"is_transport_dept_4g"`
	IsTestingSituation    *bool      `json:"is_testing_situation"`
	IsElectronicsPostCard *bool      `json:"is_electronics_post_card"`
	CreateAt              *time.Time `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_modal"
type TerminalModalMinFields struct {
	ID                    *int64     `json:"id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	FactoryID             *string    `json:"factory_id"`
	TerminalTypeID        *string    `json:"terminal_type_id"`
	ModalName             *string    `json:"modal_name"`
	Remark                *string    `json:"remark"`
	RecordNo              *string    `json:"record_no"`
	ProxyrgID             *string    `json:"proxyrg_id"`
	AdasModal             *string    `json:"adas_modal"`
	IsSlagCarTeminal      *bool      `json:"is_slag_car_teminal"`
	IsTransportDept4g     *bool      `json:"is_transport_dept_4g"`
	IsTestingSituation    *bool      `json:"is_testing_situation"`
	IsElectronicsPostCard *bool      `json:"is_electronics_post_card"`
	CreateAt              *time.Time `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_modal"
type TerminalModalMutationResponse struct {
	AffectedRows int                     `json:"affected_rows"`
	Returning    []*model1.TerminalModal `json:"returning"`
}

// ordering options when selecting data from "terminal_modal"
type TerminalModalOrderBy struct {
	ID                    *model.OrderBy `json:"id"`
	TerminalModalID       *model.OrderBy `json:"terminal_modal_id"`
	FactoryID             *model.OrderBy `json:"factory_id"`
	TerminalTypeID        *model.OrderBy `json:"terminal_type_id"`
	ModalName             *model.OrderBy `json:"modal_name"`
	Remark                *model.OrderBy `json:"remark"`
	RecordNo              *model.OrderBy `json:"record_no"`
	ProxyrgID             *model.OrderBy `json:"proxyrg_id"`
	AdasModal             *model.OrderBy `json:"adas_modal"`
	IsSlagCarTeminal      *model.OrderBy `json:"is_slag_car_teminal"`
	IsTransportDept4g     *model.OrderBy `json:"is_transport_dept_4g"`
	IsTestingSituation    *model.OrderBy `json:"is_testing_situation"`
	IsElectronicsPostCard *model.OrderBy `json:"is_electronics_post_card"`
	CreateAt              *model.OrderBy `json:"create_at"`
	CreateBy              *model.OrderBy `json:"create_by"`
	UpdateAt              *model.OrderBy `json:"update_at"`
	UpdateBy              *model.OrderBy `json:"update_by"`
	DeleteAt              *model.OrderBy `json:"delete_at"`
	DeleteBy              *model.OrderBy `json:"delete_by"`
	IsDelete              *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_modal"
type TerminalModalSetInput struct {
	ID                    *int64     `json:"id"`
	TerminalModalID       *string    `json:"terminal_modal_id"`
	FactoryID             *string    `json:"factory_id"`
	TerminalTypeID        *string    `json:"terminal_type_id"`
	ModalName             *string    `json:"modal_name"`
	Remark                *string    `json:"remark"`
	RecordNo              *string    `json:"record_no"`
	ProxyrgID             *string    `json:"proxyrg_id"`
	AdasModal             *string    `json:"adas_modal"`
	IsSlagCarTeminal      *bool      `json:"is_slag_car_teminal"`
	IsTransportDept4g     *bool      `json:"is_transport_dept_4g"`
	IsTestingSituation    *bool      `json:"is_testing_situation"`
	IsElectronicsPostCard *bool      `json:"is_electronics_post_card"`
	CreateAt              *time.Time `json:"create_at"`
	CreateBy              *string    `json:"create_by"`
	UpdateAt              *time.Time `json:"update_at"`
	UpdateBy              *string    `json:"update_by"`
	DeleteAt              *time.Time `json:"delete_at"`
	DeleteBy              *string    `json:"delete_by"`
	IsDelete              *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_modal"
type TerminalModalStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_modal"
type TerminalModalStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_modal"
type TerminalModalStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_modal"
type TerminalModalSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_modal"
type TerminalModalVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_modal"
type TerminalModalVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_modal"
type TerminalModalVarianceFields struct {
	ID *int64 `json:"id"`
}

// response of any mutation on the table "terminal"
type TerminalMutationResponse struct {
	AffectedRows int                `json:"affected_rows"`
	Returning    []*model1.Terminal `json:"returning"`
}

// aggregated selection of "terminal_oper_log"
type TerminalOperLogAggregate struct {
	Aggregate *TerminalOperLogAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_oper_log"
type TerminalOperLogAggregateFields struct {
	Avg        *TerminalOperLogAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *TerminalOperLogMaxFields        `json:"max"`
	Min        *TerminalOperLogMinFields        `json:"min"`
	Stddev     *TerminalOperLogStddevFields     `json:"stddev"`
	StddevPop  *TerminalOperLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalOperLogStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalOperLogSumFields        `json:"sum"`
	VarPop     *TerminalOperLogVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalOperLogVarSampFields    `json:"var_samp"`
	Variance   *TerminalOperLogVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_oper_log"
type TerminalOperLogAvgFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_oper_log'.
type TerminalOperLogBoolExp struct {
	And         []*TerminalOperLogBoolExp       `json:"_and"`
	Not         *TerminalOperLogBoolExp         `json:"_not"`
	Or          []*TerminalOperLogBoolExp       `json:"_or"`
	ID          *model.BigintComparisonExp      `json:"id"`
	LogID       *model.StringComparisonExp      `json:"log_id"`
	TerminalID  *model.StringComparisonExp      `json:"terminal_id"`
	OperateType *model.IntComparisonExp         `json:"operate_type"`
	ReqInfo     *model.StringComparisonExp      `json:"req_info"`
	RespInfo    *model.StringComparisonExp      `json:"resp_info"`
	OperDetail  *model.StringComparisonExp      `json:"oper_detail"`
	State       *model.IntComparisonExp         `json:"state"`
	ReqTime     *model.TimestamptzComparisonExp `json:"req_time"`
	RespTime    *model.TimestamptzComparisonExp `json:"resp_time"`
	CreateAt    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy    *model.StringComparisonExp      `json:"create_by"`
	UpdateAt    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy    *model.StringComparisonExp      `json:"update_by"`
	DeleteAt    *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy    *model.StringComparisonExp      `json:"delete_by"`
	IsDelete    *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_oper_log"
type TerminalOperLogIncInput struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// input type for inserting data into table "terminal_oper_log"
type TerminalOperLogInsertInput struct {
	LogID       string     `json:"log_id"`
	TerminalID  string     `json:"terminal_id"`
	OperateType int        `json:"operate_type"`
	ReqInfo     *string    `json:"req_info"`
	RespInfo    *string    `json:"resp_info"`
	OperDetail  *string    `json:"oper_detail"`
	State       int        `json:"state"`
	ReqTime     time.Time  `json:"req_time"`
	RespTime    *time.Time `json:"resp_time"`
	CreateAt    time.Time  `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_oper_log"
type TerminalOperLogMaxFields struct {
	ID          *int64     `json:"id"`
	LogID       *string    `json:"log_id"`
	TerminalID  *string    `json:"terminal_id"`
	OperateType *int       `json:"operate_type"`
	ReqInfo     *string    `json:"req_info"`
	RespInfo    *string    `json:"resp_info"`
	OperDetail  *string    `json:"oper_detail"`
	State       *int       `json:"state"`
	ReqTime     *time.Time `json:"req_time"`
	RespTime    *time.Time `json:"resp_time"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_oper_log"
type TerminalOperLogMinFields struct {
	ID          *int64     `json:"id"`
	LogID       *string    `json:"log_id"`
	TerminalID  *string    `json:"terminal_id"`
	OperateType *int       `json:"operate_type"`
	ReqInfo     *string    `json:"req_info"`
	RespInfo    *string    `json:"resp_info"`
	OperDetail  *string    `json:"oper_detail"`
	State       *int       `json:"state"`
	ReqTime     *time.Time `json:"req_time"`
	RespTime    *time.Time `json:"resp_time"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_oper_log"
type TerminalOperLogMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.TerminalOperLog `json:"returning"`
}

// ordering options when selecting data from "terminal_oper_log"
type TerminalOperLogOrderBy struct {
	ID          *model.OrderBy `json:"id"`
	LogID       *model.OrderBy `json:"log_id"`
	TerminalID  *model.OrderBy `json:"terminal_id"`
	OperateType *model.OrderBy `json:"operate_type"`
	ReqInfo     *model.OrderBy `json:"req_info"`
	RespInfo    *model.OrderBy `json:"resp_info"`
	OperDetail  *model.OrderBy `json:"oper_detail"`
	State       *model.OrderBy `json:"state"`
	ReqTime     *model.OrderBy `json:"req_time"`
	RespTime    *model.OrderBy `json:"resp_time"`
	CreateAt    *model.OrderBy `json:"create_at"`
	CreateBy    *model.OrderBy `json:"create_by"`
	UpdateAt    *model.OrderBy `json:"update_at"`
	UpdateBy    *model.OrderBy `json:"update_by"`
	DeleteAt    *model.OrderBy `json:"delete_at"`
	DeleteBy    *model.OrderBy `json:"delete_by"`
	IsDelete    *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_oper_log"
type TerminalOperLogSetInput struct {
	ID          *int64     `json:"id"`
	LogID       *string    `json:"log_id"`
	TerminalID  *string    `json:"terminal_id"`
	OperateType *int       `json:"operate_type"`
	ReqInfo     *string    `json:"req_info"`
	RespInfo    *string    `json:"resp_info"`
	OperDetail  *string    `json:"oper_detail"`
	State       *int       `json:"state"`
	ReqTime     *time.Time `json:"req_time"`
	RespTime    *time.Time `json:"resp_time"`
	CreateAt    *time.Time `json:"create_at"`
	CreateBy    *string    `json:"create_by"`
	UpdateAt    *time.Time `json:"update_at"`
	UpdateBy    *string    `json:"update_by"`
	DeleteAt    *time.Time `json:"delete_at"`
	DeleteBy    *string    `json:"delete_by"`
	IsDelete    *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_oper_log"
type TerminalOperLogStddevFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// aggregate stddev_pop on columns of table "terminal_oper_log"
type TerminalOperLogStddevPopFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// aggregate stddev_samp on columns of table "terminal_oper_log"
type TerminalOperLogStddevSampFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// aggregate sum on columns of table "terminal_oper_log"
type TerminalOperLogSumFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// aggregate var_pop on columns of table "terminal_oper_log"
type TerminalOperLogVarPopFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// aggregate var_samp on columns of table "terminal_oper_log"
type TerminalOperLogVarSampFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// aggregate variance on columns of table "terminal_oper_log"
type TerminalOperLogVarianceFields struct {
	ID          *int64 `json:"id"`
	OperateType *int   `json:"operate_type"`
	State       *int   `json:"state"`
}

// ordering options when selecting data from "terminal"
type TerminalOrderBy struct {
	ID               *model.OrderBy `json:"id"`
	TerminalID       *model.OrderBy `json:"terminal_id"`
	FirstInstallTime *model.OrderBy `json:"first_install_time"`
	Imei             *model.OrderBy `json:"imei"`
	ProduceDate      *model.OrderBy `json:"produce_date"`
	TypeID           *model.OrderBy `json:"type_id"`
	VehicleID        *model.OrderBy `json:"vehicle_id"`
	VersionNumber    *model.OrderBy `json:"version_number"`
	IsReg            *model.OrderBy `json:"is_reg"`
	SimID            *model.OrderBy `json:"sim_id"`
	RecordDate       *model.OrderBy `json:"record_date"`
	DeptID           *model.OrderBy `json:"dept_id"`
	ProxyrgID        *model.OrderBy `json:"proxyrg_id"`
	InstallManID     *model.OrderBy `json:"install_man_id"`
	RegID            *model.OrderBy `json:"reg_id"`
	ProvinceID       *model.OrderBy `json:"province_id"`
	CityID           *model.OrderBy `json:"city_id"`
	AuthKey          *model.OrderBy `json:"auth_key"`
	IsSupportPhoto   *model.OrderBy `json:"is_support_photo"`
	MockAuthKey      *model.OrderBy `json:"mock_auth_key"`
	SprgID           *model.OrderBy `json:"sprg_id"`
	RemoveReason     *model.OrderBy `json:"remove_reason"`
	GuaranteeDate    *model.OrderBy `json:"guarantee_date"`
	CameraNum        *model.OrderBy `json:"camera_num"`
	AdasModel        *model.OrderBy `json:"adas_model"`
	ChannelNo        *model.OrderBy `json:"channel_no"`
	ProveProxyrgID   *model.OrderBy `json:"prove_proxyrg_id"`
	IsDelete         *model.OrderBy `json:"is_delete"`
	Remarks          *model.OrderBy `json:"remarks"`
	CreateAt         *model.OrderBy `json:"create_at"`
	CreateBy         *model.OrderBy `json:"create_by"`
	UpdateAt         *model.OrderBy `json:"update_at"`
	UpdateBy         *model.OrderBy `json:"update_by"`
	DeleteAt         *model.OrderBy `json:"delete_at"`
	DeleteBy         *model.OrderBy `json:"delete_by"`
}

// aggregated selection of "terminal_param_config"
type TerminalParamConfigAggregate struct {
	Aggregate *TerminalParamConfigAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_param_config"
type TerminalParamConfigAggregateFields struct {
	Avg        *TerminalParamConfigAvgFields        `json:"avg"`
	Count      *int                                 `json:"count"`
	Max        *TerminalParamConfigMaxFields        `json:"max"`
	Min        *TerminalParamConfigMinFields        `json:"min"`
	Stddev     *TerminalParamConfigStddevFields     `json:"stddev"`
	StddevPop  *TerminalParamConfigStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalParamConfigStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalParamConfigSumFields        `json:"sum"`
	VarPop     *TerminalParamConfigVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalParamConfigVarSampFields    `json:"var_samp"`
	Variance   *TerminalParamConfigVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_param_config"
type TerminalParamConfigAvgFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_param_config'.
type TerminalParamConfigBoolExp struct {
	And           []*TerminalParamConfigBoolExp   `json:"_and"`
	Not           *TerminalParamConfigBoolExp     `json:"_not"`
	Or            []*TerminalParamConfigBoolExp   `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	ConfigID      *model.StringComparisonExp      `json:"config_id"`
	ParamItemID   *model.StringComparisonExp      `json:"param_item_id"`
	ParamValue    *model.StringComparisonExp      `json:"param_value"`
	TerminalID    *model.StringComparisonExp      `json:"terminal_id"`
	SuccessValue  *model.StringComparisonExp      `json:"success_value"`
	LastState     *model.IntComparisonExp         `json:"last_state"`
	LastStateTime *model.TimestamptzComparisonExp `json:"last_state_time"`
	SuccessTime   *model.TimestamptzComparisonExp `json:"success_time"`
	LastOperator  *model.StringComparisonExp      `json:"last_operator"`
	CreateAt      *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy      *model.StringComparisonExp      `json:"create_by"`
	UpdateAt      *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy      *model.StringComparisonExp      `json:"update_by"`
	DeleteAt      *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy      *model.StringComparisonExp      `json:"delete_by"`
	IsDelete      *model.BooleanComparisonExp     `json:"is_delete"`
	Remark        *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "terminal_param_config"
type TerminalParamConfigIncInput struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// input type for inserting data into table "terminal_param_config"
type TerminalParamConfigInsertInput struct {
	ConfigID      string     `json:"config_id"`
	ParamItemID   string     `json:"param_item_id"`
	ParamValue    *string    `json:"param_value"`
	TerminalID    *string    `json:"terminal_id"`
	SuccessValue  *string    `json:"success_value"`
	LastState     *int       `json:"last_state"`
	LastStateTime *time.Time `json:"last_state_time"`
	SuccessTime   *time.Time `json:"success_time"`
	LastOperator  *string    `json:"last_operator"`
	CreateAt      time.Time  `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      bool       `json:"is_delete"`
	Remark        *string    `json:"remark"`
}

// aggregate max on columns of table "terminal_param_config"
type TerminalParamConfigMaxFields struct {
	ID            *int64     `json:"id"`
	ConfigID      *string    `json:"config_id"`
	ParamItemID   *string    `json:"param_item_id"`
	ParamValue    *string    `json:"param_value"`
	TerminalID    *string    `json:"terminal_id"`
	SuccessValue  *string    `json:"success_value"`
	LastState     *int       `json:"last_state"`
	LastStateTime *time.Time `json:"last_state_time"`
	SuccessTime   *time.Time `json:"success_time"`
	LastOperator  *string    `json:"last_operator"`
	CreateAt      *time.Time `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      *bool      `json:"is_delete"`
	Remark        *string    `json:"remark"`
}

// aggregate min on columns of table "terminal_param_config"
type TerminalParamConfigMinFields struct {
	ID            *int64     `json:"id"`
	ConfigID      *string    `json:"config_id"`
	ParamItemID   *string    `json:"param_item_id"`
	ParamValue    *string    `json:"param_value"`
	TerminalID    *string    `json:"terminal_id"`
	SuccessValue  *string    `json:"success_value"`
	LastState     *int       `json:"last_state"`
	LastStateTime *time.Time `json:"last_state_time"`
	SuccessTime   *time.Time `json:"success_time"`
	LastOperator  *string    `json:"last_operator"`
	CreateAt      *time.Time `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      *bool      `json:"is_delete"`
	Remark        *string    `json:"remark"`
}

// response of any mutation on the table "terminal_param_config"
type TerminalParamConfigMutationResponse struct {
	AffectedRows int                           `json:"affected_rows"`
	Returning    []*model1.TerminalParamConfig `json:"returning"`
}

// ordering options when selecting data from "terminal_param_config"
type TerminalParamConfigOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	ConfigID      *model.OrderBy `json:"config_id"`
	ParamItemID   *model.OrderBy `json:"param_item_id"`
	ParamValue    *model.OrderBy `json:"param_value"`
	TerminalID    *model.OrderBy `json:"terminal_id"`
	SuccessValue  *model.OrderBy `json:"success_value"`
	LastState     *model.OrderBy `json:"last_state"`
	LastStateTime *model.OrderBy `json:"last_state_time"`
	SuccessTime   *model.OrderBy `json:"success_time"`
	LastOperator  *model.OrderBy `json:"last_operator"`
	CreateAt      *model.OrderBy `json:"create_at"`
	CreateBy      *model.OrderBy `json:"create_by"`
	UpdateAt      *model.OrderBy `json:"update_at"`
	UpdateBy      *model.OrderBy `json:"update_by"`
	DeleteAt      *model.OrderBy `json:"delete_at"`
	DeleteBy      *model.OrderBy `json:"delete_by"`
	IsDelete      *model.OrderBy `json:"is_delete"`
	Remark        *model.OrderBy `json:"remark"`
}

// input type for updating data in table "terminal_param_config"
type TerminalParamConfigSetInput struct {
	ID            *int64     `json:"id"`
	ConfigID      *string    `json:"config_id"`
	ParamItemID   *string    `json:"param_item_id"`
	ParamValue    *string    `json:"param_value"`
	TerminalID    *string    `json:"terminal_id"`
	SuccessValue  *string    `json:"success_value"`
	LastState     *int       `json:"last_state"`
	LastStateTime *time.Time `json:"last_state_time"`
	SuccessTime   *time.Time `json:"success_time"`
	LastOperator  *string    `json:"last_operator"`
	CreateAt      *time.Time `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      *bool      `json:"is_delete"`
	Remark        *string    `json:"remark"`
}

// aggregate stddev on columns of table "terminal_param_config"
type TerminalParamConfigStddevFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregate stddev_pop on columns of table "terminal_param_config"
type TerminalParamConfigStddevPopFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregate stddev_samp on columns of table "terminal_param_config"
type TerminalParamConfigStddevSampFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregate sum on columns of table "terminal_param_config"
type TerminalParamConfigSumFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregate var_pop on columns of table "terminal_param_config"
type TerminalParamConfigVarPopFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregate var_samp on columns of table "terminal_param_config"
type TerminalParamConfigVarSampFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregate variance on columns of table "terminal_param_config"
type TerminalParamConfigVarianceFields struct {
	ID        *int64 `json:"id"`
	LastState *int   `json:"last_state"`
}

// aggregated selection of "terminal_param_item"
type TerminalParamItemAggregate struct {
	Aggregate *TerminalParamItemAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_param_item"
type TerminalParamItemAggregateFields struct {
	Avg        *TerminalParamItemAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *TerminalParamItemMaxFields        `json:"max"`
	Min        *TerminalParamItemMinFields        `json:"min"`
	Stddev     *TerminalParamItemStddevFields     `json:"stddev"`
	StddevPop  *TerminalParamItemStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalParamItemStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalParamItemSumFields        `json:"sum"`
	VarPop     *TerminalParamItemVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalParamItemVarSampFields    `json:"var_samp"`
	Variance   *TerminalParamItemVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_param_item"
type TerminalParamItemAvgFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_param_item'.
type TerminalParamItemBoolExp struct {
	And           []*TerminalParamItemBoolExp     `json:"_and"`
	Not           *TerminalParamItemBoolExp       `json:"_not"`
	Or            []*TerminalParamItemBoolExp     `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	ParamItemID   *model.StringComparisonExp      `json:"param_item_id"`
	ParamItemName *model.StringComparisonExp      `json:"param_item_name"`
	ParamTypeID   *model.StringComparisonExp      `json:"param_type_id"`
	DataType      *model.IntComparisonExp         `json:"data_type"`
	IsEnum        *model.BooleanComparisonExp     `json:"is_enum"`
	HasSubparam   *model.BooleanComparisonExp     `json:"has_subparam"`
	CreateAt      *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy      *model.StringComparisonExp      `json:"create_by"`
	UpdateAt      *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy      *model.StringComparisonExp      `json:"update_by"`
	DeleteAt      *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy      *model.StringComparisonExp      `json:"delete_by"`
	IsDelete      *model.BooleanComparisonExp     `json:"is_delete"`
	Remark        *model.StringComparisonExp      `json:"remark"`
	DictID        *model.StringComparisonExp      `json:"dict_id"`
}

// input type for incrementing integer column in table "terminal_param_item"
type TerminalParamItemIncInput struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// input type for inserting data into table "terminal_param_item"
type TerminalParamItemInsertInput struct {
	ParamItemID   string     `json:"param_item_id"`
	ParamItemName string     `json:"param_item_name"`
	ParamTypeID   string     `json:"param_type_id"`
	DataType      int        `json:"data_type"`
	IsEnum        bool       `json:"is_enum"`
	HasSubparam   bool       `json:"has_subparam"`
	CreateAt      time.Time  `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      bool       `json:"is_delete"`
	Remark        *string    `json:"remark"`
	DictID        *string    `json:"dict_id"`
}

// aggregate max on columns of table "terminal_param_item"
type TerminalParamItemMaxFields struct {
	ID            *int64     `json:"id"`
	ParamItemID   *string    `json:"param_item_id"`
	ParamItemName *string    `json:"param_item_name"`
	ParamTypeID   *string    `json:"param_type_id"`
	DataType      *int       `json:"data_type"`
	IsEnum        *bool      `json:"is_enum"`
	HasSubparam   *bool      `json:"has_subparam"`
	CreateAt      *time.Time `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      *bool      `json:"is_delete"`
	Remark        *string    `json:"remark"`
	DictID        *string    `json:"dict_id"`
}

// aggregate min on columns of table "terminal_param_item"
type TerminalParamItemMinFields struct {
	ID            *int64     `json:"id"`
	ParamItemID   *string    `json:"param_item_id"`
	ParamItemName *string    `json:"param_item_name"`
	ParamTypeID   *string    `json:"param_type_id"`
	DataType      *int       `json:"data_type"`
	IsEnum        *bool      `json:"is_enum"`
	HasSubparam   *bool      `json:"has_subparam"`
	CreateAt      *time.Time `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      *bool      `json:"is_delete"`
	Remark        *string    `json:"remark"`
	DictID        *string    `json:"dict_id"`
}

// response of any mutation on the table "terminal_param_item"
type TerminalParamItemMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.TerminalParamItem `json:"returning"`
}

// ordering options when selecting data from "terminal_param_item"
type TerminalParamItemOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	ParamItemID   *model.OrderBy `json:"param_item_id"`
	ParamItemName *model.OrderBy `json:"param_item_name"`
	ParamTypeID   *model.OrderBy `json:"param_type_id"`
	DataType      *model.OrderBy `json:"data_type"`
	IsEnum        *model.OrderBy `json:"is_enum"`
	HasSubparam   *model.OrderBy `json:"has_subparam"`
	CreateAt      *model.OrderBy `json:"create_at"`
	CreateBy      *model.OrderBy `json:"create_by"`
	UpdateAt      *model.OrderBy `json:"update_at"`
	UpdateBy      *model.OrderBy `json:"update_by"`
	DeleteAt      *model.OrderBy `json:"delete_at"`
	DeleteBy      *model.OrderBy `json:"delete_by"`
	IsDelete      *model.OrderBy `json:"is_delete"`
	Remark        *model.OrderBy `json:"remark"`
	DictID        *model.OrderBy `json:"dict_id"`
}

// input type for updating data in table "terminal_param_item"
type TerminalParamItemSetInput struct {
	ID            *int64     `json:"id"`
	ParamItemID   *string    `json:"param_item_id"`
	ParamItemName *string    `json:"param_item_name"`
	ParamTypeID   *string    `json:"param_type_id"`
	DataType      *int       `json:"data_type"`
	IsEnum        *bool      `json:"is_enum"`
	HasSubparam   *bool      `json:"has_subparam"`
	CreateAt      *time.Time `json:"create_at"`
	CreateBy      *string    `json:"create_by"`
	UpdateAt      *time.Time `json:"update_at"`
	UpdateBy      *string    `json:"update_by"`
	DeleteAt      *time.Time `json:"delete_at"`
	DeleteBy      *string    `json:"delete_by"`
	IsDelete      *bool      `json:"is_delete"`
	Remark        *string    `json:"remark"`
	DictID        *string    `json:"dict_id"`
}

// aggregate stddev on columns of table "terminal_param_item"
type TerminalParamItemStddevFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregate stddev_pop on columns of table "terminal_param_item"
type TerminalParamItemStddevPopFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregate stddev_samp on columns of table "terminal_param_item"
type TerminalParamItemStddevSampFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregate sum on columns of table "terminal_param_item"
type TerminalParamItemSumFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregate var_pop on columns of table "terminal_param_item"
type TerminalParamItemVarPopFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregate var_samp on columns of table "terminal_param_item"
type TerminalParamItemVarSampFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregate variance on columns of table "terminal_param_item"
type TerminalParamItemVarianceFields struct {
	ID       *int64 `json:"id"`
	DataType *int   `json:"data_type"`
}

// aggregated selection of "terminal_param_sub"
type TerminalParamSubAggregate struct {
	Aggregate *TerminalParamSubAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_param_sub"
type TerminalParamSubAggregateFields struct {
	Avg        *TerminalParamSubAvgFields        `json:"avg"`
	Count      *int                              `json:"count"`
	Max        *TerminalParamSubMaxFields        `json:"max"`
	Min        *TerminalParamSubMinFields        `json:"min"`
	Stddev     *TerminalParamSubStddevFields     `json:"stddev"`
	StddevPop  *TerminalParamSubStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalParamSubStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalParamSubSumFields        `json:"sum"`
	VarPop     *TerminalParamSubVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalParamSubVarSampFields    `json:"var_samp"`
	Variance   *TerminalParamSubVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_param_sub"
type TerminalParamSubAvgFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_param_sub'.
type TerminalParamSubBoolExp struct {
	And          []*TerminalParamSubBoolExp      `json:"_and"`
	Not          *TerminalParamSubBoolExp        `json:"_not"`
	Or           []*TerminalParamSubBoolExp      `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	ParamSubID   *model.StringComparisonExp      `json:"param_sub_id"`
	ParamID      *model.StringComparisonExp      `json:"param_id"`
	BitStart     *model.BigintComparisonExp      `json:"bit_start"`
	BitEnd       *model.BigintComparisonExp      `json:"bit_end"`
	ParamSubName *model.StringComparisonExp      `json:"param_sub_name"`
	IsEnum       *model.BooleanComparisonExp     `json:"is_enum"`
	EnumDictID   *model.StringComparisonExp      `json:"enum_dict_id"`
	ParamValue   *model.StringComparisonExp      `json:"param_value"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
	Remark       *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "terminal_param_sub"
type TerminalParamSubIncInput struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// input type for inserting data into table "terminal_param_sub"
type TerminalParamSubInsertInput struct {
	ParamSubID   string     `json:"param_sub_id"`
	ParamID      string     `json:"param_id"`
	BitStart     int64      `json:"bit_start"`
	BitEnd       int64      `json:"bit_end"`
	ParamSubName string     `json:"param_sub_name"`
	IsEnum       bool       `json:"is_enum"`
	EnumDictID   *string    `json:"enum_dict_id"`
	ParamValue   *string    `json:"param_value"`
	CreateAt     time.Time  `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// aggregate max on columns of table "terminal_param_sub"
type TerminalParamSubMaxFields struct {
	ID           *int64     `json:"id"`
	ParamSubID   *string    `json:"param_sub_id"`
	ParamID      *string    `json:"param_id"`
	BitStart     *int64     `json:"bit_start"`
	BitEnd       *int64     `json:"bit_end"`
	ParamSubName *string    `json:"param_sub_name"`
	IsEnum       *bool      `json:"is_enum"`
	EnumDictID   *string    `json:"enum_dict_id"`
	ParamValue   *string    `json:"param_value"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// aggregate min on columns of table "terminal_param_sub"
type TerminalParamSubMinFields struct {
	ID           *int64     `json:"id"`
	ParamSubID   *string    `json:"param_sub_id"`
	ParamID      *string    `json:"param_id"`
	BitStart     *int64     `json:"bit_start"`
	BitEnd       *int64     `json:"bit_end"`
	ParamSubName *string    `json:"param_sub_name"`
	IsEnum       *bool      `json:"is_enum"`
	EnumDictID   *string    `json:"enum_dict_id"`
	ParamValue   *string    `json:"param_value"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// response of any mutation on the table "terminal_param_sub"
type TerminalParamSubMutationResponse struct {
	AffectedRows int                        `json:"affected_rows"`
	Returning    []*model1.TerminalParamSub `json:"returning"`
}

// ordering options when selecting data from "terminal_param_sub"
type TerminalParamSubOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	ParamSubID   *model.OrderBy `json:"param_sub_id"`
	ParamID      *model.OrderBy `json:"param_id"`
	BitStart     *model.OrderBy `json:"bit_start"`
	BitEnd       *model.OrderBy `json:"bit_end"`
	ParamSubName *model.OrderBy `json:"param_sub_name"`
	IsEnum       *model.OrderBy `json:"is_enum"`
	EnumDictID   *model.OrderBy `json:"enum_dict_id"`
	ParamValue   *model.OrderBy `json:"param_value"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
	Remark       *model.OrderBy `json:"remark"`
}

// input type for updating data in table "terminal_param_sub"
type TerminalParamSubSetInput struct {
	ID           *int64     `json:"id"`
	ParamSubID   *string    `json:"param_sub_id"`
	ParamID      *string    `json:"param_id"`
	BitStart     *int64     `json:"bit_start"`
	BitEnd       *int64     `json:"bit_end"`
	ParamSubName *string    `json:"param_sub_name"`
	IsEnum       *bool      `json:"is_enum"`
	EnumDictID   *string    `json:"enum_dict_id"`
	ParamValue   *string    `json:"param_value"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remark       *string    `json:"remark"`
}

// aggregate stddev on columns of table "terminal_param_sub"
type TerminalParamSubStddevFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregate stddev_pop on columns of table "terminal_param_sub"
type TerminalParamSubStddevPopFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregate stddev_samp on columns of table "terminal_param_sub"
type TerminalParamSubStddevSampFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregate sum on columns of table "terminal_param_sub"
type TerminalParamSubSumFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregate var_pop on columns of table "terminal_param_sub"
type TerminalParamSubVarPopFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregate var_samp on columns of table "terminal_param_sub"
type TerminalParamSubVarSampFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregate variance on columns of table "terminal_param_sub"
type TerminalParamSubVarianceFields struct {
	ID       *int64 `json:"id"`
	BitStart *int64 `json:"bit_start"`
	BitEnd   *int64 `json:"bit_end"`
}

// aggregated selection of "terminal_param_type"
type TerminalParamTypeAggregate struct {
	Aggregate *TerminalParamTypeAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_param_type"
type TerminalParamTypeAggregateFields struct {
	Avg        *TerminalParamTypeAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *TerminalParamTypeMaxFields        `json:"max"`
	Min        *TerminalParamTypeMinFields        `json:"min"`
	Stddev     *TerminalParamTypeStddevFields     `json:"stddev"`
	StddevPop  *TerminalParamTypeStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalParamTypeStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalParamTypeSumFields        `json:"sum"`
	VarPop     *TerminalParamTypeVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalParamTypeVarSampFields    `json:"var_samp"`
	Variance   *TerminalParamTypeVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_param_type"
type TerminalParamTypeAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_param_type'.
type TerminalParamTypeBoolExp struct {
	And               []*TerminalParamTypeBoolExp     `json:"_and"`
	Not               *TerminalParamTypeBoolExp       `json:"_not"`
	Or                []*TerminalParamTypeBoolExp     `json:"_or"`
	ID                *model.BigintComparisonExp      `json:"id"`
	ParamTypeID       *model.StringComparisonExp      `json:"param_type_id"`
	ParamTypeName     *model.StringComparisonExp      `json:"param_type_name"`
	ParentParamTypeID *model.StringComparisonExp      `json:"parent_param_type_id"`
	CreateAt          *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy          *model.StringComparisonExp      `json:"create_by"`
	UpdateAt          *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy          *model.StringComparisonExp      `json:"update_by"`
	DeleteAt          *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy          *model.StringComparisonExp      `json:"delete_by"`
	IsDelete          *model.BooleanComparisonExp     `json:"is_delete"`
	Remark            *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "terminal_param_type"
type TerminalParamTypeIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_param_type"
type TerminalParamTypeInsertInput struct {
	ParamTypeID       string     `json:"param_type_id"`
	ParamTypeName     *string    `json:"param_type_name"`
	ParentParamTypeID *string    `json:"parent_param_type_id"`
	CreateAt          time.Time  `json:"create_at"`
	CreateBy          *string    `json:"create_by"`
	UpdateAt          *time.Time `json:"update_at"`
	UpdateBy          *string    `json:"update_by"`
	DeleteAt          *time.Time `json:"delete_at"`
	DeleteBy          *string    `json:"delete_by"`
	IsDelete          bool       `json:"is_delete"`
	Remark            *string    `json:"remark"`
}

// aggregate max on columns of table "terminal_param_type"
type TerminalParamTypeMaxFields struct {
	ID                *int64     `json:"id"`
	ParamTypeID       *string    `json:"param_type_id"`
	ParamTypeName     *string    `json:"param_type_name"`
	ParentParamTypeID *string    `json:"parent_param_type_id"`
	CreateAt          *time.Time `json:"create_at"`
	CreateBy          *string    `json:"create_by"`
	UpdateAt          *time.Time `json:"update_at"`
	UpdateBy          *string    `json:"update_by"`
	DeleteAt          *time.Time `json:"delete_at"`
	DeleteBy          *string    `json:"delete_by"`
	IsDelete          *bool      `json:"is_delete"`
	Remark            *string    `json:"remark"`
}

// aggregate min on columns of table "terminal_param_type"
type TerminalParamTypeMinFields struct {
	ID                *int64     `json:"id"`
	ParamTypeID       *string    `json:"param_type_id"`
	ParamTypeName     *string    `json:"param_type_name"`
	ParentParamTypeID *string    `json:"parent_param_type_id"`
	CreateAt          *time.Time `json:"create_at"`
	CreateBy          *string    `json:"create_by"`
	UpdateAt          *time.Time `json:"update_at"`
	UpdateBy          *string    `json:"update_by"`
	DeleteAt          *time.Time `json:"delete_at"`
	DeleteBy          *string    `json:"delete_by"`
	IsDelete          *bool      `json:"is_delete"`
	Remark            *string    `json:"remark"`
}

// response of any mutation on the table "terminal_param_type"
type TerminalParamTypeMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.TerminalParamType `json:"returning"`
}

// ordering options when selecting data from "terminal_param_type"
type TerminalParamTypeOrderBy struct {
	ID                *model.OrderBy `json:"id"`
	ParamTypeID       *model.OrderBy `json:"param_type_id"`
	ParamTypeName     *model.OrderBy `json:"param_type_name"`
	ParentParamTypeID *model.OrderBy `json:"parent_param_type_id"`
	CreateAt          *model.OrderBy `json:"create_at"`
	CreateBy          *model.OrderBy `json:"create_by"`
	UpdateAt          *model.OrderBy `json:"update_at"`
	UpdateBy          *model.OrderBy `json:"update_by"`
	DeleteAt          *model.OrderBy `json:"delete_at"`
	DeleteBy          *model.OrderBy `json:"delete_by"`
	IsDelete          *model.OrderBy `json:"is_delete"`
	Remark            *model.OrderBy `json:"remark"`
}

// input type for updating data in table "terminal_param_type"
type TerminalParamTypeSetInput struct {
	ID                *int64     `json:"id"`
	ParamTypeID       *string    `json:"param_type_id"`
	ParamTypeName     *string    `json:"param_type_name"`
	ParentParamTypeID *string    `json:"parent_param_type_id"`
	CreateAt          *time.Time `json:"create_at"`
	CreateBy          *string    `json:"create_by"`
	UpdateAt          *time.Time `json:"update_at"`
	UpdateBy          *string    `json:"update_by"`
	DeleteAt          *time.Time `json:"delete_at"`
	DeleteBy          *string    `json:"delete_by"`
	IsDelete          *bool      `json:"is_delete"`
	Remark            *string    `json:"remark"`
}

// aggregate stddev on columns of table "terminal_param_type"
type TerminalParamTypeStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_param_type"
type TerminalParamTypeStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_param_type"
type TerminalParamTypeStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_param_type"
type TerminalParamTypeSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_param_type"
type TerminalParamTypeVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_param_type"
type TerminalParamTypeVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_param_type"
type TerminalParamTypeVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "terminal_prove"
type TerminalProveAggregate struct {
	Aggregate *TerminalProveAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_prove"
type TerminalProveAggregateFields struct {
	Avg        *TerminalProveAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *TerminalProveMaxFields        `json:"max"`
	Min        *TerminalProveMinFields        `json:"min"`
	Stddev     *TerminalProveStddevFields     `json:"stddev"`
	StddevPop  *TerminalProveStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalProveStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalProveSumFields        `json:"sum"`
	VarPop     *TerminalProveVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalProveVarSampFields    `json:"var_samp"`
	Variance   *TerminalProveVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_prove"
type TerminalProveAvgFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_prove'.
type TerminalProveBoolExp struct {
	And                    []*TerminalProveBoolExp         `json:"_and"`
	Not                    *TerminalProveBoolExp           `json:"_not"`
	Or                     []*TerminalProveBoolExp         `json:"_or"`
	ID                     *model.BigintComparisonExp      `json:"id"`
	ProveID                *model.StringComparisonExp      `json:"prove_id"`
	PlateNumber            *model.StringComparisonExp      `json:"plate_number"`
	PlateColor             *model.StringComparisonExp      `json:"plate_color"`
	VehicleType            *model.IntComparisonExp         `json:"vehicle_type"`
	ContractNum            *model.StringComparisonExp      `json:"contract_num"`
	SignDate               *model.TimestamptzComparisonExp `json:"sign_date"`
	ContractEndTime        *model.TimestamptzComparisonExp `json:"contract_end_time"`
	TerminalTypeID         *model.StringComparisonExp      `json:"terminal_type_id"`
	TerminalID             *model.StringComparisonExp      `json:"terminal_id"`
	TerminalImei           *model.StringComparisonExp      `json:"terminal_imei"`
	InstallDate            *model.TimestamptzComparisonExp `json:"install_date"`
	TerminalRecordNum      *model.StringComparisonExp      `json:"terminal_record_num"`
	InstallManSignPhoto    *model.StringComparisonExp      `json:"install_man_sign_photo"`
	ProxyrgID              *model.StringComparisonExp      `json:"proxyrg_id"`
	ElectronicInduction    *model.BooleanComparisonExp     `json:"electronic_induction"`
	TestReportNum          *model.StringComparisonExp      `json:"test_report_num"`
	Batch                  *model.StringComparisonExp      `json:"batch"`
	PlateformNum           *model.StringComparisonExp      `json:"plateform_num"`
	PlatformRecordNum      *model.StringComparisonExp      `json:"platform_record_num"`
	BusinessLicenseNum     *model.StringComparisonExp      `json:"business_license_num"`
	BusinessLicenseEndDate *model.TimestamptzComparisonExp `json:"business_license_end_date"`
	LevelProtectRecordNum  *model.StringComparisonExp      `json:"level_protect_record_num"`
	LevelProtectSignDate   *model.TimestamptzComparisonExp `json:"level_protect_sign_date"`
	EnterpriseID           *model.StringComparisonExp      `json:"enterprise_id"`
	FillManID              *model.StringComparisonExp      `json:"fill_man_id"`
	VerifyManID            *model.StringComparisonExp      `json:"verify_man_id"`
	SealManID              *model.StringComparisonExp      `json:"seal_man_id"`
	FillManName            *model.StringComparisonExp      `json:"fill_man_name"`
	VerifyManName          *model.StringComparisonExp      `json:"verify_man_name"`
	SealManName            *model.StringComparisonExp      `json:"seal_man_name"`
	CheckStatus            *model.IntComparisonExp         `json:"check_status"`
	IsCheckEnd             *model.BooleanComparisonExp     `json:"is_check_end"`
	CheckTime              *model.TimestamptzComparisonExp `json:"check_time"`
	FillTime               *model.TimestamptzComparisonExp `json:"fill_time"`
	FillID                 *model.StringComparisonExp      `json:"fill_id"`
	VehicleID              *model.StringComparisonExp      `json:"vehicle_id"`
	CheckRemark            *model.StringComparisonExp      `json:"check_remark"`
	FillRemark             *model.StringComparisonExp      `json:"fill_remark"`
	DelRemark              *model.StringComparisonExp      `json:"del_remark"`
	SvNum                  *model.StringComparisonExp      `json:"sv_num"`
	CreateAt               *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy               *model.StringComparisonExp      `json:"create_by"`
	UpdateAt               *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy               *model.StringComparisonExp      `json:"update_by"`
	DeleteAt               *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy               *model.StringComparisonExp      `json:"delete_by"`
	IsDelete               *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_prove"
type TerminalProveIncInput struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// input type for inserting data into table "terminal_prove"
type TerminalProveInsertInput struct {
	ProveID                string     `json:"prove_id"`
	PlateNumber            string     `json:"plate_number"`
	PlateColor             *string    `json:"plate_color"`
	VehicleType            *int       `json:"vehicle_type"`
	ContractNum            *string    `json:"contract_num"`
	SignDate               *time.Time `json:"sign_date"`
	ContractEndTime        *time.Time `json:"contract_end_time"`
	TerminalTypeID         *string    `json:"terminal_type_id"`
	TerminalID             *string    `json:"terminal_id"`
	TerminalImei           *string    `json:"terminal_imei"`
	InstallDate            *time.Time `json:"install_date"`
	TerminalRecordNum      *string    `json:"terminal_record_num"`
	InstallManSignPhoto    *string    `json:"install_man_sign_photo"`
	ProxyrgID              *string    `json:"proxyrg_id"`
	ElectronicInduction    bool       `json:"electronic_induction"`
	TestReportNum          *string    `json:"test_report_num"`
	Batch                  *string    `json:"batch"`
	PlateformNum           *string    `json:"plateform_num"`
	PlatformRecordNum      *string    `json:"platform_record_num"`
	BusinessLicenseNum     *string    `json:"business_license_num"`
	BusinessLicenseEndDate *time.Time `json:"business_license_end_date"`
	LevelProtectRecordNum  *string    `json:"level_protect_record_num"`
	LevelProtectSignDate   *time.Time `json:"level_protect_sign_date"`
	EnterpriseID           *string    `json:"enterprise_id"`
	FillManID              *string    `json:"fill_man_id"`
	VerifyManID            *string    `json:"verify_man_id"`
	SealManID              *string    `json:"seal_man_id"`
	FillManName            *string    `json:"fill_man_name"`
	VerifyManName          *string    `json:"verify_man_name"`
	SealManName            *string    `json:"seal_man_name"`
	CheckStatus            *int       `json:"check_status"`
	IsCheckEnd             bool       `json:"is_check_end"`
	CheckTime              *time.Time `json:"check_time"`
	FillTime               *time.Time `json:"fill_time"`
	FillID                 *string    `json:"fill_id"`
	VehicleID              *string    `json:"vehicle_id"`
	CheckRemark            *string    `json:"check_remark"`
	FillRemark             *string    `json:"fill_remark"`
	DelRemark              *string    `json:"del_remark"`
	SvNum                  *string    `json:"sv_num"`
	CreateAt               time.Time  `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_prove"
type TerminalProveMaxFields struct {
	ID                     *int64     `json:"id"`
	ProveID                *string    `json:"prove_id"`
	PlateNumber            *string    `json:"plate_number"`
	PlateColor             *string    `json:"plate_color"`
	VehicleType            *int       `json:"vehicle_type"`
	ContractNum            *string    `json:"contract_num"`
	SignDate               *time.Time `json:"sign_date"`
	ContractEndTime        *time.Time `json:"contract_end_time"`
	TerminalTypeID         *string    `json:"terminal_type_id"`
	TerminalID             *string    `json:"terminal_id"`
	TerminalImei           *string    `json:"terminal_imei"`
	InstallDate            *time.Time `json:"install_date"`
	TerminalRecordNum      *string    `json:"terminal_record_num"`
	InstallManSignPhoto    *string    `json:"install_man_sign_photo"`
	ProxyrgID              *string    `json:"proxyrg_id"`
	ElectronicInduction    *bool      `json:"electronic_induction"`
	TestReportNum          *string    `json:"test_report_num"`
	Batch                  *string    `json:"batch"`
	PlateformNum           *string    `json:"plateform_num"`
	PlatformRecordNum      *string    `json:"platform_record_num"`
	BusinessLicenseNum     *string    `json:"business_license_num"`
	BusinessLicenseEndDate *time.Time `json:"business_license_end_date"`
	LevelProtectRecordNum  *string    `json:"level_protect_record_num"`
	LevelProtectSignDate   *time.Time `json:"level_protect_sign_date"`
	EnterpriseID           *string    `json:"enterprise_id"`
	FillManID              *string    `json:"fill_man_id"`
	VerifyManID            *string    `json:"verify_man_id"`
	SealManID              *string    `json:"seal_man_id"`
	FillManName            *string    `json:"fill_man_name"`
	VerifyManName          *string    `json:"verify_man_name"`
	SealManName            *string    `json:"seal_man_name"`
	CheckStatus            *int       `json:"check_status"`
	IsCheckEnd             *bool      `json:"is_check_end"`
	CheckTime              *time.Time `json:"check_time"`
	FillTime               *time.Time `json:"fill_time"`
	FillID                 *string    `json:"fill_id"`
	VehicleID              *string    `json:"vehicle_id"`
	CheckRemark            *string    `json:"check_remark"`
	FillRemark             *string    `json:"fill_remark"`
	DelRemark              *string    `json:"del_remark"`
	SvNum                  *string    `json:"sv_num"`
	CreateAt               *time.Time `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_prove"
type TerminalProveMinFields struct {
	ID                     *int64     `json:"id"`
	ProveID                *string    `json:"prove_id"`
	PlateNumber            *string    `json:"plate_number"`
	PlateColor             *string    `json:"plate_color"`
	VehicleType            *int       `json:"vehicle_type"`
	ContractNum            *string    `json:"contract_num"`
	SignDate               *time.Time `json:"sign_date"`
	ContractEndTime        *time.Time `json:"contract_end_time"`
	TerminalTypeID         *string    `json:"terminal_type_id"`
	TerminalID             *string    `json:"terminal_id"`
	TerminalImei           *string    `json:"terminal_imei"`
	InstallDate            *time.Time `json:"install_date"`
	TerminalRecordNum      *string    `json:"terminal_record_num"`
	InstallManSignPhoto    *string    `json:"install_man_sign_photo"`
	ProxyrgID              *string    `json:"proxyrg_id"`
	ElectronicInduction    *bool      `json:"electronic_induction"`
	TestReportNum          *string    `json:"test_report_num"`
	Batch                  *string    `json:"batch"`
	PlateformNum           *string    `json:"plateform_num"`
	PlatformRecordNum      *string    `json:"platform_record_num"`
	BusinessLicenseNum     *string    `json:"business_license_num"`
	BusinessLicenseEndDate *time.Time `json:"business_license_end_date"`
	LevelProtectRecordNum  *string    `json:"level_protect_record_num"`
	LevelProtectSignDate   *time.Time `json:"level_protect_sign_date"`
	EnterpriseID           *string    `json:"enterprise_id"`
	FillManID              *string    `json:"fill_man_id"`
	VerifyManID            *string    `json:"verify_man_id"`
	SealManID              *string    `json:"seal_man_id"`
	FillManName            *string    `json:"fill_man_name"`
	VerifyManName          *string    `json:"verify_man_name"`
	SealManName            *string    `json:"seal_man_name"`
	CheckStatus            *int       `json:"check_status"`
	IsCheckEnd             *bool      `json:"is_check_end"`
	CheckTime              *time.Time `json:"check_time"`
	FillTime               *time.Time `json:"fill_time"`
	FillID                 *string    `json:"fill_id"`
	VehicleID              *string    `json:"vehicle_id"`
	CheckRemark            *string    `json:"check_remark"`
	FillRemark             *string    `json:"fill_remark"`
	DelRemark              *string    `json:"del_remark"`
	SvNum                  *string    `json:"sv_num"`
	CreateAt               *time.Time `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_prove"
type TerminalProveMutationResponse struct {
	AffectedRows int                     `json:"affected_rows"`
	Returning    []*model1.TerminalProve `json:"returning"`
}

// ordering options when selecting data from "terminal_prove"
type TerminalProveOrderBy struct {
	ID                     *model.OrderBy `json:"id"`
	ProveID                *model.OrderBy `json:"prove_id"`
	PlateNumber            *model.OrderBy `json:"plate_number"`
	PlateColor             *model.OrderBy `json:"plate_color"`
	VehicleType            *model.OrderBy `json:"vehicle_type"`
	ContractNum            *model.OrderBy `json:"contract_num"`
	SignDate               *model.OrderBy `json:"sign_date"`
	ContractEndTime        *model.OrderBy `json:"contract_end_time"`
	TerminalTypeID         *model.OrderBy `json:"terminal_type_id"`
	TerminalID             *model.OrderBy `json:"terminal_id"`
	TerminalImei           *model.OrderBy `json:"terminal_imei"`
	InstallDate            *model.OrderBy `json:"install_date"`
	TerminalRecordNum      *model.OrderBy `json:"terminal_record_num"`
	InstallManSignPhoto    *model.OrderBy `json:"install_man_sign_photo"`
	ProxyrgID              *model.OrderBy `json:"proxyrg_id"`
	ElectronicInduction    *model.OrderBy `json:"electronic_induction"`
	TestReportNum          *model.OrderBy `json:"test_report_num"`
	Batch                  *model.OrderBy `json:"batch"`
	PlateformNum           *model.OrderBy `json:"plateform_num"`
	PlatformRecordNum      *model.OrderBy `json:"platform_record_num"`
	BusinessLicenseNum     *model.OrderBy `json:"business_license_num"`
	BusinessLicenseEndDate *model.OrderBy `json:"business_license_end_date"`
	LevelProtectRecordNum  *model.OrderBy `json:"level_protect_record_num"`
	LevelProtectSignDate   *model.OrderBy `json:"level_protect_sign_date"`
	EnterpriseID           *model.OrderBy `json:"enterprise_id"`
	FillManID              *model.OrderBy `json:"fill_man_id"`
	VerifyManID            *model.OrderBy `json:"verify_man_id"`
	SealManID              *model.OrderBy `json:"seal_man_id"`
	FillManName            *model.OrderBy `json:"fill_man_name"`
	VerifyManName          *model.OrderBy `json:"verify_man_name"`
	SealManName            *model.OrderBy `json:"seal_man_name"`
	CheckStatus            *model.OrderBy `json:"check_status"`
	IsCheckEnd             *model.OrderBy `json:"is_check_end"`
	CheckTime              *model.OrderBy `json:"check_time"`
	FillTime               *model.OrderBy `json:"fill_time"`
	FillID                 *model.OrderBy `json:"fill_id"`
	VehicleID              *model.OrderBy `json:"vehicle_id"`
	CheckRemark            *model.OrderBy `json:"check_remark"`
	FillRemark             *model.OrderBy `json:"fill_remark"`
	DelRemark              *model.OrderBy `json:"del_remark"`
	SvNum                  *model.OrderBy `json:"sv_num"`
	CreateAt               *model.OrderBy `json:"create_at"`
	CreateBy               *model.OrderBy `json:"create_by"`
	UpdateAt               *model.OrderBy `json:"update_at"`
	UpdateBy               *model.OrderBy `json:"update_by"`
	DeleteAt               *model.OrderBy `json:"delete_at"`
	DeleteBy               *model.OrderBy `json:"delete_by"`
	IsDelete               *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_prove"
type TerminalProveSetInput struct {
	ID                     *int64     `json:"id"`
	ProveID                *string    `json:"prove_id"`
	PlateNumber            *string    `json:"plate_number"`
	PlateColor             *string    `json:"plate_color"`
	VehicleType            *int       `json:"vehicle_type"`
	ContractNum            *string    `json:"contract_num"`
	SignDate               *time.Time `json:"sign_date"`
	ContractEndTime        *time.Time `json:"contract_end_time"`
	TerminalTypeID         *string    `json:"terminal_type_id"`
	TerminalID             *string    `json:"terminal_id"`
	TerminalImei           *string    `json:"terminal_imei"`
	InstallDate            *time.Time `json:"install_date"`
	TerminalRecordNum      *string    `json:"terminal_record_num"`
	InstallManSignPhoto    *string    `json:"install_man_sign_photo"`
	ProxyrgID              *string    `json:"proxyrg_id"`
	ElectronicInduction    *bool      `json:"electronic_induction"`
	TestReportNum          *string    `json:"test_report_num"`
	Batch                  *string    `json:"batch"`
	PlateformNum           *string    `json:"plateform_num"`
	PlatformRecordNum      *string    `json:"platform_record_num"`
	BusinessLicenseNum     *string    `json:"business_license_num"`
	BusinessLicenseEndDate *time.Time `json:"business_license_end_date"`
	LevelProtectRecordNum  *string    `json:"level_protect_record_num"`
	LevelProtectSignDate   *time.Time `json:"level_protect_sign_date"`
	EnterpriseID           *string    `json:"enterprise_id"`
	FillManID              *string    `json:"fill_man_id"`
	VerifyManID            *string    `json:"verify_man_id"`
	SealManID              *string    `json:"seal_man_id"`
	FillManName            *string    `json:"fill_man_name"`
	VerifyManName          *string    `json:"verify_man_name"`
	SealManName            *string    `json:"seal_man_name"`
	CheckStatus            *int       `json:"check_status"`
	IsCheckEnd             *bool      `json:"is_check_end"`
	CheckTime              *time.Time `json:"check_time"`
	FillTime               *time.Time `json:"fill_time"`
	FillID                 *string    `json:"fill_id"`
	VehicleID              *string    `json:"vehicle_id"`
	CheckRemark            *string    `json:"check_remark"`
	FillRemark             *string    `json:"fill_remark"`
	DelRemark              *string    `json:"del_remark"`
	SvNum                  *string    `json:"sv_num"`
	CreateAt               *time.Time `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_prove"
type TerminalProveStddevFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_pop on columns of table "terminal_prove"
type TerminalProveStddevPopFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_samp on columns of table "terminal_prove"
type TerminalProveStddevSampFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate sum on columns of table "terminal_prove"
type TerminalProveSumFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_pop on columns of table "terminal_prove"
type TerminalProveVarPopFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_samp on columns of table "terminal_prove"
type TerminalProveVarSampFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate variance on columns of table "terminal_prove"
type TerminalProveVarianceFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregated selection of "terminal_reg_log"
type TerminalRegLogAggregate struct {
	Aggregate *TerminalRegLogAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_reg_log"
type TerminalRegLogAggregateFields struct {
	Avg        *TerminalRegLogAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *TerminalRegLogMaxFields        `json:"max"`
	Min        *TerminalRegLogMinFields        `json:"min"`
	Stddev     *TerminalRegLogStddevFields     `json:"stddev"`
	StddevPop  *TerminalRegLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalRegLogStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalRegLogSumFields        `json:"sum"`
	VarPop     *TerminalRegLogVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalRegLogVarSampFields    `json:"var_samp"`
	Variance   *TerminalRegLogVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_reg_log"
type TerminalRegLogAvgFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_reg_log'.
type TerminalRegLogBoolExp struct {
	And                    []*TerminalRegLogBoolExp        `json:"_and"`
	Not                    *TerminalRegLogBoolExp          `json:"_not"`
	Or                     []*TerminalRegLogBoolExp        `json:"_or"`
	ID                     *model.BigintComparisonExp      `json:"id"`
	TerminalLogID          *model.StringComparisonExp      `json:"terminal_log_id"`
	TerminalID             *model.StringComparisonExp      `json:"terminal_id"`
	PlatProvinceID         *model.StringComparisonExp      `json:"plat_province_id"`
	TerminalProvinceID     *model.StringComparisonExp      `json:"terminal_province_id"`
	PlatCityID             *model.StringComparisonExp      `json:"plat_city_id"`
	TerminalCityID         *model.StringComparisonExp      `json:"terminal_city_id"`
	PlatTerminalTypeID     *model.StringComparisonExp      `json:"plat_terminal_type_id"`
	TerminalTerminalTypeID *model.StringComparisonExp      `json:"terminal_terminal_type_id"`
	PlatCarColor           *model.StringComparisonExp      `json:"plat_car_color"`
	TerminalCarColor       *model.StringComparisonExp      `json:"terminal_car_color"`
	PlatCarNumber          *model.StringComparisonExp      `json:"plat_car_number"`
	TerminalCarNumber      *model.StringComparisonExp      `json:"terminal_car_number"`
	PlatSimNumber          *model.StringComparisonExp      `json:"plat_sim_number"`
	TerminalSimNumber      *model.StringComparisonExp      `json:"terminal_sim_number"`
	BeginTime              *model.TimestamptzComparisonExp `json:"begin_time"`
	EndTime                *model.TimestamptzComparisonExp `json:"end_time"`
	IsNew                  *model.BooleanComparisonExp     `json:"is_new"`
	RegErrorCount          *model.IntComparisonExp         `json:"reg_error_count"`
	CreateAt               *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy               *model.StringComparisonExp      `json:"create_by"`
	UpdateAt               *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy               *model.StringComparisonExp      `json:"update_by"`
	DeleteAt               *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy               *model.StringComparisonExp      `json:"delete_by"`
	IsDelete               *model.BooleanComparisonExp     `json:"is_delete"`
	Remark                 *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "terminal_reg_log"
type TerminalRegLogIncInput struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// input type for inserting data into table "terminal_reg_log"
type TerminalRegLogInsertInput struct {
	TerminalLogID          string     `json:"terminal_log_id"`
	TerminalID             string     `json:"terminal_id"`
	PlatProvinceID         *string    `json:"plat_province_id"`
	TerminalProvinceID     *string    `json:"terminal_province_id"`
	PlatCityID             *string    `json:"plat_city_id"`
	TerminalCityID         *string    `json:"terminal_city_id"`
	PlatTerminalTypeID     *string    `json:"plat_terminal_type_id"`
	TerminalTerminalTypeID *string    `json:"terminal_terminal_type_id"`
	PlatCarColor           *string    `json:"plat_car_color"`
	TerminalCarColor       *string    `json:"terminal_car_color"`
	PlatCarNumber          *string    `json:"plat_car_number"`
	TerminalCarNumber      *string    `json:"terminal_car_number"`
	PlatSimNumber          *string    `json:"plat_sim_number"`
	TerminalSimNumber      *string    `json:"terminal_sim_number"`
	BeginTime              *time.Time `json:"begin_time"`
	EndTime                *time.Time `json:"end_time"`
	IsNew                  bool       `json:"is_new"`
	RegErrorCount          int        `json:"reg_error_count"`
	CreateAt               time.Time  `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               bool       `json:"is_delete"`
	Remark                 *string    `json:"remark"`
}

// aggregate max on columns of table "terminal_reg_log"
type TerminalRegLogMaxFields struct {
	ID                     *int64     `json:"id"`
	TerminalLogID          *string    `json:"terminal_log_id"`
	TerminalID             *string    `json:"terminal_id"`
	PlatProvinceID         *string    `json:"plat_province_id"`
	TerminalProvinceID     *string    `json:"terminal_province_id"`
	PlatCityID             *string    `json:"plat_city_id"`
	TerminalCityID         *string    `json:"terminal_city_id"`
	PlatTerminalTypeID     *string    `json:"plat_terminal_type_id"`
	TerminalTerminalTypeID *string    `json:"terminal_terminal_type_id"`
	PlatCarColor           *string    `json:"plat_car_color"`
	TerminalCarColor       *string    `json:"terminal_car_color"`
	PlatCarNumber          *string    `json:"plat_car_number"`
	TerminalCarNumber      *string    `json:"terminal_car_number"`
	PlatSimNumber          *string    `json:"plat_sim_number"`
	TerminalSimNumber      *string    `json:"terminal_sim_number"`
	BeginTime              *time.Time `json:"begin_time"`
	EndTime                *time.Time `json:"end_time"`
	IsNew                  *bool      `json:"is_new"`
	RegErrorCount          *int       `json:"reg_error_count"`
	CreateAt               *time.Time `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               *bool      `json:"is_delete"`
	Remark                 *string    `json:"remark"`
}

// aggregate min on columns of table "terminal_reg_log"
type TerminalRegLogMinFields struct {
	ID                     *int64     `json:"id"`
	TerminalLogID          *string    `json:"terminal_log_id"`
	TerminalID             *string    `json:"terminal_id"`
	PlatProvinceID         *string    `json:"plat_province_id"`
	TerminalProvinceID     *string    `json:"terminal_province_id"`
	PlatCityID             *string    `json:"plat_city_id"`
	TerminalCityID         *string    `json:"terminal_city_id"`
	PlatTerminalTypeID     *string    `json:"plat_terminal_type_id"`
	TerminalTerminalTypeID *string    `json:"terminal_terminal_type_id"`
	PlatCarColor           *string    `json:"plat_car_color"`
	TerminalCarColor       *string    `json:"terminal_car_color"`
	PlatCarNumber          *string    `json:"plat_car_number"`
	TerminalCarNumber      *string    `json:"terminal_car_number"`
	PlatSimNumber          *string    `json:"plat_sim_number"`
	TerminalSimNumber      *string    `json:"terminal_sim_number"`
	BeginTime              *time.Time `json:"begin_time"`
	EndTime                *time.Time `json:"end_time"`
	IsNew                  *bool      `json:"is_new"`
	RegErrorCount          *int       `json:"reg_error_count"`
	CreateAt               *time.Time `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               *bool      `json:"is_delete"`
	Remark                 *string    `json:"remark"`
}

// response of any mutation on the table "terminal_reg_log"
type TerminalRegLogMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.TerminalRegLog `json:"returning"`
}

// ordering options when selecting data from "terminal_reg_log"
type TerminalRegLogOrderBy struct {
	ID                     *model.OrderBy `json:"id"`
	TerminalLogID          *model.OrderBy `json:"terminal_log_id"`
	TerminalID             *model.OrderBy `json:"terminal_id"`
	PlatProvinceID         *model.OrderBy `json:"plat_province_id"`
	TerminalProvinceID     *model.OrderBy `json:"terminal_province_id"`
	PlatCityID             *model.OrderBy `json:"plat_city_id"`
	TerminalCityID         *model.OrderBy `json:"terminal_city_id"`
	PlatTerminalTypeID     *model.OrderBy `json:"plat_terminal_type_id"`
	TerminalTerminalTypeID *model.OrderBy `json:"terminal_terminal_type_id"`
	PlatCarColor           *model.OrderBy `json:"plat_car_color"`
	TerminalCarColor       *model.OrderBy `json:"terminal_car_color"`
	PlatCarNumber          *model.OrderBy `json:"plat_car_number"`
	TerminalCarNumber      *model.OrderBy `json:"terminal_car_number"`
	PlatSimNumber          *model.OrderBy `json:"plat_sim_number"`
	TerminalSimNumber      *model.OrderBy `json:"terminal_sim_number"`
	BeginTime              *model.OrderBy `json:"begin_time"`
	EndTime                *model.OrderBy `json:"end_time"`
	IsNew                  *model.OrderBy `json:"is_new"`
	RegErrorCount          *model.OrderBy `json:"reg_error_count"`
	CreateAt               *model.OrderBy `json:"create_at"`
	CreateBy               *model.OrderBy `json:"create_by"`
	UpdateAt               *model.OrderBy `json:"update_at"`
	UpdateBy               *model.OrderBy `json:"update_by"`
	DeleteAt               *model.OrderBy `json:"delete_at"`
	DeleteBy               *model.OrderBy `json:"delete_by"`
	IsDelete               *model.OrderBy `json:"is_delete"`
	Remark                 *model.OrderBy `json:"remark"`
}

// input type for updating data in table "terminal_reg_log"
type TerminalRegLogSetInput struct {
	ID                     *int64     `json:"id"`
	TerminalLogID          *string    `json:"terminal_log_id"`
	TerminalID             *string    `json:"terminal_id"`
	PlatProvinceID         *string    `json:"plat_province_id"`
	TerminalProvinceID     *string    `json:"terminal_province_id"`
	PlatCityID             *string    `json:"plat_city_id"`
	TerminalCityID         *string    `json:"terminal_city_id"`
	PlatTerminalTypeID     *string    `json:"plat_terminal_type_id"`
	TerminalTerminalTypeID *string    `json:"terminal_terminal_type_id"`
	PlatCarColor           *string    `json:"plat_car_color"`
	TerminalCarColor       *string    `json:"terminal_car_color"`
	PlatCarNumber          *string    `json:"plat_car_number"`
	TerminalCarNumber      *string    `json:"terminal_car_number"`
	PlatSimNumber          *string    `json:"plat_sim_number"`
	TerminalSimNumber      *string    `json:"terminal_sim_number"`
	BeginTime              *time.Time `json:"begin_time"`
	EndTime                *time.Time `json:"end_time"`
	IsNew                  *bool      `json:"is_new"`
	RegErrorCount          *int       `json:"reg_error_count"`
	CreateAt               *time.Time `json:"create_at"`
	CreateBy               *string    `json:"create_by"`
	UpdateAt               *time.Time `json:"update_at"`
	UpdateBy               *string    `json:"update_by"`
	DeleteAt               *time.Time `json:"delete_at"`
	DeleteBy               *string    `json:"delete_by"`
	IsDelete               *bool      `json:"is_delete"`
	Remark                 *string    `json:"remark"`
}

// aggregate stddev on columns of table "terminal_reg_log"
type TerminalRegLogStddevFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// aggregate stddev_pop on columns of table "terminal_reg_log"
type TerminalRegLogStddevPopFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// aggregate stddev_samp on columns of table "terminal_reg_log"
type TerminalRegLogStddevSampFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// aggregate sum on columns of table "terminal_reg_log"
type TerminalRegLogSumFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// aggregate var_pop on columns of table "terminal_reg_log"
type TerminalRegLogVarPopFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// aggregate var_samp on columns of table "terminal_reg_log"
type TerminalRegLogVarSampFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// aggregate variance on columns of table "terminal_reg_log"
type TerminalRegLogVarianceFields struct {
	ID            *int64 `json:"id"`
	RegErrorCount *int   `json:"reg_error_count"`
}

// input type for updating data in table "terminal"
type TerminalSetInput struct {
	ID               *int64     `json:"id"`
	TerminalID       *string    `json:"terminal_id"`
	FirstInstallTime *time.Time `json:"first_install_time"`
	Imei             *string    `json:"imei"`
	ProduceDate      *time.Time `json:"produce_date"`
	TypeID           *string    `json:"type_id"`
	VehicleID        *string    `json:"vehicle_id"`
	VersionNumber    *string    `json:"version_number"`
	IsReg            *bool      `json:"is_reg"`
	SimID            *string    `json:"sim_id"`
	RecordDate       *time.Time `json:"record_date"`
	DeptID           *string    `json:"dept_id"`
	ProxyrgID        *string    `json:"proxyrg_id"`
	InstallManID     *string    `json:"install_man_id"`
	RegID            *string    `json:"reg_id"`
	ProvinceID       *string    `json:"province_id"`
	CityID           *string    `json:"city_id"`
	AuthKey          *string    `json:"auth_key"`
	IsSupportPhoto   *bool      `json:"is_support_photo"`
	MockAuthKey      *string    `json:"mock_auth_key"`
	SprgID           *string    `json:"sprg_id"`
	RemoveReason     *string    `json:"remove_reason"`
	GuaranteeDate    *time.Time `json:"guarantee_date"`
	CameraNum        *int       `json:"camera_num"`
	AdasModel        *string    `json:"adas_model"`
	ChannelNo        *string    `json:"channel_no"`
	ProveProxyrgID   *string    `json:"prove_proxyrg_id"`
	IsDelete         *bool      `json:"is_delete"`
	Remarks          *string    `json:"remarks"`
	CreateAt         *time.Time `json:"create_at"`
	CreateBy         *string    `json:"create_by"`
	UpdateAt         *time.Time `json:"update_at"`
	UpdateBy         *string    `json:"update_by"`
	DeleteAt         *time.Time `json:"delete_at"`
	DeleteBy         *string    `json:"delete_by"`
}

// aggregate stddev on columns of table "terminal"
type TerminalStddevFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregate stddev_pop on columns of table "terminal"
type TerminalStddevPopFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregate stddev_samp on columns of table "terminal"
type TerminalStddevSampFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregate sum on columns of table "terminal"
type TerminalSumFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregated selection of "terminal_types"
type TerminalTypesAggregate struct {
	Aggregate *TerminalTypesAggregateFields `json:"aggregate"`
}

// aggregate fields of "terminal_types"
type TerminalTypesAggregateFields struct {
	Avg        *TerminalTypesAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *TerminalTypesMaxFields        `json:"max"`
	Min        *TerminalTypesMinFields        `json:"min"`
	Stddev     *TerminalTypesStddevFields     `json:"stddev"`
	StddevPop  *TerminalTypesStddevPopFields  `json:"stddev_pop"`
	StddevSamp *TerminalTypesStddevSampFields `json:"stddev_samp"`
	Sum        *TerminalTypesSumFields        `json:"sum"`
	VarPop     *TerminalTypesVarPopFields     `json:"var_pop"`
	VarSamp    *TerminalTypesVarSampFields    `json:"var_samp"`
	Variance   *TerminalTypesVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "terminal_types"
type TerminalTypesAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'terminal_types'.
type TerminalTypesBoolExp struct {
	And          []*TerminalTypesBoolExp         `json:"_and"`
	Not          *TerminalTypesBoolExp           `json:"_not"`
	Or           []*TerminalTypesBoolExp         `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	TypeID       *model.StringComparisonExp      `json:"type_id"`
	ProtocolName *model.StringComparisonExp      `json:"protocol_name"`
	Remark       *model.StringComparisonExp      `json:"remark"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "terminal_types"
type TerminalTypesIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "terminal_types"
type TerminalTypesInsertInput struct {
	TypeID       string     `json:"type_id"`
	ProtocolName string     `json:"protocol_name"`
	Remark       *string    `json:"remark"`
	CreateAt     time.Time  `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
}

// aggregate max on columns of table "terminal_types"
type TerminalTypesMaxFields struct {
	ID           *int64     `json:"id"`
	TypeID       *string    `json:"type_id"`
	ProtocolName *string    `json:"protocol_name"`
	Remark       *string    `json:"remark"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate min on columns of table "terminal_types"
type TerminalTypesMinFields struct {
	ID           *int64     `json:"id"`
	TypeID       *string    `json:"type_id"`
	ProtocolName *string    `json:"protocol_name"`
	Remark       *string    `json:"remark"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// response of any mutation on the table "terminal_types"
type TerminalTypesMutationResponse struct {
	AffectedRows int                     `json:"affected_rows"`
	Returning    []*model1.TerminalTypes `json:"returning"`
}

// ordering options when selecting data from "terminal_types"
type TerminalTypesOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	TypeID       *model.OrderBy `json:"type_id"`
	ProtocolName *model.OrderBy `json:"protocol_name"`
	Remark       *model.OrderBy `json:"remark"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "terminal_types"
type TerminalTypesSetInput struct {
	ID           *int64     `json:"id"`
	TypeID       *string    `json:"type_id"`
	ProtocolName *string    `json:"protocol_name"`
	Remark       *string    `json:"remark"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "terminal_types"
type TerminalTypesStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "terminal_types"
type TerminalTypesStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "terminal_types"
type TerminalTypesStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "terminal_types"
type TerminalTypesSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal_types"
type TerminalTypesVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "terminal_types"
type TerminalTypesVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "terminal_types"
type TerminalTypesVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "terminal"
type TerminalVarPopFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregate var_samp on columns of table "terminal"
type TerminalVarSampFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// aggregate variance on columns of table "terminal"
type TerminalVarianceFields struct {
	ID        *int64 `json:"id"`
	CameraNum *int   `json:"camera_num"`
}

// 可选select
type FingerprintDriverSelectColumn string

const (
	// ID
	FingerprintDriverSelectColumnID FingerprintDriverSelectColumn = "id"
	// 驾驶员指纹关联ID
	FingerprintDriverSelectColumnFingerprintDriverID FingerprintDriverSelectColumn = "fingerprint_driver_id"
	// 驾驶员ID
	FingerprintDriverSelectColumnDriverID FingerprintDriverSelectColumn = "driver_id"
	// 指纹名称
	FingerprintDriverSelectColumnFingerName FingerprintDriverSelectColumn = "finger_name"
	// 指纹ID
	FingerprintDriverSelectColumnFingerID FingerprintDriverSelectColumn = "finger_id"
	// 图片地址
	FingerprintDriverSelectColumnPicURL FingerprintDriverSelectColumn = "pic_url"
	// 创建时间
	FingerprintDriverSelectColumnCreateAt FingerprintDriverSelectColumn = "create_at"
	// 创建人
	FingerprintDriverSelectColumnCreateBy FingerprintDriverSelectColumn = "create_by"
	// 更新时间
	FingerprintDriverSelectColumnUpdateAt FingerprintDriverSelectColumn = "update_at"
	// 更新人
	FingerprintDriverSelectColumnUpdateBy FingerprintDriverSelectColumn = "update_by"
	// 删除时间
	FingerprintDriverSelectColumnDeleteAt FingerprintDriverSelectColumn = "delete_at"
	// 删除人
	FingerprintDriverSelectColumnDeleteBy FingerprintDriverSelectColumn = "delete_by"
	// 是否删除
	FingerprintDriverSelectColumnIsDelete FingerprintDriverSelectColumn = "is_delete"
	// 备注
	FingerprintDriverSelectColumnRemark FingerprintDriverSelectColumn = "remark"
)

var AllFingerprintDriverSelectColumn = []FingerprintDriverSelectColumn{
	FingerprintDriverSelectColumnID,
	FingerprintDriverSelectColumnFingerprintDriverID,
	FingerprintDriverSelectColumnDriverID,
	FingerprintDriverSelectColumnFingerName,
	FingerprintDriverSelectColumnFingerID,
	FingerprintDriverSelectColumnPicURL,
	FingerprintDriverSelectColumnCreateAt,
	FingerprintDriverSelectColumnCreateBy,
	FingerprintDriverSelectColumnUpdateAt,
	FingerprintDriverSelectColumnUpdateBy,
	FingerprintDriverSelectColumnDeleteAt,
	FingerprintDriverSelectColumnDeleteBy,
	FingerprintDriverSelectColumnIsDelete,
	FingerprintDriverSelectColumnRemark,
}

func (e FingerprintDriverSelectColumn) IsValid() bool {
	switch e {
	case FingerprintDriverSelectColumnID, FingerprintDriverSelectColumnFingerprintDriverID, FingerprintDriverSelectColumnDriverID, FingerprintDriverSelectColumnFingerName, FingerprintDriverSelectColumnFingerID, FingerprintDriverSelectColumnPicURL, FingerprintDriverSelectColumnCreateAt, FingerprintDriverSelectColumnCreateBy, FingerprintDriverSelectColumnUpdateAt, FingerprintDriverSelectColumnUpdateBy, FingerprintDriverSelectColumnDeleteAt, FingerprintDriverSelectColumnDeleteBy, FingerprintDriverSelectColumnIsDelete, FingerprintDriverSelectColumnRemark:
		return true
	}
	return false
}

func (e FingerprintDriverSelectColumn) String() string {
	return string(e)
}

func (e *FingerprintDriverSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FingerprintDriverSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FingerprintDriverSelectColumn", str)
	}
	return nil
}

func (e FingerprintDriverSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type FingerprintInformationSelectColumn string

const (
	// ID
	FingerprintInformationSelectColumnID FingerprintInformationSelectColumn = "id"
	// 指纹表ID
	FingerprintInformationSelectColumnFingerprintInformationID FingerprintInformationSelectColumn = "fingerprint_information_id"
	// 用户ID
	FingerprintInformationSelectColumnUserID FingerprintInformationSelectColumn = "user_id"
	// 车辆ID
	FingerprintInformationSelectColumnVehicleID FingerprintInformationSelectColumn = "vehicle_id"
	// sim卡ID
	FingerprintInformationSelectColumnSimID FingerprintInformationSelectColumn = "sim_id"
	// 指令ID
	FingerprintInformationSelectColumnMessageID FingerprintInformationSelectColumn = "message_id"
	// 操作类型
	FingerprintInformationSelectColumnOperationType FingerprintInformationSelectColumn = "operation_type"
	// 内容
	FingerprintInformationSelectColumnContent FingerprintInformationSelectColumn = "content"
	// 是否成功
	FingerprintInformationSelectColumnIsSuccess FingerprintInformationSelectColumn = "is_success"
	// 操作时间
	FingerprintInformationSelectColumnOperationTime FingerprintInformationSelectColumn = "operation_time"
	// 上传时间
	FingerprintInformationSelectColumnUploadTime FingerprintInformationSelectColumn = "upload_time"
	// 时间戳
	FingerprintInformationSelectColumnSaveID FingerprintInformationSelectColumn = "save_id"
	// 驾驶员ID
	FingerprintInformationSelectColumnDriverID FingerprintInformationSelectColumn = "driver_id"
	// 驾驶员姓名
	FingerprintInformationSelectColumnDriverName FingerprintInformationSelectColumn = "driver_name"
	// 指纹ID
	FingerprintInformationSelectColumnFingerID FingerprintInformationSelectColumn = "finger_id"
	// 终端ID
	FingerprintInformationSelectColumnTerminalID FingerprintInformationSelectColumn = "terminal_id"
)

var AllFingerprintInformationSelectColumn = []FingerprintInformationSelectColumn{
	FingerprintInformationSelectColumnID,
	FingerprintInformationSelectColumnFingerprintInformationID,
	FingerprintInformationSelectColumnUserID,
	FingerprintInformationSelectColumnVehicleID,
	FingerprintInformationSelectColumnSimID,
	FingerprintInformationSelectColumnMessageID,
	FingerprintInformationSelectColumnOperationType,
	FingerprintInformationSelectColumnContent,
	FingerprintInformationSelectColumnIsSuccess,
	FingerprintInformationSelectColumnOperationTime,
	FingerprintInformationSelectColumnUploadTime,
	FingerprintInformationSelectColumnSaveID,
	FingerprintInformationSelectColumnDriverID,
	FingerprintInformationSelectColumnDriverName,
	FingerprintInformationSelectColumnFingerID,
	FingerprintInformationSelectColumnTerminalID,
}

func (e FingerprintInformationSelectColumn) IsValid() bool {
	switch e {
	case FingerprintInformationSelectColumnID, FingerprintInformationSelectColumnFingerprintInformationID, FingerprintInformationSelectColumnUserID, FingerprintInformationSelectColumnVehicleID, FingerprintInformationSelectColumnSimID, FingerprintInformationSelectColumnMessageID, FingerprintInformationSelectColumnOperationType, FingerprintInformationSelectColumnContent, FingerprintInformationSelectColumnIsSuccess, FingerprintInformationSelectColumnOperationTime, FingerprintInformationSelectColumnUploadTime, FingerprintInformationSelectColumnSaveID, FingerprintInformationSelectColumnDriverID, FingerprintInformationSelectColumnDriverName, FingerprintInformationSelectColumnFingerID, FingerprintInformationSelectColumnTerminalID:
		return true
	}
	return false
}

func (e FingerprintInformationSelectColumn) String() string {
	return string(e)
}

func (e *FingerprintInformationSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FingerprintInformationSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FingerprintInformationSelectColumn", str)
	}
	return nil
}

func (e FingerprintInformationSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type FingerprintSelectColumn string

const (
	// ID
	FingerprintSelectColumnID FingerprintSelectColumn = "id"
	// 指纹ID
	FingerprintSelectColumnFingerID FingerprintSelectColumn = "finger_id"
	// 指纹内容
	FingerprintSelectColumnContent FingerprintSelectColumn = "content"
)

var AllFingerprintSelectColumn = []FingerprintSelectColumn{
	FingerprintSelectColumnID,
	FingerprintSelectColumnFingerID,
	FingerprintSelectColumnContent,
}

func (e FingerprintSelectColumn) IsValid() bool {
	switch e {
	case FingerprintSelectColumnID, FingerprintSelectColumnFingerID, FingerprintSelectColumnContent:
		return true
	}
	return false
}

func (e FingerprintSelectColumn) String() string {
	return string(e)
}

func (e *FingerprintSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FingerprintSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FingerprintSelectColumn", str)
	}
	return nil
}

func (e FingerprintSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SimCardAllSelectColumn string

const (
	// ID
	SimCardAllSelectColumnID SimCardAllSelectColumn = "id"
	// SIM卡管理（外部来源）ID
	SimCardAllSelectColumnSimcardAllID SimCardAllSelectColumn = "simcard_all_id"
	// 车牌号码
	SimCardAllSelectColumnPlateNumber SimCardAllSelectColumn = "plate_number"
	// 车牌号码
	SimCardAllSelectColumnPlateColor SimCardAllSelectColumn = "plate_color"
	// 所在部门ID
	SimCardAllSelectColumnDeptID SimCardAllSelectColumn = "dept_id"
	// 代理商ID
	SimCardAllSelectColumnProxyrgID SimCardAllSelectColumn = "proxyrg_id"
	// 所在企业ID
	SimCardAllSelectColumnEnterpriseID SimCardAllSelectColumn = "enterprise_id"
	// sim卡号
	SimCardAllSelectColumnSimNumber SimCardAllSelectColumn = "sim_number"
	// 服务费到期时间
	SimCardAllSelectColumnServiceEndTime SimCardAllSelectColumn = "service_end_time"
	// 终端ID
	SimCardAllSelectColumnTerminalID SimCardAllSelectColumn = "terminal_id"
	// 应用于何种系统
	SimCardAllSelectColumnSystemName SimCardAllSelectColumn = "system_name"
	// sim卡类型
	SimCardAllSelectColumnSimType SimCardAllSelectColumn = "sim_type"
	// 用户ID
	SimCardAllSelectColumnUserID SimCardAllSelectColumn = "user_id"
	// 运营商类型
	SimCardAllSelectColumnMobileType SimCardAllSelectColumn = "mobile_type"
	// 解绑原因
	SimCardAllSelectColumnUpdateCause SimCardAllSelectColumn = "update_cause"
	// 创建时间
	SimCardAllSelectColumnCreateAt SimCardAllSelectColumn = "create_at"
	// 创建人
	SimCardAllSelectColumnCreateBy SimCardAllSelectColumn = "create_by"
	// 更新时间
	SimCardAllSelectColumnUpdateAt SimCardAllSelectColumn = "update_at"
	// 更新人
	SimCardAllSelectColumnUpdateBy SimCardAllSelectColumn = "update_by"
	// 删除时间
	SimCardAllSelectColumnDeleteAt SimCardAllSelectColumn = "delete_at"
	// 删除人
	SimCardAllSelectColumnDeleteBy SimCardAllSelectColumn = "delete_by"
	// 是否删除
	SimCardAllSelectColumnIsDelete SimCardAllSelectColumn = "is_delete"
	// 备注
	SimCardAllSelectColumnRemark SimCardAllSelectColumn = "remark"
)

var AllSimCardAllSelectColumn = []SimCardAllSelectColumn{
	SimCardAllSelectColumnID,
	SimCardAllSelectColumnSimcardAllID,
	SimCardAllSelectColumnPlateNumber,
	SimCardAllSelectColumnPlateColor,
	SimCardAllSelectColumnDeptID,
	SimCardAllSelectColumnProxyrgID,
	SimCardAllSelectColumnEnterpriseID,
	SimCardAllSelectColumnSimNumber,
	SimCardAllSelectColumnServiceEndTime,
	SimCardAllSelectColumnTerminalID,
	SimCardAllSelectColumnSystemName,
	SimCardAllSelectColumnSimType,
	SimCardAllSelectColumnUserID,
	SimCardAllSelectColumnMobileType,
	SimCardAllSelectColumnUpdateCause,
	SimCardAllSelectColumnCreateAt,
	SimCardAllSelectColumnCreateBy,
	SimCardAllSelectColumnUpdateAt,
	SimCardAllSelectColumnUpdateBy,
	SimCardAllSelectColumnDeleteAt,
	SimCardAllSelectColumnDeleteBy,
	SimCardAllSelectColumnIsDelete,
	SimCardAllSelectColumnRemark,
}

func (e SimCardAllSelectColumn) IsValid() bool {
	switch e {
	case SimCardAllSelectColumnID, SimCardAllSelectColumnSimcardAllID, SimCardAllSelectColumnPlateNumber, SimCardAllSelectColumnPlateColor, SimCardAllSelectColumnDeptID, SimCardAllSelectColumnProxyrgID, SimCardAllSelectColumnEnterpriseID, SimCardAllSelectColumnSimNumber, SimCardAllSelectColumnServiceEndTime, SimCardAllSelectColumnTerminalID, SimCardAllSelectColumnSystemName, SimCardAllSelectColumnSimType, SimCardAllSelectColumnUserID, SimCardAllSelectColumnMobileType, SimCardAllSelectColumnUpdateCause, SimCardAllSelectColumnCreateAt, SimCardAllSelectColumnCreateBy, SimCardAllSelectColumnUpdateAt, SimCardAllSelectColumnUpdateBy, SimCardAllSelectColumnDeleteAt, SimCardAllSelectColumnDeleteBy, SimCardAllSelectColumnIsDelete, SimCardAllSelectColumnRemark:
		return true
	}
	return false
}

func (e SimCardAllSelectColumn) String() string {
	return string(e)
}

func (e *SimCardAllSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardAllSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SimCardAllSelectColumn", str)
	}
	return nil
}

func (e SimCardAllSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SimCardFlowSelectColumn string

const (
	// ID
	SimCardFlowSelectColumnID SimCardFlowSelectColumn = "id"
	// SIM卡流量ID
	SimCardFlowSelectColumnSimCardFlowID SimCardFlowSelectColumn = "sim_card_flow_id"
	// SIM卡ID
	SimCardFlowSelectColumnSimCardID SimCardFlowSelectColumn = "sim_card_id"
	// 卡号备注
	SimCardFlowSelectColumnCardNoRemark SimCardFlowSelectColumn = "card_no_remark"
	// ICCID
	SimCardFlowSelectColumnIccid SimCardFlowSelectColumn = "iccid"
	// 企业ID
	SimCardFlowSelectColumnEnterpriseID SimCardFlowSelectColumn = "enterprise_id"
	// 数据服务已用流量(KB)
	SimCardFlowSelectColumnUseFlow SimCardFlowSelectColumn = "use_flow"
	// 已产生流量卡均流量(KB)
	SimCardFlowSelectColumnCardAvgFlow SimCardFlowSelectColumn = "card_avg_flow"
	// 流量池卡均流量(KB)
	SimCardFlowSelectColumnPoolAvgFlow SimCardFlowSelectColumn = "pool_avg_flow"
	// 套餐流量(MB)
	SimCardFlowSelectColumnSuitFlow SimCardFlowSelectColumn = "suit_flow"
	// 套餐剩余流量(MB)
	SimCardFlowSelectColumnSuitLeftFlow SimCardFlowSelectColumn = "suit_left_flow"
	// 已超套餐流量(MB)
	SimCardFlowSelectColumnSuitOverFlow SimCardFlowSelectColumn = "suit_over_flow"
	// 上行短信已用条数
	SimCardFlowSelectColumnSuitUseSmsNum SimCardFlowSelectColumn = "suit_use_sms_num"
	// 套餐短信条数
	SimCardFlowSelectColumnSuitSmsNum SimCardFlowSelectColumn = "suit_sms_num"
	// 套餐剩余短信条数
	SimCardFlowSelectColumnSuitSmsLeftNum SimCardFlowSelectColumn = "suit_sms_left_num"
	// 已超套餐短信条数
	SimCardFlowSelectColumnSuitSmsOverNum SimCardFlowSelectColumn = "suit_sms_over_num"
	// 是否共享池
	SimCardFlowSelectColumnIsSharePool SimCardFlowSelectColumn = "is_share_pool"
	// 是否删除
	SimCardFlowSelectColumnIsDelete SimCardFlowSelectColumn = "is_delete"
	// 创建时间
	SimCardFlowSelectColumnCreateAt SimCardFlowSelectColumn = "create_at"
	// 创建人
	SimCardFlowSelectColumnCreateBy SimCardFlowSelectColumn = "create_by"
	// 修改时间
	SimCardFlowSelectColumnUpdateAt SimCardFlowSelectColumn = "update_at"
	// 修改人
	SimCardFlowSelectColumnUpdateBy SimCardFlowSelectColumn = "update_by"
	// 删除时间
	SimCardFlowSelectColumnDeleteAt SimCardFlowSelectColumn = "delete_at"
	// 删除人
	SimCardFlowSelectColumnDeleteBy SimCardFlowSelectColumn = "delete_by"
)

var AllSimCardFlowSelectColumn = []SimCardFlowSelectColumn{
	SimCardFlowSelectColumnID,
	SimCardFlowSelectColumnSimCardFlowID,
	SimCardFlowSelectColumnSimCardID,
	SimCardFlowSelectColumnCardNoRemark,
	SimCardFlowSelectColumnIccid,
	SimCardFlowSelectColumnEnterpriseID,
	SimCardFlowSelectColumnUseFlow,
	SimCardFlowSelectColumnCardAvgFlow,
	SimCardFlowSelectColumnPoolAvgFlow,
	SimCardFlowSelectColumnSuitFlow,
	SimCardFlowSelectColumnSuitLeftFlow,
	SimCardFlowSelectColumnSuitOverFlow,
	SimCardFlowSelectColumnSuitUseSmsNum,
	SimCardFlowSelectColumnSuitSmsNum,
	SimCardFlowSelectColumnSuitSmsLeftNum,
	SimCardFlowSelectColumnSuitSmsOverNum,
	SimCardFlowSelectColumnIsSharePool,
	SimCardFlowSelectColumnIsDelete,
	SimCardFlowSelectColumnCreateAt,
	SimCardFlowSelectColumnCreateBy,
	SimCardFlowSelectColumnUpdateAt,
	SimCardFlowSelectColumnUpdateBy,
	SimCardFlowSelectColumnDeleteAt,
	SimCardFlowSelectColumnDeleteBy,
}

func (e SimCardFlowSelectColumn) IsValid() bool {
	switch e {
	case SimCardFlowSelectColumnID, SimCardFlowSelectColumnSimCardFlowID, SimCardFlowSelectColumnSimCardID, SimCardFlowSelectColumnCardNoRemark, SimCardFlowSelectColumnIccid, SimCardFlowSelectColumnEnterpriseID, SimCardFlowSelectColumnUseFlow, SimCardFlowSelectColumnCardAvgFlow, SimCardFlowSelectColumnPoolAvgFlow, SimCardFlowSelectColumnSuitFlow, SimCardFlowSelectColumnSuitLeftFlow, SimCardFlowSelectColumnSuitOverFlow, SimCardFlowSelectColumnSuitUseSmsNum, SimCardFlowSelectColumnSuitSmsNum, SimCardFlowSelectColumnSuitSmsLeftNum, SimCardFlowSelectColumnSuitSmsOverNum, SimCardFlowSelectColumnIsSharePool, SimCardFlowSelectColumnIsDelete, SimCardFlowSelectColumnCreateAt, SimCardFlowSelectColumnCreateBy, SimCardFlowSelectColumnUpdateAt, SimCardFlowSelectColumnUpdateBy, SimCardFlowSelectColumnDeleteAt, SimCardFlowSelectColumnDeleteBy:
		return true
	}
	return false
}

func (e SimCardFlowSelectColumn) String() string {
	return string(e)
}

func (e *SimCardFlowSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardFlowSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SimCardFlowSelectColumn", str)
	}
	return nil
}

func (e SimCardFlowSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SimCardMgrSelectColumn string

const (
	// ID
	SimCardMgrSelectColumnID SimCardMgrSelectColumn = "id"
	// sim卡使用情况管理ID
	SimCardMgrSelectColumnMgrID SimCardMgrSelectColumn = "mgr_id"
	// 状态
	SimCardMgrSelectColumnStatus SimCardMgrSelectColumn = "status"
	// 终端ID
	SimCardMgrSelectColumnTerminalID SimCardMgrSelectColumn = "terminal_id"
	// 运营商类型
	SimCardMgrSelectColumnMobileType SimCardMgrSelectColumn = "mobile_type"
	// 代理商ID
	SimCardMgrSelectColumnProxyrgID SimCardMgrSelectColumn = "proxyrg_id"
	// 部门ID
	SimCardMgrSelectColumnDeptID SimCardMgrSelectColumn = "dept_id"
	// sim卡类型
	SimCardMgrSelectColumnSimType SimCardMgrSelectColumn = "sim_type"
	// 领用用途
	SimCardMgrSelectColumnUseType SimCardMgrSelectColumn = "use_type"
	// 领用人员
	SimCardMgrSelectColumnUseUserID SimCardMgrSelectColumn = "use_user_id"
	// 应用系统名称
	SimCardMgrSelectColumnSystemName SimCardMgrSelectColumn = "system_name"
	// sim卡号
	SimCardMgrSelectColumnSimNumber SimCardMgrSelectColumn = "sim_number"
	// 是否外部来源
	SimCardMgrSelectColumnIsOutside SimCardMgrSelectColumn = "is_outside"
	// 换卡原因
	SimCardMgrSelectColumnUpdateCause SimCardMgrSelectColumn = "update_cause"
	// sim卡来自哪个区域
	SimCardMgrSelectColumnSimArea SimCardMgrSelectColumn = "sim_area"
	// 去掉1和2位的sim卡号
	SimCardMgrSelectColumnSimNumber12 SimCardMgrSelectColumn = "sim_number_12"
	// 去掉2和3位的sim卡号
	SimCardMgrSelectColumnSimNumber23 SimCardMgrSelectColumn = "sim_number_23"
	// 外部sim卡号相匹配的sim卡
	SimCardMgrSelectColumnSimBak SimCardMgrSelectColumn = "sim_bak"
	// 10位sim卡号
	SimCardMgrSelectColumnSimNumber10 SimCardMgrSelectColumn = "sim_number10"
	// 注销时间
	SimCardMgrSelectColumnCancelTime SimCardMgrSelectColumn = "cancel_time"
	// 注销原因
	SimCardMgrSelectColumnCancelCause SimCardMgrSelectColumn = "cancel_cause"
	// 创建时间
	SimCardMgrSelectColumnCreateAt SimCardMgrSelectColumn = "create_at"
	// 创建人
	SimCardMgrSelectColumnCreateBy SimCardMgrSelectColumn = "create_by"
	// 更新时间
	SimCardMgrSelectColumnUpdateAt SimCardMgrSelectColumn = "update_at"
	// 更新人
	SimCardMgrSelectColumnUpdateBy SimCardMgrSelectColumn = "update_by"
	// 删除时间
	SimCardMgrSelectColumnDeleteAt SimCardMgrSelectColumn = "delete_at"
	// 删除人
	SimCardMgrSelectColumnDeleteBy SimCardMgrSelectColumn = "delete_by"
	// 是否删除
	SimCardMgrSelectColumnIsDelete SimCardMgrSelectColumn = "is_delete"
	// 备注
	SimCardMgrSelectColumnRemark SimCardMgrSelectColumn = "remark"
)

var AllSimCardMgrSelectColumn = []SimCardMgrSelectColumn{
	SimCardMgrSelectColumnID,
	SimCardMgrSelectColumnMgrID,
	SimCardMgrSelectColumnStatus,
	SimCardMgrSelectColumnTerminalID,
	SimCardMgrSelectColumnMobileType,
	SimCardMgrSelectColumnProxyrgID,
	SimCardMgrSelectColumnDeptID,
	SimCardMgrSelectColumnSimType,
	SimCardMgrSelectColumnUseType,
	SimCardMgrSelectColumnUseUserID,
	SimCardMgrSelectColumnSystemName,
	SimCardMgrSelectColumnSimNumber,
	SimCardMgrSelectColumnIsOutside,
	SimCardMgrSelectColumnUpdateCause,
	SimCardMgrSelectColumnSimArea,
	SimCardMgrSelectColumnSimNumber12,
	SimCardMgrSelectColumnSimNumber23,
	SimCardMgrSelectColumnSimBak,
	SimCardMgrSelectColumnSimNumber10,
	SimCardMgrSelectColumnCancelTime,
	SimCardMgrSelectColumnCancelCause,
	SimCardMgrSelectColumnCreateAt,
	SimCardMgrSelectColumnCreateBy,
	SimCardMgrSelectColumnUpdateAt,
	SimCardMgrSelectColumnUpdateBy,
	SimCardMgrSelectColumnDeleteAt,
	SimCardMgrSelectColumnDeleteBy,
	SimCardMgrSelectColumnIsDelete,
	SimCardMgrSelectColumnRemark,
}

func (e SimCardMgrSelectColumn) IsValid() bool {
	switch e {
	case SimCardMgrSelectColumnID, SimCardMgrSelectColumnMgrID, SimCardMgrSelectColumnStatus, SimCardMgrSelectColumnTerminalID, SimCardMgrSelectColumnMobileType, SimCardMgrSelectColumnProxyrgID, SimCardMgrSelectColumnDeptID, SimCardMgrSelectColumnSimType, SimCardMgrSelectColumnUseType, SimCardMgrSelectColumnUseUserID, SimCardMgrSelectColumnSystemName, SimCardMgrSelectColumnSimNumber, SimCardMgrSelectColumnIsOutside, SimCardMgrSelectColumnUpdateCause, SimCardMgrSelectColumnSimArea, SimCardMgrSelectColumnSimNumber12, SimCardMgrSelectColumnSimNumber23, SimCardMgrSelectColumnSimBak, SimCardMgrSelectColumnSimNumber10, SimCardMgrSelectColumnCancelTime, SimCardMgrSelectColumnCancelCause, SimCardMgrSelectColumnCreateAt, SimCardMgrSelectColumnCreateBy, SimCardMgrSelectColumnUpdateAt, SimCardMgrSelectColumnUpdateBy, SimCardMgrSelectColumnDeleteAt, SimCardMgrSelectColumnDeleteBy, SimCardMgrSelectColumnIsDelete, SimCardMgrSelectColumnRemark:
		return true
	}
	return false
}

func (e SimCardMgrSelectColumn) String() string {
	return string(e)
}

func (e *SimCardMgrSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardMgrSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SimCardMgrSelectColumn", str)
	}
	return nil
}

func (e SimCardMgrSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SimCardSelectColumn string

const (
	// ID
	SimCardSelectColumnID SimCardSelectColumn = "id"
	// SIM卡ID
	SimCardSelectColumnSimCardID SimCardSelectColumn = "sim_card_id"
	// 所属部门ID
	SimCardSelectColumnDeptID SimCardSelectColumn = "dept_id"
	// 绑定终端ID
	SimCardSelectColumnTerminalID SimCardSelectColumn = "terminal_id"
	// 代理商ID
	SimCardSelectColumnProxyrgID SimCardSelectColumn = "proxyrg_id"
	// 运营商ID
	SimCardSelectColumnOperatorsID SimCardSelectColumn = "operators_id"
	// SIM卡号
	SimCardSelectColumnSimNumber SimCardSelectColumn = "sim_number"
	// 运营商类型
	SimCardSelectColumnMobileType SimCardSelectColumn = "mobile_type"
	// 备注
	SimCardSelectColumnRemark SimCardSelectColumn = "remark"
	// 创建时间
	SimCardSelectColumnCreateAt SimCardSelectColumn = "create_at"
	// 创建人
	SimCardSelectColumnCreateBy SimCardSelectColumn = "create_by"
	// 修改时间
	SimCardSelectColumnUpdateAt SimCardSelectColumn = "update_at"
	// 修改人
	SimCardSelectColumnUpdateBy SimCardSelectColumn = "update_by"
	// 删除时间
	SimCardSelectColumnDeleteAt SimCardSelectColumn = "delete_at"
	// 删除人
	SimCardSelectColumnDeleteBy SimCardSelectColumn = "delete_by"
	// 是否删除
	SimCardSelectColumnIsDelete SimCardSelectColumn = "is_delete"
	// sim卡来源，1-平台，2-其他平台
	SimCardSelectColumnSource SimCardSelectColumn = "source"
)

var AllSimCardSelectColumn = []SimCardSelectColumn{
	SimCardSelectColumnID,
	SimCardSelectColumnSimCardID,
	SimCardSelectColumnDeptID,
	SimCardSelectColumnTerminalID,
	SimCardSelectColumnProxyrgID,
	SimCardSelectColumnOperatorsID,
	SimCardSelectColumnSimNumber,
	SimCardSelectColumnMobileType,
	SimCardSelectColumnRemark,
	SimCardSelectColumnCreateAt,
	SimCardSelectColumnCreateBy,
	SimCardSelectColumnUpdateAt,
	SimCardSelectColumnUpdateBy,
	SimCardSelectColumnDeleteAt,
	SimCardSelectColumnDeleteBy,
	SimCardSelectColumnIsDelete,
	SimCardSelectColumnSource,
}

func (e SimCardSelectColumn) IsValid() bool {
	switch e {
	case SimCardSelectColumnID, SimCardSelectColumnSimCardID, SimCardSelectColumnDeptID, SimCardSelectColumnTerminalID, SimCardSelectColumnProxyrgID, SimCardSelectColumnOperatorsID, SimCardSelectColumnSimNumber, SimCardSelectColumnMobileType, SimCardSelectColumnRemark, SimCardSelectColumnCreateAt, SimCardSelectColumnCreateBy, SimCardSelectColumnUpdateAt, SimCardSelectColumnUpdateBy, SimCardSelectColumnDeleteAt, SimCardSelectColumnDeleteBy, SimCardSelectColumnIsDelete, SimCardSelectColumnSource:
		return true
	}
	return false
}

func (e SimCardSelectColumn) String() string {
	return string(e)
}

func (e *SimCardSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SimCardSelectColumn", str)
	}
	return nil
}

func (e SimCardSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SimCardStatusSelectColumn string

const (
	// ID
	SimCardStatusSelectColumnID SimCardStatusSelectColumn = "id"
	// sim卡使用情况ID
	SimCardStatusSelectColumnSimCardStatusID SimCardStatusSelectColumn = "sim_card_status_id"
	// 状态
	SimCardStatusSelectColumnStatus SimCardStatusSelectColumn = "status"
	// 终端型号ID
	SimCardStatusSelectColumnTerminalModalID SimCardStatusSelectColumn = "terminal_modal_id"
	// 运营商类型
	SimCardStatusSelectColumnMobileType SimCardStatusSelectColumn = "mobile_type"
	// 代理商ID
	SimCardStatusSelectColumnProxyrgID SimCardStatusSelectColumn = "proxyrg_id"
	// 所在单位ID
	SimCardStatusSelectColumnEnterpriseID SimCardStatusSelectColumn = "enterprise_id"
	// 应用系统名称
	SimCardStatusSelectColumnSystemName SimCardStatusSelectColumn = "system_name"
	// sim卡号
	SimCardStatusSelectColumnSimNumber SimCardStatusSelectColumn = "sim_number"
	// 注销时间
	SimCardStatusSelectColumnCancelTime SimCardStatusSelectColumn = "cancel_time"
	// 注销原因
	SimCardStatusSelectColumnCancelCause SimCardStatusSelectColumn = "cancel_cause"
	// 10位sim卡号
	SimCardStatusSelectColumnSimNumber10 SimCardStatusSelectColumn = "sim_number10"
	// 车牌号
	SimCardStatusSelectColumnPlateNumber SimCardStatusSelectColumn = "plate_number"
	// 费用截止日期
	SimCardStatusSelectColumnFeeEndDate SimCardStatusSelectColumn = "fee_end_date"
	// 创建时间
	SimCardStatusSelectColumnCreateAt SimCardStatusSelectColumn = "create_at"
	// 创建人
	SimCardStatusSelectColumnCreateBy SimCardStatusSelectColumn = "create_by"
	// 更新时间
	SimCardStatusSelectColumnUpdateAt SimCardStatusSelectColumn = "update_at"
	// 更新人
	SimCardStatusSelectColumnUpdateBy SimCardStatusSelectColumn = "update_by"
	// 删除时间
	SimCardStatusSelectColumnDeleteAt SimCardStatusSelectColumn = "delete_at"
	// 删除人
	SimCardStatusSelectColumnDeleteBy SimCardStatusSelectColumn = "delete_by"
	// 是否删除
	SimCardStatusSelectColumnIsDelete SimCardStatusSelectColumn = "is_delete"
	// 备注
	SimCardStatusSelectColumnRemark SimCardStatusSelectColumn = "remark"
)

var AllSimCardStatusSelectColumn = []SimCardStatusSelectColumn{
	SimCardStatusSelectColumnID,
	SimCardStatusSelectColumnSimCardStatusID,
	SimCardStatusSelectColumnStatus,
	SimCardStatusSelectColumnTerminalModalID,
	SimCardStatusSelectColumnMobileType,
	SimCardStatusSelectColumnProxyrgID,
	SimCardStatusSelectColumnEnterpriseID,
	SimCardStatusSelectColumnSystemName,
	SimCardStatusSelectColumnSimNumber,
	SimCardStatusSelectColumnCancelTime,
	SimCardStatusSelectColumnCancelCause,
	SimCardStatusSelectColumnSimNumber10,
	SimCardStatusSelectColumnPlateNumber,
	SimCardStatusSelectColumnFeeEndDate,
	SimCardStatusSelectColumnCreateAt,
	SimCardStatusSelectColumnCreateBy,
	SimCardStatusSelectColumnUpdateAt,
	SimCardStatusSelectColumnUpdateBy,
	SimCardStatusSelectColumnDeleteAt,
	SimCardStatusSelectColumnDeleteBy,
	SimCardStatusSelectColumnIsDelete,
	SimCardStatusSelectColumnRemark,
}

func (e SimCardStatusSelectColumn) IsValid() bool {
	switch e {
	case SimCardStatusSelectColumnID, SimCardStatusSelectColumnSimCardStatusID, SimCardStatusSelectColumnStatus, SimCardStatusSelectColumnTerminalModalID, SimCardStatusSelectColumnMobileType, SimCardStatusSelectColumnProxyrgID, SimCardStatusSelectColumnEnterpriseID, SimCardStatusSelectColumnSystemName, SimCardStatusSelectColumnSimNumber, SimCardStatusSelectColumnCancelTime, SimCardStatusSelectColumnCancelCause, SimCardStatusSelectColumnSimNumber10, SimCardStatusSelectColumnPlateNumber, SimCardStatusSelectColumnFeeEndDate, SimCardStatusSelectColumnCreateAt, SimCardStatusSelectColumnCreateBy, SimCardStatusSelectColumnUpdateAt, SimCardStatusSelectColumnUpdateBy, SimCardStatusSelectColumnDeleteAt, SimCardStatusSelectColumnDeleteBy, SimCardStatusSelectColumnIsDelete, SimCardStatusSelectColumnRemark:
		return true
	}
	return false
}

func (e SimCardStatusSelectColumn) String() string {
	return string(e)
}

func (e *SimCardStatusSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SimCardStatusSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SimCardStatusSelectColumn", str)
	}
	return nil
}

func (e SimCardStatusSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalBeidouValidSelectColumn string

const (
	// ID
	TerminalBeidouValidSelectColumnID TerminalBeidouValidSelectColumn = "id"
	// 达标北斗部标终端号信息ID
	TerminalBeidouValidSelectColumnTerminalBeidouValidID TerminalBeidouValidSelectColumn = "terminal_beidou_valid_id"
	// 终端ID
	TerminalBeidouValidSelectColumnTerminalID TerminalBeidouValidSelectColumn = "terminal_id"
	// 终端型号ID
	TerminalBeidouValidSelectColumnTerminalModalID TerminalBeidouValidSelectColumn = "terminal_modal_id"
	// 是否绑定
	TerminalBeidouValidSelectColumnIsBind TerminalBeidouValidSelectColumn = "is_bind"
	// 采购单号
	TerminalBeidouValidSelectColumnBuyBill TerminalBeidouValidSelectColumn = "buy_bill"
	// 创建时间
	TerminalBeidouValidSelectColumnCreateAt TerminalBeidouValidSelectColumn = "create_at"
	// 创建人
	TerminalBeidouValidSelectColumnCreateBy TerminalBeidouValidSelectColumn = "create_by"
	// 修改时间
	TerminalBeidouValidSelectColumnUpdateAt TerminalBeidouValidSelectColumn = "update_at"
	// 修改人
	TerminalBeidouValidSelectColumnUpdateBy TerminalBeidouValidSelectColumn = "update_by"
	// 删除时间
	TerminalBeidouValidSelectColumnDeleteAt TerminalBeidouValidSelectColumn = "delete_at"
	// 删除人
	TerminalBeidouValidSelectColumnDeleteBy TerminalBeidouValidSelectColumn = "delete_by"
	// 是否删除
	TerminalBeidouValidSelectColumnIsDelete TerminalBeidouValidSelectColumn = "is_delete"
)

var AllTerminalBeidouValidSelectColumn = []TerminalBeidouValidSelectColumn{
	TerminalBeidouValidSelectColumnID,
	TerminalBeidouValidSelectColumnTerminalBeidouValidID,
	TerminalBeidouValidSelectColumnTerminalID,
	TerminalBeidouValidSelectColumnTerminalModalID,
	TerminalBeidouValidSelectColumnIsBind,
	TerminalBeidouValidSelectColumnBuyBill,
	TerminalBeidouValidSelectColumnCreateAt,
	TerminalBeidouValidSelectColumnCreateBy,
	TerminalBeidouValidSelectColumnUpdateAt,
	TerminalBeidouValidSelectColumnUpdateBy,
	TerminalBeidouValidSelectColumnDeleteAt,
	TerminalBeidouValidSelectColumnDeleteBy,
	TerminalBeidouValidSelectColumnIsDelete,
}

func (e TerminalBeidouValidSelectColumn) IsValid() bool {
	switch e {
	case TerminalBeidouValidSelectColumnID, TerminalBeidouValidSelectColumnTerminalBeidouValidID, TerminalBeidouValidSelectColumnTerminalID, TerminalBeidouValidSelectColumnTerminalModalID, TerminalBeidouValidSelectColumnIsBind, TerminalBeidouValidSelectColumnBuyBill, TerminalBeidouValidSelectColumnCreateAt, TerminalBeidouValidSelectColumnCreateBy, TerminalBeidouValidSelectColumnUpdateAt, TerminalBeidouValidSelectColumnUpdateBy, TerminalBeidouValidSelectColumnDeleteAt, TerminalBeidouValidSelectColumnDeleteBy, TerminalBeidouValidSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalBeidouValidSelectColumn) String() string {
	return string(e)
}

func (e *TerminalBeidouValidSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalBeidouValidSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalBeidouValidSelectColumn", str)
	}
	return nil
}

func (e TerminalBeidouValidSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalBuyBillSelectColumn string

const (
	// ID
	TerminalBuyBillSelectColumnID TerminalBuyBillSelectColumn = "id"
	// 终端采购单ID
	TerminalBuyBillSelectColumnBillID TerminalBuyBillSelectColumn = "bill_id"
	// 终端类型
	TerminalBuyBillSelectColumnTerminalType TerminalBuyBillSelectColumn = "terminal_type"
	// s/n起号
	TerminalBuyBillSelectColumnStartSn TerminalBuyBillSelectColumn = "start_sn"
	// s/n止号
	TerminalBuyBillSelectColumnEndSn TerminalBuyBillSelectColumn = "end_sn"
	// 采购人
	TerminalBuyBillSelectColumnBuyerID TerminalBuyBillSelectColumn = "buyer_id"
	// 采购日期
	TerminalBuyBillSelectColumnBuyDate TerminalBuyBillSelectColumn = "buy_date"
	// 终端数
	TerminalBuyBillSelectColumnSnCount TerminalBuyBillSelectColumn = "sn_count"
	// 用掉的终端数
	TerminalBuyBillSelectColumnUseSnCount TerminalBuyBillSelectColumn = "use_sn_count"
	// 终端数是否用完
	TerminalBuyBillSelectColumnIsSnUseOver TerminalBuyBillSelectColumn = "is_sn_use_over"
	// 创建时间
	TerminalBuyBillSelectColumnCreateAt TerminalBuyBillSelectColumn = "create_at"
	// 创建人
	TerminalBuyBillSelectColumnCreateBy TerminalBuyBillSelectColumn = "create_by"
	// 修改时间
	TerminalBuyBillSelectColumnUpdateAt TerminalBuyBillSelectColumn = "update_at"
	// 修改人
	TerminalBuyBillSelectColumnUpdateBy TerminalBuyBillSelectColumn = "update_by"
	// 删除时间
	TerminalBuyBillSelectColumnDeleteAt TerminalBuyBillSelectColumn = "delete_at"
	// 删除人
	TerminalBuyBillSelectColumnDeleteBy TerminalBuyBillSelectColumn = "delete_by"
	// 是否删除
	TerminalBuyBillSelectColumnIsDelete TerminalBuyBillSelectColumn = "is_delete"
	// 备注
	TerminalBuyBillSelectColumnRemark TerminalBuyBillSelectColumn = "remark"
)

var AllTerminalBuyBillSelectColumn = []TerminalBuyBillSelectColumn{
	TerminalBuyBillSelectColumnID,
	TerminalBuyBillSelectColumnBillID,
	TerminalBuyBillSelectColumnTerminalType,
	TerminalBuyBillSelectColumnStartSn,
	TerminalBuyBillSelectColumnEndSn,
	TerminalBuyBillSelectColumnBuyerID,
	TerminalBuyBillSelectColumnBuyDate,
	TerminalBuyBillSelectColumnSnCount,
	TerminalBuyBillSelectColumnUseSnCount,
	TerminalBuyBillSelectColumnIsSnUseOver,
	TerminalBuyBillSelectColumnCreateAt,
	TerminalBuyBillSelectColumnCreateBy,
	TerminalBuyBillSelectColumnUpdateAt,
	TerminalBuyBillSelectColumnUpdateBy,
	TerminalBuyBillSelectColumnDeleteAt,
	TerminalBuyBillSelectColumnDeleteBy,
	TerminalBuyBillSelectColumnIsDelete,
	TerminalBuyBillSelectColumnRemark,
}

func (e TerminalBuyBillSelectColumn) IsValid() bool {
	switch e {
	case TerminalBuyBillSelectColumnID, TerminalBuyBillSelectColumnBillID, TerminalBuyBillSelectColumnTerminalType, TerminalBuyBillSelectColumnStartSn, TerminalBuyBillSelectColumnEndSn, TerminalBuyBillSelectColumnBuyerID, TerminalBuyBillSelectColumnBuyDate, TerminalBuyBillSelectColumnSnCount, TerminalBuyBillSelectColumnUseSnCount, TerminalBuyBillSelectColumnIsSnUseOver, TerminalBuyBillSelectColumnCreateAt, TerminalBuyBillSelectColumnCreateBy, TerminalBuyBillSelectColumnUpdateAt, TerminalBuyBillSelectColumnUpdateBy, TerminalBuyBillSelectColumnDeleteAt, TerminalBuyBillSelectColumnDeleteBy, TerminalBuyBillSelectColumnIsDelete, TerminalBuyBillSelectColumnRemark:
		return true
	}
	return false
}

func (e TerminalBuyBillSelectColumn) String() string {
	return string(e)
}

func (e *TerminalBuyBillSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalBuyBillSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalBuyBillSelectColumn", str)
	}
	return nil
}

func (e TerminalBuyBillSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalChangeSelectColumn string

const (
	// ID
	TerminalChangeSelectColumnID TerminalChangeSelectColumn = "id"
	// 终端变更ID
	TerminalChangeSelectColumnChangeID TerminalChangeSelectColumn = "change_id"
	// 新车牌
	TerminalChangeSelectColumnNewPlateNumber TerminalChangeSelectColumn = "new_plate_number"
	// 终端ID
	TerminalChangeSelectColumnTerminalID TerminalChangeSelectColumn = "terminal_id"
	// 终端型号ID
	TerminalChangeSelectColumnTerminalTypeID TerminalChangeSelectColumn = "terminal_type_id"
	// 旧车牌
	TerminalChangeSelectColumnOldPlateNumber TerminalChangeSelectColumn = "old_plate_number"
	// 所在部门ID
	TerminalChangeSelectColumnDeptID TerminalChangeSelectColumn = "dept_id"
	// 创建时间
	TerminalChangeSelectColumnCreateAt TerminalChangeSelectColumn = "create_at"
	// 创建人
	TerminalChangeSelectColumnCreateBy TerminalChangeSelectColumn = "create_by"
	// 备注
	TerminalChangeSelectColumnRemark TerminalChangeSelectColumn = "remark"
)

var AllTerminalChangeSelectColumn = []TerminalChangeSelectColumn{
	TerminalChangeSelectColumnID,
	TerminalChangeSelectColumnChangeID,
	TerminalChangeSelectColumnNewPlateNumber,
	TerminalChangeSelectColumnTerminalID,
	TerminalChangeSelectColumnTerminalTypeID,
	TerminalChangeSelectColumnOldPlateNumber,
	TerminalChangeSelectColumnDeptID,
	TerminalChangeSelectColumnCreateAt,
	TerminalChangeSelectColumnCreateBy,
	TerminalChangeSelectColumnRemark,
}

func (e TerminalChangeSelectColumn) IsValid() bool {
	switch e {
	case TerminalChangeSelectColumnID, TerminalChangeSelectColumnChangeID, TerminalChangeSelectColumnNewPlateNumber, TerminalChangeSelectColumnTerminalID, TerminalChangeSelectColumnTerminalTypeID, TerminalChangeSelectColumnOldPlateNumber, TerminalChangeSelectColumnDeptID, TerminalChangeSelectColumnCreateAt, TerminalChangeSelectColumnCreateBy, TerminalChangeSelectColumnRemark:
		return true
	}
	return false
}

func (e TerminalChangeSelectColumn) String() string {
	return string(e)
}

func (e *TerminalChangeSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalChangeSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalChangeSelectColumn", str)
	}
	return nil
}

func (e TerminalChangeSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalCheckLastSelectColumn string

const (
	// ID
	TerminalCheckLastSelectColumnID TerminalCheckLastSelectColumn = "id"
	// 最新终端检查ID
	TerminalCheckLastSelectColumnTerminalCheckLastID TerminalCheckLastSelectColumn = "terminal_check_last_id"
	// 终端ID
	TerminalCheckLastSelectColumnTerminalID TerminalCheckLastSelectColumn = "terminal_id"
	// acc状态
	TerminalCheckLastSelectColumnAcc TerminalCheckLastSelectColumn = "acc"
	// 制动信号（刹车）
	TerminalCheckLastSelectColumnBrake TerminalCheckLastSelectColumn = "brake"
	// 左转向灯信号
	TerminalCheckLastSelectColumnLeftLamp TerminalCheckLastSelectColumn = "left_lamp"
	// 右转向灯信号
	TerminalCheckLastSelectColumnRightLamp TerminalCheckLastSelectColumn = "right_lamp"
	// 近光灯信号
	TerminalCheckLastSelectColumnNearLamp TerminalCheckLastSelectColumn = "near_lamp"
	// 远光灯信号（大灯）
	TerminalCheckLastSelectColumnFarLamp TerminalCheckLastSelectColumn = "far_lamp"
	// 喇叭信号
	TerminalCheckLastSelectColumnLoudSpeaker TerminalCheckLastSelectColumn = "loud_speaker"
	// 定位状态
	TerminalCheckLastSelectColumnLocate TerminalCheckLastSelectColumn = "locate"
	// 前门
	TerminalCheckLastSelectColumnFrontDoor TerminalCheckLastSelectColumn = "front_door"
	// gps信号
	TerminalCheckLastSelectColumnGpsOpen TerminalCheckLastSelectColumn = "gps_open"
	// 北斗信号
	TerminalCheckLastSelectColumnBdOpen TerminalCheckLastSelectColumn = "bd_open"
	// 摄像头
	TerminalCheckLastSelectColumnCamera TerminalCheckLastSelectColumn = "camera"
	// 车速
	TerminalCheckLastSelectColumnVehicleSpeed TerminalCheckLastSelectColumn = "vehicle_speed"
	// 备注
	TerminalCheckLastSelectColumnRemark TerminalCheckLastSelectColumn = "remark"
	// 创建时间
	TerminalCheckLastSelectColumnCreateAt TerminalCheckLastSelectColumn = "create_at"
	// 创建人
	TerminalCheckLastSelectColumnCreateBy TerminalCheckLastSelectColumn = "create_by"
	// 修改时间
	TerminalCheckLastSelectColumnUpdateAt TerminalCheckLastSelectColumn = "update_at"
	// 修改人
	TerminalCheckLastSelectColumnUpdateBy TerminalCheckLastSelectColumn = "update_by"
	// 删除时间
	TerminalCheckLastSelectColumnDeleteAt TerminalCheckLastSelectColumn = "delete_at"
	// 删除人
	TerminalCheckLastSelectColumnDeleteBy TerminalCheckLastSelectColumn = "delete_by"
	// 是否删除
	TerminalCheckLastSelectColumnIsDelete TerminalCheckLastSelectColumn = "is_delete"
)

var AllTerminalCheckLastSelectColumn = []TerminalCheckLastSelectColumn{
	TerminalCheckLastSelectColumnID,
	TerminalCheckLastSelectColumnTerminalCheckLastID,
	TerminalCheckLastSelectColumnTerminalID,
	TerminalCheckLastSelectColumnAcc,
	TerminalCheckLastSelectColumnBrake,
	TerminalCheckLastSelectColumnLeftLamp,
	TerminalCheckLastSelectColumnRightLamp,
	TerminalCheckLastSelectColumnNearLamp,
	TerminalCheckLastSelectColumnFarLamp,
	TerminalCheckLastSelectColumnLoudSpeaker,
	TerminalCheckLastSelectColumnLocate,
	TerminalCheckLastSelectColumnFrontDoor,
	TerminalCheckLastSelectColumnGpsOpen,
	TerminalCheckLastSelectColumnBdOpen,
	TerminalCheckLastSelectColumnCamera,
	TerminalCheckLastSelectColumnVehicleSpeed,
	TerminalCheckLastSelectColumnRemark,
	TerminalCheckLastSelectColumnCreateAt,
	TerminalCheckLastSelectColumnCreateBy,
	TerminalCheckLastSelectColumnUpdateAt,
	TerminalCheckLastSelectColumnUpdateBy,
	TerminalCheckLastSelectColumnDeleteAt,
	TerminalCheckLastSelectColumnDeleteBy,
	TerminalCheckLastSelectColumnIsDelete,
}

func (e TerminalCheckLastSelectColumn) IsValid() bool {
	switch e {
	case TerminalCheckLastSelectColumnID, TerminalCheckLastSelectColumnTerminalCheckLastID, TerminalCheckLastSelectColumnTerminalID, TerminalCheckLastSelectColumnAcc, TerminalCheckLastSelectColumnBrake, TerminalCheckLastSelectColumnLeftLamp, TerminalCheckLastSelectColumnRightLamp, TerminalCheckLastSelectColumnNearLamp, TerminalCheckLastSelectColumnFarLamp, TerminalCheckLastSelectColumnLoudSpeaker, TerminalCheckLastSelectColumnLocate, TerminalCheckLastSelectColumnFrontDoor, TerminalCheckLastSelectColumnGpsOpen, TerminalCheckLastSelectColumnBdOpen, TerminalCheckLastSelectColumnCamera, TerminalCheckLastSelectColumnVehicleSpeed, TerminalCheckLastSelectColumnRemark, TerminalCheckLastSelectColumnCreateAt, TerminalCheckLastSelectColumnCreateBy, TerminalCheckLastSelectColumnUpdateAt, TerminalCheckLastSelectColumnUpdateBy, TerminalCheckLastSelectColumnDeleteAt, TerminalCheckLastSelectColumnDeleteBy, TerminalCheckLastSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalCheckLastSelectColumn) String() string {
	return string(e)
}

func (e *TerminalCheckLastSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalCheckLastSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalCheckLastSelectColumn", str)
	}
	return nil
}

func (e TerminalCheckLastSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalCheckParamSelectColumn string

const (
	// ID
	TerminalCheckParamSelectColumnID TerminalCheckParamSelectColumn = "id"
	// 车辆终端达标要求ID
	TerminalCheckParamSelectColumnTerminalCheckParamID TerminalCheckParamSelectColumn = "terminal_check_param_id"
	// acc
	TerminalCheckParamSelectColumnAcc TerminalCheckParamSelectColumn = "acc"
	// 制动信号（刹车）
	TerminalCheckParamSelectColumnBrake TerminalCheckParamSelectColumn = "brake"
	// 左转向灯信号
	TerminalCheckParamSelectColumnLeftLamp TerminalCheckParamSelectColumn = "left_lamp"
	// 右转向灯信号
	TerminalCheckParamSelectColumnRightLamp TerminalCheckParamSelectColumn = "right_lamp"
	// 近光灯信号
	TerminalCheckParamSelectColumnNearLamp TerminalCheckParamSelectColumn = "near_lamp"
	// 远光灯信号（大灯）
	TerminalCheckParamSelectColumnFarLamp TerminalCheckParamSelectColumn = "far_lamp"
	// 喇叭信号
	TerminalCheckParamSelectColumnLoudSpeaker TerminalCheckParamSelectColumn = "loud_speaker"
	// 倒挡信号
	TerminalCheckParamSelectColumnReverse TerminalCheckParamSelectColumn = "reverse"
	// 定位状态
	TerminalCheckParamSelectColumnLocate TerminalCheckParamSelectColumn = "locate"
	// 前门
	TerminalCheckParamSelectColumnFrontDoor TerminalCheckParamSelectColumn = "front_door"
	// 中门
	TerminalCheckParamSelectColumnMiddleDoor TerminalCheckParamSelectColumn = "middle_door"
	// 后门
	TerminalCheckParamSelectColumnBackDoor TerminalCheckParamSelectColumn = "back_door"
	// gps信号
	TerminalCheckParamSelectColumnGpsOpen TerminalCheckParamSelectColumn = "gps_open"
	// 北斗信号
	TerminalCheckParamSelectColumnBdOpen TerminalCheckParamSelectColumn = "bd_open"
	// 语音播报器
	TerminalCheckParamSelectColumnVoiceDevice TerminalCheckParamSelectColumn = "voice_device"
	// 摄像头
	TerminalCheckParamSelectColumnCamera TerminalCheckParamSelectColumn = "camera"
	// 紧急报警按钮
	TerminalCheckParamSelectColumnEmergencyAlarm TerminalCheckParamSelectColumn = "emergency_alarm"
	// 里程数
	TerminalCheckParamSelectColumnMileage TerminalCheckParamSelectColumn = "mileage"
	// 油量
	TerminalCheckParamSelectColumnOilmass TerminalCheckParamSelectColumn = "oilmass"
	// 车速
	TerminalCheckParamSelectColumnVehicleSpeed TerminalCheckParamSelectColumn = "vehicle_speed"
	// 主电源掉电报警
	TerminalCheckParamSelectColumnPowerAlarm TerminalCheckParamSelectColumn = "power_alarm"
	// 是否通过
	TerminalCheckParamSelectColumnPass TerminalCheckParamSelectColumn = "pass"
)

var AllTerminalCheckParamSelectColumn = []TerminalCheckParamSelectColumn{
	TerminalCheckParamSelectColumnID,
	TerminalCheckParamSelectColumnTerminalCheckParamID,
	TerminalCheckParamSelectColumnAcc,
	TerminalCheckParamSelectColumnBrake,
	TerminalCheckParamSelectColumnLeftLamp,
	TerminalCheckParamSelectColumnRightLamp,
	TerminalCheckParamSelectColumnNearLamp,
	TerminalCheckParamSelectColumnFarLamp,
	TerminalCheckParamSelectColumnLoudSpeaker,
	TerminalCheckParamSelectColumnReverse,
	TerminalCheckParamSelectColumnLocate,
	TerminalCheckParamSelectColumnFrontDoor,
	TerminalCheckParamSelectColumnMiddleDoor,
	TerminalCheckParamSelectColumnBackDoor,
	TerminalCheckParamSelectColumnGpsOpen,
	TerminalCheckParamSelectColumnBdOpen,
	TerminalCheckParamSelectColumnVoiceDevice,
	TerminalCheckParamSelectColumnCamera,
	TerminalCheckParamSelectColumnEmergencyAlarm,
	TerminalCheckParamSelectColumnMileage,
	TerminalCheckParamSelectColumnOilmass,
	TerminalCheckParamSelectColumnVehicleSpeed,
	TerminalCheckParamSelectColumnPowerAlarm,
	TerminalCheckParamSelectColumnPass,
}

func (e TerminalCheckParamSelectColumn) IsValid() bool {
	switch e {
	case TerminalCheckParamSelectColumnID, TerminalCheckParamSelectColumnTerminalCheckParamID, TerminalCheckParamSelectColumnAcc, TerminalCheckParamSelectColumnBrake, TerminalCheckParamSelectColumnLeftLamp, TerminalCheckParamSelectColumnRightLamp, TerminalCheckParamSelectColumnNearLamp, TerminalCheckParamSelectColumnFarLamp, TerminalCheckParamSelectColumnLoudSpeaker, TerminalCheckParamSelectColumnReverse, TerminalCheckParamSelectColumnLocate, TerminalCheckParamSelectColumnFrontDoor, TerminalCheckParamSelectColumnMiddleDoor, TerminalCheckParamSelectColumnBackDoor, TerminalCheckParamSelectColumnGpsOpen, TerminalCheckParamSelectColumnBdOpen, TerminalCheckParamSelectColumnVoiceDevice, TerminalCheckParamSelectColumnCamera, TerminalCheckParamSelectColumnEmergencyAlarm, TerminalCheckParamSelectColumnMileage, TerminalCheckParamSelectColumnOilmass, TerminalCheckParamSelectColumnVehicleSpeed, TerminalCheckParamSelectColumnPowerAlarm, TerminalCheckParamSelectColumnPass:
		return true
	}
	return false
}

func (e TerminalCheckParamSelectColumn) String() string {
	return string(e)
}

func (e *TerminalCheckParamSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalCheckParamSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalCheckParamSelectColumn", str)
	}
	return nil
}

func (e TerminalCheckParamSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalCheckSelectColumn string

const (
	// ID
	TerminalCheckSelectColumnID TerminalCheckSelectColumn = "id"
	// 车辆达标情况ID
	TerminalCheckSelectColumnTerminalCheckID TerminalCheckSelectColumn = "terminal_check_id"
	// 终端ID
	TerminalCheckSelectColumnTerminalID TerminalCheckSelectColumn = "terminal_id"
	// acc状态
	TerminalCheckSelectColumnAcc TerminalCheckSelectColumn = "acc"
	// 制动信号（刹车）
	TerminalCheckSelectColumnBrake TerminalCheckSelectColumn = "brake"
	// 左转向灯信号
	TerminalCheckSelectColumnLeftLamp TerminalCheckSelectColumn = "left_lamp"
	// 右转向灯信号
	TerminalCheckSelectColumnRightLamp TerminalCheckSelectColumn = "right_lamp"
	// 近光灯信号
	TerminalCheckSelectColumnNearLamp TerminalCheckSelectColumn = "near_lamp"
	// 远光灯信号（大灯）
	TerminalCheckSelectColumnFarLamp TerminalCheckSelectColumn = "far_lamp"
	// 喇叭信号
	TerminalCheckSelectColumnLoudSpeaker TerminalCheckSelectColumn = "loud_speaker"
	// 倒挡信号
	TerminalCheckSelectColumnReverse TerminalCheckSelectColumn = "reverse"
	// 定位状态
	TerminalCheckSelectColumnLocate TerminalCheckSelectColumn = "locate"
	// 前门
	TerminalCheckSelectColumnFrontDoor TerminalCheckSelectColumn = "front_door"
	// 中门
	TerminalCheckSelectColumnMiddleDoor TerminalCheckSelectColumn = "middle_door"
	// 后门
	TerminalCheckSelectColumnBackDoor TerminalCheckSelectColumn = "back_door"
	// gps信号
	TerminalCheckSelectColumnGpsOpen TerminalCheckSelectColumn = "gps_open"
	// 北斗信号
	TerminalCheckSelectColumnBdOpen TerminalCheckSelectColumn = "bd_open"
	// 语音播报器
	TerminalCheckSelectColumnVoiceDevice TerminalCheckSelectColumn = "voice_device"
	// 摄像头
	TerminalCheckSelectColumnCamera TerminalCheckSelectColumn = "camera"
	// 紧急报警按钮
	TerminalCheckSelectColumnEmergencyAlarm TerminalCheckSelectColumn = "emergency_alarm"
	// 里程数
	TerminalCheckSelectColumnMileage TerminalCheckSelectColumn = "mileage"
	// 油量
	TerminalCheckSelectColumnOilmass TerminalCheckSelectColumn = "oilmass"
	// 车速
	TerminalCheckSelectColumnVehicleSpeed TerminalCheckSelectColumn = "vehicle_speed"
	// 主电源掉电报警
	TerminalCheckSelectColumnPowerAlarm TerminalCheckSelectColumn = "power_alarm"
	// 是否通过
	TerminalCheckSelectColumnPass TerminalCheckSelectColumn = "pass"
	// 空调
	TerminalCheckSelectColumnAirConditioning TerminalCheckSelectColumn = "air_conditioning"
	// 自动车速保存
	TerminalCheckSelectColumnAutoVehicleSpeed TerminalCheckSelectColumn = "auto_vehicle_speed"
	// 是否北斗国标脉冲信号
	TerminalCheckSelectColumnIsImpulseSpeed TerminalCheckSelectColumn = "is_impulse_speed"
	// 故障截止时间
	TerminalCheckSelectColumnFaultEndTime TerminalCheckSelectColumn = "fault_end_time"
	// 视频情况
	TerminalCheckSelectColumnVideoPass TerminalCheckSelectColumn = "video_pass"
	// 创建时间
	TerminalCheckSelectColumnCreateAt TerminalCheckSelectColumn = "create_at"
	// 创建人
	TerminalCheckSelectColumnCreateBy TerminalCheckSelectColumn = "create_by"
	// 更新时间
	TerminalCheckSelectColumnUpdateAt TerminalCheckSelectColumn = "update_at"
	// 更新人
	TerminalCheckSelectColumnUpdateBy TerminalCheckSelectColumn = "update_by"
	// 删除时间
	TerminalCheckSelectColumnDeleteAt TerminalCheckSelectColumn = "delete_at"
	// 删除人
	TerminalCheckSelectColumnDeleteBy TerminalCheckSelectColumn = "delete_by"
	// 是否删除
	TerminalCheckSelectColumnIsDelete TerminalCheckSelectColumn = "is_delete"
)

var AllTerminalCheckSelectColumn = []TerminalCheckSelectColumn{
	TerminalCheckSelectColumnID,
	TerminalCheckSelectColumnTerminalCheckID,
	TerminalCheckSelectColumnTerminalID,
	TerminalCheckSelectColumnAcc,
	TerminalCheckSelectColumnBrake,
	TerminalCheckSelectColumnLeftLamp,
	TerminalCheckSelectColumnRightLamp,
	TerminalCheckSelectColumnNearLamp,
	TerminalCheckSelectColumnFarLamp,
	TerminalCheckSelectColumnLoudSpeaker,
	TerminalCheckSelectColumnReverse,
	TerminalCheckSelectColumnLocate,
	TerminalCheckSelectColumnFrontDoor,
	TerminalCheckSelectColumnMiddleDoor,
	TerminalCheckSelectColumnBackDoor,
	TerminalCheckSelectColumnGpsOpen,
	TerminalCheckSelectColumnBdOpen,
	TerminalCheckSelectColumnVoiceDevice,
	TerminalCheckSelectColumnCamera,
	TerminalCheckSelectColumnEmergencyAlarm,
	TerminalCheckSelectColumnMileage,
	TerminalCheckSelectColumnOilmass,
	TerminalCheckSelectColumnVehicleSpeed,
	TerminalCheckSelectColumnPowerAlarm,
	TerminalCheckSelectColumnPass,
	TerminalCheckSelectColumnAirConditioning,
	TerminalCheckSelectColumnAutoVehicleSpeed,
	TerminalCheckSelectColumnIsImpulseSpeed,
	TerminalCheckSelectColumnFaultEndTime,
	TerminalCheckSelectColumnVideoPass,
	TerminalCheckSelectColumnCreateAt,
	TerminalCheckSelectColumnCreateBy,
	TerminalCheckSelectColumnUpdateAt,
	TerminalCheckSelectColumnUpdateBy,
	TerminalCheckSelectColumnDeleteAt,
	TerminalCheckSelectColumnDeleteBy,
	TerminalCheckSelectColumnIsDelete,
}

func (e TerminalCheckSelectColumn) IsValid() bool {
	switch e {
	case TerminalCheckSelectColumnID, TerminalCheckSelectColumnTerminalCheckID, TerminalCheckSelectColumnTerminalID, TerminalCheckSelectColumnAcc, TerminalCheckSelectColumnBrake, TerminalCheckSelectColumnLeftLamp, TerminalCheckSelectColumnRightLamp, TerminalCheckSelectColumnNearLamp, TerminalCheckSelectColumnFarLamp, TerminalCheckSelectColumnLoudSpeaker, TerminalCheckSelectColumnReverse, TerminalCheckSelectColumnLocate, TerminalCheckSelectColumnFrontDoor, TerminalCheckSelectColumnMiddleDoor, TerminalCheckSelectColumnBackDoor, TerminalCheckSelectColumnGpsOpen, TerminalCheckSelectColumnBdOpen, TerminalCheckSelectColumnVoiceDevice, TerminalCheckSelectColumnCamera, TerminalCheckSelectColumnEmergencyAlarm, TerminalCheckSelectColumnMileage, TerminalCheckSelectColumnOilmass, TerminalCheckSelectColumnVehicleSpeed, TerminalCheckSelectColumnPowerAlarm, TerminalCheckSelectColumnPass, TerminalCheckSelectColumnAirConditioning, TerminalCheckSelectColumnAutoVehicleSpeed, TerminalCheckSelectColumnIsImpulseSpeed, TerminalCheckSelectColumnFaultEndTime, TerminalCheckSelectColumnVideoPass, TerminalCheckSelectColumnCreateAt, TerminalCheckSelectColumnCreateBy, TerminalCheckSelectColumnUpdateAt, TerminalCheckSelectColumnUpdateBy, TerminalCheckSelectColumnDeleteAt, TerminalCheckSelectColumnDeleteBy, TerminalCheckSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalCheckSelectColumn) String() string {
	return string(e)
}

func (e *TerminalCheckSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalCheckSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalCheckSelectColumn", str)
	}
	return nil
}

func (e TerminalCheckSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalFactorySelectColumn string

const (
	// ID
	TerminalFactorySelectColumnID TerminalFactorySelectColumn = "id"
	// 工厂ID
	TerminalFactorySelectColumnFactoryID TerminalFactorySelectColumn = "factory_id"
	// 厂家名称
	TerminalFactorySelectColumnFactoryName TerminalFactorySelectColumn = "factory_name"
	// 备注
	TerminalFactorySelectColumnRemark TerminalFactorySelectColumn = "remark"
	// 联系人
	TerminalFactorySelectColumnContact TerminalFactorySelectColumn = "contact"
	// 联系电话
	TerminalFactorySelectColumnContactPhone TerminalFactorySelectColumn = "contact_phone"
	// 厂家地址
	TerminalFactorySelectColumnAddress TerminalFactorySelectColumn = "address"
	// 技术支持人
	TerminalFactorySelectColumnTechContact TerminalFactorySelectColumn = "tech_contact"
	// 技术支持电话
	TerminalFactorySelectColumnTechContactPhone TerminalFactorySelectColumn = "tech_contact_phone"
	// 创建时间
	TerminalFactorySelectColumnCreateAt TerminalFactorySelectColumn = "create_at"
	// 创建人
	TerminalFactorySelectColumnCreateBy TerminalFactorySelectColumn = "create_by"
	// 更新时间
	TerminalFactorySelectColumnUpdateAt TerminalFactorySelectColumn = "update_at"
	// 更新人
	TerminalFactorySelectColumnUpdateBy TerminalFactorySelectColumn = "update_by"
	// 删除时间
	TerminalFactorySelectColumnDeleteAt TerminalFactorySelectColumn = "delete_at"
	// 删除人
	TerminalFactorySelectColumnDeleteBy TerminalFactorySelectColumn = "delete_by"
	// 是否删除
	TerminalFactorySelectColumnIsDelete TerminalFactorySelectColumn = "is_delete"
)

var AllTerminalFactorySelectColumn = []TerminalFactorySelectColumn{
	TerminalFactorySelectColumnID,
	TerminalFactorySelectColumnFactoryID,
	TerminalFactorySelectColumnFactoryName,
	TerminalFactorySelectColumnRemark,
	TerminalFactorySelectColumnContact,
	TerminalFactorySelectColumnContactPhone,
	TerminalFactorySelectColumnAddress,
	TerminalFactorySelectColumnTechContact,
	TerminalFactorySelectColumnTechContactPhone,
	TerminalFactorySelectColumnCreateAt,
	TerminalFactorySelectColumnCreateBy,
	TerminalFactorySelectColumnUpdateAt,
	TerminalFactorySelectColumnUpdateBy,
	TerminalFactorySelectColumnDeleteAt,
	TerminalFactorySelectColumnDeleteBy,
	TerminalFactorySelectColumnIsDelete,
}

func (e TerminalFactorySelectColumn) IsValid() bool {
	switch e {
	case TerminalFactorySelectColumnID, TerminalFactorySelectColumnFactoryID, TerminalFactorySelectColumnFactoryName, TerminalFactorySelectColumnRemark, TerminalFactorySelectColumnContact, TerminalFactorySelectColumnContactPhone, TerminalFactorySelectColumnAddress, TerminalFactorySelectColumnTechContact, TerminalFactorySelectColumnTechContactPhone, TerminalFactorySelectColumnCreateAt, TerminalFactorySelectColumnCreateBy, TerminalFactorySelectColumnUpdateAt, TerminalFactorySelectColumnUpdateBy, TerminalFactorySelectColumnDeleteAt, TerminalFactorySelectColumnDeleteBy, TerminalFactorySelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalFactorySelectColumn) String() string {
	return string(e)
}

func (e *TerminalFactorySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalFactorySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalFactorySelectColumn", str)
	}
	return nil
}

func (e TerminalFactorySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalModalSelectColumn string

const (
	// ID
	TerminalModalSelectColumnID TerminalModalSelectColumn = "id"
	// 终端型号ID
	TerminalModalSelectColumnTerminalModalID TerminalModalSelectColumn = "terminal_modal_id"
	// 生产厂家ID
	TerminalModalSelectColumnFactoryID TerminalModalSelectColumn = "factory_id"
	// 终端类型ID
	TerminalModalSelectColumnTerminalTypeID TerminalModalSelectColumn = "terminal_type_id"
	// 型号
	TerminalModalSelectColumnModalName TerminalModalSelectColumn = "modal_name"
	// 备注
	TerminalModalSelectColumnRemark TerminalModalSelectColumn = "remark"
	// 备案编号
	TerminalModalSelectColumnRecordNo TerminalModalSelectColumn = "record_no"
	// 代理商ID
	TerminalModalSelectColumnProxyrgID TerminalModalSelectColumn = "proxyrg_id"
	// adas型号
	TerminalModalSelectColumnAdasModal TerminalModalSelectColumn = "adas_modal"
	// 是否渣土车终端
	TerminalModalSelectColumnIsSlagCarTeminal TerminalModalSelectColumn = "is_slag_car_teminal"
	// 是否交通局4G终端
	TerminalModalSelectColumnIsTransportDept4g TerminalModalSelectColumn = "is_transport_dept_4g"
	// 是否提交终端技术要求通过相关检测情况
	TerminalModalSelectColumnIsTestingSituation TerminalModalSelectColumn = "is_testing_situation"
	// 终端具备出租汽车电召、电子上岗证等功能
	TerminalModalSelectColumnIsElectronicsPostCard TerminalModalSelectColumn = "is_electronics_post_card"
	// 创建时间
	TerminalModalSelectColumnCreateAt TerminalModalSelectColumn = "create_at"
	// 创建人
	TerminalModalSelectColumnCreateBy TerminalModalSelectColumn = "create_by"
	// 修改时间
	TerminalModalSelectColumnUpdateAt TerminalModalSelectColumn = "update_at"
	// 修改人
	TerminalModalSelectColumnUpdateBy TerminalModalSelectColumn = "update_by"
	// 删除时间
	TerminalModalSelectColumnDeleteAt TerminalModalSelectColumn = "delete_at"
	// 删除人
	TerminalModalSelectColumnDeleteBy TerminalModalSelectColumn = "delete_by"
	// 是否被删除
	TerminalModalSelectColumnIsDelete TerminalModalSelectColumn = "is_delete"
)

var AllTerminalModalSelectColumn = []TerminalModalSelectColumn{
	TerminalModalSelectColumnID,
	TerminalModalSelectColumnTerminalModalID,
	TerminalModalSelectColumnFactoryID,
	TerminalModalSelectColumnTerminalTypeID,
	TerminalModalSelectColumnModalName,
	TerminalModalSelectColumnRemark,
	TerminalModalSelectColumnRecordNo,
	TerminalModalSelectColumnProxyrgID,
	TerminalModalSelectColumnAdasModal,
	TerminalModalSelectColumnIsSlagCarTeminal,
	TerminalModalSelectColumnIsTransportDept4g,
	TerminalModalSelectColumnIsTestingSituation,
	TerminalModalSelectColumnIsElectronicsPostCard,
	TerminalModalSelectColumnCreateAt,
	TerminalModalSelectColumnCreateBy,
	TerminalModalSelectColumnUpdateAt,
	TerminalModalSelectColumnUpdateBy,
	TerminalModalSelectColumnDeleteAt,
	TerminalModalSelectColumnDeleteBy,
	TerminalModalSelectColumnIsDelete,
}

func (e TerminalModalSelectColumn) IsValid() bool {
	switch e {
	case TerminalModalSelectColumnID, TerminalModalSelectColumnTerminalModalID, TerminalModalSelectColumnFactoryID, TerminalModalSelectColumnTerminalTypeID, TerminalModalSelectColumnModalName, TerminalModalSelectColumnRemark, TerminalModalSelectColumnRecordNo, TerminalModalSelectColumnProxyrgID, TerminalModalSelectColumnAdasModal, TerminalModalSelectColumnIsSlagCarTeminal, TerminalModalSelectColumnIsTransportDept4g, TerminalModalSelectColumnIsTestingSituation, TerminalModalSelectColumnIsElectronicsPostCard, TerminalModalSelectColumnCreateAt, TerminalModalSelectColumnCreateBy, TerminalModalSelectColumnUpdateAt, TerminalModalSelectColumnUpdateBy, TerminalModalSelectColumnDeleteAt, TerminalModalSelectColumnDeleteBy, TerminalModalSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalModalSelectColumn) String() string {
	return string(e)
}

func (e *TerminalModalSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalModalSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalModalSelectColumn", str)
	}
	return nil
}

func (e TerminalModalSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalOperLogSelectColumn string

const (
	// ID
	TerminalOperLogSelectColumnID TerminalOperLogSelectColumn = "id"
	// 终端操作日志ID
	TerminalOperLogSelectColumnLogID TerminalOperLogSelectColumn = "log_id"
	// 终端ID
	TerminalOperLogSelectColumnTerminalID TerminalOperLogSelectColumn = "terminal_id"
	// 操作类型
	TerminalOperLogSelectColumnOperateType TerminalOperLogSelectColumn = "operate_type"
	// 请求信息
	TerminalOperLogSelectColumnReqInfo TerminalOperLogSelectColumn = "req_info"
	// 应答情况
	TerminalOperLogSelectColumnRespInfo TerminalOperLogSelectColumn = "resp_info"
	// 操作详情
	TerminalOperLogSelectColumnOperDetail TerminalOperLogSelectColumn = "oper_detail"
	// 执行状态
	TerminalOperLogSelectColumnState TerminalOperLogSelectColumn = "state"
	// 请求时间
	TerminalOperLogSelectColumnReqTime TerminalOperLogSelectColumn = "req_time"
	// 应答时间
	TerminalOperLogSelectColumnRespTime TerminalOperLogSelectColumn = "resp_time"
	// 创建时间
	TerminalOperLogSelectColumnCreateAt TerminalOperLogSelectColumn = "create_at"
	// 创建人
	TerminalOperLogSelectColumnCreateBy TerminalOperLogSelectColumn = "create_by"
	// 更新时间
	TerminalOperLogSelectColumnUpdateAt TerminalOperLogSelectColumn = "update_at"
	// 更新人
	TerminalOperLogSelectColumnUpdateBy TerminalOperLogSelectColumn = "update_by"
	// 删除时间
	TerminalOperLogSelectColumnDeleteAt TerminalOperLogSelectColumn = "delete_at"
	// 删除人
	TerminalOperLogSelectColumnDeleteBy TerminalOperLogSelectColumn = "delete_by"
	// 是否删除
	TerminalOperLogSelectColumnIsDelete TerminalOperLogSelectColumn = "is_delete"
)

var AllTerminalOperLogSelectColumn = []TerminalOperLogSelectColumn{
	TerminalOperLogSelectColumnID,
	TerminalOperLogSelectColumnLogID,
	TerminalOperLogSelectColumnTerminalID,
	TerminalOperLogSelectColumnOperateType,
	TerminalOperLogSelectColumnReqInfo,
	TerminalOperLogSelectColumnRespInfo,
	TerminalOperLogSelectColumnOperDetail,
	TerminalOperLogSelectColumnState,
	TerminalOperLogSelectColumnReqTime,
	TerminalOperLogSelectColumnRespTime,
	TerminalOperLogSelectColumnCreateAt,
	TerminalOperLogSelectColumnCreateBy,
	TerminalOperLogSelectColumnUpdateAt,
	TerminalOperLogSelectColumnUpdateBy,
	TerminalOperLogSelectColumnDeleteAt,
	TerminalOperLogSelectColumnDeleteBy,
	TerminalOperLogSelectColumnIsDelete,
}

func (e TerminalOperLogSelectColumn) IsValid() bool {
	switch e {
	case TerminalOperLogSelectColumnID, TerminalOperLogSelectColumnLogID, TerminalOperLogSelectColumnTerminalID, TerminalOperLogSelectColumnOperateType, TerminalOperLogSelectColumnReqInfo, TerminalOperLogSelectColumnRespInfo, TerminalOperLogSelectColumnOperDetail, TerminalOperLogSelectColumnState, TerminalOperLogSelectColumnReqTime, TerminalOperLogSelectColumnRespTime, TerminalOperLogSelectColumnCreateAt, TerminalOperLogSelectColumnCreateBy, TerminalOperLogSelectColumnUpdateAt, TerminalOperLogSelectColumnUpdateBy, TerminalOperLogSelectColumnDeleteAt, TerminalOperLogSelectColumnDeleteBy, TerminalOperLogSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalOperLogSelectColumn) String() string {
	return string(e)
}

func (e *TerminalOperLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalOperLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalOperLogSelectColumn", str)
	}
	return nil
}

func (e TerminalOperLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalParamConfigSelectColumn string

const (
	// ID
	TerminalParamConfigSelectColumnID TerminalParamConfigSelectColumn = "id"
	// 终端参数配置ID
	TerminalParamConfigSelectColumnConfigID TerminalParamConfigSelectColumn = "config_id"
	// 参数项ID
	TerminalParamConfigSelectColumnParamItemID TerminalParamConfigSelectColumn = "param_item_id"
	// 参数值
	TerminalParamConfigSelectColumnParamValue TerminalParamConfigSelectColumn = "param_value"
	// 终端ID
	TerminalParamConfigSelectColumnTerminalID TerminalParamConfigSelectColumn = "terminal_id"
	// 最近一次操作值
	TerminalParamConfigSelectColumnSuccessValue TerminalParamConfigSelectColumn = "success_value"
	// 上次参数设置状态
	TerminalParamConfigSelectColumnLastState TerminalParamConfigSelectColumn = "last_state"
	// 上次参数设置时间
	TerminalParamConfigSelectColumnLastStateTime TerminalParamConfigSelectColumn = "last_state_time"
	// 最近一次操作时间
	TerminalParamConfigSelectColumnSuccessTime TerminalParamConfigSelectColumn = "success_time"
	// 上次操作人
	TerminalParamConfigSelectColumnLastOperator TerminalParamConfigSelectColumn = "last_operator"
	// 创建时间
	TerminalParamConfigSelectColumnCreateAt TerminalParamConfigSelectColumn = "create_at"
	// 创建人
	TerminalParamConfigSelectColumnCreateBy TerminalParamConfigSelectColumn = "create_by"
	// 修改时间
	TerminalParamConfigSelectColumnUpdateAt TerminalParamConfigSelectColumn = "update_at"
	// 修改人
	TerminalParamConfigSelectColumnUpdateBy TerminalParamConfigSelectColumn = "update_by"
	// 删除时间
	TerminalParamConfigSelectColumnDeleteAt TerminalParamConfigSelectColumn = "delete_at"
	// 删除人
	TerminalParamConfigSelectColumnDeleteBy TerminalParamConfigSelectColumn = "delete_by"
	// 是否删除
	TerminalParamConfigSelectColumnIsDelete TerminalParamConfigSelectColumn = "is_delete"
	// 备注
	TerminalParamConfigSelectColumnRemark TerminalParamConfigSelectColumn = "remark"
)

var AllTerminalParamConfigSelectColumn = []TerminalParamConfigSelectColumn{
	TerminalParamConfigSelectColumnID,
	TerminalParamConfigSelectColumnConfigID,
	TerminalParamConfigSelectColumnParamItemID,
	TerminalParamConfigSelectColumnParamValue,
	TerminalParamConfigSelectColumnTerminalID,
	TerminalParamConfigSelectColumnSuccessValue,
	TerminalParamConfigSelectColumnLastState,
	TerminalParamConfigSelectColumnLastStateTime,
	TerminalParamConfigSelectColumnSuccessTime,
	TerminalParamConfigSelectColumnLastOperator,
	TerminalParamConfigSelectColumnCreateAt,
	TerminalParamConfigSelectColumnCreateBy,
	TerminalParamConfigSelectColumnUpdateAt,
	TerminalParamConfigSelectColumnUpdateBy,
	TerminalParamConfigSelectColumnDeleteAt,
	TerminalParamConfigSelectColumnDeleteBy,
	TerminalParamConfigSelectColumnIsDelete,
	TerminalParamConfigSelectColumnRemark,
}

func (e TerminalParamConfigSelectColumn) IsValid() bool {
	switch e {
	case TerminalParamConfigSelectColumnID, TerminalParamConfigSelectColumnConfigID, TerminalParamConfigSelectColumnParamItemID, TerminalParamConfigSelectColumnParamValue, TerminalParamConfigSelectColumnTerminalID, TerminalParamConfigSelectColumnSuccessValue, TerminalParamConfigSelectColumnLastState, TerminalParamConfigSelectColumnLastStateTime, TerminalParamConfigSelectColumnSuccessTime, TerminalParamConfigSelectColumnLastOperator, TerminalParamConfigSelectColumnCreateAt, TerminalParamConfigSelectColumnCreateBy, TerminalParamConfigSelectColumnUpdateAt, TerminalParamConfigSelectColumnUpdateBy, TerminalParamConfigSelectColumnDeleteAt, TerminalParamConfigSelectColumnDeleteBy, TerminalParamConfigSelectColumnIsDelete, TerminalParamConfigSelectColumnRemark:
		return true
	}
	return false
}

func (e TerminalParamConfigSelectColumn) String() string {
	return string(e)
}

func (e *TerminalParamConfigSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalParamConfigSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalParamConfigSelectColumn", str)
	}
	return nil
}

func (e TerminalParamConfigSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalParamItemSelectColumn string

const (
	// ID
	TerminalParamItemSelectColumnID TerminalParamItemSelectColumn = "id"
	// 终端参数配置项ID
	TerminalParamItemSelectColumnParamItemID TerminalParamItemSelectColumn = "param_item_id"
	// 参数项名称
	TerminalParamItemSelectColumnParamItemName TerminalParamItemSelectColumn = "param_item_name"
	// 参数类型
	TerminalParamItemSelectColumnParamTypeID TerminalParamItemSelectColumn = "param_type_id"
	// 数据类型
	TerminalParamItemSelectColumnDataType TerminalParamItemSelectColumn = "data_type"
	// 是否枚举
	TerminalParamItemSelectColumnIsEnum TerminalParamItemSelectColumn = "is_enum"
	// 是否含有子参数
	TerminalParamItemSelectColumnHasSubparam TerminalParamItemSelectColumn = "has_subparam"
	// 创建时间
	TerminalParamItemSelectColumnCreateAt TerminalParamItemSelectColumn = "create_at"
	// 创建人
	TerminalParamItemSelectColumnCreateBy TerminalParamItemSelectColumn = "create_by"
	// 更新时间
	TerminalParamItemSelectColumnUpdateAt TerminalParamItemSelectColumn = "update_at"
	// 更新人
	TerminalParamItemSelectColumnUpdateBy TerminalParamItemSelectColumn = "update_by"
	// 删除时间
	TerminalParamItemSelectColumnDeleteAt TerminalParamItemSelectColumn = "delete_at"
	// 删除人
	TerminalParamItemSelectColumnDeleteBy TerminalParamItemSelectColumn = "delete_by"
	// 是否删除
	TerminalParamItemSelectColumnIsDelete TerminalParamItemSelectColumn = "is_delete"
	// 备注
	TerminalParamItemSelectColumnRemark TerminalParamItemSelectColumn = "remark"
	// 枚举关联字典ID
	TerminalParamItemSelectColumnDictID TerminalParamItemSelectColumn = "dict_id"
)

var AllTerminalParamItemSelectColumn = []TerminalParamItemSelectColumn{
	TerminalParamItemSelectColumnID,
	TerminalParamItemSelectColumnParamItemID,
	TerminalParamItemSelectColumnParamItemName,
	TerminalParamItemSelectColumnParamTypeID,
	TerminalParamItemSelectColumnDataType,
	TerminalParamItemSelectColumnIsEnum,
	TerminalParamItemSelectColumnHasSubparam,
	TerminalParamItemSelectColumnCreateAt,
	TerminalParamItemSelectColumnCreateBy,
	TerminalParamItemSelectColumnUpdateAt,
	TerminalParamItemSelectColumnUpdateBy,
	TerminalParamItemSelectColumnDeleteAt,
	TerminalParamItemSelectColumnDeleteBy,
	TerminalParamItemSelectColumnIsDelete,
	TerminalParamItemSelectColumnRemark,
	TerminalParamItemSelectColumnDictID,
}

func (e TerminalParamItemSelectColumn) IsValid() bool {
	switch e {
	case TerminalParamItemSelectColumnID, TerminalParamItemSelectColumnParamItemID, TerminalParamItemSelectColumnParamItemName, TerminalParamItemSelectColumnParamTypeID, TerminalParamItemSelectColumnDataType, TerminalParamItemSelectColumnIsEnum, TerminalParamItemSelectColumnHasSubparam, TerminalParamItemSelectColumnCreateAt, TerminalParamItemSelectColumnCreateBy, TerminalParamItemSelectColumnUpdateAt, TerminalParamItemSelectColumnUpdateBy, TerminalParamItemSelectColumnDeleteAt, TerminalParamItemSelectColumnDeleteBy, TerminalParamItemSelectColumnIsDelete, TerminalParamItemSelectColumnRemark, TerminalParamItemSelectColumnDictID:
		return true
	}
	return false
}

func (e TerminalParamItemSelectColumn) String() string {
	return string(e)
}

func (e *TerminalParamItemSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalParamItemSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalParamItemSelectColumn", str)
	}
	return nil
}

func (e TerminalParamItemSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalParamSubSelectColumn string

const (
	// ID
	TerminalParamSubSelectColumnID TerminalParamSubSelectColumn = "id"
	// 自参数ID
	TerminalParamSubSelectColumnParamSubID TerminalParamSubSelectColumn = "param_sub_id"
	// 参数配置项ID
	TerminalParamSubSelectColumnParamID TerminalParamSubSelectColumn = "param_id"
	// 起始比特位
	TerminalParamSubSelectColumnBitStart TerminalParamSubSelectColumn = "bit_start"
	// 结束比特位
	TerminalParamSubSelectColumnBitEnd TerminalParamSubSelectColumn = "bit_end"
	// 子参数名称
	TerminalParamSubSelectColumnParamSubName TerminalParamSubSelectColumn = "param_sub_name"
	// 是否是枚举
	TerminalParamSubSelectColumnIsEnum TerminalParamSubSelectColumn = "is_enum"
	// 枚举关联字典ID
	TerminalParamSubSelectColumnEnumDictID TerminalParamSubSelectColumn = "enum_dict_id"
	// 参数值
	TerminalParamSubSelectColumnParamValue TerminalParamSubSelectColumn = "param_value"
	// 添加时间
	TerminalParamSubSelectColumnCreateAt TerminalParamSubSelectColumn = "create_at"
	// 添加人
	TerminalParamSubSelectColumnCreateBy TerminalParamSubSelectColumn = "create_by"
	// 更新时间
	TerminalParamSubSelectColumnUpdateAt TerminalParamSubSelectColumn = "update_at"
	// 更新人
	TerminalParamSubSelectColumnUpdateBy TerminalParamSubSelectColumn = "update_by"
	// 删除时间
	TerminalParamSubSelectColumnDeleteAt TerminalParamSubSelectColumn = "delete_at"
	// 删除人
	TerminalParamSubSelectColumnDeleteBy TerminalParamSubSelectColumn = "delete_by"
	// 是否删除
	TerminalParamSubSelectColumnIsDelete TerminalParamSubSelectColumn = "is_delete"
	// 备注
	TerminalParamSubSelectColumnRemark TerminalParamSubSelectColumn = "remark"
)

var AllTerminalParamSubSelectColumn = []TerminalParamSubSelectColumn{
	TerminalParamSubSelectColumnID,
	TerminalParamSubSelectColumnParamSubID,
	TerminalParamSubSelectColumnParamID,
	TerminalParamSubSelectColumnBitStart,
	TerminalParamSubSelectColumnBitEnd,
	TerminalParamSubSelectColumnParamSubName,
	TerminalParamSubSelectColumnIsEnum,
	TerminalParamSubSelectColumnEnumDictID,
	TerminalParamSubSelectColumnParamValue,
	TerminalParamSubSelectColumnCreateAt,
	TerminalParamSubSelectColumnCreateBy,
	TerminalParamSubSelectColumnUpdateAt,
	TerminalParamSubSelectColumnUpdateBy,
	TerminalParamSubSelectColumnDeleteAt,
	TerminalParamSubSelectColumnDeleteBy,
	TerminalParamSubSelectColumnIsDelete,
	TerminalParamSubSelectColumnRemark,
}

func (e TerminalParamSubSelectColumn) IsValid() bool {
	switch e {
	case TerminalParamSubSelectColumnID, TerminalParamSubSelectColumnParamSubID, TerminalParamSubSelectColumnParamID, TerminalParamSubSelectColumnBitStart, TerminalParamSubSelectColumnBitEnd, TerminalParamSubSelectColumnParamSubName, TerminalParamSubSelectColumnIsEnum, TerminalParamSubSelectColumnEnumDictID, TerminalParamSubSelectColumnParamValue, TerminalParamSubSelectColumnCreateAt, TerminalParamSubSelectColumnCreateBy, TerminalParamSubSelectColumnUpdateAt, TerminalParamSubSelectColumnUpdateBy, TerminalParamSubSelectColumnDeleteAt, TerminalParamSubSelectColumnDeleteBy, TerminalParamSubSelectColumnIsDelete, TerminalParamSubSelectColumnRemark:
		return true
	}
	return false
}

func (e TerminalParamSubSelectColumn) String() string {
	return string(e)
}

func (e *TerminalParamSubSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalParamSubSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalParamSubSelectColumn", str)
	}
	return nil
}

func (e TerminalParamSubSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalParamTypeSelectColumn string

const (
	// ID
	TerminalParamTypeSelectColumnID TerminalParamTypeSelectColumn = "id"
	// 终端参数类型ID
	TerminalParamTypeSelectColumnParamTypeID TerminalParamTypeSelectColumn = "param_type_id"
	// 指令类型名称
	TerminalParamTypeSelectColumnParamTypeName TerminalParamTypeSelectColumn = "param_type_name"
	// 上级指令类型ID
	TerminalParamTypeSelectColumnParentParamTypeID TerminalParamTypeSelectColumn = "parent_param_type_id"
	// 创建时间
	TerminalParamTypeSelectColumnCreateAt TerminalParamTypeSelectColumn = "create_at"
	// 创建人
	TerminalParamTypeSelectColumnCreateBy TerminalParamTypeSelectColumn = "create_by"
	// 更新时间
	TerminalParamTypeSelectColumnUpdateAt TerminalParamTypeSelectColumn = "update_at"
	// 更新人
	TerminalParamTypeSelectColumnUpdateBy TerminalParamTypeSelectColumn = "update_by"
	// 删除时间
	TerminalParamTypeSelectColumnDeleteAt TerminalParamTypeSelectColumn = "delete_at"
	// 删除人
	TerminalParamTypeSelectColumnDeleteBy TerminalParamTypeSelectColumn = "delete_by"
	// 是否删除
	TerminalParamTypeSelectColumnIsDelete TerminalParamTypeSelectColumn = "is_delete"
	// 备注
	TerminalParamTypeSelectColumnRemark TerminalParamTypeSelectColumn = "remark"
)

var AllTerminalParamTypeSelectColumn = []TerminalParamTypeSelectColumn{
	TerminalParamTypeSelectColumnID,
	TerminalParamTypeSelectColumnParamTypeID,
	TerminalParamTypeSelectColumnParamTypeName,
	TerminalParamTypeSelectColumnParentParamTypeID,
	TerminalParamTypeSelectColumnCreateAt,
	TerminalParamTypeSelectColumnCreateBy,
	TerminalParamTypeSelectColumnUpdateAt,
	TerminalParamTypeSelectColumnUpdateBy,
	TerminalParamTypeSelectColumnDeleteAt,
	TerminalParamTypeSelectColumnDeleteBy,
	TerminalParamTypeSelectColumnIsDelete,
	TerminalParamTypeSelectColumnRemark,
}

func (e TerminalParamTypeSelectColumn) IsValid() bool {
	switch e {
	case TerminalParamTypeSelectColumnID, TerminalParamTypeSelectColumnParamTypeID, TerminalParamTypeSelectColumnParamTypeName, TerminalParamTypeSelectColumnParentParamTypeID, TerminalParamTypeSelectColumnCreateAt, TerminalParamTypeSelectColumnCreateBy, TerminalParamTypeSelectColumnUpdateAt, TerminalParamTypeSelectColumnUpdateBy, TerminalParamTypeSelectColumnDeleteAt, TerminalParamTypeSelectColumnDeleteBy, TerminalParamTypeSelectColumnIsDelete, TerminalParamTypeSelectColumnRemark:
		return true
	}
	return false
}

func (e TerminalParamTypeSelectColumn) String() string {
	return string(e)
}

func (e *TerminalParamTypeSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalParamTypeSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalParamTypeSelectColumn", str)
	}
	return nil
}

func (e TerminalParamTypeSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalProveSelectColumn string

const (
	// ID
	TerminalProveSelectColumnID TerminalProveSelectColumn = "id"
	// 终端证明表ID
	TerminalProveSelectColumnProveID TerminalProveSelectColumn = "prove_id"
	// 车牌号码
	TerminalProveSelectColumnPlateNumber TerminalProveSelectColumn = "plate_number"
	// 车牌颜色
	TerminalProveSelectColumnPlateColor TerminalProveSelectColumn = "plate_color"
	// 车辆类型
	TerminalProveSelectColumnVehicleType TerminalProveSelectColumn = "vehicle_type"
	// 合同编号
	TerminalProveSelectColumnContractNum TerminalProveSelectColumn = "contract_num"
	// 签定时间
	TerminalProveSelectColumnSignDate TerminalProveSelectColumn = "sign_date"
	// 合同有效期限至
	TerminalProveSelectColumnContractEndTime TerminalProveSelectColumn = "contract_end_time"
	// 终端型号ID
	TerminalProveSelectColumnTerminalTypeID TerminalProveSelectColumn = "terminal_type_id"
	// 终端ID
	TerminalProveSelectColumnTerminalID TerminalProveSelectColumn = "terminal_id"
	// 终端imei
	TerminalProveSelectColumnTerminalImei TerminalProveSelectColumn = "terminal_imei"
	// 安装时间
	TerminalProveSelectColumnInstallDate TerminalProveSelectColumn = "install_date"
	// 终端备案编号
	TerminalProveSelectColumnTerminalRecordNum TerminalProveSelectColumn = "terminal_record_num"
	// 安装人签名照片
	TerminalProveSelectColumnInstallManSignPhoto TerminalProveSelectColumn = "install_man_sign_photo"
	// 代理商ID
	TerminalProveSelectColumnProxyrgID TerminalProveSelectColumn = "proxyrg_id"
	// 是否具备电子上岗
	TerminalProveSelectColumnElectronicInduction TerminalProveSelectColumn = "electronic_induction"
	// 检测报告编号
	TerminalProveSelectColumnTestReportNum TerminalProveSelectColumn = "test_report_num"
	// 批次
	TerminalProveSelectColumnBatch TerminalProveSelectColumn = "batch"
	// 平台编号
	TerminalProveSelectColumnPlateformNum TerminalProveSelectColumn = "plateform_num"
	// 平台备案编号
	TerminalProveSelectColumnPlatformRecordNum TerminalProveSelectColumn = "platform_record_num"
	// 经营许可证编号
	TerminalProveSelectColumnBusinessLicenseNum TerminalProveSelectColumn = "business_license_num"
	// 经营许可证截止日期
	TerminalProveSelectColumnBusinessLicenseEndDate TerminalProveSelectColumn = "business_license_end_date"
	// 登记保护备案编号
	TerminalProveSelectColumnLevelProtectRecordNum TerminalProveSelectColumn = "level_protect_record_num"
	// 登记保护签发日期
	TerminalProveSelectColumnLevelProtectSignDate TerminalProveSelectColumn = "level_protect_sign_date"
	// 车属单位ID
	TerminalProveSelectColumnEnterpriseID TerminalProveSelectColumn = "enterprise_id"
	// 办理人ID
	TerminalProveSelectColumnFillManID TerminalProveSelectColumn = "fill_man_id"
	// 审查人ID
	TerminalProveSelectColumnVerifyManID TerminalProveSelectColumn = "verify_man_id"
	// 提交人ID
	TerminalProveSelectColumnSealManID TerminalProveSelectColumn = "seal_man_id"
	// 办理人姓名
	TerminalProveSelectColumnFillManName TerminalProveSelectColumn = "fill_man_name"
	// 审查人姓名
	TerminalProveSelectColumnVerifyManName TerminalProveSelectColumn = "verify_man_name"
	// 提交人姓名
	TerminalProveSelectColumnSealManName TerminalProveSelectColumn = "seal_man_name"
	// 审查阶段
	TerminalProveSelectColumnCheckStatus TerminalProveSelectColumn = "check_status"
	// 是否审核完成
	TerminalProveSelectColumnIsCheckEnd TerminalProveSelectColumn = "is_check_end"
	// 审核时间
	TerminalProveSelectColumnCheckTime TerminalProveSelectColumn = "check_time"
	// 办理时间
	TerminalProveSelectColumnFillTime TerminalProveSelectColumn = "fill_time"
	// 办理单号
	TerminalProveSelectColumnFillID TerminalProveSelectColumn = "fill_id"
	// 车辆ID
	TerminalProveSelectColumnVehicleID TerminalProveSelectColumn = "vehicle_id"
	// 审核备注
	TerminalProveSelectColumnCheckRemark TerminalProveSelectColumn = "check_remark"
	// 办理备注
	TerminalProveSelectColumnFillRemark TerminalProveSelectColumn = "fill_remark"
	// 删除备注
	TerminalProveSelectColumnDelRemark TerminalProveSelectColumn = "del_remark"
	// 工程车自编号
	TerminalProveSelectColumnSvNum TerminalProveSelectColumn = "sv_num"
	// 创建时间
	TerminalProveSelectColumnCreateAt TerminalProveSelectColumn = "create_at"
	// 创建人
	TerminalProveSelectColumnCreateBy TerminalProveSelectColumn = "create_by"
	// 更新时间
	TerminalProveSelectColumnUpdateAt TerminalProveSelectColumn = "update_at"
	// 更新人
	TerminalProveSelectColumnUpdateBy TerminalProveSelectColumn = "update_by"
	// 删除时间
	TerminalProveSelectColumnDeleteAt TerminalProveSelectColumn = "delete_at"
	// 删除时间
	TerminalProveSelectColumnDeleteBy TerminalProveSelectColumn = "delete_by"
	// 是否删除
	TerminalProveSelectColumnIsDelete TerminalProveSelectColumn = "is_delete"
)

var AllTerminalProveSelectColumn = []TerminalProveSelectColumn{
	TerminalProveSelectColumnID,
	TerminalProveSelectColumnProveID,
	TerminalProveSelectColumnPlateNumber,
	TerminalProveSelectColumnPlateColor,
	TerminalProveSelectColumnVehicleType,
	TerminalProveSelectColumnContractNum,
	TerminalProveSelectColumnSignDate,
	TerminalProveSelectColumnContractEndTime,
	TerminalProveSelectColumnTerminalTypeID,
	TerminalProveSelectColumnTerminalID,
	TerminalProveSelectColumnTerminalImei,
	TerminalProveSelectColumnInstallDate,
	TerminalProveSelectColumnTerminalRecordNum,
	TerminalProveSelectColumnInstallManSignPhoto,
	TerminalProveSelectColumnProxyrgID,
	TerminalProveSelectColumnElectronicInduction,
	TerminalProveSelectColumnTestReportNum,
	TerminalProveSelectColumnBatch,
	TerminalProveSelectColumnPlateformNum,
	TerminalProveSelectColumnPlatformRecordNum,
	TerminalProveSelectColumnBusinessLicenseNum,
	TerminalProveSelectColumnBusinessLicenseEndDate,
	TerminalProveSelectColumnLevelProtectRecordNum,
	TerminalProveSelectColumnLevelProtectSignDate,
	TerminalProveSelectColumnEnterpriseID,
	TerminalProveSelectColumnFillManID,
	TerminalProveSelectColumnVerifyManID,
	TerminalProveSelectColumnSealManID,
	TerminalProveSelectColumnFillManName,
	TerminalProveSelectColumnVerifyManName,
	TerminalProveSelectColumnSealManName,
	TerminalProveSelectColumnCheckStatus,
	TerminalProveSelectColumnIsCheckEnd,
	TerminalProveSelectColumnCheckTime,
	TerminalProveSelectColumnFillTime,
	TerminalProveSelectColumnFillID,
	TerminalProveSelectColumnVehicleID,
	TerminalProveSelectColumnCheckRemark,
	TerminalProveSelectColumnFillRemark,
	TerminalProveSelectColumnDelRemark,
	TerminalProveSelectColumnSvNum,
	TerminalProveSelectColumnCreateAt,
	TerminalProveSelectColumnCreateBy,
	TerminalProveSelectColumnUpdateAt,
	TerminalProveSelectColumnUpdateBy,
	TerminalProveSelectColumnDeleteAt,
	TerminalProveSelectColumnDeleteBy,
	TerminalProveSelectColumnIsDelete,
}

func (e TerminalProveSelectColumn) IsValid() bool {
	switch e {
	case TerminalProveSelectColumnID, TerminalProveSelectColumnProveID, TerminalProveSelectColumnPlateNumber, TerminalProveSelectColumnPlateColor, TerminalProveSelectColumnVehicleType, TerminalProveSelectColumnContractNum, TerminalProveSelectColumnSignDate, TerminalProveSelectColumnContractEndTime, TerminalProveSelectColumnTerminalTypeID, TerminalProveSelectColumnTerminalID, TerminalProveSelectColumnTerminalImei, TerminalProveSelectColumnInstallDate, TerminalProveSelectColumnTerminalRecordNum, TerminalProveSelectColumnInstallManSignPhoto, TerminalProveSelectColumnProxyrgID, TerminalProveSelectColumnElectronicInduction, TerminalProveSelectColumnTestReportNum, TerminalProveSelectColumnBatch, TerminalProveSelectColumnPlateformNum, TerminalProveSelectColumnPlatformRecordNum, TerminalProveSelectColumnBusinessLicenseNum, TerminalProveSelectColumnBusinessLicenseEndDate, TerminalProveSelectColumnLevelProtectRecordNum, TerminalProveSelectColumnLevelProtectSignDate, TerminalProveSelectColumnEnterpriseID, TerminalProveSelectColumnFillManID, TerminalProveSelectColumnVerifyManID, TerminalProveSelectColumnSealManID, TerminalProveSelectColumnFillManName, TerminalProveSelectColumnVerifyManName, TerminalProveSelectColumnSealManName, TerminalProveSelectColumnCheckStatus, TerminalProveSelectColumnIsCheckEnd, TerminalProveSelectColumnCheckTime, TerminalProveSelectColumnFillTime, TerminalProveSelectColumnFillID, TerminalProveSelectColumnVehicleID, TerminalProveSelectColumnCheckRemark, TerminalProveSelectColumnFillRemark, TerminalProveSelectColumnDelRemark, TerminalProveSelectColumnSvNum, TerminalProveSelectColumnCreateAt, TerminalProveSelectColumnCreateBy, TerminalProveSelectColumnUpdateAt, TerminalProveSelectColumnUpdateBy, TerminalProveSelectColumnDeleteAt, TerminalProveSelectColumnDeleteBy, TerminalProveSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalProveSelectColumn) String() string {
	return string(e)
}

func (e *TerminalProveSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalProveSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalProveSelectColumn", str)
	}
	return nil
}

func (e TerminalProveSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalRegLogSelectColumn string

const (
	// ID
	TerminalRegLogSelectColumnID TerminalRegLogSelectColumn = "id"
	// 终端日志ID
	TerminalRegLogSelectColumnTerminalLogID TerminalRegLogSelectColumn = "terminal_log_id"
	// 终端ID
	TerminalRegLogSelectColumnTerminalID TerminalRegLogSelectColumn = "terminal_id"
	// 省域ID(平台)
	TerminalRegLogSelectColumnPlatProvinceID TerminalRegLogSelectColumn = "plat_province_id"
	// 省域ID(终端)
	TerminalRegLogSelectColumnTerminalProvinceID TerminalRegLogSelectColumn = "terminal_province_id"
	// 市域ID(平台)
	TerminalRegLogSelectColumnPlatCityID TerminalRegLogSelectColumn = "plat_city_id"
	// 市域ID(终端)
	TerminalRegLogSelectColumnTerminalCityID TerminalRegLogSelectColumn = "terminal_city_id"
	// 终端型号(平台)
	TerminalRegLogSelectColumnPlatTerminalTypeID TerminalRegLogSelectColumn = "plat_terminal_type_id"
	// 终端型号（终端）
	TerminalRegLogSelectColumnTerminalTerminalTypeID TerminalRegLogSelectColumn = "terminal_terminal_type_id"
	// 车辆颜色（平台）
	TerminalRegLogSelectColumnPlatCarColor TerminalRegLogSelectColumn = "plat_car_color"
	// 车辆颜色（终端）
	TerminalRegLogSelectColumnTerminalCarColor TerminalRegLogSelectColumn = "terminal_car_color"
	// 车牌号码（平台）
	TerminalRegLogSelectColumnPlatCarNumber TerminalRegLogSelectColumn = "plat_car_number"
	// 车牌号码（终端）
	TerminalRegLogSelectColumnTerminalCarNumber TerminalRegLogSelectColumn = "terminal_car_number"
	// sim卡号（平台）
	TerminalRegLogSelectColumnPlatSimNumber TerminalRegLogSelectColumn = "plat_sim_number"
	// sim卡号（终端）
	TerminalRegLogSelectColumnTerminalSimNumber TerminalRegLogSelectColumn = "terminal_sim_number"
	// 开始注册时间
	TerminalRegLogSelectColumnBeginTime TerminalRegLogSelectColumn = "begin_time"
	// 结束注册时间
	TerminalRegLogSelectColumnEndTime TerminalRegLogSelectColumn = "end_time"
	// 是否最新
	TerminalRegLogSelectColumnIsNew TerminalRegLogSelectColumn = "is_new"
	// 注册错误次数
	TerminalRegLogSelectColumnRegErrorCount TerminalRegLogSelectColumn = "reg_error_count"
	// 创建时间
	TerminalRegLogSelectColumnCreateAt TerminalRegLogSelectColumn = "create_at"
	// 创建人
	TerminalRegLogSelectColumnCreateBy TerminalRegLogSelectColumn = "create_by"
	// 修改时间
	TerminalRegLogSelectColumnUpdateAt TerminalRegLogSelectColumn = "update_at"
	// 修改人
	TerminalRegLogSelectColumnUpdateBy TerminalRegLogSelectColumn = "update_by"
	// 删除时间
	TerminalRegLogSelectColumnDeleteAt TerminalRegLogSelectColumn = "delete_at"
	// 删除人
	TerminalRegLogSelectColumnDeleteBy TerminalRegLogSelectColumn = "delete_by"
	// 是否删除
	TerminalRegLogSelectColumnIsDelete TerminalRegLogSelectColumn = "is_delete"
	// 备注
	TerminalRegLogSelectColumnRemark TerminalRegLogSelectColumn = "remark"
)

var AllTerminalRegLogSelectColumn = []TerminalRegLogSelectColumn{
	TerminalRegLogSelectColumnID,
	TerminalRegLogSelectColumnTerminalLogID,
	TerminalRegLogSelectColumnTerminalID,
	TerminalRegLogSelectColumnPlatProvinceID,
	TerminalRegLogSelectColumnTerminalProvinceID,
	TerminalRegLogSelectColumnPlatCityID,
	TerminalRegLogSelectColumnTerminalCityID,
	TerminalRegLogSelectColumnPlatTerminalTypeID,
	TerminalRegLogSelectColumnTerminalTerminalTypeID,
	TerminalRegLogSelectColumnPlatCarColor,
	TerminalRegLogSelectColumnTerminalCarColor,
	TerminalRegLogSelectColumnPlatCarNumber,
	TerminalRegLogSelectColumnTerminalCarNumber,
	TerminalRegLogSelectColumnPlatSimNumber,
	TerminalRegLogSelectColumnTerminalSimNumber,
	TerminalRegLogSelectColumnBeginTime,
	TerminalRegLogSelectColumnEndTime,
	TerminalRegLogSelectColumnIsNew,
	TerminalRegLogSelectColumnRegErrorCount,
	TerminalRegLogSelectColumnCreateAt,
	TerminalRegLogSelectColumnCreateBy,
	TerminalRegLogSelectColumnUpdateAt,
	TerminalRegLogSelectColumnUpdateBy,
	TerminalRegLogSelectColumnDeleteAt,
	TerminalRegLogSelectColumnDeleteBy,
	TerminalRegLogSelectColumnIsDelete,
	TerminalRegLogSelectColumnRemark,
}

func (e TerminalRegLogSelectColumn) IsValid() bool {
	switch e {
	case TerminalRegLogSelectColumnID, TerminalRegLogSelectColumnTerminalLogID, TerminalRegLogSelectColumnTerminalID, TerminalRegLogSelectColumnPlatProvinceID, TerminalRegLogSelectColumnTerminalProvinceID, TerminalRegLogSelectColumnPlatCityID, TerminalRegLogSelectColumnTerminalCityID, TerminalRegLogSelectColumnPlatTerminalTypeID, TerminalRegLogSelectColumnTerminalTerminalTypeID, TerminalRegLogSelectColumnPlatCarColor, TerminalRegLogSelectColumnTerminalCarColor, TerminalRegLogSelectColumnPlatCarNumber, TerminalRegLogSelectColumnTerminalCarNumber, TerminalRegLogSelectColumnPlatSimNumber, TerminalRegLogSelectColumnTerminalSimNumber, TerminalRegLogSelectColumnBeginTime, TerminalRegLogSelectColumnEndTime, TerminalRegLogSelectColumnIsNew, TerminalRegLogSelectColumnRegErrorCount, TerminalRegLogSelectColumnCreateAt, TerminalRegLogSelectColumnCreateBy, TerminalRegLogSelectColumnUpdateAt, TerminalRegLogSelectColumnUpdateBy, TerminalRegLogSelectColumnDeleteAt, TerminalRegLogSelectColumnDeleteBy, TerminalRegLogSelectColumnIsDelete, TerminalRegLogSelectColumnRemark:
		return true
	}
	return false
}

func (e TerminalRegLogSelectColumn) String() string {
	return string(e)
}

func (e *TerminalRegLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalRegLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalRegLogSelectColumn", str)
	}
	return nil
}

func (e TerminalRegLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalSelectColumn string

const (
	// ID
	TerminalSelectColumnID TerminalSelectColumn = "id"
	// 终端ID
	TerminalSelectColumnTerminalID TerminalSelectColumn = "terminal_id"
	// 首次安装时间
	TerminalSelectColumnFirstInstallTime TerminalSelectColumn = "first_install_time"
	// 终端IMEI
	TerminalSelectColumnImei TerminalSelectColumn = "imei"
	// 生产日期
	TerminalSelectColumnProduceDate TerminalSelectColumn = "produce_date"
	// 终端类型ID
	TerminalSelectColumnTypeID TerminalSelectColumn = "type_id"
	// 车辆ID
	TerminalSelectColumnVehicleID TerminalSelectColumn = "vehicle_id"
	// 版本号
	TerminalSelectColumnVersionNumber TerminalSelectColumn = "version_number"
	// 是否注册
	TerminalSelectColumnIsReg TerminalSelectColumn = "is_reg"
	// SIM卡ID
	TerminalSelectColumnSimID TerminalSelectColumn = "sim_id"
	// 登记时间
	TerminalSelectColumnRecordDate TerminalSelectColumn = "record_date"
	// 部门ID
	TerminalSelectColumnDeptID TerminalSelectColumn = "dept_id"
	// 代理商ID
	TerminalSelectColumnProxyrgID TerminalSelectColumn = "proxyrg_id"
	// 安装人员ID
	TerminalSelectColumnInstallManID TerminalSelectColumn = "install_man_id"
	// 终端注册ID
	TerminalSelectColumnRegID TerminalSelectColumn = "reg_id"
	// 省份ID
	TerminalSelectColumnProvinceID TerminalSelectColumn = "province_id"
	// 城市ID
	TerminalSelectColumnCityID TerminalSelectColumn = "city_id"
	// 外接鉴权码
	TerminalSelectColumnAuthKey TerminalSelectColumn = "auth_key"
	// 是否支持拍照
	TerminalSelectColumnIsSupportPhoto TerminalSelectColumn = "is_support_photo"
	// 模拟鉴权码
	TerminalSelectColumnMockAuthKey TerminalSelectColumn = "mock_auth_key"
	// 运营商
	TerminalSelectColumnSprgID TerminalSelectColumn = "sprg_id"
	// 解绑原因
	TerminalSelectColumnRemoveReason TerminalSelectColumn = "remove_reason"
	// 保修期到期时间
	TerminalSelectColumnGuaranteeDate TerminalSelectColumn = "guarantee_date"
	// 摄像头数量
	TerminalSelectColumnCameraNum TerminalSelectColumn = "camera_num"
	// ADAS型号
	TerminalSelectColumnAdasModel TerminalSelectColumn = "adas_model"
	// 摄像头安装位置
	TerminalSelectColumnChannelNo TerminalSelectColumn = "channel_no"
	// 终端安装证明代理商
	TerminalSelectColumnProveProxyrgID TerminalSelectColumn = "prove_proxyrg_id"
	// 是否删除
	TerminalSelectColumnIsDelete TerminalSelectColumn = "is_delete"
	// 备注
	TerminalSelectColumnRemarks TerminalSelectColumn = "remarks"
	// 新建时间
	TerminalSelectColumnCreateAt TerminalSelectColumn = "create_at"
	// 新建人
	TerminalSelectColumnCreateBy TerminalSelectColumn = "create_by"
	// 修改时间
	TerminalSelectColumnUpdateAt TerminalSelectColumn = "update_at"
	// 修改人
	TerminalSelectColumnUpdateBy TerminalSelectColumn = "update_by"
	// 删除时间
	TerminalSelectColumnDeleteAt TerminalSelectColumn = "delete_at"
	// 删除人
	TerminalSelectColumnDeleteBy TerminalSelectColumn = "delete_by"
)

var AllTerminalSelectColumn = []TerminalSelectColumn{
	TerminalSelectColumnID,
	TerminalSelectColumnTerminalID,
	TerminalSelectColumnFirstInstallTime,
	TerminalSelectColumnImei,
	TerminalSelectColumnProduceDate,
	TerminalSelectColumnTypeID,
	TerminalSelectColumnVehicleID,
	TerminalSelectColumnVersionNumber,
	TerminalSelectColumnIsReg,
	TerminalSelectColumnSimID,
	TerminalSelectColumnRecordDate,
	TerminalSelectColumnDeptID,
	TerminalSelectColumnProxyrgID,
	TerminalSelectColumnInstallManID,
	TerminalSelectColumnRegID,
	TerminalSelectColumnProvinceID,
	TerminalSelectColumnCityID,
	TerminalSelectColumnAuthKey,
	TerminalSelectColumnIsSupportPhoto,
	TerminalSelectColumnMockAuthKey,
	TerminalSelectColumnSprgID,
	TerminalSelectColumnRemoveReason,
	TerminalSelectColumnGuaranteeDate,
	TerminalSelectColumnCameraNum,
	TerminalSelectColumnAdasModel,
	TerminalSelectColumnChannelNo,
	TerminalSelectColumnProveProxyrgID,
	TerminalSelectColumnIsDelete,
	TerminalSelectColumnRemarks,
	TerminalSelectColumnCreateAt,
	TerminalSelectColumnCreateBy,
	TerminalSelectColumnUpdateAt,
	TerminalSelectColumnUpdateBy,
	TerminalSelectColumnDeleteAt,
	TerminalSelectColumnDeleteBy,
}

func (e TerminalSelectColumn) IsValid() bool {
	switch e {
	case TerminalSelectColumnID, TerminalSelectColumnTerminalID, TerminalSelectColumnFirstInstallTime, TerminalSelectColumnImei, TerminalSelectColumnProduceDate, TerminalSelectColumnTypeID, TerminalSelectColumnVehicleID, TerminalSelectColumnVersionNumber, TerminalSelectColumnIsReg, TerminalSelectColumnSimID, TerminalSelectColumnRecordDate, TerminalSelectColumnDeptID, TerminalSelectColumnProxyrgID, TerminalSelectColumnInstallManID, TerminalSelectColumnRegID, TerminalSelectColumnProvinceID, TerminalSelectColumnCityID, TerminalSelectColumnAuthKey, TerminalSelectColumnIsSupportPhoto, TerminalSelectColumnMockAuthKey, TerminalSelectColumnSprgID, TerminalSelectColumnRemoveReason, TerminalSelectColumnGuaranteeDate, TerminalSelectColumnCameraNum, TerminalSelectColumnAdasModel, TerminalSelectColumnChannelNo, TerminalSelectColumnProveProxyrgID, TerminalSelectColumnIsDelete, TerminalSelectColumnRemarks, TerminalSelectColumnCreateAt, TerminalSelectColumnCreateBy, TerminalSelectColumnUpdateAt, TerminalSelectColumnUpdateBy, TerminalSelectColumnDeleteAt, TerminalSelectColumnDeleteBy:
		return true
	}
	return false
}

func (e TerminalSelectColumn) String() string {
	return string(e)
}

func (e *TerminalSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalSelectColumn", str)
	}
	return nil
}

func (e TerminalSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type TerminalTypesSelectColumn string

const (
	// ID
	TerminalTypesSelectColumnID TerminalTypesSelectColumn = "id"
	// 终端类型ID
	TerminalTypesSelectColumnTypeID TerminalTypesSelectColumn = "type_id"
	// 终端类型
	TerminalTypesSelectColumnProtocolName TerminalTypesSelectColumn = "protocol_name"
	// 备注
	TerminalTypesSelectColumnRemark TerminalTypesSelectColumn = "remark"
	// 创建时间
	TerminalTypesSelectColumnCreateAt TerminalTypesSelectColumn = "create_at"
	// 创建人
	TerminalTypesSelectColumnCreateBy TerminalTypesSelectColumn = "create_by"
	// 修改时间
	TerminalTypesSelectColumnUpdateAt TerminalTypesSelectColumn = "update_at"
	// 修改人
	TerminalTypesSelectColumnUpdateBy TerminalTypesSelectColumn = "update_by"
	// 删除时间
	TerminalTypesSelectColumnDeleteAt TerminalTypesSelectColumn = "delete_at"
	// 删除人
	TerminalTypesSelectColumnDeleteBy TerminalTypesSelectColumn = "delete_by"
	// 是否删除
	TerminalTypesSelectColumnIsDelete TerminalTypesSelectColumn = "is_delete"
)

var AllTerminalTypesSelectColumn = []TerminalTypesSelectColumn{
	TerminalTypesSelectColumnID,
	TerminalTypesSelectColumnTypeID,
	TerminalTypesSelectColumnProtocolName,
	TerminalTypesSelectColumnRemark,
	TerminalTypesSelectColumnCreateAt,
	TerminalTypesSelectColumnCreateBy,
	TerminalTypesSelectColumnUpdateAt,
	TerminalTypesSelectColumnUpdateBy,
	TerminalTypesSelectColumnDeleteAt,
	TerminalTypesSelectColumnDeleteBy,
	TerminalTypesSelectColumnIsDelete,
}

func (e TerminalTypesSelectColumn) IsValid() bool {
	switch e {
	case TerminalTypesSelectColumnID, TerminalTypesSelectColumnTypeID, TerminalTypesSelectColumnProtocolName, TerminalTypesSelectColumnRemark, TerminalTypesSelectColumnCreateAt, TerminalTypesSelectColumnCreateBy, TerminalTypesSelectColumnUpdateAt, TerminalTypesSelectColumnUpdateBy, TerminalTypesSelectColumnDeleteAt, TerminalTypesSelectColumnDeleteBy, TerminalTypesSelectColumnIsDelete:
		return true
	}
	return false
}

func (e TerminalTypesSelectColumn) String() string {
	return string(e)
}

func (e *TerminalTypesSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TerminalTypesSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TerminalTypesSelectColumn", str)
	}
	return nil
}

func (e TerminalTypesSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
