// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BooleanComparisonExp struct {
	Eq     *bool  `json:"_eq"`
	Gt     *bool  `json:"_gt"`
	Gte    *bool  `json:"_gte"`
	In     []bool `json:"_in"`
	IsNull *bool  `json:"_is_null"`
	Lt     *bool  `json:"_lt"`
	Lte    *bool  `json:"_lte"`
	Neq    *bool  `json:"_neq"`
	Nin    []bool `json:"_nin"`
}

type IntComparisonExp struct {
	Eq     *int  `json:"_eq"`
	Gt     *int  `json:"_gt"`
	Gte    *int  `json:"_gte"`
	In     []int `json:"_in"`
	IsNull *bool `json:"_is_null"`
	Lt     *int  `json:"_lt"`
	Lte    *int  `json:"_lte"`
	Neq    *int  `json:"_neq"`
	Nin    []int `json:"_nin"`
}

type StringComparisonExp struct {
	Eq       *string  `json:"_eq"`
	Gt       *string  `json:"_gt"`
	Gte      *string  `json:"_gte"`
	Ilike    *string  `json:"_ilike"`
	In       []string `json:"_in"`
	IsNull   *bool    `json:"_is_null"`
	Like     *string  `json:"_like"`
	Lt       *string  `json:"_lt"`
	Lte      *string  `json:"_lte"`
	Neq      *string  `json:"_neq"`
	Nilike   *string  `json:"_nilike"`
	Nin      []string `json:"_nin"`
	Nlike    *string  `json:"_nlike"`
	Nsimilar *string  `json:"_nsimilar"`
	Similar  *string  `json:"_similar"`
}

type BigintComparisonExp struct {
	Eq     *int64  `json:"_eq"`
	Gt     *int64  `json:"_gt"`
	Gte    *int64  `json:"_gte"`
	In     []int64 `json:"_in"`
	IsNull *bool   `json:"_is_null"`
	Lt     *int64  `json:"_lt"`
	Lte    *int64  `json:"_lte"`
	Neq    *int64  `json:"_neq"`
	Nin    []int64 `json:"_nin"`
}

type NumericComparisonExp struct {
	Eq     *float64  `json:"_eq"`
	Gt     *float64  `json:"_gt"`
	Gte    *float64  `json:"_gte"`
	In     []float64 `json:"_in"`
	IsNull *bool     `json:"_is_null"`
	Lt     *float64  `json:"_lt"`
	Lte    *float64  `json:"_lte"`
	Neq    *float64  `json:"_neq"`
	Nin    []float64 `json:"_nin"`
}

type VehicleInfo struct {
	BusinessScope               *int     `json:"business_scope"`
	DepartmentID                *string  `json:"department_id"`
	EnterpriseID                *string  `json:"enterprise_id"`
	Heavy                       *float64 `json:"heavy"`
	ID                          int64    `json:"id"`
	IndustryCategory            *int     `json:"industry_category"`
	IsApplyInstallTerminal      *bool    `json:"is_apply_install_terminal"`
	LicensePlateColor           *int     `json:"license_plate_color"`
	LicensePlateNumber          *string  `json:"license_plate_number"`
	LicensePlateType            *int     `json:"license_plate_type"`
	MuckTruckID                 int64    `json:"muck_truck_id"`
	OperatingRoute              *string  `json:"operating_route"`
	OperatingState              *int     `json:"operating_state"`
	OperatingType               *int     `json:"operating_type"`
	OperatingVehicleID          int64    `json:"operating_vehicle_id"`
	Seats                       *int     `json:"seats"`
	TerminalID                  *string  `json:"terminal_id"`
	VehicleID                   string   `json:"vehicle_id"`
	VehicleIdentificationNumber *string  `json:"vehicle_identification_number"`
	VehicleType                 *int     `json:"vehicle_type"`
}

type VehicleInfoAggregate struct {
	Aggregate *VehicleInfoAggregateFields `json:"aggregate"`
	Nodes     []*VehicleInfo              `json:"nodes"`
}

type VehicleInfoAggregateFields struct {
	Avg        *VehicleInfoAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *VehicleInfoMaxFields        `json:"max"`
	Min        *VehicleInfoMinFields        `json:"min"`
	Stddev     *VehicleInfoStddevFields     `json:"stddev"`
	StddevPop  *VehicleInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleInfoStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleInfoSumFields        `json:"sum"`
	VarPop     *VehicleInfoVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleInfoVarSampFields    `json:"var_samp"`
	Variance   *VehicleInfoVarianceFields   `json:"variance"`
}

type VehicleInfoAggregateOrderBy struct {
	Avg        *VehicleInfoAvgOrderBy        `json:"avg"`
	Count      *OrderBy                      `json:"count"`
	Max        *VehicleInfoMaxOrderBy        `json:"max"`
	Min        *VehicleInfoMinOrderBy        `json:"min"`
	Stddev     *VehicleInfoStddevOrderBy     `json:"stddev"`
	StddevPop  *VehicleInfoStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *VehicleInfoStddevSampOrderBy `json:"stddev_samp"`
	Sum        *VehicleInfoSumOrderBy        `json:"sum"`
	VarPop     *VehicleInfoVarPopOrderBy     `json:"var_pop"`
	VarSamp    *VehicleInfoVarSampOrderBy    `json:"var_samp"`
	Variance   *VehicleInfoVarianceOrderBy   `json:"variance"`
}

type VehicleInfoArrRelInsertInput struct {
	Data       []*VehicleInfoInsertInput `json:"data"`
	OnConflict *VehicleInfoOnConflict    `json:"on_conflict"`
}

type VehicleInfoAvgFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoAvgOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoBoolExp struct {
	And                         []*VehicleInfoBoolExp `json:"_and"`
	Not                         *VehicleInfoBoolExp   `json:"_not"`
	Or                          []*VehicleInfoBoolExp `json:"_or"`
	BusinessScope               *IntComparisonExp     `json:"business_scope"`
	DepartmentID                *StringComparisonExp  `json:"department_id"`
	EnterpriseID                *StringComparisonExp  `json:"enterprise_id"`
	Heavy                       *NumericComparisonExp `json:"heavy"`
	ID                          *BigintComparisonExp  `json:"id"`
	IndustryCategory            *IntComparisonExp     `json:"industry_category"`
	IsApplyInstallTerminal      *BooleanComparisonExp `json:"is_apply_install_terminal"`
	LicensePlateColor           *IntComparisonExp     `json:"license_plate_color"`
	LicensePlateNumber          *StringComparisonExp  `json:"license_plate_number"`
	LicensePlateType            *IntComparisonExp     `json:"license_plate_type"`
	MuckTruckID                 *BigintComparisonExp  `json:"muck_truck_id"`
	OperatingRoute              *StringComparisonExp  `json:"operating_route"`
	OperatingState              *IntComparisonExp     `json:"operating_state"`
	OperatingType               *IntComparisonExp     `json:"operating_type"`
	OperatingVehicleID          *BigintComparisonExp  `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *StringComparisonExp  `json:"road_transport_license_number"`
	Seats                       *IntComparisonExp     `json:"seats"`
	TerminalID                  *StringComparisonExp  `json:"terminal_id"`
	VehicleID                   *StringComparisonExp  `json:"vehicle_id"`
	VehicleIdentificationNumber *StringComparisonExp  `json:"vehicle_identification_number"`
	VehicleType                 *IntComparisonExp     `json:"vehicle_type"`
}

type VehicleInfoIncInput struct {
	BusinessScope      *int     `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *int64   `json:"id"`
	IndustryCategory   *int     `json:"industry_category"`
	LicensePlateColor  *int     `json:"license_plate_color"`
	LicensePlateType   *int     `json:"license_plate_type"`
	MuckTruckID        *int64   `json:"muck_truck_id"`
	OperatingState     *int     `json:"operating_state"`
	OperatingType      *int     `json:"operating_type"`
	OperatingVehicleID *int64   `json:"operating_vehicle_id"`
	Seats              *int     `json:"seats"`
	VehicleType        *int     `json:"vehicle_type"`
}

type VehicleInfoInsertInput struct {
	BusinessScope               *int     `json:"business_scope"`
	DepartmentID                *string  `json:"department_id"`
	EnterpriseID                *string  `json:"enterprise_id"`
	Heavy                       *float64 `json:"heavy"`
	ID                          *int64   `json:"id"`
	IndustryCategory            *int     `json:"industry_category"`
	IsApplyInstallTerminal      *bool    `json:"is_apply_install_terminal"`
	LicensePlateColor           *int     `json:"license_plate_color"`
	LicensePlateNumber          *string  `json:"license_plate_number"`
	LicensePlateType            *int     `json:"license_plate_type"`
	MuckTruckID                 *int64   `json:"muck_truck_id"`
	OperatingRoute              *string  `json:"operating_route"`
	OperatingState              *int     `json:"operating_state"`
	OperatingType               *int     `json:"operating_type"`
	OperatingVehicleID          *int64   `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *string  `json:"road_transport_license_number"`
	Seats                       *int     `json:"seats"`
	TerminalID                  *string  `json:"terminal_id"`
	VehicleID                   *string  `json:"vehicle_id"`
	VehicleIdentificationNumber *string  `json:"vehicle_identification_number"`
	VehicleType                 *int     `json:"vehicle_type"`
}

type VehicleInfoMaxFields struct {
	BusinessScope               *int     `json:"business_scope"`
	DepartmentID                *string  `json:"department_id"`
	EnterpriseID                *string  `json:"enterprise_id"`
	Heavy                       *float64 `json:"heavy"`
	ID                          *int64   `json:"id"`
	IndustryCategory            *int     `json:"industry_category"`
	LicensePlateColor           *int     `json:"license_plate_color"`
	LicensePlateNumber          *string  `json:"license_plate_number"`
	LicensePlateType            *int     `json:"license_plate_type"`
	MuckTruckID                 *int64   `json:"muck_truck_id"`
	OperatingRoute              *string  `json:"operating_route"`
	OperatingState              *int     `json:"operating_state"`
	OperatingType               *int     `json:"operating_type"`
	OperatingVehicleID          *int64   `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *string  `json:"road_transport_license_number"`
	Seats                       *int     `json:"seats"`
	TerminalID                  *string  `json:"terminal_id"`
	VehicleID                   *string  `json:"vehicle_id"`
	VehicleIdentificationNumber *string  `json:"vehicle_identification_number"`
	VehicleType                 *int     `json:"vehicle_type"`
}

type VehicleInfoMaxOrderBy struct {
	BusinessScope               *OrderBy `json:"business_scope"`
	DepartmentID                *OrderBy `json:"department_id"`
	EnterpriseID                *OrderBy `json:"enterprise_id"`
	Heavy                       *OrderBy `json:"heavy"`
	ID                          *OrderBy `json:"id"`
	IndustryCategory            *OrderBy `json:"industry_category"`
	LicensePlateColor           *OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *OrderBy `json:"license_plate_number"`
	LicensePlateType            *OrderBy `json:"license_plate_type"`
	MuckTruckID                 *OrderBy `json:"muck_truck_id"`
	OperatingRoute              *OrderBy `json:"operating_route"`
	OperatingState              *OrderBy `json:"operating_state"`
	OperatingType               *OrderBy `json:"operating_type"`
	OperatingVehicleID          *OrderBy `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *OrderBy `json:"road_transport_license_number"`
	Seats                       *OrderBy `json:"seats"`
	TerminalID                  *OrderBy `json:"terminal_id"`
	VehicleID                   *OrderBy `json:"vehicle_id"`
	VehicleIdentificationNumber *OrderBy `json:"vehicle_identification_number"`
	VehicleType                 *OrderBy `json:"vehicle_type"`
}

type VehicleInfoMinFields struct {
	BusinessScope               *int     `json:"business_scope"`
	DepartmentID                *string  `json:"department_id"`
	EnterpriseID                *string  `json:"enterprise_id"`
	Heavy                       *float64 `json:"heavy"`
	ID                          *int64   `json:"id"`
	IndustryCategory            *int     `json:"industry_category"`
	LicensePlateColor           *int     `json:"license_plate_color"`
	LicensePlateNumber          *string  `json:"license_plate_number"`
	LicensePlateType            *int     `json:"license_plate_type"`
	MuckTruckID                 *int64   `json:"muck_truck_id"`
	OperatingRoute              *string  `json:"operating_route"`
	OperatingState              *int     `json:"operating_state"`
	OperatingType               *int     `json:"operating_type"`
	OperatingVehicleID          *int64   `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *string  `json:"road_transport_license_number"`
	Seats                       *int     `json:"seats"`
	TerminalID                  *string  `json:"terminal_id"`
	VehicleID                   *string  `json:"vehicle_id"`
	VehicleIdentificationNumber *string  `json:"vehicle_identification_number"`
	VehicleType                 *int     `json:"vehicle_type"`
}

type VehicleInfoMinOrderBy struct {
	BusinessScope               *OrderBy `json:"business_scope"`
	DepartmentID                *OrderBy `json:"department_id"`
	EnterpriseID                *OrderBy `json:"enterprise_id"`
	Heavy                       *OrderBy `json:"heavy"`
	ID                          *OrderBy `json:"id"`
	IndustryCategory            *OrderBy `json:"industry_category"`
	LicensePlateColor           *OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *OrderBy `json:"license_plate_number"`
	LicensePlateType            *OrderBy `json:"license_plate_type"`
	MuckTruckID                 *OrderBy `json:"muck_truck_id"`
	OperatingRoute              *OrderBy `json:"operating_route"`
	OperatingState              *OrderBy `json:"operating_state"`
	OperatingType               *OrderBy `json:"operating_type"`
	OperatingVehicleID          *OrderBy `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *OrderBy `json:"road_transport_license_number"`
	Seats                       *OrderBy `json:"seats"`
	TerminalID                  *OrderBy `json:"terminal_id"`
	VehicleID                   *OrderBy `json:"vehicle_id"`
	VehicleIdentificationNumber *OrderBy `json:"vehicle_identification_number"`
	VehicleType                 *OrderBy `json:"vehicle_type"`
}

type VehicleInfoMutationResponse struct {
	AffectedRows int            `json:"affected_rows"`
	Returning    []*VehicleInfo `json:"returning"`
}

type VehicleInfoObjRelInsertInput struct {
	Data       *VehicleInfoInsertInput `json:"data"`
	OnConflict *VehicleInfoOnConflict  `json:"on_conflict"`
}

type VehicleInfoOnConflict struct {
	Constraint    VehicleInfoConstraint     `json:"constraint"`
	UpdateColumns []VehicleInfoUpdateColumn `json:"update_columns"`
	Where         *VehicleInfoBoolExp       `json:"where"`
}

type VehicleInfoOrderBy struct {
	BusinessScope               *OrderBy `json:"business_scope"`
	DepartmentID                *OrderBy `json:"department_id"`
	EnterpriseID                *OrderBy `json:"enterprise_id"`
	Heavy                       *OrderBy `json:"heavy"`
	ID                          *OrderBy `json:"id"`
	IndustryCategory            *OrderBy `json:"industry_category"`
	IsApplyInstallTerminal      *OrderBy `json:"is_apply_install_terminal"`
	LicensePlateColor           *OrderBy `json:"license_plate_color"`
	LicensePlateNumber          *OrderBy `json:"license_plate_number"`
	LicensePlateType            *OrderBy `json:"license_plate_type"`
	MuckTruckID                 *OrderBy `json:"muck_truck_id"`
	OperatingRoute              *OrderBy `json:"operating_route"`
	OperatingState              *OrderBy `json:"operating_state"`
	OperatingType               *OrderBy `json:"operating_type"`
	OperatingVehicleID          *OrderBy `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *OrderBy `json:"road_transport_license_number"`
	Seats                       *OrderBy `json:"seats"`
	TerminalID                  *OrderBy `json:"terminal_id"`
	VehicleID                   *OrderBy `json:"vehicle_id"`
	VehicleIdentificationNumber *OrderBy `json:"vehicle_identification_number"`
	VehicleType                 *OrderBy `json:"vehicle_type"`
}

type VehicleInfoPkColumnsInput struct {
	ID        int64  `json:"id"`
	VehicleID string `json:"vehicle_id"`
}

type VehicleInfoSetInput struct {
	BusinessScope               *int     `json:"business_scope"`
	DepartmentID                *string  `json:"department_id"`
	EnterpriseID                *string  `json:"enterprise_id"`
	Heavy                       *float64 `json:"heavy"`
	ID                          *int64   `json:"id"`
	IndustryCategory            *int     `json:"industry_category"`
	IsApplyInstallTerminal      *bool    `json:"is_apply_install_terminal"`
	LicensePlateColor           *int     `json:"license_plate_color"`
	LicensePlateNumber          *string  `json:"license_plate_number"`
	LicensePlateType            *int     `json:"license_plate_type"`
	MuckTruckID                 *int64   `json:"muck_truck_id"`
	OperatingRoute              *string  `json:"operating_route"`
	OperatingState              *int     `json:"operating_state"`
	OperatingType               *int     `json:"operating_type"`
	OperatingVehicleID          *int64   `json:"operating_vehicle_id"`
	RoadTransportLicenseNumber  *string  `json:"road_transport_license_number"`
	Seats                       *int     `json:"seats"`
	TerminalID                  *string  `json:"terminal_id"`
	VehicleID                   *string  `json:"vehicle_id"`
	VehicleIdentificationNumber *string  `json:"vehicle_identification_number"`
	VehicleType                 *int     `json:"vehicle_type"`
}

type VehicleInfoStddevFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoStddevOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoStddevPopFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoStddevPopOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoStddevSampFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoStddevSampOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoSumFields struct {
	BusinessScope      *int     `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *int64   `json:"id"`
	IndustryCategory   *int     `json:"industry_category"`
	LicensePlateColor  *int     `json:"license_plate_color"`
	LicensePlateType   *int     `json:"license_plate_type"`
	MuckTruckID        *int64   `json:"muck_truck_id"`
	OperatingState     *int     `json:"operating_state"`
	OperatingType      *int     `json:"operating_type"`
	OperatingVehicleID *int64   `json:"operating_vehicle_id"`
	Seats              *int     `json:"seats"`
	VehicleType        *int     `json:"vehicle_type"`
}

type VehicleInfoSumOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoVarPopFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoVarPopOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoVarSampFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoVarSampOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type VehicleInfoVarianceFields struct {
	BusinessScope      *float64 `json:"business_scope"`
	Heavy              *float64 `json:"heavy"`
	ID                 *float64 `json:"id"`
	IndustryCategory   *float64 `json:"industry_category"`
	LicensePlateColor  *float64 `json:"license_plate_color"`
	LicensePlateType   *float64 `json:"license_plate_type"`
	MuckTruckID        *float64 `json:"muck_truck_id"`
	OperatingState     *float64 `json:"operating_state"`
	OperatingType      *float64 `json:"operating_type"`
	OperatingVehicleID *float64 `json:"operating_vehicle_id"`
	Seats              *float64 `json:"seats"`
	VehicleType        *float64 `json:"vehicle_type"`
}

type VehicleInfoVarianceOrderBy struct {
	BusinessScope      *OrderBy `json:"business_scope"`
	Heavy              *OrderBy `json:"heavy"`
	ID                 *OrderBy `json:"id"`
	IndustryCategory   *OrderBy `json:"industry_category"`
	LicensePlateColor  *OrderBy `json:"license_plate_color"`
	LicensePlateType   *OrderBy `json:"license_plate_type"`
	MuckTruckID        *OrderBy `json:"muck_truck_id"`
	OperatingState     *OrderBy `json:"operating_state"`
	OperatingType      *OrderBy `json:"operating_type"`
	OperatingVehicleID *OrderBy `json:"operating_vehicle_id"`
	Seats              *OrderBy `json:"seats"`
	VehicleType        *OrderBy `json:"vehicle_type"`
}

type OrderBy string

const (
	OrderByAsc            OrderBy = "asc"
	OrderByAscNullsFirst  OrderBy = "asc_nulls_first"
	OrderByAscNullsLast   OrderBy = "asc_nulls_last"
	OrderByDesc           OrderBy = "desc"
	OrderByDescNullsFirst OrderBy = "desc_nulls_first"
	OrderByDescNullsLast  OrderBy = "desc_nulls_last"
)

var AllOrderBy = []OrderBy{
	OrderByAsc,
	OrderByAscNullsFirst,
	OrderByAscNullsLast,
	OrderByDesc,
	OrderByDescNullsFirst,
	OrderByDescNullsLast,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByAsc, OrderByAscNullsFirst, OrderByAscNullsLast, OrderByDesc, OrderByDescNullsFirst, OrderByDescNullsLast:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid order_by", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleInfoConstraint string

const (
	VehicleInfoConstraintVehicleInfoPkey VehicleInfoConstraint = "vehicle_info_pkey"
)

var AllVehicleInfoConstraint = []VehicleInfoConstraint{
	VehicleInfoConstraintVehicleInfoPkey,
}

func (e VehicleInfoConstraint) IsValid() bool {
	switch e {
	case VehicleInfoConstraintVehicleInfoPkey:
		return true
	}
	return false
}

func (e VehicleInfoConstraint) String() string {
	return string(e)
}

func (e *VehicleInfoConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_constraint", str)
	}
	return nil
}

func (e VehicleInfoConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleInfoSelectColumn string

const (
	VehicleInfoSelectColumnBusinessScope               VehicleInfoSelectColumn = "business_scope"
	VehicleInfoSelectColumnDepartmentID                VehicleInfoSelectColumn = "department_id"
	VehicleInfoSelectColumnEnterpriseID                VehicleInfoSelectColumn = "enterprise_id"
	VehicleInfoSelectColumnHeavy                       VehicleInfoSelectColumn = "heavy"
	VehicleInfoSelectColumnID                          VehicleInfoSelectColumn = "id"
	VehicleInfoSelectColumnIndustryCategory            VehicleInfoSelectColumn = "industry_category"
	VehicleInfoSelectColumnIsApplyInstallTerminal      VehicleInfoSelectColumn = "is_apply_install_terminal"
	VehicleInfoSelectColumnLicensePlateColor           VehicleInfoSelectColumn = "license_plate_color"
	VehicleInfoSelectColumnLicensePlateNumber          VehicleInfoSelectColumn = "license_plate_number"
	VehicleInfoSelectColumnLicensePlateType            VehicleInfoSelectColumn = "license_plate_type"
	VehicleInfoSelectColumnMuckTruckID                 VehicleInfoSelectColumn = "muck_truck_id"
	VehicleInfoSelectColumnOperatingRoute              VehicleInfoSelectColumn = "operating_route"
	VehicleInfoSelectColumnOperatingState              VehicleInfoSelectColumn = "operating_state"
	VehicleInfoSelectColumnOperatingType               VehicleInfoSelectColumn = "operating_type"
	VehicleInfoSelectColumnOperatingVehicleID          VehicleInfoSelectColumn = "operating_vehicle_id"
	VehicleInfoSelectColumnRoadTransportLicenseNumber  VehicleInfoSelectColumn = "road_transport_license_number"
	VehicleInfoSelectColumnSeats                       VehicleInfoSelectColumn = "seats"
	VehicleInfoSelectColumnTerminalID                  VehicleInfoSelectColumn = "terminal_id"
	VehicleInfoSelectColumnVehicleID                   VehicleInfoSelectColumn = "vehicle_id"
	VehicleInfoSelectColumnVehicleIdentificationNumber VehicleInfoSelectColumn = "vehicle_identification_number"
	VehicleInfoSelectColumnVehicleType                 VehicleInfoSelectColumn = "vehicle_type"
)

var AllVehicleInfoSelectColumn = []VehicleInfoSelectColumn{
	VehicleInfoSelectColumnBusinessScope,
	VehicleInfoSelectColumnDepartmentID,
	VehicleInfoSelectColumnEnterpriseID,
	VehicleInfoSelectColumnHeavy,
	VehicleInfoSelectColumnID,
	VehicleInfoSelectColumnIndustryCategory,
	VehicleInfoSelectColumnIsApplyInstallTerminal,
	VehicleInfoSelectColumnLicensePlateColor,
	VehicleInfoSelectColumnLicensePlateNumber,
	VehicleInfoSelectColumnLicensePlateType,
	VehicleInfoSelectColumnMuckTruckID,
	VehicleInfoSelectColumnOperatingRoute,
	VehicleInfoSelectColumnOperatingState,
	VehicleInfoSelectColumnOperatingType,
	VehicleInfoSelectColumnOperatingVehicleID,
	VehicleInfoSelectColumnRoadTransportLicenseNumber,
	VehicleInfoSelectColumnSeats,
	VehicleInfoSelectColumnTerminalID,
	VehicleInfoSelectColumnVehicleID,
	VehicleInfoSelectColumnVehicleIdentificationNumber,
	VehicleInfoSelectColumnVehicleType,
}

func (e VehicleInfoSelectColumn) IsValid() bool {
	switch e {
	case VehicleInfoSelectColumnBusinessScope, VehicleInfoSelectColumnDepartmentID, VehicleInfoSelectColumnEnterpriseID, VehicleInfoSelectColumnHeavy, VehicleInfoSelectColumnID, VehicleInfoSelectColumnIndustryCategory, VehicleInfoSelectColumnIsApplyInstallTerminal, VehicleInfoSelectColumnLicensePlateColor, VehicleInfoSelectColumnLicensePlateNumber, VehicleInfoSelectColumnLicensePlateType, VehicleInfoSelectColumnMuckTruckID, VehicleInfoSelectColumnOperatingRoute, VehicleInfoSelectColumnOperatingState, VehicleInfoSelectColumnOperatingType, VehicleInfoSelectColumnOperatingVehicleID, VehicleInfoSelectColumnRoadTransportLicenseNumber, VehicleInfoSelectColumnSeats, VehicleInfoSelectColumnTerminalID, VehicleInfoSelectColumnVehicleID, VehicleInfoSelectColumnVehicleIdentificationNumber, VehicleInfoSelectColumnVehicleType:
		return true
	}
	return false
}

func (e VehicleInfoSelectColumn) String() string {
	return string(e)
}

func (e *VehicleInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_select_column", str)
	}
	return nil
}

func (e VehicleInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleInfoUpdateColumn string

const (
	VehicleInfoUpdateColumnBusinessScope               VehicleInfoUpdateColumn = "business_scope"
	VehicleInfoUpdateColumnDepartmentID                VehicleInfoUpdateColumn = "department_id"
	VehicleInfoUpdateColumnEnterpriseID                VehicleInfoUpdateColumn = "enterprise_id"
	VehicleInfoUpdateColumnHeavy                       VehicleInfoUpdateColumn = "heavy"
	VehicleInfoUpdateColumnID                          VehicleInfoUpdateColumn = "id"
	VehicleInfoUpdateColumnIndustryCategory            VehicleInfoUpdateColumn = "industry_category"
	VehicleInfoUpdateColumnIsApplyInstallTerminal      VehicleInfoUpdateColumn = "is_apply_install_terminal"
	VehicleInfoUpdateColumnLicensePlateColor           VehicleInfoUpdateColumn = "license_plate_color"
	VehicleInfoUpdateColumnLicensePlateNumber          VehicleInfoUpdateColumn = "license_plate_number"
	VehicleInfoUpdateColumnLicensePlateType            VehicleInfoUpdateColumn = "license_plate_type"
	VehicleInfoUpdateColumnMuckTruckID                 VehicleInfoUpdateColumn = "muck_truck_id"
	VehicleInfoUpdateColumnOperatingRoute              VehicleInfoUpdateColumn = "operating_route"
	VehicleInfoUpdateColumnOperatingState              VehicleInfoUpdateColumn = "operating_state"
	VehicleInfoUpdateColumnOperatingType               VehicleInfoUpdateColumn = "operating_type"
	VehicleInfoUpdateColumnOperatingVehicleID          VehicleInfoUpdateColumn = "operating_vehicle_id"
	VehicleInfoUpdateColumnRoadTransportLicenseNumber  VehicleInfoUpdateColumn = "road_transport_license_number"
	VehicleInfoUpdateColumnSeats                       VehicleInfoUpdateColumn = "seats"
	VehicleInfoUpdateColumnTerminalID                  VehicleInfoUpdateColumn = "terminal_id"
	VehicleInfoUpdateColumnVehicleID                   VehicleInfoUpdateColumn = "vehicle_id"
	VehicleInfoUpdateColumnVehicleIdentificationNumber VehicleInfoUpdateColumn = "vehicle_identification_number"
	VehicleInfoUpdateColumnVehicleType                 VehicleInfoUpdateColumn = "vehicle_type"
)

var AllVehicleInfoUpdateColumn = []VehicleInfoUpdateColumn{
	VehicleInfoUpdateColumnBusinessScope,
	VehicleInfoUpdateColumnDepartmentID,
	VehicleInfoUpdateColumnEnterpriseID,
	VehicleInfoUpdateColumnHeavy,
	VehicleInfoUpdateColumnID,
	VehicleInfoUpdateColumnIndustryCategory,
	VehicleInfoUpdateColumnIsApplyInstallTerminal,
	VehicleInfoUpdateColumnLicensePlateColor,
	VehicleInfoUpdateColumnLicensePlateNumber,
	VehicleInfoUpdateColumnLicensePlateType,
	VehicleInfoUpdateColumnMuckTruckID,
	VehicleInfoUpdateColumnOperatingRoute,
	VehicleInfoUpdateColumnOperatingState,
	VehicleInfoUpdateColumnOperatingType,
	VehicleInfoUpdateColumnOperatingVehicleID,
	VehicleInfoUpdateColumnRoadTransportLicenseNumber,
	VehicleInfoUpdateColumnSeats,
	VehicleInfoUpdateColumnTerminalID,
	VehicleInfoUpdateColumnVehicleID,
	VehicleInfoUpdateColumnVehicleIdentificationNumber,
	VehicleInfoUpdateColumnVehicleType,
}

func (e VehicleInfoUpdateColumn) IsValid() bool {
	switch e {
	case VehicleInfoUpdateColumnBusinessScope, VehicleInfoUpdateColumnDepartmentID, VehicleInfoUpdateColumnEnterpriseID, VehicleInfoUpdateColumnHeavy, VehicleInfoUpdateColumnID, VehicleInfoUpdateColumnIndustryCategory, VehicleInfoUpdateColumnIsApplyInstallTerminal, VehicleInfoUpdateColumnLicensePlateColor, VehicleInfoUpdateColumnLicensePlateNumber, VehicleInfoUpdateColumnLicensePlateType, VehicleInfoUpdateColumnMuckTruckID, VehicleInfoUpdateColumnOperatingRoute, VehicleInfoUpdateColumnOperatingState, VehicleInfoUpdateColumnOperatingType, VehicleInfoUpdateColumnOperatingVehicleID, VehicleInfoUpdateColumnRoadTransportLicenseNumber, VehicleInfoUpdateColumnSeats, VehicleInfoUpdateColumnTerminalID, VehicleInfoUpdateColumnVehicleID, VehicleInfoUpdateColumnVehicleIdentificationNumber, VehicleInfoUpdateColumnVehicleType:
		return true
	}
	return false
}

func (e VehicleInfoUpdateColumn) String() string {
	return string(e)
}

func (e *VehicleInfoUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleInfoUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid vehicle_info_update_column", str)
	}
	return nil
}

func (e VehicleInfoUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
