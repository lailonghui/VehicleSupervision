# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/graphqls/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph/resolvers
  package: resolvers

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
   - "VehicleSupervision/internal/modules/vehicle/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  vehicle_info:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.VehicleInfo
  operating_vehicle_info:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.OperatingVehicleInfo
  muck_truck_info:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.MuckTruckInfo
  muck_truck_category_info:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.MuckTruckCategoryInfo
  muck_truck_preview_number:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.MuckTruckPreviewNumber
  muck_truck_worker_id_card_orders:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.MuckTruckWorkerIDCardOrders
  vehicle_supervision_photo:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.VehicleSupervisionPhoto
  owner_info:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.OwnerInfo
  JJ_VEHICLE:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.JjVehicle
  vehicle_info_change_log:
    model: VehicleSupervision/internal/modules/vehicle/graph/model.VehicleInfoChangeLog
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  bigint:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  numeric:
    model: github.com/99designs/gqlgen/graphql.Float
  timestamptz:
    model: VehicleSupervision/pkg/graphql/scalar.Timestamptz
  String_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.StringComparisonExp
  timestamptz_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.TimestamptzComparisonExp
  Int_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.IntComparisonExp
  Boolean_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.BooleanComparisonExp
  bigint_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.BigintComparisonExp
  _jsonb_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.JsonbComparisonExp
  order_by:
    model: VehicleSupervision/pkg/graphql/model.OrderBy
  numeric_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.NumericComparisonExp
  point_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.PointComparisonExp
  date_comparison_exp:
    model: VehicleSupervision/pkg/graphql/model.DateComparisonExp

